
(parser_check) NUM_BUFF_ID    :47
(parser_check) EXP_BUFF_ID_MAX:46
(parser_check) 
(main) ********************************************************************************
(main) **                         Pass 1                                             **
(main) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) **                                                                            **
(translate_file) **                 TRANSLATE FILE                                             **
(translate_file) **                                                                            **
(translate_file) ********************************************************************************
(pull_next_line) Processing expression just parsed
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=0 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=0 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit
(pull_next_line) Checking for existing data in cline. cline_i=0 strlen:0 
(pull_next_line) Reading line
(pull_next_line) ------------------------------
(is_all_spaces) cline[0] = 'f' (102)
(is_all_spaces) cline[1] = 'i' (105)
(is_all_spaces) cline[2] = 'l' (108)
(is_all_spaces) cline[3] = 'e' (101)
(is_all_spaces) cline[4] = 's' (115)
(is_all_spaces) cline[5] = '0' (48)
(is_all_spaces) cline[6] = ':' (58)
(is_all_spaces) Is not all spaces
(pull_next_line) Got a line: 'files0:'
***********
**files0:**
***********

(pull_next_line) ret1
(process_token)    Frst:1 T:'PROCDEF' toktype:i exptype:U bufid:'EXP_BUFF_ID_META'
(process_token) Before switch, bufid:'EXP_BUFF_ID_META'
(process_token) Buff id PROCDEF
(output_generic) [U,()] U PROCDEF exp_type:U

 (scan_procdef) 

  (check_textlabel) 'files0:'
  (check_textlabel) 'files0' is a text label chstr:'0'
  (check_textlabel) Exit char::
  (check_textlabel) check_textlabel:ret1 Name:'files0' Type:f
 (scan_procdef) Text label:'files0'

  (check_literal) check_literal:lit=':' idx=6 ':'
  (check_literal) check_literal:After drop space:':' idx=6 ':'
  (check_literal) check_literal:After while():
  (check_literal) ret1 Match. ':' == ':'

  (check_literal) check_literal:lit=' (' idx=7 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'(' idx=7 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_param_list) scan_param_list:ret0
(scan_procdef) ret1 Type:f
(translate_file) 
cline scanned OK
(pull_next_line) Processing expression just parsed
(finalise_expression) Finalise expression Buf i:1 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N000       Read EXP_BUFF_ID_META                       ty:U qcty:U 'PROCDEF' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PROCDEF   *************
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PROCDEF    **********
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U 'PROCDEF' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_META                       ty:U qcty:U 'PROCDEF' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PROCDEF)
Done

Infix stack empty
(infix_from_rpn) exit  ''
(process_expression_types) ====
(process_expression_types) 


(finalise_expression) Finalise expression done.
files0:
========================================================
(output_expression_start)
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=7 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=7 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit
(pull_next_line) Checking for existing data in cline. cline_i=7 strlen:0 
(pull_next_line) Reading line
(pull_next_line) ------------------------------
(is_all_spaces) Is all spaces
(pull_next_line) Line was all spaces
(pull_next_line) Reading line
(pull_next_line) ------------------------------
(is_all_spaces) cline[0] = 'l' (108)
(is_all_spaces) cline[1] = 'o' (111)
(is_all_spaces) cline[2] = 'c' (99)
(is_all_spaces) cline[3] = 'a' (97)
(is_all_spaces) cline[4] = 'l' (108)
(is_all_spaces) cline[5] = ' ' (32)
(is_all_spaces) cline[6] = 't' (116)
(is_all_spaces) cline[7] = 'o' (111)
(is_all_spaces) cline[8] = 't' (116)
(is_all_spaces) cline[9] = 'a' (97)
(is_all_spaces) cline[10] = 'l' (108)
(is_all_spaces) Is not all spaces
(pull_next_line) Got a line: 'local total'
***************
**local total**
***************

(pull_next_line) ret1

 (scan_line) cline:'local total'
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ====
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
local total
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=0 'local total'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=0 'local total'
  (check_literal)   ':' != 'l'
  (check_literal) check_literal: ret0
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=0 strlen:11 
 (pull_next_line) Data still in line buffer, check not all space
 (is_all_spaces) cline[0] = 'l' (108)
 (is_all_spaces) cline[1] = 'o' (111)
 (is_all_spaces) cline[2] = 'c' (99)
 (is_all_spaces) cline[3] = 'a' (97)
 (is_all_spaces) cline[4] = 'l' (108)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = 't' (116)
 (is_all_spaces) cline[7] = 'o' (111)
 (is_all_spaces) cline[8] = 't' (116)
 (is_all_spaces) cline[9] = 'a' (97)
 (is_all_spaces) cline[10] = 'l' (108)
 (is_all_spaces) Is not all spaces
 (pull_next_line) ret1  Not all spaces

 (check_literal) check_literal:lit='REM' idx=0 'local total'
 (check_literal) check_literal:After drop space:'REM' idx=0 'local total'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'local total'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'local total'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'local total'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'local total'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'local total'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'local total'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'local total'

   (check_operator) 'local total' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'local total':
   (check_vname) check_vname ret1 ' total':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' total'

   (check_literal) check_literal:lit='(' idx=5 ' total'
   (check_literal) check_literal:After drop space:'(' idx=5 ' total'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' total'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 'total'
 (check_literal)   '=' != 't'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'local total'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'local total'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local total'
  (check_literal) check_literal:After while(): total
  (check_literal) ret1 Match. ' LOCAL' == 'local total'
 (check_declare) check_declare:ret 1

  (scan_declare) scan_declare:

   (check_literal) check_literal:lit=' LOCAL' idx=0 'local total'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local total'
   (check_literal) check_literal:After while(): total
   (check_literal) ret1 Match. ' LOCAL' == 'local total'

   (scan_localglobal) 'local total'

    (check_literal) check_literal:lit=' LOCAL' idx=0 'local total'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local total'
    (check_literal) check_literal:After while(): total
    (check_literal) ret1 Match. ' LOCAL' == 'local total'
   (process_token)    Frst:1 T:' LOCAL' toktype:? exptype:U bufid:'EXP_BUFF_ID_META'
   (process_token) Before switch, bufid:'EXP_BUFF_ID_META'
   (process_token) Buff id  LOCAL
   (output_generic) [U,()] U  LOCAL exp_type:U

    (check_variable) 'total'

     (check_operator) 'total' igncomma:1
     (check_operator) ret0:is comma: 1952533792

     (check_vname) check_vname 'total':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=11 ''
     (check_literal) check_literal:After drop space:'(' idx=11 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (scan_variable) ' total' ref_ndeclare:0

    (scan_vname) scan_vname: ' total'
    (scan_vname) scan_vname: ret1 'total'
   (scan_variable) scan_variable: '' vname='TOTAL'
   (token_is_other_keyword) 
   (token_is_other_keyword) 'TOTAL' is not other keyword
   (scan_variable) Array test ''

    (check_literal) check_literal:lit='(' idx=11 ''
    (check_literal) check_literal:After drop space:'(' idx=11 ''
    (check_literal) check_literal  ret0 Empty test string
   (scan_variable) scan_variable:ret1 vname='TOTAL' Float
  (process_token)    Frst:1 T:'TOTAL' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:'TOTAL'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:TOTAL is not function
token_is_variable: tok:'TOTAL'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:TOTAL is not function
 (init_get_name) 
init_get_name:'TOTAL'
 (init_get_name) 
init_get_name:'TOTAL'
 (get_name) 
get_name:gn:'TOTAL'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f TOTAL
 (add_var_info) Name:TOTAL Idx:-1
Variables


 (find_var_info) ******
 (find_var_info) 
Could not find var 'TOTAL'
 (find_var_info) ******
 (add_var_info) Not already present
 (scan_variable) ret1
(scan_localglobal)  LOCAL variable:'TOTAL'
VAR: '             TOTAL'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=11 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=11 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=11 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=11 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_variable) ''

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 32767

  (check_vname) check_vname '':
  (check_vname) check_vname ret0 '':
 (check_variable) check_variable:ret0 
(scan_localglobal) ret1:End of line
(scan_declare) scan_declare:ret 1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=11 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=11 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:2 buf2 i:0
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N000       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing : LOCAL   *************
 (type_check_stack_display) Type Check Stack (0)
 (process_syntax_tree) *********Processing :TOTAL   *************
 (type_check_stack_push)  type_check_stack_push: 'TOTAL'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: 'TOTAL' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE: LOCAL    **********
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression)  *** BE:TOTAL    **********
 (type_check_stack_push)  type_check_stack_push: 'TOTAL'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: 'TOTAL' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) ( LOCAL)
 (infix_from_rpn) (TOTAL)
Var: TOTAL Float NumIdx:0
infix_stack_push: 'TOTAL'
Done

infix_stack_pop: 'TOTAL'
Infix stack result TOTAL
 (infix_from_rpn) exit  'TOTAL'
 (process_expression_types) ==OTAL==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
local total
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=11 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=11 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=11 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'l' (108)
 (is_all_spaces) cline[1] = 'o' (111)
 (is_all_spaces) cline[2] = 'c' (99)
 (is_all_spaces) cline[3] = 'a' (97)
 (is_all_spaces) cline[4] = 'l' (108)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = 'a' (97)
 (is_all_spaces) cline[7] = ',' (44)
 (is_all_spaces) cline[8] = 'b' (98)
 (is_all_spaces) cline[9] = ',' (44)
 (is_all_spaces) cline[10] = 'c' (99)
 (is_all_spaces) cline[11] = ',' (44)
 (is_all_spaces) cline[12] = 't' (116)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'local a,b,c,t'
*****************
**local a,b,c,t**
*****************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'local a,b,c,t'
 (check_literal) check_literal:After drop space:'REM' idx=0 'local a,b,c,t'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'local a,b,c,t'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'local a,b,c,t'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'local a,b,c,t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'local a,b,c,t'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'local a,b,c,t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'local a,b,c,t'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'local a,b,c,t'

   (check_operator) 'local a,b,c,t' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'local a,b,c,t':
   (check_vname) check_vname ret1 ' a,b,c,t':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' a,b,c,t'

   (check_literal) check_literal:lit='(' idx=5 ' a,b,c,t'
   (check_literal) check_literal:After drop space:'(' idx=5 ' a,b,c,t'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' a,b,c,t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 'a,b,c,t'
 (check_literal)   '=' != 'a'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'local a,b,c,t'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'local a,b,c,t'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local a,b,c,t'
  (check_literal) check_literal:After while(): a,b,c,t
  (check_literal) ret1 Match. ' LOCAL' == 'local a,b,c,t'
 (check_declare) check_declare:ret 1

  (scan_declare) scan_declare:

   (check_literal) check_literal:lit=' LOCAL' idx=0 'local a,b,c,t'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local a,b,c,t'
   (check_literal) check_literal:After while(): a,b,c,t
   (check_literal) ret1 Match. ' LOCAL' == 'local a,b,c,t'

   (scan_localglobal) 'local a,b,c,t'

    (check_literal) check_literal:lit=' LOCAL' idx=0 'local a,b,c,t'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local a,b,c,t'
    (check_literal) check_literal:After while(): a,b,c,t
    (check_literal) ret1 Match. ' LOCAL' == 'local a,b,c,t'
   (process_token)    Frst:1 T:' LOCAL' toktype:? exptype:U bufid:'EXP_BUFF_ID_META'
   (process_token) Before switch, bufid:'EXP_BUFF_ID_META'
   (process_token) Buff id  LOCAL
   (output_generic) [U,()] U  LOCAL exp_type:U

    (check_variable) 'a,b,c,t'

     (check_operator) 'a,b,c,t' igncomma:1
     (check_operator) ret0:is comma: 1952533792

     (check_vname) check_vname 'a,b,c,t':
     (check_vname) check_vname ret1 ',b,c,t':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ',b,c,t'

     (check_literal) check_literal:lit='(' idx=7 ',b,c,t'
     (check_literal) check_literal:After drop space:'(' idx=7 ',b,c,t'
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (scan_variable) ' a,b,c,t' ref_ndeclare:0

    (scan_vname) scan_vname: ' a,b,c,t'
    (scan_vname) scan_vname: ret1 'a'
   (scan_variable) scan_variable: ',b,c,t' vname='A'
   (token_is_other_keyword) 
   (token_is_other_keyword) 'A' is not other keyword
   (scan_variable) Array test ',b,c,t'

    (check_literal) check_literal:lit='(' idx=7 ',b,c,t'
    (check_literal) check_literal:After drop space:'(' idx=7 ',b,c,t'
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (scan_variable) scan_variable:ret1 vname='A' Float
  (process_token)    Frst:1 T:'A' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:'A'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A is not function
 (init_get_name) 
init_get_name:'A'
 (init_get_name) 
init_get_name:'A'
 (get_name) 
get_name:gn:'A'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f A
 (add_var_info) Name:A Idx:-1
Variables

   0:  VAR: '             TOTAL'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (find_var_info) ******
 (find_var_info) 
Could not find var 'A'
 (find_var_info) ******
 (add_var_info) Not already present
 (scan_variable) ret1
(scan_localglobal)  LOCAL variable:'A'
VAR: '                 A'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=7 ',b,c,t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=7 ',b,c,t'
 (check_literal)   ':' != ','
 (check_literal) check_literal: ret0
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=7 ',b,c,t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=7 ',b,c,t'
 (check_literal) check_literal:After while():b,c,t
 (check_literal) ret1 Match. ' ,' == ',b,c,t'

 (scan_literal_core) scan_literal_core:lit=' ,' ',b,c,t'
 (scan_literal_core) scan_literal_core:After drop space:',b,c,t'
 (scan_literal_core) scan_literal_core:while loop:,b,c,t
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 'b,c,t'

  (check_operator) 'b,c,t' igncomma:1
  (check_operator) ret0:is comma: 32767

  (check_vname) check_vname 'b,c,t':
  (check_vname) check_vname ret1 ',c,t':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ',c,t'

  (check_literal) check_literal:lit='(' idx=9 ',c,t'
  (check_literal) check_literal:After drop space:'(' idx=9 ',c,t'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) 'b,c,t' ref_ndeclare:0

  (scan_vname) scan_vname: 'b,c,t'
  (scan_vname) scan_vname: ret1 'b'
 (scan_variable) scan_variable: ',c,t' vname='B'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'B' is not other keyword
 (scan_variable) Array test ',c,t'

  (check_literal) check_literal:lit='(' idx=9 ',c,t'
  (check_literal) check_literal:After drop space:'(' idx=9 ',c,t'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='B' Float
(process_token)    Frst:0 T:'B' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'B'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f B
(add_var_info) Name:B Idx:-1
Variables

   0:  VAR: '             TOTAL'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   1:  VAR: '                 A'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

(find_var_info) ******
(find_var_info) 
Could not find var 'B'
(find_var_info) ******
(add_var_info) Not already present
(scan_variable) ret1
(scan_localglobal)  LOCAL variable:'B'
VAR: '                 B'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=9 ',c,t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=9 ',c,t'
 (check_literal)   ':' != ','
 (check_literal) check_literal: ret0
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=9 ',c,t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=9 ',c,t'
 (check_literal) check_literal:After while():c,t
 (check_literal) ret1 Match. ' ,' == ',c,t'

 (scan_literal_core) scan_literal_core:lit=' ,' ',c,t'
 (scan_literal_core) scan_literal_core:After drop space:',c,t'
 (scan_literal_core) scan_literal_core:while loop:,c,t
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 'c,t'

  (check_operator) 'c,t' igncomma:1
  (check_operator) ret0:is comma: 32767

  (check_vname) check_vname 'c,t':
  (check_vname) check_vname ret1 ',t':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ',t'

  (check_literal) check_literal:lit='(' idx=11 ',t'
  (check_literal) check_literal:After drop space:'(' idx=11 ',t'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) 'c,t' ref_ndeclare:0

  (scan_vname) scan_vname: 'c,t'
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: ',t' vname='C'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C' is not other keyword
 (scan_variable) Array test ',t'

  (check_literal) check_literal:lit='(' idx=11 ',t'
  (check_literal) check_literal:After drop space:'(' idx=11 ',t'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C' Float
(process_token)    Frst:0 T:'C' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
token_is_variable: tok:'C'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C
(add_var_info) Name:C Idx:-1
Variables

   0:  VAR: '             TOTAL'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   1:  VAR: '                 A'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   2:  VAR: '                 B'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

(find_var_info) ******
(find_var_info) 
Could not find var 'C'
(find_var_info) ******
(add_var_info) Not already present
(scan_variable) ret1
(scan_localglobal)  LOCAL variable:'C'
VAR: '                 C'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=11 ',t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=11 ',t'
 (check_literal)   ':' != ','
 (check_literal) check_literal: ret0
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=11 ',t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=11 ',t'
 (check_literal) check_literal:After while():t
 (check_literal) ret1 Match. ' ,' == ',t'

 (scan_literal_core) scan_literal_core:lit=' ,' ',t'
 (scan_literal_core) scan_literal_core:After drop space:',t'
 (scan_literal_core) scan_literal_core:while loop:,t
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 't'

  (check_operator) 't' igncomma:1
  (check_operator) ret0:is comma: 32767

  (check_vname) check_vname 't':
  (check_vname) check_vname ret1 '':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ''

  (check_literal) check_literal:lit='(' idx=13 ''
  (check_literal) check_literal:After drop space:'(' idx=13 ''
  (check_literal) check_literal  ret0 Empty test string
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) 't' ref_ndeclare:0

  (scan_vname) scan_vname: 't'
  (scan_vname) scan_vname: ret1 't'
 (scan_variable) scan_variable: '' vname='T'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'T' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=13 ''
  (check_literal) check_literal:After drop space:'(' idx=13 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='T' Float
(process_token)    Frst:0 T:'T' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'T'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:T is not function
token_is_variable: tok:'T'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:T is not function
(init_get_name) 
init_get_name:'T'
(init_get_name) 
init_get_name:'T'
(get_name) 
get_name:gn:'T'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f T
(add_var_info) Name:T Idx:-1
Variables

   0:  VAR: '             TOTAL'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   1:  VAR: '                 A'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   2:  VAR: '                 B'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   3:  VAR: '                 C'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

(find_var_info) ******
(find_var_info) 
Could not find var 'T'
(find_var_info) ******
(add_var_info) Not already present
(scan_variable) ret1
(scan_localglobal)  LOCAL variable:'T'
VAR: '                 T'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=13 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=13 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=13 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=13 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_variable) ''

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 32767

  (check_vname) check_vname '':
  (check_vname) check_vname ret0 '':
 (check_variable) check_variable:ret0 
(scan_localglobal) ret1:End of line
(scan_declare) scan_declare:ret 1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=13 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=13 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:5 buf2 i:2
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N000       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N000       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N000       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'T' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing : LOCAL   *************
 (type_check_stack_display) Type Check Stack (0)
 (process_syntax_tree) *********Processing :A   *************
 (type_check_stack_push)  type_check_stack_push: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (process_syntax_tree) *********Processing :B   *************
 (type_check_stack_push)  type_check_stack_push: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (type_check_stack_display) 001: 'B' type:f (1), %:0
 (process_syntax_tree) *********Processing :C   *************
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'B' type:1 %:0
 (type_check_stack_print)  N004: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (type_check_stack_display) 001: 'B' type:f (1), %:0
 (type_check_stack_display) 002: 'C' type:f (1), %:0
 (process_syntax_tree) *********Processing :T   *************
 (type_check_stack_push)  type_check_stack_push: 'T'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (4)

 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'B' type:1 %:0
 (type_check_stack_print)  N004: 'C' type:1 %:0
 (type_check_stack_print)  N005: 'T' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (4)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (type_check_stack_display) 001: 'B' type:f (1), %:0
 (type_check_stack_display) 002: 'C' type:f (1), %:0
 (type_check_stack_display) 003: 'T' type:f (1), %:0
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE: LOCAL    **********
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression)  *** BE:A    **********
 (type_check_stack_push)  type_check_stack_push: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (typecheck_expression)  *** BE:B    **********
 (type_check_stack_push)  type_check_stack_push: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (type_check_stack_display) 001: 'B' type:f (1), %:0
 (typecheck_expression)  *** BE:C    **********
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'B' type:1 %:0
 (type_check_stack_print)  N004: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (type_check_stack_display) 001: 'B' type:f (1), %:0
 (type_check_stack_display) 002: 'C' type:f (1), %:0
 (typecheck_expression)  *** BE:T    **********
 (type_check_stack_push)  type_check_stack_push: 'T'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (4)

 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'B' type:1 %:0
 (type_check_stack_print)  N004: 'C' type:1 %:0
 (type_check_stack_print)  N005: 'T' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (4)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (type_check_stack_display) 001: 'B' type:f (1), %:0
 (type_check_stack_display) 002: 'C' type:f (1), %:0
 (type_check_stack_display) 003: 'T' type:f (1), %:0
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'T' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'T' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) ( LOCAL)
 (infix_from_rpn) (A)
Var: A Float NumIdx:0
infix_stack_push: 'A'
 (infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
 (infix_from_rpn) (C)
Var: C Float NumIdx:0
infix_stack_push: 'C'
 (infix_from_rpn) (T)
Var: T Float NumIdx:0
infix_stack_push: 'T'
Done

infix_stack_pop: 'T'
Infix stack result T
 (infix_from_rpn) exit  'T'
 (process_expression_types) ====
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
local a,b,c,t
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=13 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=13 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=13 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'l' (108)
 (is_all_spaces) cline[1] = 'o' (111)
 (is_all_spaces) cline[2] = 'c' (99)
 (is_all_spaces) cline[3] = 'a' (97)
 (is_all_spaces) cline[4] = 'l' (108)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = 'a' (97)
 (is_all_spaces) cline[7] = 'b' (98)
 (is_all_spaces) cline[8] = ',' (44)
 (is_all_spaces) cline[9] = 'b' (98)
 (is_all_spaces) cline[10] = 'c' (99)
 (is_all_spaces) cline[11] = ',' (44)
 (is_all_spaces) cline[12] = 'a' (97)
 (is_all_spaces) cline[13] = 'c' (99)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'local ab,bc,ac'
******************
**local ab,bc,ac**
******************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'local ab,bc,ac'
 (check_literal) check_literal:After drop space:'REM' idx=0 'local ab,bc,ac'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'local ab,bc,ac'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'local ab,bc,ac'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'local ab,bc,ac'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'local ab,bc,ac'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'local ab,bc,ac'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'local ab,bc,ac'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'local ab,bc,ac'

   (check_operator) 'local ab,bc,ac' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'local ab,bc,ac':
   (check_vname) check_vname ret1 ' ab,bc,ac':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' ab,bc,ac'

   (check_literal) check_literal:lit='(' idx=5 ' ab,bc,ac'
   (check_literal) check_literal:After drop space:'(' idx=5 ' ab,bc,ac'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' ab,bc,ac'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 'ab,bc,ac'
 (check_literal)   '=' != 'a'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'local ab,bc,ac'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'local ab,bc,ac'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local ab,bc,ac'
  (check_literal) check_literal:After while(): ab,bc,ac
  (check_literal) ret1 Match. ' LOCAL' == 'local ab,bc,ac'
 (check_declare) check_declare:ret 1

  (scan_declare) scan_declare:

   (check_literal) check_literal:lit=' LOCAL' idx=0 'local ab,bc,ac'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local ab,bc,ac'
   (check_literal) check_literal:After while(): ab,bc,ac
   (check_literal) ret1 Match. ' LOCAL' == 'local ab,bc,ac'

   (scan_localglobal) 'local ab,bc,ac'

    (check_literal) check_literal:lit=' LOCAL' idx=0 'local ab,bc,ac'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local ab,bc,ac'
    (check_literal) check_literal:After while(): ab,bc,ac
    (check_literal) ret1 Match. ' LOCAL' == 'local ab,bc,ac'
   (process_token)    Frst:1 T:' LOCAL' toktype:? exptype:U bufid:'EXP_BUFF_ID_META'
   (process_token) Before switch, bufid:'EXP_BUFF_ID_META'
   (process_token) Buff id  LOCAL
   (output_generic) [U,()] U  LOCAL exp_type:U

    (check_variable) 'ab,bc,ac'

     (check_operator) 'ab,bc,ac' igncomma:1
     (check_operator) ret0:is comma: 1952533792

     (check_vname) check_vname 'ab,bc,ac':
     (check_vname) check_vname ret1 ',bc,ac':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ',bc,ac'

     (check_literal) check_literal:lit='(' idx=8 ',bc,ac'
     (check_literal) check_literal:After drop space:'(' idx=8 ',bc,ac'
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (scan_variable) ' ab,bc,ac' ref_ndeclare:0

    (scan_vname) scan_vname: ' ab,bc,ac'
    (scan_vname) scan_vname: ret1 'ab'
   (scan_variable) scan_variable: ',bc,ac' vname='AB'
   (token_is_other_keyword) 
   (token_is_other_keyword) 'AB' is not other keyword
   (scan_variable) Array test ',bc,ac'

    (check_literal) check_literal:lit='(' idx=8 ',bc,ac'
    (check_literal) check_literal:After drop space:'(' idx=8 ',bc,ac'
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (scan_variable) scan_variable:ret1 vname='AB' Float
  (process_token)    Frst:1 T:'AB' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:'AB'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:AB is not function
token_is_variable: tok:'AB'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:AB is not function
 (init_get_name) 
init_get_name:'AB'
 (init_get_name) 
init_get_name:'AB'
 (get_name) 
get_name:gn:'AB'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f AB
 (add_var_info) Name:AB Idx:-1
Variables

   0:  VAR: '             TOTAL'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   1:  VAR: '                 A'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   2:  VAR: '                 B'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   3:  VAR: '                 C'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   4:  VAR: '                 T'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (find_var_info) ******
 (find_var_info) 
Could not find var 'AB'
 (find_var_info) ******
 (add_var_info) Not already present
 (scan_variable) ret1
(scan_localglobal)  LOCAL variable:'AB'
VAR: '                AB'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=8 ',bc,ac'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=8 ',bc,ac'
 (check_literal)   ':' != ','
 (check_literal) check_literal: ret0
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=8 ',bc,ac'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=8 ',bc,ac'
 (check_literal) check_literal:After while():bc,ac
 (check_literal) ret1 Match. ' ,' == ',bc,ac'

 (scan_literal_core) scan_literal_core:lit=' ,' ',bc,ac'
 (scan_literal_core) scan_literal_core:After drop space:',bc,ac'
 (scan_literal_core) scan_literal_core:while loop:,bc,ac
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 'bc,ac'

  (check_operator) 'bc,ac' igncomma:1
  (check_operator) ret0:is comma: 32767

  (check_vname) check_vname 'bc,ac':
  (check_vname) check_vname ret1 ',ac':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ',ac'

  (check_literal) check_literal:lit='(' idx=11 ',ac'
  (check_literal) check_literal:After drop space:'(' idx=11 ',ac'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) 'bc,ac' ref_ndeclare:0

  (scan_vname) scan_vname: 'bc,ac'
  (scan_vname) scan_vname: ret1 'bc'
 (scan_variable) scan_variable: ',ac' vname='BC'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'BC' is not other keyword
 (scan_variable) Array test ',ac'

  (check_literal) check_literal:lit='(' idx=11 ',ac'
  (check_literal) check_literal:After drop space:'(' idx=11 ',ac'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='BC' Float
(process_token)    Frst:0 T:'BC' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'BC'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:BC is not function
token_is_variable: tok:'BC'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:BC is not function
(init_get_name) 
init_get_name:'BC'
(init_get_name) 
init_get_name:'BC'
(get_name) 
get_name:gn:'BC'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f BC
(add_var_info) Name:BC Idx:-1
Variables

   0:  VAR: '             TOTAL'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   1:  VAR: '                 A'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   2:  VAR: '                 B'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   3:  VAR: '                 C'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   4:  VAR: '                 T'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   5:  VAR: '                AB'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

(find_var_info) ******
(find_var_info) 
Could not find var 'BC'
(find_var_info) ******
(add_var_info) Not already present
(scan_variable) ret1
(scan_localglobal)  LOCAL variable:'BC'
VAR: '                BC'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=11 ',ac'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=11 ',ac'
 (check_literal)   ':' != ','
 (check_literal) check_literal: ret0
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=11 ',ac'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=11 ',ac'
 (check_literal) check_literal:After while():ac
 (check_literal) ret1 Match. ' ,' == ',ac'

 (scan_literal_core) scan_literal_core:lit=' ,' ',ac'
 (scan_literal_core) scan_literal_core:After drop space:',ac'
 (scan_literal_core) scan_literal_core:while loop:,ac
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 'ac'

  (check_operator) 'ac' igncomma:1
  (check_operator) ret0:is comma: 32767

  (check_vname) check_vname 'ac':
  (check_vname) check_vname ret1 '':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ''

  (check_literal) check_literal:lit='(' idx=14 ''
  (check_literal) check_literal:After drop space:'(' idx=14 ''
  (check_literal) check_literal  ret0 Empty test string
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) 'ac' ref_ndeclare:0

  (scan_vname) scan_vname: 'ac'
  (scan_vname) scan_vname: ret1 'ac'
 (scan_variable) scan_variable: '' vname='AC'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'AC' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=14 ''
  (check_literal) check_literal:After drop space:'(' idx=14 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='AC' Float
(process_token)    Frst:0 T:'AC' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'AC'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AC is not function
token_is_variable: tok:'AC'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AC is not function
(init_get_name) 
init_get_name:'AC'
(init_get_name) 
init_get_name:'AC'
(get_name) 
get_name:gn:'AC'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f AC
(add_var_info) Name:AC Idx:-1
Variables

   0:  VAR: '             TOTAL'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   1:  VAR: '                 A'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   2:  VAR: '                 B'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   3:  VAR: '                 C'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   4:  VAR: '                 T'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   5:  VAR: '                AB'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   6:  VAR: '                BC'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

(find_var_info) ******
(find_var_info) 
Could not find var 'AC'
(find_var_info) ******
(add_var_info) Not already present
(scan_variable) ret1
(scan_localglobal)  LOCAL variable:'AC'
VAR: '                AC'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=14 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=14 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=14 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=14 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_variable) ''

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 32767

  (check_vname) check_vname '':
  (check_vname) check_vname ret0 '':
 (check_variable) check_variable:ret0 
(scan_localglobal) ret1:End of line
(scan_declare) scan_declare:ret 1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=14 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=14 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:4 buf2 i:5
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AB' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'BC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing : LOCAL   *************
 (type_check_stack_display) Type Check Stack (0)
 (process_syntax_tree) *********Processing :AB   *************
 (type_check_stack_push)  type_check_stack_push: 'AB'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: 'AB' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (process_syntax_tree) *********Processing :BC   *************
 (type_check_stack_push)  type_check_stack_push: 'BC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N002: 'AB' type:1 %:0
 (type_check_stack_print)  N003: 'BC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (type_check_stack_display) 001: 'BC' type:f (1), %:0
 (process_syntax_tree) *********Processing :AC   *************
 (type_check_stack_push)  type_check_stack_push: 'AC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N002: 'AB' type:1 %:0
 (type_check_stack_print)  N003: 'BC' type:1 %:0
 (type_check_stack_print)  N004: 'AC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (type_check_stack_display) 001: 'BC' type:f (1), %:0
 (type_check_stack_display) 002: 'AC' type:f (1), %:0
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE: LOCAL    **********
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression)  *** BE:AB    **********
 (type_check_stack_push)  type_check_stack_push: 'AB'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: 'AB' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (typecheck_expression)  *** BE:BC    **********
 (type_check_stack_push)  type_check_stack_push: 'BC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N002: 'AB' type:1 %:0
 (type_check_stack_print)  N003: 'BC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (type_check_stack_display) 001: 'BC' type:f (1), %:0
 (typecheck_expression)  *** BE:AC    **********
 (type_check_stack_push)  type_check_stack_push: 'AC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N002: 'AB' type:1 %:0
 (type_check_stack_print)  N003: 'BC' type:1 %:0
 (type_check_stack_print)  N004: 'AC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (type_check_stack_display) 001: 'BC' type:f (1), %:0
 (type_check_stack_display) 002: 'AC' type:f (1), %:0
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AB' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'BC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AB' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'BC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) ( LOCAL)
 (infix_from_rpn) (AB)
Var: AB Float NumIdx:0
infix_stack_push: 'AB'
 (infix_from_rpn) (BC)
Var: BC Float NumIdx:0
infix_stack_push: 'BC'
 (infix_from_rpn) (AC)
Var: AC Float NumIdx:0
infix_stack_push: 'AC'
Done

infix_stack_pop: 'AC'
Infix stack result AC
 (infix_from_rpn) exit  'AC'
 (process_expression_types) ==C==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
local ab,bc,ac
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=14 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=14 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=14 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'o' (111)
 (is_all_spaces) cline[1] = 'p' (112)
 (is_all_spaces) cline[2] = 'e' (101)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = ' ' (32)
 (is_all_spaces) cline[5] = '"' (34)
 (is_all_spaces) cline[6] = 'B' (66)
 (is_all_spaces) cline[7] = ':' (58)
 (is_all_spaces) cline[8] = 'T' (84)
 (is_all_spaces) cline[9] = 'E' (69)
 (is_all_spaces) cline[10] = 'S' (83)
 (is_all_spaces) cline[11] = 'T' (84)
 (is_all_spaces) cline[12] = '"' (34)
 (is_all_spaces) cline[13] = ',' (44)
 (is_all_spaces) cline[14] = ' ' (32)
 (is_all_spaces) cline[15] = 'C' (67)
 (is_all_spaces) cline[16] = ',' (44)
 (is_all_spaces) cline[17] = ' ' (32)
 (is_all_spaces) cline[18] = 't' (116)
 (is_all_spaces) cline[19] = 'e' (101)
 (is_all_spaces) cline[20] = 's' (115)
 (is_all_spaces) cline[21] = 't' (116)
 (is_all_spaces) cline[22] = ',' (44)
 (is_all_spaces) cline[23] = ' ' (32)
 (is_all_spaces) cline[24] = 's' (115)
 (is_all_spaces) cline[25] = 'e' (101)
 (is_all_spaces) cline[26] = 'c' (99)
 (is_all_spaces) cline[27] = 'o' (111)
 (is_all_spaces) cline[28] = 'n' (110)
 (is_all_spaces) cline[29] = 'd' (100)
 (is_all_spaces) cline[30] = ',' (44)
 (is_all_spaces) cline[31] = ' ' (32)
 (is_all_spaces) cline[32] = 't' (116)
 (is_all_spaces) cline[33] = 'h' (104)
 (is_all_spaces) cline[34] = 'i' (105)
 (is_all_spaces) cline[35] = 'r' (114)
 (is_all_spaces) cline[36] = 'd' (100)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'open "B:TEST", C, test, second, third'
*****************************************
**open "B:TEST", C, test, second, third**
*****************************************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'open "B:TEST", C, test, second, third'
 (check_literal) check_literal:After drop space:'REM' idx=0 'open "B:TEST", C, test, second, third'
 (check_literal)   'R' != 'o'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'open "B:TEST", C, test, second, third'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'open "B:TEST", C, test, second, third'
 (check_literal)   'R' != 'o'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'open "B:TEST", C, test, second, third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'open "B:TEST", C, test, second, third'
 (check_literal)   'R' != 'o'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'open "B:TEST", C, test, second, third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'open "B:TEST", C, test, second, third'
 (check_literal)   'R' != 'o'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'open "B:TEST", C, test, second, third'

   (check_operator) 'open "B:TEST", C, test, second, third' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'open "B:TEST", C, test, second, third':
   (check_vname) check_vname ret1 ' "B:TEST", C, test, second, third':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "B:TEST", C, test, second, third'

   (check_literal) check_literal:lit='(' idx=4 ' "B:TEST", C, test, second, third'
   (check_literal) check_literal:After drop space:'(' idx=4 ' "B:TEST", C, test, second, third'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=4 ' "B:TEST", C, test, second, third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=5 '"B:TEST", C, test, second, third'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'open "B:TEST", C, test, second, third'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'open "B:TEST", C, test, second, third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'open "B:TEST", C, test, second, third'
  (check_literal)   'L' != 'o'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'open "B:TEST", C, test, second, third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'open "B:TEST", C, test, second, third'
  (check_literal)   'G' != 'o'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'open "B:TEST", C, test, second, third'
   (check_textlabel) 'open' is a text label chstr:'n'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'open' Type:f

   (check_literal) check_literal:lit='::' idx=4 ' "B:TEST", C, test, second, third'
   (check_literal) check_literal:After drop space:'::' idx=4 ' "B:TEST", C, test, second, third'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'open "B:TEST", C, test, second, third'
   (check_textlabel) 'open' is a text label chstr:'n'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'open' Type:f
  (check_proc_call) 'open' is text label

   (check_literal) check_literal:lit=':' idx=4 ' "B:TEST", C, test, second, third'
   (check_literal) check_literal:After drop space:':' idx=4 ' "B:TEST", C, test, second, third'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'open "B:TEST", C, test, second, third'

   (check_literal) check_literal:lit=' INPUT' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal)   'I' != 'o'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'open "B:TEST", C, test, second, third'

   (check_literal) check_literal:lit=' PRINT' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal)   'P' != 'o'
   (check_literal) check_literal: ret0
  (check_print) check_print:ret0

  (check_print) check_print: 'open "B:TEST", C, test, second, third'

   (check_literal) check_literal:lit=' LPRINT' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LPRINT' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal)   'L' != 'o'
   (check_literal) check_literal: ret0
  (check_print) check_print:ret0

  (check_return) check_return: 'open "B:TEST", C, test, second, third'

   (check_literal) check_literal:lit=' RETURN' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'RETURN' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal)   'R' != 'o'
   (check_literal) check_literal: ret0
  (check_return) check_return:ret0

  (check_use) 'open "B:TEST", C, test, second, third'

   (check_literal) check_literal:lit=' USE' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'USE' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal)   'U' != 'o'
   (check_literal) check_literal: ret0
  (check_use) ret0

  (check_onerr) check_onerr: 'open "B:TEST", C, test, second, third'

   (check_literal) check_literal:lit=' ONERR' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'ONERR' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal)   'N' != 'p'
   (check_literal) check_literal: ret0
  (check_onerr) check_onerr:ret0

  (check_if) 'open "B:TEST", C, test, second, third'

   (check_literal) check_literal:lit=' IF' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'IF' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal)   'I' != 'o'
   (check_literal) check_literal: ret0
  (check_if) ret0

  (check_do) 'open "B:TEST", C, test, second, third'

   (check_literal) check_literal:lit=' DO' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'DO' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal)   'D' != 'o'
   (check_literal) check_literal: ret0
  (check_do) ret0

  (check_literal) check_literal:lit=' OFF' idx=0 'open "B:TEST", C, test, second, third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'OFF' idx=0 'open "B:TEST", C, test, second, third'
  (check_literal)   'F' != 'p'
  (check_literal) check_literal: ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function)  'open "B:TEST", C, test, second, third'
  (check_function) ret0

  (check_literal) check_literal:lit=' DO' idx=0 'open "B:TEST", C, test, second, third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'DO' idx=0 'open "B:TEST", C, test, second, third'
  (check_literal)   'D' != 'o'
  (check_literal) check_literal: ret0

  (check_createopen) Create:1 Open:0

   (check_literal) check_literal:lit=' CREATE' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'CREATE' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal)   'C' != 'o'
   (check_literal) check_literal: ret0
  (check_createopen) ret0

  (check_createopen) Create:0 Open:1

   (check_literal) check_literal:lit=' OPEN' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'OPEN' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) check_literal:After while(): "B:TEST", C, test, second, third
   (check_literal) ret1 Match. ' OPEN' == 'open "B:TEST", C, test, second, third'
  (check_createopen) ret1

  (scan_createopen) 'open "B:TEST", C, test, second, third'

   (check_literal) check_literal:lit=' OPEN' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'OPEN' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) check_literal:After while(): "B:TEST", C, test, second, third
   (check_literal) ret1 Match. ' OPEN' == 'open "B:TEST", C, test, second, third'

   (scan_createopen_list) scan_createopen_list:

    (scan_expression) ' "B:TEST", C, test, second, third' igncomma:0

     (check_eitem) check_eitem: '"B:TEST", C, test, second, third'

      (check_function)  '"B:TEST", C, test, second, third'
      (check_function) ret0

      (check_atom) check_atom:
      (check_atom) check_atom:Checking for character constant

       (check_literal) check_literal:lit=' %' idx=5 '"B:TEST", C, test, second, third'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=5 '"B:TEST", C, test, second, third'
       (check_literal)   '%' != '"'
       (check_literal) check_literal: ret0
      (check_atom) check_atom:Checking for string

       (check_literal) check_literal:lit=' "' idx=5 '"B:TEST", C, test, second, third'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=5 '"B:TEST", C, test, second, third'
       (check_literal) check_literal:After while():B:TEST", C, test, second, third
       (check_literal) ret1 Match. ' "' == '"B:TEST", C, test, second, third'
      (check_atom) ret1
     (check_eitem) ret1

     (scan_eitem) scan_eitem:

      (check_function)  '"B:TEST", C, test, second, third'
      (check_function) ret0

      (check_atom) check_atom:
      (check_atom) check_atom:Checking for character constant

       (check_literal) check_literal:lit=' %' idx=5 '"B:TEST", C, test, second, third'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=5 '"B:TEST", C, test, second, third'
       (check_literal)   '%' != '"'
       (check_literal) check_literal: ret0
      (check_atom) check_atom:Checking for string

       (check_literal) check_literal:lit=' "' idx=5 '"B:TEST", C, test, second, third'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=5 '"B:TEST", C, test, second, third'
       (check_literal) check_literal:After while():B:TEST", C, test, second, third
       (check_literal) ret1 Match. ' "' == '"B:TEST", C, test, second, third'
      (check_atom) ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=5 '"B:TEST", C, test, second, third'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=5 '"B:TEST", C, test, second, third'
       (check_literal)   '%' != '"'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=5 '"B:TEST", C, test, second, third'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=5 '"B:TEST", C, test, second, third'
       (check_literal) check_literal:After while():B:TEST", C, test, second, third
       (check_literal) ret1 Match. ' "' == '"B:TEST", C, test, second, third'

       (scan_string) scan_string:

        (check_literal) check_literal:lit=' "' idx=5 '"B:TEST", C, test, second, third'
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=5 '"B:TEST", C, test, second, third'
        (check_literal) check_literal:After while():B:TEST", C, test, second, third
        (check_literal) ret1 Match. ' "' == '"B:TEST", C, test, second, third'
       (scan_string)   (in if) 'B:TEST", C, test, second, third'
       (scan_string)   (in wh) 'B:TEST", C, test, second, third'
       (scan_string)   (in wh) ':TEST", C, test, second, third'
       (scan_string)   (in wh) ':TEST", C, test, second, third'
       (scan_string)   (in wh) 'TEST", C, test, second, third'
       (scan_string)   (in wh) 'TEST", C, test, second, third'
       (scan_string)   (in wh) 'EST", C, test, second, third'
       (scan_string)   (in wh) 'EST", C, test, second, third'
       (scan_string)   (in wh) 'ST", C, test, second, third'
       (scan_string)   (in wh) 'ST", C, test, second, third'
       (scan_string)   (in wh) 'T", C, test, second, third'
       (scan_string)   (in wh) 'T", C, test, second, third'
       (scan_string)   (in wh) '", C, test, second, third'
       (scan_string) scan_string: ret1
      (process_token)    Frst:1 T:'"B:TEST"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
      (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
      (token_is_integer)  tok:'"B:TEST"'
      (token_is_integer)  tok:ret0
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:"B:TEST" is not function
token_is_variable: tok:'"B:TEST"'
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:"B:TEST" is not function
(   output_string) [U,()] s "B:TEST"
modify_expression_type:Inittype:U Intype:s Outtype:s
     (scan_atom) ret1
    (scan_expression) ', C, test, second, third' Before while igncomma:0

     (check_operator) ', C, test, second, third' igncomma:0
     (check_operator) ret0:is comma: 32767
    (scan_expression) ret1 ', C, test, second, third' commas:0

    (check_literal) check_literal:lit=' ,' idx=13 ', C, test, second, third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=13 ', C, test, second, third'
    (check_literal) check_literal:After while(): C, test, second, third
    (check_literal) ret1 Match. ' ,' == ', C, test, second, third'

    (scan_literal_core) scan_literal_core:lit=' ,' ', C, test, second, third'
    (scan_literal_core) scan_literal_core:After drop space:', C, test, second, third'
    (scan_literal_core) scan_literal_core:while loop:, C, test, second, third
    (scan_literal_core) ret1
   (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
   (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
   (token_is_integer)  tok:','
   (token_is_integer)  tok:ret0
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:, is not function
  (process_token) **Unknown token **      ','
  (scan_literal) ret1
 (op_stack_finalise) Finalise stack
 (process_token)    Frst:0 T:' OPEN' toktype:i exptype:s bufid:'EXP_BUFF_ID_META'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_META'
 (process_token) Buff id  OPEN
 (output_generic) [s,()] s  OPEN exp_type:s

  (scan_logical_file) scan_logical_file:

   (check_literal) check_literal:lit=' A' idx=14 ' C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'A' idx=15 'C, test, second, third'
   (check_literal)   'A' != 'C'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' B' idx=14 ' C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'B' idx=15 'C, test, second, third'
   (check_literal)   'B' != 'C'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' C' idx=14 ' C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'C' idx=15 'C, test, second, third'
   (check_literal) check_literal:After while():, test, second, third
   (check_literal) ret1 Match. ' C' == ' C, test, second, third'
  (process_token)    Frst:0 T:'C' toktype:U exptype:s bufid:'EXP_BUFF_ID_LOGICALFILE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_LOGICALFILE'
  (process_token) Buff id C
  (output_generic) [s,()] s C exp_type:s
  (scan_logical_file) ret1:

  (check_literal) check_literal:lit=' ,' idx=16 ', test, second, third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=16 ', test, second, third'
  (check_literal) check_literal:After while(): test, second, third
  (check_literal) ret1 Match. ' ,' == ', test, second, third'

  (scan_literal_core) scan_literal_core:lit=' ,' ', test, second, third'
  (scan_literal_core) scan_literal_core:After drop space:', test, second, third'
  (scan_literal_core) scan_literal_core:while loop:, test, second, third
  (scan_literal_core) ret1
 (process_token)    Frst:0 T:',' toktype:U exptype:s bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:','
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 'test, second, third'

  (check_operator) 'test, second, third' igncomma:1
  (check_operator) ret0:is comma: 32767

  (check_vname) check_vname 'test, second, third':
  (check_vname) check_vname ret1 ', second, third':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ', second, third'

  (check_literal) check_literal:lit='(' idx=22 ', second, third'
  (check_literal) check_literal:After drop space:'(' idx=22 ', second, third'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) ' test, second, third' ref_ndeclare:3

  (scan_vname) scan_vname: ' test, second, third'
  (scan_vname) scan_vname: ret1 'test'
 (scan_variable) scan_variable: ', second, third' vname='C.TEST'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.TEST' is not other keyword
 (scan_variable) Array test ', second, third'

  (check_literal) check_literal:lit='(' idx=22 ', second, third'
  (check_literal) check_literal:After drop space:'(' idx=22 ', second, third'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C.TEST' Float
(process_token)    Frst:0 T:'C.TEST' toktype:f exptype:s bufid:'EXP_BUFF_ID_FIELDVAR'
(process_token) Before switch, bufid:'EXP_BUFF_ID_FIELDVAR'
(process_token) Buff id C.TEST
(init_get_name) 
init_get_name:'C.TEST'
(init_get_name) 
init_get_name:'C.TEST'
(get_name) 
get_name:gn:'C.TEST'
(output_fieldvar) [s,()] f C.TEST exp_type:s
(add_var_info) Name:C.TEST Idx:-1
Variables

   0:  VAR: '             TOTAL'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   1:  VAR: '                 A'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   2:  VAR: '                 B'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   3:  VAR: '                 C'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   4:  VAR: '                 T'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   5:  VAR: '                AB'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   6:  VAR: '                BC'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   7:  VAR: '                AC'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

(find_var_info) ******
(find_var_info) 
Could not find var 'C.TEST'
(find_var_info) ******
(add_var_info) Not already present
(scan_variable) ret1
(scan_createopen_list)  OPEN variable:'C.TEST'
VAR: '            C.TEST'   FieldVar Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (check_literal) check_literal:lit=' ,' idx=22 ', second, third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=22 ', second, third'
 (check_literal) check_literal:After while(): second, third
 (check_literal) ret1 Match. ' ,' == ', second, third'

 (scan_literal_core) scan_literal_core:lit=' ,' ', second, third'
 (scan_literal_core) scan_literal_core:After drop space:', second, third'
 (scan_literal_core) scan_literal_core:while loop:, second, third
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 'second, third'

  (check_operator) 'second, third' igncomma:1
  (check_operator) ret0:is comma: 32607

  (check_vname) check_vname 'second, third':
  (check_vname) check_vname ret1 ', third':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ', third'

  (check_literal) check_literal:lit='(' idx=30 ', third'
  (check_literal) check_literal:After drop space:'(' idx=30 ', third'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) ' second, third' ref_ndeclare:3

  (scan_vname) scan_vname: ' second, third'
  (scan_vname) scan_vname: ret1 'second'
 (scan_variable) scan_variable: ', third' vname='C.SECOND'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.SECOND' is not other keyword
 (scan_variable) Array test ', third'

  (check_literal) check_literal:lit='(' idx=30 ', third'
  (check_literal) check_literal:After drop space:'(' idx=30 ', third'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C.SECOND' Float
(process_token)    Frst:0 T:'C.SECOND' toktype:f exptype:s bufid:'EXP_BUFF_ID_FIELDVAR'
(process_token) Before switch, bufid:'EXP_BUFF_ID_FIELDVAR'
(process_token) Buff id C.SECOND
(init_get_name) 
init_get_name:'C.SECOND'
(init_get_name) 
init_get_name:'C.SECOND'
(get_name) 
get_name:gn:'C.SECOND'
(output_fieldvar) [s,()] f C.SECOND exp_type:s
(add_var_info) Name:C.SECOND Idx:-1
Variables

   0:  VAR: '             TOTAL'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   1:  VAR: '                 A'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   2:  VAR: '                 B'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   3:  VAR: '                 C'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   4:  VAR: '                 T'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   5:  VAR: '                AB'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   6:  VAR: '                BC'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   7:  VAR: '                AC'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   8:  VAR: '            C.TEST'       Open Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

(find_var_info) ******
(find_var_info) 
Could not find var 'C.SECOND'
(find_var_info) ******
(add_var_info) Not already present
(scan_variable) ret1
(scan_createopen_list)  OPEN variable:'C.SECOND'
VAR: '          C.SECOND'   FieldVar Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (check_literal) check_literal:lit=' ,' idx=30 ', third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=30 ', third'
 (check_literal) check_literal:After while(): third
 (check_literal) ret1 Match. ' ,' == ', third'

 (scan_literal_core) scan_literal_core:lit=' ,' ', third'
 (scan_literal_core) scan_literal_core:After drop space:', third'
 (scan_literal_core) scan_literal_core:while loop:, third
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 'third'

  (check_operator) 'third' igncomma:1
  (check_operator) ret0:is comma: 32607

  (check_vname) check_vname 'third':
  (check_vname) check_vname ret1 '':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ''

  (check_literal) check_literal:lit='(' idx=37 ''
  (check_literal) check_literal:After drop space:'(' idx=37 ''
  (check_literal) check_literal  ret0 Empty test string
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) ' third' ref_ndeclare:3

  (scan_vname) scan_vname: ' third'
  (scan_vname) scan_vname: ret1 'third'
 (scan_variable) scan_variable: '' vname='C.THIRD'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.THIRD' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=37 ''
  (check_literal) check_literal:After drop space:'(' idx=37 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C.THIRD' Float
(process_token)    Frst:0 T:'C.THIRD' toktype:f exptype:s bufid:'EXP_BUFF_ID_FIELDVAR'
(process_token) Before switch, bufid:'EXP_BUFF_ID_FIELDVAR'
(process_token) Buff id C.THIRD
(init_get_name) 
init_get_name:'C.THIRD'
(init_get_name) 
init_get_name:'C.THIRD'
(get_name) 
get_name:gn:'C.THIRD'
(output_fieldvar) [s,()] f C.THIRD exp_type:s
(add_var_info) Name:C.THIRD Idx:-1
Variables

   0:  VAR: '             TOTAL'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   1:  VAR: '                 A'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   2:  VAR: '                 B'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   3:  VAR: '                 C'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   4:  VAR: '                 T'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   5:  VAR: '                AB'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   6:  VAR: '                BC'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   7:  VAR: '                AC'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   8:  VAR: '            C.TEST'       Open Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   9:  VAR: '          C.SECOND'       Open Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

(find_var_info) ******
(find_var_info) 
Could not find var 'C.THIRD'
(find_var_info) ******
(add_var_info) Not already present
(scan_variable) ret1
(scan_createopen_list)  OPEN variable:'C.THIRD'
VAR: '           C.THIRD'   FieldVar Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (check_literal) check_literal:lit=' ,' idx=37 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=37 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_variable) ''

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 32607

  (check_vname) check_vname '':
  (check_vname) check_vname ret0 '':
 (check_variable) check_variable:ret0 
(scan_createopen_list) ret1
(scan_createopen) ret1
(scan_createopen) ENDEXP
(process_token)    Frst:0 T:'ENDFIELDS' toktype:i exptype:s bufid:'EXP_BUFF_ID_META'
(process_token) Before switch, bufid:'EXP_BUFF_ID_META'
(process_token) Buff id ENDFIELDS
(output_generic) [s,()] s ENDFIELDS exp_type:s
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=37 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=37 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:7 buf2 i:4
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"B:TEST"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_META                       ty:s qcty:U ' OPEN' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_LOGICALFILE                ty:s qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004   Fieldvar EXP_BUFF_ID_FIELDVAR                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N005   Fieldvar EXP_BUFF_ID_FIELDVAR                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N000   Fieldvar EXP_BUFF_ID_FIELDVAR                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N000       Read EXP_BUFF_ID_META                       ty:s qcty:U 'ENDFIELDS' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing :"B:TEST"   *************
 (type_check_stack_push)  type_check_stack_push: '"B:TEST"'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: '"B:TEST"' type:2 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: '"B:TEST"' type:s (2), %:0
 (process_syntax_tree) *********Processing : OPEN   *************
 (type_check_stack_pop)   type_check_stack_pop: '"B:TEST"'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (type_check_stack_push)  type_check_stack_push: ' OPEN'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: ' OPEN' type:s (2), %:0
 (process_syntax_tree) *********Processing :C   *************
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: ' OPEN' type:s (2), %:0
 (type_check_stack_display) 001: 'C' type:s (2), %:0
 (process_syntax_tree) *********Processing :C.TEST   *************
 (type_check_stack_push)  type_check_stack_push: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print)  N004: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: ' OPEN' type:s (2), %:0
 (type_check_stack_display) 001: 'C' type:s (2), %:0
 (type_check_stack_display) 002: 'C.TEST' type:f (1), %:0
 (process_syntax_tree) *********Processing :C.SECOND   *************
 (type_check_stack_push)  type_check_stack_push: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (4)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print)  N004: 'C.TEST' type:1 %:0
 (type_check_stack_print)  N005: 'C.SECOND' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (4)
 (type_check_stack_display) 000: ' OPEN' type:s (2), %:0
 (type_check_stack_display) 001: 'C' type:s (2), %:0
 (type_check_stack_display) 002: 'C.TEST' type:f (1), %:0
 (type_check_stack_display) 003: 'C.SECOND' type:f (1), %:0
 (process_syntax_tree) *********Processing :C.THIRD   *************
 (type_check_stack_push)  type_check_stack_push: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (5)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print)  N004: 'C.TEST' type:1 %:0
 (type_check_stack_print)  N005: 'C.SECOND' type:1 %:0
 (type_check_stack_print)  N006: 'C.THIRD' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (5)
 (type_check_stack_display) 000: ' OPEN' type:s (2), %:0
 (type_check_stack_display) 001: 'C' type:s (2), %:0
 (type_check_stack_display) 002: 'C.TEST' type:f (1), %:0
 (type_check_stack_display) 003: 'C.SECOND' type:f (1), %:0
 (type_check_stack_display) 004: 'C.THIRD' type:f (1), %:0
 (process_syntax_tree) *********Processing :ENDFIELDS   *************
 (type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (4)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print)  N004: 'C.TEST' type:1 %:0
 (type_check_stack_print)  N005: 'C.SECOND' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print)  N004: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: ' OPEN'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE:"B:TEST"    **********
 (type_check_stack_push)  type_check_stack_push: '"B:TEST"'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: '"B:TEST"' type:2 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: '"B:TEST"' type:s (2), %:0
 (typecheck_expression)  *** BE: OPEN    **********
 (type_check_stack_pop)   type_check_stack_pop: '"B:TEST"'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (type_check_stack_push)  type_check_stack_push: ' OPEN'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: ' OPEN' type:s (2), %:0
 (typecheck_expression)  *** BE:C    **********
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: ' OPEN' type:s (2), %:0
 (type_check_stack_display) 001: 'C' type:s (2), %:0
 (typecheck_expression)  *** BE:C.TEST    **********
 (type_check_stack_push)  type_check_stack_push: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print)  N004: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: ' OPEN' type:s (2), %:0
 (type_check_stack_display) 001: 'C' type:s (2), %:0
 (type_check_stack_display) 002: 'C.TEST' type:f (1), %:0
 (typecheck_expression)  *** BE:C.SECOND    **********
 (type_check_stack_push)  type_check_stack_push: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (4)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print)  N004: 'C.TEST' type:1 %:0
 (type_check_stack_print)  N005: 'C.SECOND' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (4)
 (type_check_stack_display) 000: ' OPEN' type:s (2), %:0
 (type_check_stack_display) 001: 'C' type:s (2), %:0
 (type_check_stack_display) 002: 'C.TEST' type:f (1), %:0
 (type_check_stack_display) 003: 'C.SECOND' type:f (1), %:0
 (typecheck_expression)  *** BE:C.THIRD    **********
 (type_check_stack_push)  type_check_stack_push: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (5)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print)  N004: 'C.TEST' type:1 %:0
 (type_check_stack_print)  N005: 'C.SECOND' type:1 %:0
 (type_check_stack_print)  N006: 'C.THIRD' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (5)
 (type_check_stack_display) 000: ' OPEN' type:s (2), %:0
 (type_check_stack_display) 001: 'C' type:s (2), %:0
 (type_check_stack_display) 002: 'C.TEST' type:f (1), %:0
 (type_check_stack_display) 003: 'C.SECOND' type:f (1), %:0
 (type_check_stack_display) 004: 'C.THIRD' type:f (1), %:0
 (typecheck_expression)  *** BE:ENDFIELDS    **********
 (type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (4)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print)  N004: 'C.TEST' type:1 %:0
 (type_check_stack_print)  N005: 'C.SECOND' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print)  N004: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: ' OPEN'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"B:TEST"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_META                       ty:s qcty:U ' OPEN' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_LOGICALFILE                ty:s qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004   Fieldvar EXP_BUFF_ID_FIELDVAR                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N005   Fieldvar EXP_BUFF_ID_FIELDVAR                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N006   Fieldvar EXP_BUFF_ID_FIELDVAR                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N007       Read EXP_BUFF_ID_META                       ty:s qcty:U 'ENDFIELDS' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"B:TEST"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_META                       ty:s qcty:U ' OPEN' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_LOGICALFILE                ty:s qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004   Fieldvar EXP_BUFF_ID_FIELDVAR                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N005   Fieldvar EXP_BUFF_ID_FIELDVAR                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N006   Fieldvar EXP_BUFF_ID_FIELDVAR                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N007       Read EXP_BUFF_ID_META                       ty:s qcty:U 'ENDFIELDS' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) ("B:TEST")
infix_stack_push: '"B:TEST"'
 (infix_from_rpn) ( OPEN)
 (infix_from_rpn) (C)
 (infix_from_rpn) (C.TEST)
 (infix_from_rpn) (C.SECOND)
 (infix_from_rpn) (C.THIRD)
 (infix_from_rpn) (ENDFIELDS)
Done

infix_stack_pop: '"B:TEST"'
Infix stack result "B:TEST"
 (infix_from_rpn) exit  '"B:TEST"'
 (process_expression_types) ==B:TEST"==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
open "B:TEST", C, test, second, third
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=37 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=37 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=37 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'c' (99)
 (is_all_spaces) cline[1] = '.' (46)
 (is_all_spaces) cline[2] = 't' (116)
 (is_all_spaces) cline[3] = 'e' (101)
 (is_all_spaces) cline[4] = 's' (115)
 (is_all_spaces) cline[5] = 't' (116)
 (is_all_spaces) cline[6] = ' ' (32)
 (is_all_spaces) cline[7] = '=' (61)
 (is_all_spaces) cline[8] = ' ' (32)
 (is_all_spaces) cline[9] = '3' (51)
 (is_all_spaces) cline[10] = '4' (52)
 (is_all_spaces) cline[11] = '.' (46)
 (is_all_spaces) cline[12] = '2' (50)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'c.test = 34.2'
*****************
**c.test = 34.2**
*****************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'c.test = 34.2'
 (check_literal) check_literal:After drop space:'REM' idx=0 'c.test = 34.2'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'c.test = 34.2'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'c.test = 34.2'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'c.test = 34.2'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'c.test = 34.2'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'c.test = 34.2'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'c.test = 34.2'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'c.test = 34.2'

   (check_operator) 'c.test = 34.2' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'c.test = 34.2':
   (check_vname) check_vname ret1 ' = 34.2':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' = 34.2'

   (check_literal) check_literal:lit='(' idx=6 ' = 34.2'
   (check_literal) check_literal:After drop space:'(' idx=6 ' = 34.2'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=6 ' = 34.2'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=7 '= 34.2'
 (check_literal) check_literal:After while(): 34.2
 (check_literal) ret1 Match. ' =' == ' = 34.2'

 (check_expression) ' 34.2'

  (check_eitem) check_eitem: '34.2'

   (check_function)  '34.2'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=9 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '34.2'
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=9 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=9 '34.2'
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'34.2' float:3.420000e+01
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (check_operator) '' igncomma:0
  (check_operator) ret0:is comma: 0
 (check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'c.test = 34.2' ref_ndeclare:1

   (scan_vname) scan_vname: 'c.test = 34.2'
   (scan_vname) scan_vname: ret1 'c.test'
  (scan_variable) scan_variable: ' = 34.2' vname='C.TEST'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'C.TEST' is not other keyword
  (scan_variable) Array test ' = 34.2'

   (check_literal) check_literal:lit='(' idx=6 ' = 34.2'
   (check_literal) check_literal:After drop space:'(' idx=6 ' = 34.2'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='C.TEST' Float
 (process_token)    Frst:1 T:'C.TEST' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'C.TEST'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.TEST is not function
token_is_variable: tok:'C.TEST'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.TEST is not function
(init_get_name) 
init_get_name:'C.TEST'
(init_get_name) 
init_get_name:'C.TEST'
(get_name) 
get_name:gn:'C.TEST'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C.TEST
(add_var_info) Name:C.TEST Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '            C.TEST'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' ' = 34.2'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= 34.2'
 (scan_assignment_equals) scan_assignment_equals:while loop:= 34.2
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' 34.2' igncomma:0

  (check_eitem) check_eitem: '34.2'

   (check_function)  '34.2'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=9 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '34.2'
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=9 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=9 '34.2'
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'34.2' float:3.420000e+01
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (scan_eitem) scan_eitem:

   (check_function)  '34.2'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=9 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '34.2'
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=9 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=9 '34.2'
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'34.2' float:3.420000e+01
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=9 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '34.2'
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=9 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=9 '34.2'
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'34.2' float:3.420000e+01
     (check_float) check_float: ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'34.2' float:3.420000e+01
     (check_float) check_float: ret1

     (scan_float) scan_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (scan_float) Fltval:'34.2' float:3.420000e+01
     (scan_float) scan_float: ret1
    (process_token)    Frst:0 T:'34.2' toktype:i exptype:f bufid:'EXP_BUFF_ID_FLT'
    (operator_precedence) 
:= is operator
    (process_token) Before switch, bufid:'EXP_BUFF_ID_FLT'
modify_expression_type:Inittype:f Intype:f Outtype:f
(    output_float) [f,()] f 34.2
    (scan_atom) ret1
   (scan_expression) '' Before while igncomma:0

    (check_operator) '' igncomma:0
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 '' commas:0
  (add_var_info) Name:C.TEST Idx:-1
  (add_var_info) Already present
  (add_var_info)   reference so OK
  (scan_assignment) scan_assignment: ret1
 (scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=13 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=13 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:2 buf2 i:7
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '34.2' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing :C.TEST   *************
 (type_check_stack_push)  type_check_stack_push: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'C.TEST' type:f (1), %:0
 (process_syntax_tree) *********Processing :34.2   *************
 (type_check_stack_push)  type_check_stack_push: '34.2'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'C.TEST' type:1 %:0
 (type_check_stack_print)  N002: '34.2' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'C.TEST' type:f (1), %:0
 (type_check_stack_display) 001: '34.2' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '34.2'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (34.2) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE:C.TEST    **********
 (type_check_stack_push)  type_check_stack_push: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'C.TEST' type:f (1), %:0
 (typecheck_expression)  *** BE:34.2    **********
 (type_check_stack_push)  type_check_stack_push: '34.2'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'C.TEST' type:1 %:0
 (type_check_stack_print)  N002: '34.2' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'C.TEST' type:f (1), %:0
 (type_check_stack_display) 001: '34.2' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '34.2'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '34.2' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '34.2' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (C.TEST)
Var: C.TEST Float NumIdx:0
infix_stack_push: 'C.TEST'
 (infix_from_rpn) (34.2)
infix_stack_push: '34.2'
 (infix_from_rpn) (:=)
infix_stack_pop: '34.2'
infix_stack_pop: 'C.TEST'
infix_stack_push: '(C.TEST := 34.2)'
Done

infix_stack_pop: '(C.TEST := 34.2)'
Infix stack result (C.TEST := 34.2)
 (infix_from_rpn) exit  'C.TEST := 34.2'
 (process_expression_types) ==C.TEST := 34.2==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
c.test = 34.2
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=13 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=13 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=13 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'c' (99)
 (is_all_spaces) cline[1] = '.' (46)
 (is_all_spaces) cline[2] = 's' (115)
 (is_all_spaces) cline[3] = 'e' (101)
 (is_all_spaces) cline[4] = 'c' (99)
 (is_all_spaces) cline[5] = 'o' (111)
 (is_all_spaces) cline[6] = 'n' (110)
 (is_all_spaces) cline[7] = 'd' (100)
 (is_all_spaces) cline[8] = ' ' (32)
 (is_all_spaces) cline[9] = '=' (61)
 (is_all_spaces) cline[10] = ' ' (32)
 (is_all_spaces) cline[11] = '1' (49)
 (is_all_spaces) cline[12] = '2' (50)
 (is_all_spaces) cline[13] = '3' (51)
 (is_all_spaces) cline[14] = '4' (52)
 (is_all_spaces) cline[15] = '.' (46)
 (is_all_spaces) cline[16] = '5' (53)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'c.second = 1234.5'
*********************
**c.second = 1234.5**
*********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'c.second = 1234.5'
 (check_literal) check_literal:After drop space:'REM' idx=0 'c.second = 1234.5'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'c.second = 1234.5'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'c.second = 1234.5'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'c.second = 1234.5'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'c.second = 1234.5'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'c.second = 1234.5'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'c.second = 1234.5'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'c.second = 1234.5'

   (check_operator) 'c.second = 1234.5' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'c.second = 1234.5':
   (check_vname) check_vname ret1 ' = 1234.5':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' = 1234.5'

   (check_literal) check_literal:lit='(' idx=8 ' = 1234.5'
   (check_literal) check_literal:After drop space:'(' idx=8 ' = 1234.5'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=8 ' = 1234.5'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=9 '= 1234.5'
 (check_literal) check_literal:After while(): 1234.5
 (check_literal) ret1 Match. ' =' == ' = 1234.5'

 (check_expression) ' 1234.5'

  (check_eitem) check_eitem: '1234.5'

   (check_function)  '1234.5'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=11 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=11 '1234.5'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=11 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=11 '1234.5'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1234.5' float:1.234500e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (check_operator) '' igncomma:0
  (check_operator) ret0:is comma: 0
 (check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'c.second = 1234.5' ref_ndeclare:1

   (scan_vname) scan_vname: 'c.second = 1234.5'
   (scan_vname) scan_vname: ret1 'c.second'
  (scan_variable) scan_variable: ' = 1234.5' vname='C.SECOND'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'C.SECOND' is not other keyword
  (scan_variable) Array test ' = 1234.5'

   (check_literal) check_literal:lit='(' idx=8 ' = 1234.5'
   (check_literal) check_literal:After drop space:'(' idx=8 ' = 1234.5'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='C.SECOND' Float
 (process_token)    Frst:1 T:'C.SECOND' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'C.SECOND'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.SECOND is not function
token_is_variable: tok:'C.SECOND'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.SECOND is not function
(init_get_name) 
init_get_name:'C.SECOND'
(init_get_name) 
init_get_name:'C.SECOND'
(get_name) 
get_name:gn:'C.SECOND'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C.SECOND
(add_var_info) Name:C.SECOND Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '          C.SECOND'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' ' = 1234.5'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= 1234.5'
 (scan_assignment_equals) scan_assignment_equals:while loop:= 1234.5
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' 1234.5' igncomma:0

  (check_eitem) check_eitem: '1234.5'

   (check_function)  '1234.5'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=11 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=11 '1234.5'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=11 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=11 '1234.5'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1234.5' float:1.234500e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (scan_eitem) scan_eitem:

   (check_function)  '1234.5'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=11 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=11 '1234.5'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=11 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=11 '1234.5'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1234.5' float:1.234500e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=11 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=11 '1234.5'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=11 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=11 '1234.5'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1234.5' float:1.234500e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1234.5' float:1.234500e+03
     (check_float) check_float: ret1

     (scan_float) scan_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (scan_float) Fltval:'1234.5' float:1.234500e+03
     (scan_float) scan_float: ret1
    (process_token)    Frst:0 T:'1234.5' toktype:i exptype:f bufid:'EXP_BUFF_ID_FLT'
    (operator_precedence) 
:= is operator
    (process_token) Before switch, bufid:'EXP_BUFF_ID_FLT'
modify_expression_type:Inittype:f Intype:f Outtype:f
(    output_float) [f,()] f 1234.5
    (scan_atom) ret1
   (scan_expression) '' Before while igncomma:0

    (check_operator) '' igncomma:0
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 '' commas:0
  (add_var_info) Name:C.SECOND Idx:-1
  (add_var_info) Already present
  (add_var_info)   reference so OK
  (scan_assignment) scan_assignment: ret1
 (scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=17 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=17 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:2 buf2 i:3
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1234.5' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing :C.SECOND   *************
 (type_check_stack_push)  type_check_stack_push: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'C.SECOND' type:f (1), %:0
 (process_syntax_tree) *********Processing :1234.5   *************
 (type_check_stack_push)  type_check_stack_push: '1234.5'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
 (type_check_stack_print)  N002: '1234.5' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'C.SECOND' type:f (1), %:0
 (type_check_stack_display) 001: '1234.5' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '1234.5'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (1234.5) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE:C.SECOND    **********
 (type_check_stack_push)  type_check_stack_push: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'C.SECOND' type:f (1), %:0
 (typecheck_expression)  *** BE:1234.5    **********
 (type_check_stack_push)  type_check_stack_push: '1234.5'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
 (type_check_stack_print)  N002: '1234.5' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'C.SECOND' type:f (1), %:0
 (type_check_stack_display) 001: '1234.5' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '1234.5'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1234.5' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1234.5' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (C.SECOND)
Var: C.SECOND Float NumIdx:0
infix_stack_push: 'C.SECOND'
 (infix_from_rpn) (1234.5)
infix_stack_push: '1234.5'
 (infix_from_rpn) (:=)
infix_stack_pop: '1234.5'
infix_stack_pop: 'C.SECOND'
infix_stack_push: '(C.SECOND := 1234.5)'
Done

infix_stack_pop: '(C.SECOND := 1234.5)'
Infix stack result (C.SECOND := 1234.5)
 (infix_from_rpn) exit  'C.SECOND := 1234.5'
 (process_expression_types) ==C.SECOND := 1234.5==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
c.second = 1234.5
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=17 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=17 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=17 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'c' (99)
 (is_all_spaces) cline[1] = '.' (46)
 (is_all_spaces) cline[2] = 't' (116)
 (is_all_spaces) cline[3] = 'h' (104)
 (is_all_spaces) cline[4] = 'i' (105)
 (is_all_spaces) cline[5] = 'r' (114)
 (is_all_spaces) cline[6] = 'd' (100)
 (is_all_spaces) cline[7] = ' ' (32)
 (is_all_spaces) cline[8] = ' ' (32)
 (is_all_spaces) cline[9] = '=' (61)
 (is_all_spaces) cline[10] = ' ' (32)
 (is_all_spaces) cline[11] = '1' (49)
 (is_all_spaces) cline[12] = '.' (46)
 (is_all_spaces) cline[13] = '3' (51)
 (is_all_spaces) cline[14] = '3' (51)
 (is_all_spaces) cline[15] = '3' (51)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'c.third  = 1.333'
********************
**c.third  = 1.333**
********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'c.third  = 1.333'
 (check_literal) check_literal:After drop space:'REM' idx=0 'c.third  = 1.333'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'c.third  = 1.333'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'c.third  = 1.333'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'c.third  = 1.333'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'c.third  = 1.333'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'c.third  = 1.333'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'c.third  = 1.333'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'c.third  = 1.333'

   (check_operator) 'c.third  = 1.333' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'c.third  = 1.333':
   (check_vname) check_vname ret1 '  = 1.333':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '  = 1.333'

   (check_literal) check_literal:lit='(' idx=7 '  = 1.333'
   (check_literal) check_literal:After drop space:'(' idx=7 '  = 1.333'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=7 '  = 1.333'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=9 '= 1.333'
 (check_literal) check_literal:After while(): 1.333
 (check_literal) ret1 Match. ' =' == '  = 1.333'

 (check_expression) ' 1.333'

  (check_eitem) check_eitem: '1.333'

   (check_function)  '1.333'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=11 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=11 '1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=11 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=11 '1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (check_operator) '' igncomma:0
  (check_operator) ret0:is comma: 0
 (check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'c.third  = 1.333' ref_ndeclare:1

   (scan_vname) scan_vname: 'c.third  = 1.333'
   (scan_vname) scan_vname: ret1 'c.third'
  (scan_variable) scan_variable: '  = 1.333' vname='C.THIRD'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'C.THIRD' is not other keyword
  (scan_variable) Array test '  = 1.333'

   (check_literal) check_literal:lit='(' idx=7 '  = 1.333'
   (check_literal) check_literal:After drop space:'(' idx=7 '  = 1.333'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='C.THIRD' Float
 (process_token)    Frst:1 T:'C.THIRD' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'C.THIRD'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.THIRD is not function
token_is_variable: tok:'C.THIRD'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.THIRD is not function
(init_get_name) 
init_get_name:'C.THIRD'
(init_get_name) 
init_get_name:'C.THIRD'
(get_name) 
get_name:gn:'C.THIRD'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C.THIRD
(add_var_info) Name:C.THIRD Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '           C.THIRD'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' '  = 1.333'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= 1.333'
 (scan_assignment_equals) scan_assignment_equals:while loop:= 1.333
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' 1.333' igncomma:0

  (check_eitem) check_eitem: '1.333'

   (check_function)  '1.333'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=11 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=11 '1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=11 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=11 '1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (scan_eitem) scan_eitem:

   (check_function)  '1.333'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=11 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=11 '1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=11 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=11 '1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=11 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=11 '1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=11 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=11 '1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1

     (scan_float) scan_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (scan_float) Fltval:'1.333' float:1.333000e+00
     (scan_float) scan_float: ret1
    (process_token)    Frst:0 T:'1.333' toktype:i exptype:f bufid:'EXP_BUFF_ID_FLT'
    (operator_precedence) 
:= is operator
    (process_token) Before switch, bufid:'EXP_BUFF_ID_FLT'
modify_expression_type:Inittype:f Intype:f Outtype:f
(    output_float) [f,()] f 1.333
    (scan_atom) ret1
   (scan_expression) '' Before while igncomma:0

    (check_operator) '' igncomma:0
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 '' commas:0
  (add_var_info) Name:C.THIRD Idx:-1
  (add_var_info) Already present
  (add_var_info)   reference so OK
  (scan_assignment) scan_assignment: ret1
 (scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:2 buf2 i:3
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1.333' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing :C.THIRD   *************
 (type_check_stack_push)  type_check_stack_push: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.THIRD' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'C.THIRD' type:f (1), %:0
 (process_syntax_tree) *********Processing :1.333   *************
 (type_check_stack_push)  type_check_stack_push: '1.333'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'C.THIRD' type:1 %:0
 (type_check_stack_print)  N002: '1.333' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'C.THIRD' type:f (1), %:0
 (type_check_stack_display) 001: '1.333' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '1.333'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.THIRD' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (1.333) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE:C.THIRD    **********
 (type_check_stack_push)  type_check_stack_push: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.THIRD' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'C.THIRD' type:f (1), %:0
 (typecheck_expression)  *** BE:1.333    **********
 (type_check_stack_push)  type_check_stack_push: '1.333'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'C.THIRD' type:1 %:0
 (type_check_stack_print)  N002: '1.333' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'C.THIRD' type:f (1), %:0
 (type_check_stack_display) 001: '1.333' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '1.333'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.THIRD' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1.333' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1.333' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (C.THIRD)
Var: C.THIRD Float NumIdx:0
infix_stack_push: 'C.THIRD'
 (infix_from_rpn) (1.333)
infix_stack_push: '1.333'
 (infix_from_rpn) (:=)
infix_stack_pop: '1.333'
infix_stack_pop: 'C.THIRD'
infix_stack_push: '(C.THIRD := 1.333)'
Done

infix_stack_pop: '(C.THIRD := 1.333)'
Infix stack result (C.THIRD := 1.333)
 (infix_from_rpn) exit  'C.THIRD := 1.333'
 (process_expression_types) ==C.THIRD := 1.333==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
c.third  = 1.333
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=16 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=16 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'a' (97)
 (is_all_spaces) cline[1] = ' ' (32)
 (is_all_spaces) cline[2] = '=' (61)
 (is_all_spaces) cline[3] = ' ' (32)
 (is_all_spaces) cline[4] = '3' (51)
 (is_all_spaces) cline[5] = '4' (52)
 (is_all_spaces) cline[6] = '.' (46)
 (is_all_spaces) cline[7] = '2' (50)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'a = 34.2'
************
**a = 34.2**
************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'a = 34.2'
 (check_literal) check_literal:After drop space:'REM' idx=0 'a = 34.2'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'a = 34.2'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'a = 34.2'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'a = 34.2'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'a = 34.2'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'a = 34.2'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'a = 34.2'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'a = 34.2'

   (check_operator) 'a = 34.2' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'a = 34.2':
   (check_vname) check_vname ret1 ' = 34.2':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' = 34.2'

   (check_literal) check_literal:lit='(' idx=1 ' = 34.2'
   (check_literal) check_literal:After drop space:'(' idx=1 ' = 34.2'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=1 ' = 34.2'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=2 '= 34.2'
 (check_literal) check_literal:After while(): 34.2
 (check_literal) ret1 Match. ' =' == ' = 34.2'

 (check_expression) ' 34.2'

  (check_eitem) check_eitem: '34.2'

   (check_function)  '34.2'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=4 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 '34.2'
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=4 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 '34.2'
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'34.2' float:3.420000e+01
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (check_operator) '' igncomma:0
  (check_operator) ret0:is comma: 0
 (check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'a = 34.2' ref_ndeclare:1

   (scan_vname) scan_vname: 'a = 34.2'
   (scan_vname) scan_vname: ret1 'a'
  (scan_variable) scan_variable: ' = 34.2' vname='A'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'A' is not other keyword
  (scan_variable) Array test ' = 34.2'

   (check_literal) check_literal:lit='(' idx=1 ' = 34.2'
   (check_literal) check_literal:After drop space:'(' idx=1 ' = 34.2'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='A' Float
 (process_token)    Frst:1 T:'A' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'A'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f A
(add_var_info) Name:A Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 A'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' ' = 34.2'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= 34.2'
 (scan_assignment_equals) scan_assignment_equals:while loop:= 34.2
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' 34.2' igncomma:0

  (check_eitem) check_eitem: '34.2'

   (check_function)  '34.2'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=4 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 '34.2'
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=4 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 '34.2'
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'34.2' float:3.420000e+01
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (scan_eitem) scan_eitem:

   (check_function)  '34.2'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=4 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 '34.2'
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=4 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 '34.2'
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'34.2' float:3.420000e+01
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=4 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 '34.2'
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=4 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 '34.2'
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'34.2' float:3.420000e+01
     (check_float) check_float: ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'34.2' float:3.420000e+01
     (check_float) check_float: ret1

     (scan_float) scan_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (scan_float) Fltval:'34.2' float:3.420000e+01
     (scan_float) scan_float: ret1
    (process_token)    Frst:0 T:'34.2' toktype:i exptype:f bufid:'EXP_BUFF_ID_FLT'
    (operator_precedence) 
:= is operator
    (process_token) Before switch, bufid:'EXP_BUFF_ID_FLT'
modify_expression_type:Inittype:f Intype:f Outtype:f
(    output_float) [f,()] f 34.2
    (scan_atom) ret1
   (scan_expression) '' Before while igncomma:0

    (check_operator) '' igncomma:0
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 '' commas:0
  (add_var_info) Name:A Idx:-1
  (add_var_info) Already present
  (add_var_info)   reference so OK
  (scan_assignment) scan_assignment: ret1
 (scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:2 buf2 i:3
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '34.2' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing :A   *************
 (type_check_stack_push)  type_check_stack_push: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (process_syntax_tree) *********Processing :34.2   *************
 (type_check_stack_push)  type_check_stack_push: '34.2'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'A' type:1 %:0
 (type_check_stack_print)  N002: '34.2' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (type_check_stack_display) 001: '34.2' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '34.2'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (34.2) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE:A    **********
 (type_check_stack_push)  type_check_stack_push: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (typecheck_expression)  *** BE:34.2    **********
 (type_check_stack_push)  type_check_stack_push: '34.2'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'A' type:1 %:0
 (type_check_stack_print)  N002: '34.2' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (type_check_stack_display) 001: '34.2' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '34.2'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '34.2' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '34.2' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (A)
Var: A Float NumIdx:0
infix_stack_push: 'A'
 (infix_from_rpn) (34.2)
infix_stack_push: '34.2'
 (infix_from_rpn) (:=)
infix_stack_pop: '34.2'
infix_stack_pop: 'A'
infix_stack_push: '(A := 34.2)'
Done

infix_stack_pop: '(A := 34.2)'
Infix stack result (A := 34.2)
 (infix_from_rpn) exit  'A := 34.2'
 (process_expression_types) ==A := 34.2==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
a = 34.2
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=8 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=8 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=8 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'b' (98)
 (is_all_spaces) cline[1] = ' ' (32)
 (is_all_spaces) cline[2] = '=' (61)
 (is_all_spaces) cline[3] = ' ' (32)
 (is_all_spaces) cline[4] = '1' (49)
 (is_all_spaces) cline[5] = '2' (50)
 (is_all_spaces) cline[6] = '3' (51)
 (is_all_spaces) cline[7] = '4' (52)
 (is_all_spaces) cline[8] = '.' (46)
 (is_all_spaces) cline[9] = '5' (53)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'b = 1234.5'
**************
**b = 1234.5**
**************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'b = 1234.5'
 (check_literal) check_literal:After drop space:'REM' idx=0 'b = 1234.5'
 (check_literal)   'R' != 'b'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'b = 1234.5'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'b = 1234.5'
 (check_literal)   'R' != 'b'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'b = 1234.5'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'b = 1234.5'
 (check_literal)   'R' != 'b'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'b = 1234.5'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'b = 1234.5'
 (check_literal)   'R' != 'b'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'b = 1234.5'

   (check_operator) 'b = 1234.5' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'b = 1234.5':
   (check_vname) check_vname ret1 ' = 1234.5':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' = 1234.5'

   (check_literal) check_literal:lit='(' idx=1 ' = 1234.5'
   (check_literal) check_literal:After drop space:'(' idx=1 ' = 1234.5'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=1 ' = 1234.5'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=2 '= 1234.5'
 (check_literal) check_literal:After while(): 1234.5
 (check_literal) ret1 Match. ' =' == ' = 1234.5'

 (check_expression) ' 1234.5'

  (check_eitem) check_eitem: '1234.5'

   (check_function)  '1234.5'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=4 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 '1234.5'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=4 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 '1234.5'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1234.5' float:1.234500e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (check_operator) '' igncomma:0
  (check_operator) ret0:is comma: 0
 (check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'b = 1234.5' ref_ndeclare:1

   (scan_vname) scan_vname: 'b = 1234.5'
   (scan_vname) scan_vname: ret1 'b'
  (scan_variable) scan_variable: ' = 1234.5' vname='B'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'B' is not other keyword
  (scan_variable) Array test ' = 1234.5'

   (check_literal) check_literal:lit='(' idx=1 ' = 1234.5'
   (check_literal) check_literal:After drop space:'(' idx=1 ' = 1234.5'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='B' Float
 (process_token)    Frst:1 T:'B' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'B'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f B
(add_var_info) Name:B Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 B'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' ' = 1234.5'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= 1234.5'
 (scan_assignment_equals) scan_assignment_equals:while loop:= 1234.5
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' 1234.5' igncomma:0

  (check_eitem) check_eitem: '1234.5'

   (check_function)  '1234.5'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=4 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 '1234.5'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=4 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 '1234.5'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1234.5' float:1.234500e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (scan_eitem) scan_eitem:

   (check_function)  '1234.5'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=4 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 '1234.5'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=4 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 '1234.5'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1234.5' float:1.234500e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=4 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 '1234.5'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=4 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 '1234.5'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1234.5' float:1.234500e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1234.5' float:1.234500e+03
     (check_float) check_float: ret1

     (scan_float) scan_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (scan_float) Fltval:'1234.5' float:1.234500e+03
     (scan_float) scan_float: ret1
    (process_token)    Frst:0 T:'1234.5' toktype:i exptype:f bufid:'EXP_BUFF_ID_FLT'
    (operator_precedence) 
:= is operator
    (process_token) Before switch, bufid:'EXP_BUFF_ID_FLT'
modify_expression_type:Inittype:f Intype:f Outtype:f
(    output_float) [f,()] f 1234.5
    (scan_atom) ret1
   (scan_expression) '' Before while igncomma:0

    (check_operator) '' igncomma:0
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 '' commas:0
  (add_var_info) Name:B Idx:-1
  (add_var_info) Already present
  (add_var_info)   reference so OK
  (scan_assignment) scan_assignment: ret1
 (scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=10 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=10 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:2 buf2 i:3
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1234.5' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing :B   *************
 (type_check_stack_push)  type_check_stack_push: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'B' type:f (1), %:0
 (process_syntax_tree) *********Processing :1234.5   *************
 (type_check_stack_push)  type_check_stack_push: '1234.5'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'B' type:1 %:0
 (type_check_stack_print)  N002: '1234.5' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'B' type:f (1), %:0
 (type_check_stack_display) 001: '1234.5' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '1234.5'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (1234.5) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE:B    **********
 (type_check_stack_push)  type_check_stack_push: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'B' type:f (1), %:0
 (typecheck_expression)  *** BE:1234.5    **********
 (type_check_stack_push)  type_check_stack_push: '1234.5'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'B' type:1 %:0
 (type_check_stack_print)  N002: '1234.5' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'B' type:f (1), %:0
 (type_check_stack_display) 001: '1234.5' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '1234.5'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1234.5' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1234.5' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
 (infix_from_rpn) (1234.5)
infix_stack_push: '1234.5'
 (infix_from_rpn) (:=)
infix_stack_pop: '1234.5'
infix_stack_pop: 'B'
infix_stack_push: '(B := 1234.5)'
Done

infix_stack_pop: '(B := 1234.5)'
Infix stack result (B := 1234.5)
 (infix_from_rpn) exit  'B := 1234.5'
 (process_expression_types) ==B := 1234.5==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
b = 1234.5
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=10 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=10 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=10 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'c' (99)
 (is_all_spaces) cline[1] = ' ' (32)
 (is_all_spaces) cline[2] = ' ' (32)
 (is_all_spaces) cline[3] = '=' (61)
 (is_all_spaces) cline[4] = ' ' (32)
 (is_all_spaces) cline[5] = '1' (49)
 (is_all_spaces) cline[6] = '.' (46)
 (is_all_spaces) cline[7] = '3' (51)
 (is_all_spaces) cline[8] = '3' (51)
 (is_all_spaces) cline[9] = '3' (51)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'c  = 1.333'
**************
**c  = 1.333**
**************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'c  = 1.333'
 (check_literal) check_literal:After drop space:'REM' idx=0 'c  = 1.333'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'c  = 1.333'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'c  = 1.333'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'c  = 1.333'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'c  = 1.333'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'c  = 1.333'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'c  = 1.333'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'c  = 1.333'

   (check_operator) 'c  = 1.333' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'c  = 1.333':
   (check_vname) check_vname ret1 '  = 1.333':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '  = 1.333'

   (check_literal) check_literal:lit='(' idx=1 '  = 1.333'
   (check_literal) check_literal:After drop space:'(' idx=1 '  = 1.333'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=1 '  = 1.333'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=3 '= 1.333'
 (check_literal) check_literal:After while(): 1.333
 (check_literal) ret1 Match. ' =' == '  = 1.333'

 (check_expression) ' 1.333'

  (check_eitem) check_eitem: '1.333'

   (check_function)  '1.333'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=5 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 '1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=5 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 '1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (check_operator) '' igncomma:0
  (check_operator) ret0:is comma: 0
 (check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'c  = 1.333' ref_ndeclare:1

   (scan_vname) scan_vname: 'c  = 1.333'
   (scan_vname) scan_vname: ret1 'c'
  (scan_variable) scan_variable: '  = 1.333' vname='C'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'C' is not other keyword
  (scan_variable) Array test '  = 1.333'

   (check_literal) check_literal:lit='(' idx=1 '  = 1.333'
   (check_literal) check_literal:After drop space:'(' idx=1 '  = 1.333'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='C' Float
 (process_token)    Frst:1 T:'C' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'C'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
token_is_variable: tok:'C'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C
(add_var_info) Name:C Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 C'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' '  = 1.333'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= 1.333'
 (scan_assignment_equals) scan_assignment_equals:while loop:= 1.333
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' 1.333' igncomma:0

  (check_eitem) check_eitem: '1.333'

   (check_function)  '1.333'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=5 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 '1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=5 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 '1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (scan_eitem) scan_eitem:

   (check_function)  '1.333'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=5 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 '1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=5 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 '1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=5 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 '1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=5 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 '1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1

     (scan_float) scan_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (scan_float) Fltval:'1.333' float:1.333000e+00
     (scan_float) scan_float: ret1
    (process_token)    Frst:0 T:'1.333' toktype:i exptype:f bufid:'EXP_BUFF_ID_FLT'
    (operator_precedence) 
:= is operator
    (process_token) Before switch, bufid:'EXP_BUFF_ID_FLT'
modify_expression_type:Inittype:f Intype:f Outtype:f
(    output_float) [f,()] f 1.333
    (scan_atom) ret1
   (scan_expression) '' Before while igncomma:0

    (check_operator) '' igncomma:0
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 '' commas:0
  (add_var_info) Name:C Idx:-1
  (add_var_info) Already present
  (add_var_info)   reference so OK
  (scan_assignment) scan_assignment: ret1
 (scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=10 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=10 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:2 buf2 i:3
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1.333' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing :C   *************
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'C' type:f (1), %:0
 (process_syntax_tree) *********Processing :1.333   *************
 (type_check_stack_push)  type_check_stack_push: '1.333'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'C' type:1 %:0
 (type_check_stack_print)  N002: '1.333' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'C' type:f (1), %:0
 (type_check_stack_display) 001: '1.333' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '1.333'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (1.333) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE:C    **********
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'C' type:f (1), %:0
 (typecheck_expression)  *** BE:1.333    **********
 (type_check_stack_push)  type_check_stack_push: '1.333'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'C' type:1 %:0
 (type_check_stack_print)  N002: '1.333' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'C' type:f (1), %:0
 (type_check_stack_display) 001: '1.333' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '1.333'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1.333' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1.333' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (C)
Var: C Float NumIdx:0
infix_stack_push: 'C'
 (infix_from_rpn) (1.333)
infix_stack_push: '1.333'
 (infix_from_rpn) (:=)
infix_stack_pop: '1.333'
infix_stack_pop: 'C'
infix_stack_push: '(C := 1.333)'
Done

infix_stack_pop: '(C := 1.333)'
Infix stack result (C := 1.333)
 (infix_from_rpn) exit  'C := 1.333'
 (process_expression_types) ==C := 1.333==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
c  = 1.333
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=10 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=10 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=10 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 't' (116)
 (is_all_spaces) cline[1] = ' ' (32)
 (is_all_spaces) cline[2] = '=' (61)
 (is_all_spaces) cline[3] = ' ' (32)
 (is_all_spaces) cline[4] = 'a' (97)
 (is_all_spaces) cline[5] = '+' (43)
 (is_all_spaces) cline[6] = 'b' (98)
 (is_all_spaces) cline[7] = '+' (43)
 (is_all_spaces) cline[8] = 'c' (99)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 't = a+b+c'
*************
**t = a+b+c**
*************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 't = a+b+c'
 (check_literal) check_literal:After drop space:'REM' idx=0 't = a+b+c'
 (check_literal)   'R' != 't'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 't = a+b+c'
 (check_literal) check_literal:After drop space:'REM&' idx=0 't = a+b+c'
 (check_literal)   'R' != 't'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 't = a+b+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 't = a+b+c'
 (check_literal)   'R' != 't'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 't = a+b+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 't = a+b+c'
 (check_literal)   'R' != 't'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 't = a+b+c'

   (check_operator) 't = a+b+c' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 't = a+b+c':
   (check_vname) check_vname ret1 ' = a+b+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' = a+b+c'

   (check_literal) check_literal:lit='(' idx=1 ' = a+b+c'
   (check_literal) check_literal:After drop space:'(' idx=1 ' = a+b+c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=1 ' = a+b+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=2 '= a+b+c'
 (check_literal) check_literal:After while(): a+b+c
 (check_literal) ret1 Match. ' =' == ' = a+b+c'

 (check_expression) ' a+b+c'

  (check_eitem) check_eitem: 'a+b+c'

   (check_function)  'a+b+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=4 'a+b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 'a+b+c'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=4 'a+b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 'a+b+c'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+b+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+b+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+b+c'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=5 '+b+c'
     (check_literal) check_literal:After drop space:':' idx=5 '+b+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+b+c'

     (check_operator) 'a+b+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+b+c':
     (check_vname) check_vname ret1 '+b+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+b+c'

     (check_literal) check_literal:lit='(' idx=5 '+b+c'
     (check_literal) check_literal:After drop space:'(' idx=5 '+b+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+b+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) 'b+c' igncomma:0
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'b+c'

  (check_function)  'b+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=6 'b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'b+c'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=6 'b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'b+c'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b+c'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=7 '+c'
    (check_literal) check_literal:After drop space:':' idx=7 '+c'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b+c'

    (check_operator) 'b+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b+c':
    (check_vname) check_vname ret1 '+c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c'

    (check_literal) check_literal:lit='(' idx=7 '+c'
    (check_literal) check_literal:After drop space:'(' idx=7 '+c'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=7 '+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=7 '+c'
 (check_literal)   '%' != '+'
 (check_literal) check_literal: ret0

 (check_operator) '+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) 'c' igncomma:0
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c'

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=8 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=8 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=9 ''
    (check_literal) check_literal:After drop space:':' idx=9 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=9 ''
    (check_literal) check_literal:After drop space:'(' idx=9 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=9 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=9 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 't = a+b+c' ref_ndeclare:1

   (scan_vname) scan_vname: 't = a+b+c'
   (scan_vname) scan_vname: ret1 't'
  (scan_variable) scan_variable: ' = a+b+c' vname='T'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'T' is not other keyword
  (scan_variable) Array test ' = a+b+c'

   (check_literal) check_literal:lit='(' idx=1 ' = a+b+c'
   (check_literal) check_literal:After drop space:'(' idx=1 ' = a+b+c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='T' Float
 (process_token)    Frst:1 T:'T' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'T'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:T is not function
token_is_variable: tok:'T'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:T is not function
(init_get_name) 
init_get_name:'T'
(init_get_name) 
init_get_name:'T'
(get_name) 
get_name:gn:'T'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f T
(add_var_info) Name:T Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 T'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' ' = a+b+c'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= a+b+c'
 (scan_assignment_equals) scan_assignment_equals:while loop:= a+b+c
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' a+b+c' igncomma:0

  (check_eitem) check_eitem: 'a+b+c'

   (check_function)  'a+b+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=4 'a+b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 'a+b+c'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=4 'a+b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 'a+b+c'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+b+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+b+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+b+c'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=5 '+b+c'
     (check_literal) check_literal:After drop space:':' idx=5 '+b+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+b+c'

     (check_operator) 'a+b+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+b+c':
     (check_vname) check_vname ret1 '+b+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+b+c'

     (check_literal) check_literal:lit='(' idx=5 '+b+c'
     (check_literal) check_literal:After drop space:'(' idx=5 '+b+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'a+b+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=4 'a+b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=4 'a+b+c'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=4 'a+b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=4 'a+b+c'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a+b+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'a+b+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'a+b+c'
    (check_textlabel) 'a' is a text label chstr:'a'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
   (check_proc_call) 'a' is text label

    (check_literal) check_literal:lit=':' idx=5 '+b+c'
    (check_literal) check_literal:After drop space:':' idx=5 '+b+c'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'a+b+c'

    (check_operator) 'a+b+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'a+b+c':
    (check_vname) check_vname ret1 '+b+c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+b+c'

    (check_literal) check_literal:lit='(' idx=5 '+b+c'
    (check_literal) check_literal:After drop space:'(' idx=5 '+b+c'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=4 'a+b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=4 'a+b+c'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=4 'a+b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=4 'a+b+c'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'a+b+c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'a+b+c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'a+b+c'
   (check_textlabel) 'a' is a text label chstr:'a'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
  (check_proc_call) 'a' is text label

   (check_literal) check_literal:lit=':' idx=5 '+b+c'
   (check_literal) check_literal:After drop space:':' idx=5 '+b+c'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'a+b+c'

   (check_operator) 'a+b+c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'a+b+c':
   (check_vname) check_vname ret1 '+b+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+b+c'

   (check_literal) check_literal:lit='(' idx=5 '+b+c'
   (check_literal) check_literal:After drop space:'(' idx=5 '+b+c'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'a+b+c' ref_ndeclare:1

  (scan_vname) scan_vname: 'a+b+c'
  (scan_vname) scan_vname: ret1 'a'
 (scan_variable) scan_variable: '+b+c' vname='A'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'A' is not other keyword
 (scan_variable) Array test '+b+c'

  (check_literal) check_literal:lit='(' idx=5 '+b+c'
  (check_literal) check_literal:After drop space:'(' idx=5 '+b+c'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='A' Float
(process_token)    Frst:0 T:'A' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'A'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f A
(add_var_info) Name:A Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 A'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+b+c' Before while igncomma:0

 (check_operator) '+b+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '+b+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+b+c'

  (check_literal) check_literal:lit=' ,' idx=5 '+b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=5 '+b+c'
  (check_literal)   ',' != '+'
  (check_literal) check_literal: ret0
 (scan_operator) scan_operator: ret1 'b+c' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name::=
(process_token) 
opr1:3 opr2:1
(operator_precedence) 
:= is operator
(operator_precedence) 
:= is operator
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (2)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) 001: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'b+c' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) 'b+c' Before scan_eitem igncomma:0

 (scan_eitem) scan_eitem:

  (check_function)  'b+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=6 'b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'b+c'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=6 'b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'b+c'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b+c'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=7 '+c'
    (check_literal) check_literal:After drop space:':' idx=7 '+c'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b+c'

    (check_operator) 'b+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b+c':
    (check_vname) check_vname ret1 '+c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c'

    (check_literal) check_literal:lit='(' idx=7 '+c'
    (check_literal) check_literal:After drop space:'(' idx=7 '+c'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=6 'b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=6 'b+c'
  (check_literal)   '%' != 'b'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=6 'b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=6 'b+c'
  (check_literal)   '"' != 'b'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'b+c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'b+c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'b+c'
   (check_textlabel) 'b' is a text label chstr:'b'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
  (check_proc_call) 'b' is text label

   (check_literal) check_literal:lit=':' idx=7 '+c'
   (check_literal) check_literal:After drop space:':' idx=7 '+c'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'b+c'

   (check_operator) 'b+c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'b+c':
   (check_vname) check_vname ret1 '+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c'

   (check_literal) check_literal:lit='(' idx=7 '+c'
   (check_literal) check_literal:After drop space:'(' idx=7 '+c'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'b+c' ref_ndeclare:1

  (scan_vname) scan_vname: 'b+c'
  (scan_vname) scan_vname: ret1 'b'
 (scan_variable) scan_variable: '+c' vname='B'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'B' is not other keyword
 (scan_variable) Array test '+c'

  (check_literal) check_literal:lit='(' idx=7 '+c'
  (check_literal) check_literal:After drop space:'(' idx=7 '+c'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='B' Float
(process_token)    Frst:0 T:'B' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'B'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f B
(add_var_info) Name:B Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 B'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=7 '+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=7 '+c'
 (check_literal)   '%' != '+'
 (check_literal) check_literal: ret0

 (check_operator) '+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '+b+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c'

  (check_literal) check_literal:lit=' ,' idx=7 '+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=7 '+c'
  (check_literal)   ',' != '+'
  (check_literal) check_literal: ret0
 (scan_operator) scan_operator: ret1 'c' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:+
(process_token) 
opr1:3 opr2:3
(operator_precedence) 
+ is operator
(operator_precedence) 
+ is operator
(operator_left_assoc) 
+ is operator
Pop 1
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------

(operator_precedence) 
+ is operator
(operator_precedence) 
+ is operator
(output_operator) [f,()] f +
(operator_precedence) 
:= is operator
(operator_precedence) 
:= is operator
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (2)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) 001: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) 'c' Before scan_eitem igncomma:0

 (scan_eitem) scan_eitem:

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=8 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=8 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=9 ''
    (check_literal) check_literal:After drop space:':' idx=9 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=9 ''
    (check_literal) check_literal:After drop space:'(' idx=9 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=8 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=8 'c'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=8 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=8 'c'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c'
   (check_textlabel) 'c' is a text label chstr:'c'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
  (check_proc_call) 'c' is text label

   (check_literal) check_literal:lit=':' idx=9 ''
   (check_literal) check_literal:After drop space:':' idx=9 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c'

   (check_operator) 'c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=9 ''
   (check_literal) check_literal:After drop space:'(' idx=9 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c' ref_ndeclare:1

  (scan_vname) scan_vname: 'c'
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '' vname='C'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=9 ''
  (check_literal) check_literal:After drop space:'(' idx=9 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C' Float
(process_token)    Frst:0 T:'C' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
token_is_variable: tok:'C'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C
(add_var_info) Name:C Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 C'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=9 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=9 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(add_var_info) Name:T Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_assignment) scan_assignment: ret1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=9 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=9 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:5 buf2 i:3
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop '+' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (op_stack_finalise) Popped:+ f
 (output_operator) [f,()] f +
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'T' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N006       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N007       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing :T   *************
 (type_check_stack_push)  type_check_stack_push: 'T'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (process_syntax_tree) *********Processing :A   *************
 (type_check_stack_push)  type_check_stack_push: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (process_syntax_tree) *********Processing :B   *************
 (type_check_stack_push)  type_check_stack_push: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (type_check_stack_display) 002: 'B' type:f (1), %:0
 (process_syntax_tree) *********Processing :+   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator + %conv:1
 (type_check_stack_pop)   type_check_stack_pop: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:1
 (process_syntax_tree) Percent convertible operator op1 (N003) percent:0
 (process_syntax_tree) Mutable type (B) f f
 (process_syntax_tree) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (process_syntax_tree) *********Processing :C   *************
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print)  N005: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (type_check_stack_display) 002: 'C' type:f (1), %:0
 (process_syntax_tree) *********Processing :+   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator + %conv:1
 (type_check_stack_pop)   type_check_stack_pop: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:1
 (process_syntax_tree) Percent convertible operator op1 (N005) percent:0
 (process_syntax_tree) Mutable type (C) f f
 (process_syntax_tree) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N006: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'T'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (000) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE:T    **********
 (type_check_stack_push)  type_check_stack_push: 'T'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (typecheck_expression)  *** BE:A    **********
 (type_check_stack_push)  type_check_stack_push: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (typecheck_expression)  *** BE:B    **********
 (type_check_stack_push)  type_check_stack_push: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (type_check_stack_display) 002: 'B' type:f (1), %:0
 (typecheck_expression)  *** BE:+    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator +
 (type_check_stack_pop)   type_check_stack_pop: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (+) f f
 (typecheck_expression) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (typecheck_expression)  *** BE:C    **********
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print)  N005: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (type_check_stack_display) 002: 'C' type:f (1), %:0
 (typecheck_expression)  *** BE:+    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator +
 (type_check_stack_pop)   type_check_stack_pop: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (+) f f
 (typecheck_expression) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N006: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'T'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'T' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N006       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 5 4  nb 0:()
N007       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 6 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'T' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N006       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 5 4  nb 0:()
N007       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 6 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (T)
Var: T Float NumIdx:0
infix_stack_push: 'T'
 (infix_from_rpn) (A)
Var: A Float NumIdx:0
infix_stack_push: 'A'
 (infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
 (infix_from_rpn) (+)
infix_stack_pop: 'B'
infix_stack_pop: 'A'
infix_stack_push: '(A + B)'
 (infix_from_rpn) (C)
Var: C Float NumIdx:0
infix_stack_push: 'C'
 (infix_from_rpn) (+)
infix_stack_pop: 'C'
infix_stack_pop: '(A + B)'
infix_stack_push: '((A + B) + C)'
 (infix_from_rpn) (:=)
infix_stack_pop: '((A + B) + C)'
infix_stack_pop: 'T'
infix_stack_push: '(T := ((A + B) + C))'
Done

infix_stack_pop: '(T := ((A + B) + C))'
Infix stack result (T := ((A + B) + C))
 (infix_from_rpn) exit  'T := ((A + B) + C)'
 (process_expression_types) ==T := ((A + B) + C)==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
t = a+b+c
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=9 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=9 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=9 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = 'a' (97)
 (is_all_spaces) cline[7] = ',' (44)
 (is_all_spaces) cline[8] = 'b' (98)
 (is_all_spaces) cline[9] = ',' (44)
 (is_all_spaces) cline[10] = 'c' (99)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print a,b,c'
***************
**print a,b,c**
***************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print a,b,c'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print a,b,c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print a,b,c'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print a,b,c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print a,b,c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print a,b,c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print a,b,c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print a,b,c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print a,b,c'

   (check_operator) 'print a,b,c' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print a,b,c':
   (check_vname) check_vname ret1 ' a,b,c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' a,b,c'

   (check_literal) check_literal:lit='(' idx=5 ' a,b,c'
   (check_literal) check_literal:After drop space:'(' idx=5 ' a,b,c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' a,b,c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 'a,b,c'
 (check_literal)   '=' != 'a'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print a,b,c'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print a,b,c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print a,b,c'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print a,b,c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print a,b,c'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print a,b,c'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' a,b,c'
   (check_literal) check_literal:After drop space:'::' idx=5 ' a,b,c'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print a,b,c'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' a,b,c'
   (check_literal) check_literal:After drop space:':' idx=5 ' a,b,c'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print a,b,c'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print a,b,c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print a,b,c'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print a,b,c'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print a,b,c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print a,b,c'
   (check_literal) check_literal:After while(): a,b,c
   (check_literal) ret1 Match. ' PRINT' == 'print a,b,c'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print a,b,c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print a,b,c'
   (check_literal) check_literal:After while(): a,b,c
   (check_literal) ret1 Match. ' PRINT' == 'print a,b,c'

   (check_expression) ' a,b,c'

    (check_eitem) check_eitem: 'a,b,c'

     (check_function)  'a,b,c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 'a,b,c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 'a,b,c'
      (check_literal)   '%' != 'a'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 'a,b,c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 'a,b,c'
      (check_literal)   '"' != 'a'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'' float:0.000000e+00
       (check_float) check_float: ret0

       (check_integer) check_integer: 'a,b,c'
       (check_integer) check_integer:ret0

       (check_hex) check_hex: 'a,b,c'
       (check_hex) check_hex:ret0 not '$'
      (check_number) check_number: ret0

      (check_proc_call) check_proc_call:

       (check_textlabel) 'a,b,c'
       (check_textlabel) 'a' is a text label chstr:'a'
       (check_textlabel) Exit char:,
       (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
      (check_proc_call) 'a' is text label

       (check_literal) check_literal:lit=':' idx=7 ',b,c'
       (check_literal) check_literal:After drop space:':' idx=7 ',b,c'
       (check_literal)   ':' != ','
       (check_literal) check_literal: ret0
      (check_proc_call) check_proc_call:ret0

      (check_variable) 'a,b,c'

       (check_operator) 'a,b,c' igncomma:1
       (check_operator) ret0:is comma: 32767

       (check_vname) check_vname 'a,b,c':
       (check_vname) check_vname ret1 ',b,c':
      (check_variable) Name: ''
      (check_variable) check_variable: Ary test ',b,c'

       (check_literal) check_literal:lit='(' idx=7 ',b,c'
       (check_literal) check_literal:After drop space:'(' idx=7 ',b,c'
       (check_literal)   '(' != ','
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) ret1
   (check_eitem) ret1

   (check_operator) ',b,c' igncomma:1
   (check_operator) ret0:is comma: 0
  (check_expression) ret1 ',b,c' commas:0

  (check_literal) check_literal:lit=' PRINT' idx=0 'print a,b,c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'PRINT' idx=0 'print a,b,c'
  (check_literal) check_literal:After while(): a,b,c
  (check_literal) ret1 Match. ' PRINT' == 'print a,b,c'
 (scan_print) Before while

  (check_expression) ' a,b,c'

   (check_eitem) check_eitem: 'a,b,c'

    (check_function)  'a,b,c'
    (check_function) ret0

    (check_atom) check_atom:
    (check_atom) check_atom:Checking for character constant

     (check_literal) check_literal:lit=' %' idx=6 'a,b,c'
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'a,b,c'
     (check_literal)   '%' != 'a'
     (check_literal) check_literal: ret0
    (check_atom) check_atom:Checking for string

     (check_literal) check_literal:lit=' "' idx=6 'a,b,c'
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'a,b,c'
     (check_literal)   '"' != 'a'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) Fltval:'' float:0.000000e+00
      (check_float) check_float: ret0

      (check_integer) check_integer: 'a,b,c'
      (check_integer) check_integer:ret0

      (check_hex) check_hex: 'a,b,c'
      (check_hex) check_hex:ret0 not '$'
     (check_number) check_number: ret0

     (check_proc_call) check_proc_call:

      (check_textlabel) 'a,b,c'
      (check_textlabel) 'a' is a text label chstr:'a'
      (check_textlabel) Exit char:,
      (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
     (check_proc_call) 'a' is text label

      (check_literal) check_literal:lit=':' idx=7 ',b,c'
      (check_literal) check_literal:After drop space:':' idx=7 ',b,c'
      (check_literal)   ':' != ','
      (check_literal) check_literal: ret0
     (check_proc_call) check_proc_call:ret0

     (check_variable) 'a,b,c'

      (check_operator) 'a,b,c' igncomma:1
      (check_operator) ret0:is comma: 32767

      (check_vname) check_vname 'a,b,c':
      (check_vname) check_vname ret1 ',b,c':
     (check_variable) Name: ''
     (check_variable) check_variable: Ary test ',b,c'

      (check_literal) check_literal:lit='(' idx=7 ',b,c'
      (check_literal) check_literal:After drop space:'(' idx=7 ',b,c'
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) ret1
  (check_eitem) ret1

  (check_operator) ',b,c' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret1 ',b,c' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' a,b,c' igncomma:1

  (check_eitem) check_eitem: 'a,b,c'

   (check_function)  'a,b,c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=6 'a,b,c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=6 'a,b,c'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=6 'a,b,c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=6 'a,b,c'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a,b,c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a,b,c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a,b,c'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:,
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=7 ',b,c'
     (check_literal) check_literal:After drop space:':' idx=7 ',b,c'
     (check_literal)   ':' != ','
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a,b,c'

     (check_operator) 'a,b,c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a,b,c':
     (check_vname) check_vname ret1 ',b,c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ',b,c'

     (check_literal) check_literal:lit='(' idx=7 ',b,c'
     (check_literal) check_literal:After drop space:'(' idx=7 ',b,c'
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'a,b,c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=6 'a,b,c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'a,b,c'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=6 'a,b,c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'a,b,c'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a,b,c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'a,b,c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'a,b,c'
    (check_textlabel) 'a' is a text label chstr:'a'
    (check_textlabel) Exit char:,
    (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
   (check_proc_call) 'a' is text label

    (check_literal) check_literal:lit=':' idx=7 ',b,c'
    (check_literal) check_literal:After drop space:':' idx=7 ',b,c'
    (check_literal)   ':' != ','
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'a,b,c'

    (check_operator) 'a,b,c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'a,b,c':
    (check_vname) check_vname ret1 ',b,c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ',b,c'

    (check_literal) check_literal:lit='(' idx=7 ',b,c'
    (check_literal) check_literal:After drop space:'(' idx=7 ',b,c'
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=6 'a,b,c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=6 'a,b,c'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=6 'a,b,c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=6 'a,b,c'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'a,b,c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'a,b,c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'a,b,c'
   (check_textlabel) 'a' is a text label chstr:'a'
   (check_textlabel) Exit char:,
   (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
  (check_proc_call) 'a' is text label

   (check_literal) check_literal:lit=':' idx=7 ',b,c'
   (check_literal) check_literal:After drop space:':' idx=7 ',b,c'
   (check_literal)   ':' != ','
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'a,b,c'

   (check_operator) 'a,b,c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'a,b,c':
   (check_vname) check_vname ret1 ',b,c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ',b,c'

   (check_literal) check_literal:lit='(' idx=7 ',b,c'
   (check_literal) check_literal:After drop space:'(' idx=7 ',b,c'
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'a,b,c' ref_ndeclare:1

  (scan_vname) scan_vname: 'a,b,c'
  (scan_vname) scan_vname: ret1 'a'
 (scan_variable) scan_variable: ',b,c' vname='A'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'A' is not other keyword
 (scan_variable) Array test ',b,c'

  (check_literal) check_literal:lit='(' idx=7 ',b,c'
  (check_literal) check_literal:After drop space:'(' idx=7 ',b,c'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='A' Float
(process_token)    Frst:1 T:'A' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'A'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f A
(add_var_info) Name:A Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 A'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) ',b,c' Before while igncomma:1

 (check_operator) ',b,c' igncomma:1
 (check_operator) ret0:is comma: 32767
(scan_expression) ret1 ',b,c' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=7 ',b,c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=7 ',b,c'
 (check_literal) check_literal:After while():b,c
 (check_literal) ret1 Match. ' ,' == ',b,c'

 (scan_literal_core) scan_literal_core:lit=' ,' ',b,c'
 (scan_literal_core) scan_literal_core:After drop space:',b,c'
 (scan_literal_core) scan_literal_core:while loop:,b,c
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=8 'b,c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=8 'b,c'
 (check_literal)   ';' != 'b'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:7
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :A   *************
(type_check_stack_push)  type_check_stack_push: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:A    **********
(type_check_stack_push)  type_check_stack_push: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (A)
Var: A Float NumIdx:0
infix_stack_push: 'A'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: 'A'
infix_stack_push: 'PRINT(A)'
Done

infix_stack_pop: 'PRINT(A)'
Infix stack result PRINT(A)
(infix_from_rpn) exit  'PRINT(A)'
(process_expression_types) ==RINT(A)==
(process_expression_types) 


(finalise_expression) Finalise expression done.
b,c
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(finalise_expression) Finalise expression done.
b,c
========================================================
(output_expression_start)

 (check_expression) 'b,c'

  (check_eitem) check_eitem: 'b,c'

   (check_function)  'b,c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=8 'b,c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'b,c'
    (check_literal)   '%' != 'b'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=8 'b,c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'b,c'
    (check_literal)   '"' != 'b'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'b,c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'b,c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'b,c'
     (check_textlabel) 'b' is a text label chstr:'b'
     (check_textlabel) Exit char:,
     (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
    (check_proc_call) 'b' is text label

     (check_literal) check_literal:lit=':' idx=9 ',c'
     (check_literal) check_literal:After drop space:':' idx=9 ',c'
     (check_literal)   ':' != ','
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'b,c'

     (check_operator) 'b,c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'b,c':
     (check_vname) check_vname ret1 ',c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ',c'

     (check_literal) check_literal:lit='(' idx=9 ',c'
     (check_literal) check_literal:After drop space:'(' idx=9 ',c'
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) ',c' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 ',c' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) 'b,c' igncomma:1

  (check_eitem) check_eitem: 'b,c'

   (check_function)  'b,c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=8 'b,c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'b,c'
    (check_literal)   '%' != 'b'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=8 'b,c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'b,c'
    (check_literal)   '"' != 'b'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'b,c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'b,c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'b,c'
     (check_textlabel) 'b' is a text label chstr:'b'
     (check_textlabel) Exit char:,
     (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
    (check_proc_call) 'b' is text label

     (check_literal) check_literal:lit=':' idx=9 ',c'
     (check_literal) check_literal:After drop space:':' idx=9 ',c'
     (check_literal)   ':' != ','
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'b,c'

     (check_operator) 'b,c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'b,c':
     (check_vname) check_vname ret1 ',c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ',c'

     (check_literal) check_literal:lit='(' idx=9 ',c'
     (check_literal) check_literal:After drop space:'(' idx=9 ',c'
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'b,c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=8 'b,c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'b,c'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=8 'b,c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'b,c'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b,c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b,c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b,c'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:,
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=9 ',c'
    (check_literal) check_literal:After drop space:':' idx=9 ',c'
    (check_literal)   ':' != ','
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b,c'

    (check_operator) 'b,c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b,c':
    (check_vname) check_vname ret1 ',c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ',c'

    (check_literal) check_literal:lit='(' idx=9 ',c'
    (check_literal) check_literal:After drop space:'(' idx=9 ',c'
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=8 'b,c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=8 'b,c'
  (check_literal)   '%' != 'b'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=8 'b,c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=8 'b,c'
  (check_literal)   '"' != 'b'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'b,c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'b,c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'b,c'
   (check_textlabel) 'b' is a text label chstr:'b'
   (check_textlabel) Exit char:,
   (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
  (check_proc_call) 'b' is text label

   (check_literal) check_literal:lit=':' idx=9 ',c'
   (check_literal) check_literal:After drop space:':' idx=9 ',c'
   (check_literal)   ':' != ','
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'b,c'

   (check_operator) 'b,c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'b,c':
   (check_vname) check_vname ret1 ',c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ',c'

   (check_literal) check_literal:lit='(' idx=9 ',c'
   (check_literal) check_literal:After drop space:'(' idx=9 ',c'
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'b,c' ref_ndeclare:1

  (scan_vname) scan_vname: 'b,c'
  (scan_vname) scan_vname: ret1 'b'
 (scan_variable) scan_variable: ',c' vname='B'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'B' is not other keyword
 (scan_variable) Array test ',c'

  (check_literal) check_literal:lit='(' idx=9 ',c'
  (check_literal) check_literal:After drop space:'(' idx=9 ',c'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='B' Float
(process_token)    Frst:1 T:'B' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'B'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f B
(add_var_info) Name:B Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 B'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) ',c' Before while igncomma:1

 (check_operator) ',c' igncomma:1
 (check_operator) ret0:is comma: 32767
(scan_expression) ret1 ',c' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=9 ',c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=9 ',c'
 (check_literal) check_literal:After while():c
 (check_literal) ret1 Match. ' ,' == ',c'

 (scan_literal_core) scan_literal_core:lit=' ,' ',c'
 (scan_literal_core) scan_literal_core:After drop space:',c'
 (scan_literal_core) scan_literal_core:while loop:,c
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=10 'c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=10 'c'
 (check_literal)   ';' != 'c'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :B   *************
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'B' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:B    **********
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'B' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: 'B'
infix_stack_push: 'PRINT(B)'
Done

infix_stack_pop: 'PRINT(B)'
Infix stack result PRINT(B)
(infix_from_rpn) exit  'PRINT(B)'
(process_expression_types) ==RINT(B)==
(process_expression_types) 


(finalise_expression) Finalise expression done.
c
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(finalise_expression) Finalise expression done.
c
========================================================
(output_expression_start)

 (check_expression) 'c'

  (check_eitem) check_eitem: 'c'

   (check_function)  'c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=10 'c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 'c'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=10 'c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 'c'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c'
     (check_textlabel) 'c' is a text label chstr:'c'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
    (check_proc_call) 'c' is text label

     (check_literal) check_literal:lit=':' idx=11 ''
     (check_literal) check_literal:After drop space:':' idx=11 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c'

     (check_operator) 'c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=11 ''
     (check_literal) check_literal:After drop space:'(' idx=11 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) 'c' igncomma:1

  (check_eitem) check_eitem: 'c'

   (check_function)  'c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=10 'c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 'c'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=10 'c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 'c'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c'
     (check_textlabel) 'c' is a text label chstr:'c'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
    (check_proc_call) 'c' is text label

     (check_literal) check_literal:lit=':' idx=11 ''
     (check_literal) check_literal:After drop space:':' idx=11 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c'

     (check_operator) 'c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=11 ''
     (check_literal) check_literal:After drop space:'(' idx=11 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=10 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=10 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=10 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=10 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=11 ''
    (check_literal) check_literal:After drop space:':' idx=11 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=11 ''
    (check_literal) check_literal:After drop space:'(' idx=11 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=10 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=10 'c'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=10 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=10 'c'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c'
   (check_textlabel) 'c' is a text label chstr:'c'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
  (check_proc_call) 'c' is text label

   (check_literal) check_literal:lit=':' idx=11 ''
   (check_literal) check_literal:After drop space:':' idx=11 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c'

   (check_operator) 'c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=11 ''
   (check_literal) check_literal:After drop space:'(' idx=11 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c' ref_ndeclare:1

  (scan_vname) scan_vname: 'c'
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '' vname='C'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=11 ''
  (check_literal) check_literal:After drop space:'(' idx=11 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C' Float
(process_token)    Frst:1 T:'C' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
token_is_variable: tok:'C'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C
(add_var_info) Name:C Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 C'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '' Before while igncomma:1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 32767
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=11 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=11 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=11 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=11 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:2 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :C   *************
(type_check_stack_push)  type_check_stack_push: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:C    **********
(type_check_stack_push)  type_check_stack_push: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (C)
Var: C Float NumIdx:0
infix_stack_push: 'C'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: 'C'
infix_stack_push: 'PRINT(C)'
Done

infix_stack_pop: 'PRINT(C)'
Infix stack result PRINT(C)
(infix_from_rpn) exit  'PRINT(C)'
(process_expression_types) ==RINT(C)==
(process_expression_types) 


(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=11 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=11 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=11 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=11 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=11 ''
     (check_literal) check_literal:After drop space:':' idx=11 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=11 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=11 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=11 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=11 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=11 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=11 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=11 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=11 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print a,b,c
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=11 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=11 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=11 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'T' (84)
 (is_all_spaces) cline[8] = '=' (61)
 (is_all_spaces) cline[9] = '"' (34)
 (is_all_spaces) cline[10] = ',' (44)
 (is_all_spaces) cline[11] = ' ' (32)
 (is_all_spaces) cline[12] = 't' (116)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "T=", t'
*****************
**print "T=", t**
*****************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "T=", t'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "T=", t'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "T=", t'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "T=", t'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "T=", t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "T=", t'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "T=", t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "T=", t'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "T=", t'

   (check_operator) 'print "T=", t' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "T=", t':
   (check_vname) check_vname ret1 ' "T=", t':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "T=", t'

   (check_literal) check_literal:lit='(' idx=5 ' "T=", t'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "T=", t'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "T=", t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"T=", t'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "T=", t'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "T=", t'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "T=", t'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "T=", t'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "T=", t'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "T=", t'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "T=", t'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "T=", t'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "T=", t'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "T=", t'
   (check_literal) check_literal:After drop space:':' idx=5 ' "T=", t'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "T=", t'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "T=", t'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "T=", t'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "T=", t'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "T=", t'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "T=", t'
   (check_literal) check_literal:After while(): "T=", t
   (check_literal) ret1 Match. ' PRINT' == 'print "T=", t'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "T=", t'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "T=", t'
   (check_literal) check_literal:After while(): "T=", t
   (check_literal) ret1 Match. ' PRINT' == 'print "T=", t'

   (check_expression) ' "T=", t'

    (check_eitem) check_eitem: '"T=", t'

     (check_function)  '"T=", t'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"T=", t'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"T=", t'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"T=", t'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"T=", t'
      (check_literal) check_literal:After while():T=", t
      (check_literal) ret1 Match. ' "' == '"T=", t'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', t' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', t' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "T=", t'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "T=", t'
   (check_literal) check_literal:After while(): "T=", t
   (check_literal) ret1 Match. ' PRINT' == 'print "T=", t'
  (scan_print) Before while

   (check_expression) ' "T=", t'

    (check_eitem) check_eitem: '"T=", t'

     (check_function)  '"T=", t'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"T=", t'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"T=", t'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"T=", t'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"T=", t'
      (check_literal) check_literal:After while():T=", t
      (check_literal) ret1 Match. ' "' == '"T=", t'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', t' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', t' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "T=", t' igncomma:1

    (check_eitem) check_eitem: '"T=", t'

     (check_function)  '"T=", t'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"T=", t'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"T=", t'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"T=", t'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"T=", t'
      (check_literal) check_literal:After while():T=", t
      (check_literal) ret1 Match. ' "' == '"T=", t'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"T=", t'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"T=", t'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"T=", t'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"T=", t'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"T=", t'
      (check_literal) check_literal:After while():T=", t
      (check_literal) ret1 Match. ' "' == '"T=", t'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"T=", t'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"T=", t'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"T=", t'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"T=", t'
      (check_literal) check_literal:After while():T=", t
      (check_literal) ret1 Match. ' "' == '"T=", t'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"T=", t'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"T=", t'
       (check_literal) check_literal:After while():T=", t
       (check_literal) ret1 Match. ' "' == '"T=", t'
      (scan_string)   (in if) 'T=", t'
      (scan_string)   (in wh) 'T=", t'
      (scan_string)   (in wh) '=", t'
      (scan_string)   (in wh) '=", t'
      (scan_string)   (in wh) '", t'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"T="' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"T="'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"T=" is not function
token_is_variable: tok:'"T="'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"T=" is not function
(   output_string) [U,()] s "T="
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', t' Before while igncomma:1

    (check_operator) ', t' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', t' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=10 ', t'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=10 ', t'
   (check_literal) check_literal:After while(): t
   (check_literal) ret1 Match. ' ,' == ', t'

   (scan_literal_core) scan_literal_core:lit=' ,' ', t'
   (scan_literal_core) scan_literal_core:After drop space:', t'
   (scan_literal_core) scan_literal_core:while loop:, t
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=11 ' t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=12 't'
 (check_literal)   ';' != 't'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"T="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :"T="   *************
(type_check_stack_push)  type_check_stack_push: '"T="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"T="' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"T="' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"T="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:"T="    **********
(type_check_stack_push)  type_check_stack_push: '"T="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"T="' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"T="' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"T="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"T="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"T="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("T=")
infix_stack_push: '"T="'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"T="'
infix_stack_push: 'PRINT("T=")'
Done

infix_stack_pop: 'PRINT("T=")'
Infix stack result PRINT("T=")
(infix_from_rpn) exit  'PRINT("T=")'
(process_expression_types) ==RINT("T=")==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 t
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 t
========================================================
(output_expression_start)

 (check_expression) ' t'

  (check_eitem) check_eitem: 't'

   (check_function)  't'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=12 't'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=12 't'
    (check_literal)   '%' != 't'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=12 't'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=12 't'
    (check_literal)   '"' != 't'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 't'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 't'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 't'
     (check_textlabel) 't' is a text label chstr:'t'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'t' Type:f
    (check_proc_call) 't' is text label

     (check_literal) check_literal:lit=':' idx=13 ''
     (check_literal) check_literal:After drop space:':' idx=13 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 't'

     (check_operator) 't' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 't':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=13 ''
     (check_literal) check_literal:After drop space:'(' idx=13 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' t' igncomma:1

  (check_eitem) check_eitem: 't'

   (check_function)  't'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=12 't'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=12 't'
    (check_literal)   '%' != 't'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=12 't'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=12 't'
    (check_literal)   '"' != 't'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 't'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 't'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 't'
     (check_textlabel) 't' is a text label chstr:'t'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'t' Type:f
    (check_proc_call) 't' is text label

     (check_literal) check_literal:lit=':' idx=13 ''
     (check_literal) check_literal:After drop space:':' idx=13 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 't'

     (check_operator) 't' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 't':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=13 ''
     (check_literal) check_literal:After drop space:'(' idx=13 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  't'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=12 't'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=12 't'
   (check_literal)   '%' != 't'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=12 't'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=12 't'
   (check_literal)   '"' != 't'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 't'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 't'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 't'
    (check_textlabel) 't' is a text label chstr:'t'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'t' Type:f
   (check_proc_call) 't' is text label

    (check_literal) check_literal:lit=':' idx=13 ''
    (check_literal) check_literal:After drop space:':' idx=13 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 't'

    (check_operator) 't' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 't':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=13 ''
    (check_literal) check_literal:After drop space:'(' idx=13 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=12 't'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=12 't'
  (check_literal)   '%' != 't'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=12 't'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=12 't'
  (check_literal)   '"' != 't'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 't'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 't'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 't'
   (check_textlabel) 't' is a text label chstr:'t'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'t' Type:f
  (check_proc_call) 't' is text label

   (check_literal) check_literal:lit=':' idx=13 ''
   (check_literal) check_literal:After drop space:':' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 't'

   (check_operator) 't' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 't':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=13 ''
   (check_literal) check_literal:After drop space:'(' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 't' ref_ndeclare:1

  (scan_vname) scan_vname: 't'
  (scan_vname) scan_vname: ret1 't'
 (scan_variable) scan_variable: '' vname='T'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'T' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=13 ''
  (check_literal) check_literal:After drop space:'(' idx=13 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='T' Float
(process_token)    Frst:1 T:'T' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'T'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:T is not function
token_is_variable: tok:'T'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:T is not function
(init_get_name) 
init_get_name:'T'
(init_get_name) 
init_get_name:'T'
(get_name) 
get_name:gn:'T'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f T
(add_var_info) Name:T Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 T'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '' Before while igncomma:1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 32767
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=13 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=13 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=13 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=13 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:2 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'T' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :T   *************
(type_check_stack_push)  type_check_stack_push: 'T'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'T' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'T' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'T'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:T    **********
(type_check_stack_push)  type_check_stack_push: 'T'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'T' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'T' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'T'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'T' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'T' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (T)
Var: T Float NumIdx:0
infix_stack_push: 'T'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: 'T'
infix_stack_push: 'PRINT(T)'
Done

infix_stack_pop: 'PRINT(T)'
Infix stack result PRINT(T)
(infix_from_rpn) exit  'PRINT(T)'
(process_expression_types) ==RINT(T)==
(process_expression_types) 


(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=13 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=13 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=13 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=13 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=13 ''
     (check_literal) check_literal:After drop space:':' idx=13 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=13 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=13 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=13 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=13 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=13 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=13 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=13 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=13 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print "T=", t
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=13 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=13 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=13 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'a' (97)
 (is_all_spaces) cline[8] = '+' (43)
 (is_all_spaces) cline[9] = 'b' (98)
 (is_all_spaces) cline[10] = '"' (34)
 (is_all_spaces) cline[11] = ',' (44)
 (is_all_spaces) cline[12] = ' ' (32)
 (is_all_spaces) cline[13] = 'a' (97)
 (is_all_spaces) cline[14] = '+' (43)
 (is_all_spaces) cline[15] = 'b' (98)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "a+b", a+b'
********************
**print "a+b", a+b**
********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "a+b", a+b'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "a+b", a+b'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "a+b", a+b'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "a+b", a+b'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "a+b", a+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "a+b", a+b'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "a+b", a+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "a+b", a+b'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "a+b", a+b'

   (check_operator) 'print "a+b", a+b' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "a+b", a+b':
   (check_vname) check_vname ret1 ' "a+b", a+b':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "a+b", a+b'

   (check_literal) check_literal:lit='(' idx=5 ' "a+b", a+b'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "a+b", a+b'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "a+b", a+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"a+b", a+b'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "a+b", a+b'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "a+b", a+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "a+b", a+b'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "a+b", a+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "a+b", a+b'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "a+b", a+b'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "a+b", a+b'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "a+b", a+b'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "a+b", a+b'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "a+b", a+b'
   (check_literal) check_literal:After drop space:':' idx=5 ' "a+b", a+b'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "a+b", a+b'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "a+b", a+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "a+b", a+b'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "a+b", a+b'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "a+b", a+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "a+b", a+b'
   (check_literal) check_literal:After while(): "a+b", a+b
   (check_literal) ret1 Match. ' PRINT' == 'print "a+b", a+b'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "a+b", a+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "a+b", a+b'
   (check_literal) check_literal:After while(): "a+b", a+b
   (check_literal) ret1 Match. ' PRINT' == 'print "a+b", a+b'

   (check_expression) ' "a+b", a+b'

    (check_eitem) check_eitem: '"a+b", a+b'

     (check_function)  '"a+b", a+b'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+b", a+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+b", a+b'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+b", a+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+b", a+b'
      (check_literal) check_literal:After while():a+b", a+b
      (check_literal) ret1 Match. ' "' == '"a+b", a+b'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', a+b' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', a+b' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "a+b", a+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "a+b", a+b'
   (check_literal) check_literal:After while(): "a+b", a+b
   (check_literal) ret1 Match. ' PRINT' == 'print "a+b", a+b'
  (scan_print) Before while

   (check_expression) ' "a+b", a+b'

    (check_eitem) check_eitem: '"a+b", a+b'

     (check_function)  '"a+b", a+b'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+b", a+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+b", a+b'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+b", a+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+b", a+b'
      (check_literal) check_literal:After while():a+b", a+b
      (check_literal) ret1 Match. ' "' == '"a+b", a+b'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', a+b' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', a+b' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "a+b", a+b' igncomma:1

    (check_eitem) check_eitem: '"a+b", a+b'

     (check_function)  '"a+b", a+b'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+b", a+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+b", a+b'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+b", a+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+b", a+b'
      (check_literal) check_literal:After while():a+b", a+b
      (check_literal) ret1 Match. ' "' == '"a+b", a+b'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"a+b", a+b'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+b", a+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+b", a+b'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+b", a+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+b", a+b'
      (check_literal) check_literal:After while():a+b", a+b
      (check_literal) ret1 Match. ' "' == '"a+b", a+b'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"a+b", a+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+b", a+b'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"a+b", a+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+b", a+b'
      (check_literal) check_literal:After while():a+b", a+b
      (check_literal) ret1 Match. ' "' == '"a+b", a+b'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"a+b", a+b'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"a+b", a+b'
       (check_literal) check_literal:After while():a+b", a+b
       (check_literal) ret1 Match. ' "' == '"a+b", a+b'
      (scan_string)   (in if) 'a+b", a+b'
      (scan_string)   (in wh) 'a+b", a+b'
      (scan_string)   (in wh) '+b", a+b'
      (scan_string)   (in wh) '+b", a+b'
      (scan_string)   (in wh) 'b", a+b'
      (scan_string)   (in wh) 'b", a+b'
      (scan_string)   (in wh) '", a+b'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"a+b"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"a+b"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"a+b" is not function
token_is_variable: tok:'"a+b"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"a+b" is not function
(   output_string) [U,()] s "a+b"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', a+b' Before while igncomma:1

    (check_operator) ', a+b' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', a+b' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=11 ', a+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=11 ', a+b'
   (check_literal) check_literal:After while(): a+b
   (check_literal) ret1 Match. ' ,' == ', a+b'

   (scan_literal_core) scan_literal_core:lit=' ,' ', a+b'
   (scan_literal_core) scan_literal_core:After drop space:', a+b'
   (scan_literal_core) scan_literal_core:while loop:, a+b
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=12 ' a+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=13 'a+b'
 (check_literal)   ';' != 'a'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"a+b"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :"a+b"   *************
(type_check_stack_push)  type_check_stack_push: '"a+b"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"a+b"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"a+b"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"a+b"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:"a+b"    **********
(type_check_stack_push)  type_check_stack_push: '"a+b"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"a+b"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"a+b"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"a+b"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"a+b"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"a+b"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("a+b")
infix_stack_push: '"a+b"'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"a+b"'
infix_stack_push: 'PRINT("a+b")'
Done

infix_stack_pop: 'PRINT("a+b")'
Infix stack result PRINT("a+b")
(infix_from_rpn) exit  'PRINT("a+b")'
(process_expression_types) ==RINT("a+b")==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 a+b
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 a+b
========================================================
(output_expression_start)

 (check_expression) ' a+b'

  (check_eitem) check_eitem: 'a+b'

   (check_function)  'a+b'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=13 'a+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=13 'a+b'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=13 'a+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=13 'a+b'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+b'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+b'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+b'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=14 '+b'
     (check_literal) check_literal:After drop space:':' idx=14 '+b'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+b'

     (check_operator) 'a+b' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+b':
     (check_vname) check_vname ret1 '+b':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+b'

     (check_literal) check_literal:lit='(' idx=14 '+b'
     (check_literal) check_literal:After drop space:'(' idx=14 '+b'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+b' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) 'b' igncomma:1
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'b'

  (check_function)  'b'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=15 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=15 'b'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=15 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=15 'b'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=16 ''
    (check_literal) check_literal:After drop space:':' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b'

    (check_operator) 'b' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=16 ''
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' a+b' igncomma:1

  (check_eitem) check_eitem: 'a+b'

   (check_function)  'a+b'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=13 'a+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=13 'a+b'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=13 'a+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=13 'a+b'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+b'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+b'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+b'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=14 '+b'
     (check_literal) check_literal:After drop space:':' idx=14 '+b'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+b'

     (check_operator) 'a+b' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+b':
     (check_vname) check_vname ret1 '+b':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+b'

     (check_literal) check_literal:lit='(' idx=14 '+b'
     (check_literal) check_literal:After drop space:'(' idx=14 '+b'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'a+b'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=13 'a+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=13 'a+b'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=13 'a+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=13 'a+b'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a+b'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'a+b'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'a+b'
    (check_textlabel) 'a' is a text label chstr:'a'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
   (check_proc_call) 'a' is text label

    (check_literal) check_literal:lit=':' idx=14 '+b'
    (check_literal) check_literal:After drop space:':' idx=14 '+b'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'a+b'

    (check_operator) 'a+b' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'a+b':
    (check_vname) check_vname ret1 '+b':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+b'

    (check_literal) check_literal:lit='(' idx=14 '+b'
    (check_literal) check_literal:After drop space:'(' idx=14 '+b'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=13 'a+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=13 'a+b'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=13 'a+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=13 'a+b'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'a+b'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'a+b'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'a+b'
   (check_textlabel) 'a' is a text label chstr:'a'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
  (check_proc_call) 'a' is text label

   (check_literal) check_literal:lit=':' idx=14 '+b'
   (check_literal) check_literal:After drop space:':' idx=14 '+b'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'a+b'

   (check_operator) 'a+b' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'a+b':
   (check_vname) check_vname ret1 '+b':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+b'

   (check_literal) check_literal:lit='(' idx=14 '+b'
   (check_literal) check_literal:After drop space:'(' idx=14 '+b'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'a+b' ref_ndeclare:1

  (scan_vname) scan_vname: 'a+b'
  (scan_vname) scan_vname: ret1 'a'
 (scan_variable) scan_variable: '+b' vname='A'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'A' is not other keyword
 (scan_variable) Array test '+b'

  (check_literal) check_literal:lit='(' idx=14 '+b'
  (check_literal) check_literal:After drop space:'(' idx=14 '+b'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='A' Float
(process_token)    Frst:1 T:'A' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'A'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f A
(add_var_info) Name:A Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 A'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+b' Before while igncomma:1

 (check_operator) '+b' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+b' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+b'
 (scan_operator) scan_operator: ret1 'b' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'b' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'b' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'b'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=15 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=15 'b'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=15 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=15 'b'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=16 ''
    (check_literal) check_literal:After drop space:':' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b'

    (check_operator) 'b' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=16 ''
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=15 'b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=15 'b'
  (check_literal)   '%' != 'b'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=15 'b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=15 'b'
  (check_literal)   '"' != 'b'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'b'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'b'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'b'
   (check_textlabel) 'b' is a text label chstr:'b'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
  (check_proc_call) 'b' is text label

   (check_literal) check_literal:lit=':' idx=16 ''
   (check_literal) check_literal:After drop space:':' idx=16 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'b'

   (check_operator) 'b' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'b':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=16 ''
   (check_literal) check_literal:After drop space:'(' idx=16 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'b' ref_ndeclare:1

  (scan_vname) scan_vname: 'b'
  (scan_vname) scan_vname: ret1 'b'
 (scan_variable) scan_variable: '' vname='B'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'B' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=16 ''
  (check_literal) check_literal:After drop space:'(' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='B' Float
(process_token)    Frst:0 T:'B' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'B'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f B
(add_var_info) Name:B Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 B'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ f
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:4 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :A   *************
(type_check_stack_push)  type_check_stack_push: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(process_syntax_tree) *********Processing :B   *************
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print)  N002: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(type_check_stack_display) 001: 'B' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N002) percent:0
(process_syntax_tree) Mutable type (B) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:A    **********
(type_check_stack_push)  type_check_stack_push: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(typecheck_expression)  *** BE:B    **********
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print)  N002: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(type_check_stack_display) 001: 'B' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (A)
Var: A Float NumIdx:0
infix_stack_push: 'A'
(infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
(infix_from_rpn) (+)
infix_stack_pop: 'B'
infix_stack_pop: 'A'
infix_stack_push: '(A + B)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(A + B)'
infix_stack_push: 'PRINT((A + B))'
Done

infix_stack_pop: 'PRINT((A + B))'
Infix stack result PRINT((A + B))
(infix_from_rpn) exit  'PRINT((A + B))'
(process_expression_types) ==RINT((A + B))==
(process_expression_types) 


(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:4
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=16 ''
     (check_literal) check_literal:After drop space:':' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print "a+b", a+b
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=16 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=16 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'b' (98)
 (is_all_spaces) cline[8] = '+' (43)
 (is_all_spaces) cline[9] = 'c' (99)
 (is_all_spaces) cline[10] = '"' (34)
 (is_all_spaces) cline[11] = ',' (44)
 (is_all_spaces) cline[12] = ' ' (32)
 (is_all_spaces) cline[13] = 'b' (98)
 (is_all_spaces) cline[14] = '+' (43)
 (is_all_spaces) cline[15] = 'c' (99)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "b+c", b+c'
********************
**print "b+c", b+c**
********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "b+c", b+c'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "b+c", b+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "b+c", b+c'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "b+c", b+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "b+c", b+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "b+c", b+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "b+c", b+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "b+c", b+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "b+c", b+c'

   (check_operator) 'print "b+c", b+c' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "b+c", b+c':
   (check_vname) check_vname ret1 ' "b+c", b+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "b+c", b+c'

   (check_literal) check_literal:lit='(' idx=5 ' "b+c", b+c'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "b+c", b+c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "b+c", b+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"b+c", b+c'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "b+c", b+c'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "b+c", b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "b+c", b+c'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "b+c", b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "b+c", b+c'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "b+c", b+c'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "b+c", b+c'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "b+c", b+c'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "b+c", b+c'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "b+c", b+c'
   (check_literal) check_literal:After drop space:':' idx=5 ' "b+c", b+c'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "b+c", b+c'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "b+c", b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "b+c", b+c'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "b+c", b+c'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "b+c", b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "b+c", b+c'
   (check_literal) check_literal:After while(): "b+c", b+c
   (check_literal) ret1 Match. ' PRINT' == 'print "b+c", b+c'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "b+c", b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "b+c", b+c'
   (check_literal) check_literal:After while(): "b+c", b+c
   (check_literal) ret1 Match. ' PRINT' == 'print "b+c", b+c'

   (check_expression) ' "b+c", b+c'

    (check_eitem) check_eitem: '"b+c", b+c'

     (check_function)  '"b+c", b+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"b+c", b+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"b+c", b+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"b+c", b+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"b+c", b+c'
      (check_literal) check_literal:After while():b+c", b+c
      (check_literal) ret1 Match. ' "' == '"b+c", b+c'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', b+c' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', b+c' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "b+c", b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "b+c", b+c'
   (check_literal) check_literal:After while(): "b+c", b+c
   (check_literal) ret1 Match. ' PRINT' == 'print "b+c", b+c'
  (scan_print) Before while

   (check_expression) ' "b+c", b+c'

    (check_eitem) check_eitem: '"b+c", b+c'

     (check_function)  '"b+c", b+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"b+c", b+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"b+c", b+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"b+c", b+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"b+c", b+c'
      (check_literal) check_literal:After while():b+c", b+c
      (check_literal) ret1 Match. ' "' == '"b+c", b+c'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', b+c' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', b+c' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "b+c", b+c' igncomma:1

    (check_eitem) check_eitem: '"b+c", b+c'

     (check_function)  '"b+c", b+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"b+c", b+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"b+c", b+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"b+c", b+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"b+c", b+c'
      (check_literal) check_literal:After while():b+c", b+c
      (check_literal) ret1 Match. ' "' == '"b+c", b+c'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"b+c", b+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"b+c", b+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"b+c", b+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"b+c", b+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"b+c", b+c'
      (check_literal) check_literal:After while():b+c", b+c
      (check_literal) ret1 Match. ' "' == '"b+c", b+c'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"b+c", b+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"b+c", b+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"b+c", b+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"b+c", b+c'
      (check_literal) check_literal:After while():b+c", b+c
      (check_literal) ret1 Match. ' "' == '"b+c", b+c'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"b+c", b+c'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"b+c", b+c'
       (check_literal) check_literal:After while():b+c", b+c
       (check_literal) ret1 Match. ' "' == '"b+c", b+c'
      (scan_string)   (in if) 'b+c", b+c'
      (scan_string)   (in wh) 'b+c", b+c'
      (scan_string)   (in wh) '+c", b+c'
      (scan_string)   (in wh) '+c", b+c'
      (scan_string)   (in wh) 'c", b+c'
      (scan_string)   (in wh) 'c", b+c'
      (scan_string)   (in wh) '", b+c'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"b+c"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"b+c"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"b+c" is not function
token_is_variable: tok:'"b+c"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"b+c" is not function
(   output_string) [U,()] s "b+c"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', b+c' Before while igncomma:1

    (check_operator) ', b+c' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', b+c' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=11 ', b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=11 ', b+c'
   (check_literal) check_literal:After while(): b+c
   (check_literal) ret1 Match. ' ,' == ', b+c'

   (scan_literal_core) scan_literal_core:lit=' ,' ', b+c'
   (scan_literal_core) scan_literal_core:After drop space:', b+c'
   (scan_literal_core) scan_literal_core:while loop:, b+c
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=12 ' b+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=13 'b+c'
 (check_literal)   ';' != 'b'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"b+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :"b+c"   *************
(type_check_stack_push)  type_check_stack_push: '"b+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"b+c"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"b+c"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"b+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:"b+c"    **********
(type_check_stack_push)  type_check_stack_push: '"b+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"b+c"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"b+c"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"b+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"b+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"b+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("b+c")
infix_stack_push: '"b+c"'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"b+c"'
infix_stack_push: 'PRINT("b+c")'
Done

infix_stack_pop: 'PRINT("b+c")'
Infix stack result PRINT("b+c")
(infix_from_rpn) exit  'PRINT("b+c")'
(process_expression_types) ==RINT("b+c")==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 b+c
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 b+c
========================================================
(output_expression_start)

 (check_expression) ' b+c'

  (check_eitem) check_eitem: 'b+c'

   (check_function)  'b+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=13 'b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=13 'b+c'
    (check_literal)   '%' != 'b'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=13 'b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=13 'b+c'
    (check_literal)   '"' != 'b'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'b+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'b+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'b+c'
     (check_textlabel) 'b' is a text label chstr:'b'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
    (check_proc_call) 'b' is text label

     (check_literal) check_literal:lit=':' idx=14 '+c'
     (check_literal) check_literal:After drop space:':' idx=14 '+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'b+c'

     (check_operator) 'b+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'b+c':
     (check_vname) check_vname ret1 '+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c'

     (check_literal) check_literal:lit='(' idx=14 '+c'
     (check_literal) check_literal:After drop space:'(' idx=14 '+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) 'c' igncomma:1
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c'

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=15 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=15 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=15 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=15 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=16 ''
    (check_literal) check_literal:After drop space:':' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=16 ''
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' b+c' igncomma:1

  (check_eitem) check_eitem: 'b+c'

   (check_function)  'b+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=13 'b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=13 'b+c'
    (check_literal)   '%' != 'b'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=13 'b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=13 'b+c'
    (check_literal)   '"' != 'b'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'b+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'b+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'b+c'
     (check_textlabel) 'b' is a text label chstr:'b'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
    (check_proc_call) 'b' is text label

     (check_literal) check_literal:lit=':' idx=14 '+c'
     (check_literal) check_literal:After drop space:':' idx=14 '+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'b+c'

     (check_operator) 'b+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'b+c':
     (check_vname) check_vname ret1 '+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c'

     (check_literal) check_literal:lit='(' idx=14 '+c'
     (check_literal) check_literal:After drop space:'(' idx=14 '+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'b+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=13 'b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=13 'b+c'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=13 'b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=13 'b+c'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b+c'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=14 '+c'
    (check_literal) check_literal:After drop space:':' idx=14 '+c'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b+c'

    (check_operator) 'b+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b+c':
    (check_vname) check_vname ret1 '+c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c'

    (check_literal) check_literal:lit='(' idx=14 '+c'
    (check_literal) check_literal:After drop space:'(' idx=14 '+c'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=13 'b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=13 'b+c'
  (check_literal)   '%' != 'b'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=13 'b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=13 'b+c'
  (check_literal)   '"' != 'b'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'b+c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'b+c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'b+c'
   (check_textlabel) 'b' is a text label chstr:'b'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
  (check_proc_call) 'b' is text label

   (check_literal) check_literal:lit=':' idx=14 '+c'
   (check_literal) check_literal:After drop space:':' idx=14 '+c'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'b+c'

   (check_operator) 'b+c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'b+c':
   (check_vname) check_vname ret1 '+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c'

   (check_literal) check_literal:lit='(' idx=14 '+c'
   (check_literal) check_literal:After drop space:'(' idx=14 '+c'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'b+c' ref_ndeclare:1

  (scan_vname) scan_vname: 'b+c'
  (scan_vname) scan_vname: ret1 'b'
 (scan_variable) scan_variable: '+c' vname='B'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'B' is not other keyword
 (scan_variable) Array test '+c'

  (check_literal) check_literal:lit='(' idx=14 '+c'
  (check_literal) check_literal:After drop space:'(' idx=14 '+c'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='B' Float
(process_token)    Frst:1 T:'B' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'B'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f B
(add_var_info) Name:B Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 B'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+c' Before while igncomma:1

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c'
 (scan_operator) scan_operator: ret1 'c' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'c' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=15 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=15 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=15 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=15 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=16 ''
    (check_literal) check_literal:After drop space:':' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=16 ''
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=15 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=15 'c'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=15 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=15 'c'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c'
   (check_textlabel) 'c' is a text label chstr:'c'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
  (check_proc_call) 'c' is text label

   (check_literal) check_literal:lit=':' idx=16 ''
   (check_literal) check_literal:After drop space:':' idx=16 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c'

   (check_operator) 'c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=16 ''
   (check_literal) check_literal:After drop space:'(' idx=16 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c' ref_ndeclare:1

  (scan_vname) scan_vname: 'c'
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '' vname='C'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=16 ''
  (check_literal) check_literal:After drop space:'(' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C' Float
(process_token)    Frst:0 T:'C' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
token_is_variable: tok:'C'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C
(add_var_info) Name:C Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 C'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ f
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:4 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :B   *************
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'B' type:f (1), %:0
(process_syntax_tree) *********Processing :C   *************
(type_check_stack_push)  type_check_stack_push: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print)  N002: 'C' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'B' type:f (1), %:0
(type_check_stack_display) 001: 'C' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N002) percent:0
(process_syntax_tree) Mutable type (C) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:B    **********
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'B' type:f (1), %:0
(typecheck_expression)  *** BE:C    **********
(type_check_stack_push)  type_check_stack_push: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print)  N002: 'C' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'B' type:f (1), %:0
(type_check_stack_display) 001: 'C' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
(infix_from_rpn) (C)
Var: C Float NumIdx:0
infix_stack_push: 'C'
(infix_from_rpn) (+)
infix_stack_pop: 'C'
infix_stack_pop: 'B'
infix_stack_push: '(B + C)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(B + C)'
infix_stack_push: 'PRINT((B + C))'
Done

infix_stack_pop: 'PRINT((B + C))'
Infix stack result PRINT((B + C))
(infix_from_rpn) exit  'PRINT((B + C))'
(process_expression_types) ==RINT((B + C))==
(process_expression_types) 


(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:4
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=16 ''
     (check_literal) check_literal:After drop space:':' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print "b+c", b+c
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=16 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=16 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'a' (97)
 (is_all_spaces) cline[8] = '+' (43)
 (is_all_spaces) cline[9] = 'c' (99)
 (is_all_spaces) cline[10] = '"' (34)
 (is_all_spaces) cline[11] = ',' (44)
 (is_all_spaces) cline[12] = ' ' (32)
 (is_all_spaces) cline[13] = 'a' (97)
 (is_all_spaces) cline[14] = '+' (43)
 (is_all_spaces) cline[15] = 'c' (99)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "a+c", a+c'
********************
**print "a+c", a+c**
********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "a+c", a+c'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "a+c", a+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "a+c", a+c'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "a+c", a+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "a+c", a+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "a+c", a+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "a+c", a+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "a+c", a+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "a+c", a+c'

   (check_operator) 'print "a+c", a+c' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "a+c", a+c':
   (check_vname) check_vname ret1 ' "a+c", a+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "a+c", a+c'

   (check_literal) check_literal:lit='(' idx=5 ' "a+c", a+c'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "a+c", a+c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "a+c", a+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"a+c", a+c'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "a+c", a+c'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "a+c", a+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "a+c", a+c'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "a+c", a+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "a+c", a+c'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "a+c", a+c'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "a+c", a+c'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "a+c", a+c'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "a+c", a+c'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "a+c", a+c'
   (check_literal) check_literal:After drop space:':' idx=5 ' "a+c", a+c'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "a+c", a+c'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "a+c", a+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "a+c", a+c'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "a+c", a+c'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "a+c", a+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "a+c", a+c'
   (check_literal) check_literal:After while(): "a+c", a+c
   (check_literal) ret1 Match. ' PRINT' == 'print "a+c", a+c'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "a+c", a+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "a+c", a+c'
   (check_literal) check_literal:After while(): "a+c", a+c
   (check_literal) ret1 Match. ' PRINT' == 'print "a+c", a+c'

   (check_expression) ' "a+c", a+c'

    (check_eitem) check_eitem: '"a+c", a+c'

     (check_function)  '"a+c", a+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+c", a+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+c", a+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+c", a+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+c", a+c'
      (check_literal) check_literal:After while():a+c", a+c
      (check_literal) ret1 Match. ' "' == '"a+c", a+c'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', a+c' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', a+c' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "a+c", a+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "a+c", a+c'
   (check_literal) check_literal:After while(): "a+c", a+c
   (check_literal) ret1 Match. ' PRINT' == 'print "a+c", a+c'
  (scan_print) Before while

   (check_expression) ' "a+c", a+c'

    (check_eitem) check_eitem: '"a+c", a+c'

     (check_function)  '"a+c", a+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+c", a+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+c", a+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+c", a+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+c", a+c'
      (check_literal) check_literal:After while():a+c", a+c
      (check_literal) ret1 Match. ' "' == '"a+c", a+c'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', a+c' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', a+c' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "a+c", a+c' igncomma:1

    (check_eitem) check_eitem: '"a+c", a+c'

     (check_function)  '"a+c", a+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+c", a+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+c", a+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+c", a+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+c", a+c'
      (check_literal) check_literal:After while():a+c", a+c
      (check_literal) ret1 Match. ' "' == '"a+c", a+c'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"a+c", a+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+c", a+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+c", a+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+c", a+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+c", a+c'
      (check_literal) check_literal:After while():a+c", a+c
      (check_literal) ret1 Match. ' "' == '"a+c", a+c'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"a+c", a+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+c", a+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"a+c", a+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+c", a+c'
      (check_literal) check_literal:After while():a+c", a+c
      (check_literal) ret1 Match. ' "' == '"a+c", a+c'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"a+c", a+c'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"a+c", a+c'
       (check_literal) check_literal:After while():a+c", a+c
       (check_literal) ret1 Match. ' "' == '"a+c", a+c'
      (scan_string)   (in if) 'a+c", a+c'
      (scan_string)   (in wh) 'a+c", a+c'
      (scan_string)   (in wh) '+c", a+c'
      (scan_string)   (in wh) '+c", a+c'
      (scan_string)   (in wh) 'c", a+c'
      (scan_string)   (in wh) 'c", a+c'
      (scan_string)   (in wh) '", a+c'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"a+c"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"a+c"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"a+c" is not function
token_is_variable: tok:'"a+c"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"a+c" is not function
(   output_string) [U,()] s "a+c"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', a+c' Before while igncomma:1

    (check_operator) ', a+c' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', a+c' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=11 ', a+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=11 ', a+c'
   (check_literal) check_literal:After while(): a+c
   (check_literal) ret1 Match. ' ,' == ', a+c'

   (scan_literal_core) scan_literal_core:lit=' ,' ', a+c'
   (scan_literal_core) scan_literal_core:After drop space:', a+c'
   (scan_literal_core) scan_literal_core:while loop:, a+c
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=12 ' a+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=13 'a+c'
 (check_literal)   ';' != 'a'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"a+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :"a+c"   *************
(type_check_stack_push)  type_check_stack_push: '"a+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"a+c"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"a+c"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"a+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:"a+c"    **********
(type_check_stack_push)  type_check_stack_push: '"a+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"a+c"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"a+c"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"a+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"a+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"a+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("a+c")
infix_stack_push: '"a+c"'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"a+c"'
infix_stack_push: 'PRINT("a+c")'
Done

infix_stack_pop: 'PRINT("a+c")'
Infix stack result PRINT("a+c")
(infix_from_rpn) exit  'PRINT("a+c")'
(process_expression_types) ==RINT("a+c")==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 a+c
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 a+c
========================================================
(output_expression_start)

 (check_expression) ' a+c'

  (check_eitem) check_eitem: 'a+c'

   (check_function)  'a+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=13 'a+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=13 'a+c'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=13 'a+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=13 'a+c'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+c'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=14 '+c'
     (check_literal) check_literal:After drop space:':' idx=14 '+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+c'

     (check_operator) 'a+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+c':
     (check_vname) check_vname ret1 '+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c'

     (check_literal) check_literal:lit='(' idx=14 '+c'
     (check_literal) check_literal:After drop space:'(' idx=14 '+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) 'c' igncomma:1
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c'

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=15 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=15 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=15 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=15 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=16 ''
    (check_literal) check_literal:After drop space:':' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=16 ''
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' a+c' igncomma:1

  (check_eitem) check_eitem: 'a+c'

   (check_function)  'a+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=13 'a+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=13 'a+c'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=13 'a+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=13 'a+c'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+c'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=14 '+c'
     (check_literal) check_literal:After drop space:':' idx=14 '+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+c'

     (check_operator) 'a+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+c':
     (check_vname) check_vname ret1 '+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c'

     (check_literal) check_literal:lit='(' idx=14 '+c'
     (check_literal) check_literal:After drop space:'(' idx=14 '+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'a+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=13 'a+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=13 'a+c'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=13 'a+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=13 'a+c'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'a+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'a+c'
    (check_textlabel) 'a' is a text label chstr:'a'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
   (check_proc_call) 'a' is text label

    (check_literal) check_literal:lit=':' idx=14 '+c'
    (check_literal) check_literal:After drop space:':' idx=14 '+c'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'a+c'

    (check_operator) 'a+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'a+c':
    (check_vname) check_vname ret1 '+c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c'

    (check_literal) check_literal:lit='(' idx=14 '+c'
    (check_literal) check_literal:After drop space:'(' idx=14 '+c'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=13 'a+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=13 'a+c'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=13 'a+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=13 'a+c'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'a+c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'a+c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'a+c'
   (check_textlabel) 'a' is a text label chstr:'a'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
  (check_proc_call) 'a' is text label

   (check_literal) check_literal:lit=':' idx=14 '+c'
   (check_literal) check_literal:After drop space:':' idx=14 '+c'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'a+c'

   (check_operator) 'a+c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'a+c':
   (check_vname) check_vname ret1 '+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c'

   (check_literal) check_literal:lit='(' idx=14 '+c'
   (check_literal) check_literal:After drop space:'(' idx=14 '+c'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'a+c' ref_ndeclare:1

  (scan_vname) scan_vname: 'a+c'
  (scan_vname) scan_vname: ret1 'a'
 (scan_variable) scan_variable: '+c' vname='A'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'A' is not other keyword
 (scan_variable) Array test '+c'

  (check_literal) check_literal:lit='(' idx=14 '+c'
  (check_literal) check_literal:After drop space:'(' idx=14 '+c'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='A' Float
(process_token)    Frst:1 T:'A' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'A'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f A
(add_var_info) Name:A Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 A'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+c' Before while igncomma:1

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c'
 (scan_operator) scan_operator: ret1 'c' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'c' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=15 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=15 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=15 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=15 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=16 ''
    (check_literal) check_literal:After drop space:':' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=16 ''
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=15 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=15 'c'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=15 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=15 'c'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c'
   (check_textlabel) 'c' is a text label chstr:'c'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
  (check_proc_call) 'c' is text label

   (check_literal) check_literal:lit=':' idx=16 ''
   (check_literal) check_literal:After drop space:':' idx=16 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c'

   (check_operator) 'c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=16 ''
   (check_literal) check_literal:After drop space:'(' idx=16 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c' ref_ndeclare:1

  (scan_vname) scan_vname: 'c'
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '' vname='C'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=16 ''
  (check_literal) check_literal:After drop space:'(' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C' Float
(process_token)    Frst:0 T:'C' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
token_is_variable: tok:'C'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C
(add_var_info) Name:C Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 C'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ f
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:4 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :A   *************
(type_check_stack_push)  type_check_stack_push: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(process_syntax_tree) *********Processing :C   *************
(type_check_stack_push)  type_check_stack_push: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print)  N002: 'C' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(type_check_stack_display) 001: 'C' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N002) percent:0
(process_syntax_tree) Mutable type (C) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:A    **********
(type_check_stack_push)  type_check_stack_push: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(typecheck_expression)  *** BE:C    **********
(type_check_stack_push)  type_check_stack_push: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print)  N002: 'C' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(type_check_stack_display) 001: 'C' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (A)
Var: A Float NumIdx:0
infix_stack_push: 'A'
(infix_from_rpn) (C)
Var: C Float NumIdx:0
infix_stack_push: 'C'
(infix_from_rpn) (+)
infix_stack_pop: 'C'
infix_stack_pop: 'A'
infix_stack_push: '(A + C)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(A + C)'
infix_stack_push: 'PRINT((A + C))'
Done

infix_stack_pop: 'PRINT((A + C))'
Infix stack result PRINT((A + C))
(infix_from_rpn) exit  'PRINT((A + C))'
(process_expression_types) ==RINT((A + C))==
(process_expression_types) 


(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:4
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=16 ''
     (check_literal) check_literal:After drop space:':' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print "a+c", a+c
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=16 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=16 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = '(' (40)
 (is_all_spaces) cline[8] = 'a' (97)
 (is_all_spaces) cline[9] = '+' (43)
 (is_all_spaces) cline[10] = 'b' (98)
 (is_all_spaces) cline[11] = ')' (41)
 (is_all_spaces) cline[12] = '+' (43)
 (is_all_spaces) cline[13] = 'c' (99)
 (is_all_spaces) cline[14] = '"' (34)
 (is_all_spaces) cline[15] = ' ' (32)
 (is_all_spaces) cline[16] = '(' (40)
 (is_all_spaces) cline[17] = 'a' (97)
 (is_all_spaces) cline[18] = '+' (43)
 (is_all_spaces) cline[19] = 'b' (98)
 (is_all_spaces) cline[20] = ')' (41)
 (is_all_spaces) cline[21] = '+' (43)
 (is_all_spaces) cline[22] = 'c' (99)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "(a+b)+c" (a+b)+c'
***************************
**print "(a+b)+c" (a+b)+c**
***************************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "(a+b)+c" (a+b)+c'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "(a+b)+c" (a+b)+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "(a+b)+c" (a+b)+c'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "(a+b)+c" (a+b)+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "(a+b)+c" (a+b)+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "(a+b)+c" (a+b)+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "(a+b)+c" (a+b)+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "(a+b)+c" (a+b)+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "(a+b)+c" (a+b)+c'

   (check_operator) 'print "(a+b)+c" (a+b)+c' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "(a+b)+c" (a+b)+c':
   (check_vname) check_vname ret1 ' "(a+b)+c" (a+b)+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "(a+b)+c" (a+b)+c'

   (check_literal) check_literal:lit='(' idx=5 ' "(a+b)+c" (a+b)+c'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "(a+b)+c" (a+b)+c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "(a+b)+c" (a+b)+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"(a+b)+c" (a+b)+c'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "(a+b)+c" (a+b)+c'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "(a+b)+c" (a+b)+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "(a+b)+c" (a+b)+c'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "(a+b)+c" (a+b)+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "(a+b)+c" (a+b)+c'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "(a+b)+c" (a+b)+c'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "(a+b)+c" (a+b)+c'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "(a+b)+c" (a+b)+c'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "(a+b)+c" (a+b)+c'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "(a+b)+c" (a+b)+c'
   (check_literal) check_literal:After drop space:':' idx=5 ' "(a+b)+c" (a+b)+c'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "(a+b)+c" (a+b)+c'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "(a+b)+c" (a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "(a+b)+c" (a+b)+c'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "(a+b)+c" (a+b)+c'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "(a+b)+c" (a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "(a+b)+c" (a+b)+c'
   (check_literal) check_literal:After while(): "(a+b)+c" (a+b)+c
   (check_literal) ret1 Match. ' PRINT' == 'print "(a+b)+c" (a+b)+c'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "(a+b)+c" (a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "(a+b)+c" (a+b)+c'
   (check_literal) check_literal:After while(): "(a+b)+c" (a+b)+c
   (check_literal) ret1 Match. ' PRINT' == 'print "(a+b)+c" (a+b)+c'

   (check_expression) ' "(a+b)+c" (a+b)+c'

    (check_eitem) check_eitem: '"(a+b)+c" (a+b)+c'

     (check_function)  '"(a+b)+c" (a+b)+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) check_literal:After while():(a+b)+c" (a+b)+c
      (check_literal) ret1 Match. ' "' == '"(a+b)+c" (a+b)+c'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '(a+b)+c' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 '(a+b)+c' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "(a+b)+c" (a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "(a+b)+c" (a+b)+c'
   (check_literal) check_literal:After while(): "(a+b)+c" (a+b)+c
   (check_literal) ret1 Match. ' PRINT' == 'print "(a+b)+c" (a+b)+c'
  (scan_print) Before while

   (check_expression) ' "(a+b)+c" (a+b)+c'

    (check_eitem) check_eitem: '"(a+b)+c" (a+b)+c'

     (check_function)  '"(a+b)+c" (a+b)+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) check_literal:After while():(a+b)+c" (a+b)+c
      (check_literal) ret1 Match. ' "' == '"(a+b)+c" (a+b)+c'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '(a+b)+c' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 '(a+b)+c' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "(a+b)+c" (a+b)+c' igncomma:1

    (check_eitem) check_eitem: '"(a+b)+c" (a+b)+c'

     (check_function)  '"(a+b)+c" (a+b)+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) check_literal:After while():(a+b)+c" (a+b)+c
      (check_literal) ret1 Match. ' "' == '"(a+b)+c" (a+b)+c'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"(a+b)+c" (a+b)+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) check_literal:After while():(a+b)+c" (a+b)+c
      (check_literal) ret1 Match. ' "' == '"(a+b)+c" (a+b)+c'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) check_literal:After while():(a+b)+c" (a+b)+c
      (check_literal) ret1 Match. ' "' == '"(a+b)+c" (a+b)+c'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"(a+b)+c" (a+b)+c'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"(a+b)+c" (a+b)+c'
       (check_literal) check_literal:After while():(a+b)+c" (a+b)+c
       (check_literal) ret1 Match. ' "' == '"(a+b)+c" (a+b)+c'
      (scan_string)   (in if) '(a+b)+c" (a+b)+c'
      (scan_string)   (in wh) '(a+b)+c" (a+b)+c'
      (scan_string)   (in wh) 'a+b)+c" (a+b)+c'
      (scan_string)   (in wh) 'a+b)+c" (a+b)+c'
      (scan_string)   (in wh) '+b)+c" (a+b)+c'
      (scan_string)   (in wh) '+b)+c" (a+b)+c'
      (scan_string)   (in wh) 'b)+c" (a+b)+c'
      (scan_string)   (in wh) 'b)+c" (a+b)+c'
      (scan_string)   (in wh) ')+c" (a+b)+c'
      (scan_string)   (in wh) ')+c" (a+b)+c'
      (scan_string)   (in wh) '+c" (a+b)+c'
      (scan_string)   (in wh) '+c" (a+b)+c'
      (scan_string)   (in wh) 'c" (a+b)+c'
      (scan_string)   (in wh) 'c" (a+b)+c'
      (scan_string)   (in wh) '" (a+b)+c'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"(a+b)+c"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"(a+b)+c"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"(a+b)+c" is not function
token_is_variable: tok:'"(a+b)+c"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"(a+b)+c" is not function
(   output_string) [U,()] s "(a+b)+c"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ' (a+b)+c' Before while igncomma:1

    (check_operator) '(a+b)+c' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ' (a+b)+c' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=15 ' (a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=16 '(a+b)+c'
   (check_literal)   ',' != '('
   (check_literal) check_literal: ret0
  (scan_print) After scan expression II

   (check_literal) check_literal:lit=' ;' idx=16 '(a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=16 '(a+b)+c'
   (check_literal)   ';' != '('
   (check_literal) check_literal: ret0
  (scan_print) Checking if delimiter was present
  (scan_print) No delimiter present
  (finalise_expression) Finalise expression Buf i:2 buf2 i:0
  (op_stack_finalise) Finalise stack
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"(a+b)+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_syntax_tree) Pass:1
  (process_syntax_tree) *********Processing :"(a+b)+c"   *************
  (type_check_stack_push)  type_check_stack_push: '"(a+b)+c"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: '"(a+b)+c"' type:2 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '"(a+b)+c"' type:s (2), %:0
  (process_syntax_tree) *********Processing :PRINT   *************
  (process_syntax_tree) PRINT type adjust
  (type_check_stack_pop)   type_check_stack_pop: '"(a+b)+c"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:1
  (typecheck_expression)  *** BE:"(a+b)+c"    **********
  (type_check_stack_push)  type_check_stack_push: '"(a+b)+c"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: '"(a+b)+c"' type:2 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '"(a+b)+c"' type:s (2), %:0
  (typecheck_expression)  *** BE:PRINT    **********
  (typecheck_expression) PRINT type adjust
  (type_check_stack_pop)   type_check_stack_pop: '"(a+b)+c"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"(a+b)+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"(a+b)+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_expression_types) 
==INFIX==

  (infix_from_rpn) ("(a+b)+c")
infix_stack_push: '"(a+b)+c"'
  (infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"(a+b)+c"'
infix_stack_push: 'PRINT("(a+b)+c")'
Done

infix_stack_pop: 'PRINT("(a+b)+c")'
Infix stack result PRINT("(a+b)+c")
  (infix_from_rpn) exit  'PRINT("(a+b)+c")'
  (process_expression_types) ==RINT("(a+b)+c")==
  (process_expression_types) 


  (finalise_expression) Finalise expression done.
 (a+b)+c
========================================================
(output_expression_start)
  (process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (1)

  (op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
  (op_stack_print) ------------------

  (finalise_expression) Finalise expression Buf i:0 buf2 i:2
  (op_stack_finalise) Finalise stack
  (op_stack_pop) Pop 'PRINT' type:U 
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (0)

  (op_stack_print) ------------------

  (op_stack_finalise) Popped:PRINT U
  (output_operator) [U,()] U PRINT
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_syntax_tree) Pass:1
  (process_syntax_tree) *********Processing :PRINT   *************
default buf_id
  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:1
  (typecheck_expression)  *** BE:PRINT    **********
default buf_id
  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_expression_types) 
==INFIX==

  (infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
  (infix_from_rpn) exit  '<nl>'
  (process_expression_types) ==nl>==
  (process_expression_types) 


  (finalise_expression) Finalise expression done.
 (a+b)+c
========================================================
(output_expression_start)

   (check_expression) ' (a+b)+c'

    (check_eitem) check_eitem: '(a+b)+c'

     (check_function)  '(a+b)+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=16 '(a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=16 '(a+b)+c'
      (check_literal)   '%' != '('
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=16 '(a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=16 '(a+b)+c'
      (check_literal)   '"' != '('
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'' float:0.000000e+00
       (check_float) check_float: ret0

       (check_integer) check_integer: '(a+b)+c'
       (check_integer) check_integer:ret0

       (check_hex) check_hex: '(a+b)+c'
       (check_hex) check_hex:ret0 not '$'
      (check_number) check_number: ret0

      (check_proc_call) check_proc_call:

       (check_textlabel) '(a+b)+c'
       (check_textlabel) '' is a text label chstr:'@'
       (check_textlabel) Exit char:(
       (check_textlabel) check_textlabel:ret1 Name:'' Type:f
      (check_proc_call) '' is text label

       (check_literal) check_literal:lit=':' idx=16 '(a+b)+c'
       (check_literal) check_literal:After drop space:':' idx=16 '(a+b)+c'
       (check_literal)   ':' != '('
       (check_literal) check_literal: ret0
      (check_proc_call) check_proc_call:ret0

      (check_variable) '(a+b)+c'

       (check_operator) '(a+b)+c' igncomma:1
       (check_operator) ret0:is comma: 32767

       (check_vname) check_vname '(a+b)+c':
       (check_vname) check_vname ret0 '(a+b)+c':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret0

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=16 '(a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=16 '(a+b)+c'
      (check_literal) check_literal:After while():a+b)+c
      (check_literal) ret1 Match. ' (' == '(a+b)+c'

      (check_expression) 'a+b)+c'

       (check_eitem) check_eitem: 'a+b)+c'

        (check_function)  'a+b)+c'
        (check_function) ret0

        (check_atom) check_atom:
        (check_atom) check_atom:Checking for character constant

         (check_literal) check_literal:lit=' %' idx=17 'a+b)+c'
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=17 'a+b)+c'
         (check_literal)   '%' != 'a'
         (check_literal) check_literal: ret0
        (check_atom) check_atom:Checking for string

         (check_literal) check_literal:lit=' "' idx=17 'a+b)+c'
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=17 'a+b)+c'
         (check_literal)   '"' != 'a'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) Fltval:'' float:0.000000e+00
          (check_float) check_float: ret0

          (check_integer) check_integer: 'a+b)+c'
          (check_integer) check_integer:ret0

          (check_hex) check_hex: 'a+b)+c'
          (check_hex) check_hex:ret0 not '$'
         (check_number) check_number: ret0

         (check_proc_call) check_proc_call:

          (check_textlabel) 'a+b)+c'
          (check_textlabel) 'a' is a text label chstr:'a'
          (check_textlabel) Exit char:+
          (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
         (check_proc_call) 'a' is text label

          (check_literal) check_literal:lit=':' idx=18 '+b)+c'
          (check_literal) check_literal:After drop space:':' idx=18 '+b)+c'
          (check_literal)   ':' != '+'
          (check_literal) check_literal: ret0
         (check_proc_call) check_proc_call:ret0

         (check_variable) 'a+b)+c'

          (check_operator) 'a+b)+c' igncomma:1
          (check_operator) ret0:is comma: 32767

          (check_vname) check_vname 'a+b)+c':
          (check_vname) check_vname ret1 '+b)+c':
         (check_variable) Name: ''
         (check_variable) check_variable: Ary test '+b)+c'

          (check_literal) check_literal:lit='(' idx=18 '+b)+c'
          (check_literal) check_literal:After drop space:'(' idx=18 '+b)+c'
          (check_literal)   '(' != '+'
          (check_literal) check_literal: ret0
         (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
        (check_variable) check_variable:ret1 
       (check_atom) ret1
      (check_eitem) ret1

      (check_operator) '+b)+c' igncomma:1
      (check_operator) ret1:is comma: 0

      (check_operator) 'b)+c' igncomma:1
      (check_operator) ret0:is comma: 0

      (check_eitem) check_eitem: 'b)+c'

       (check_function)  'b)+c'
       (check_function) ret0

       (check_atom) check_atom:
       (check_atom) check_atom:Checking for character constant

        (check_literal) check_literal:lit=' %' idx=19 'b)+c'
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=19 'b)+c'
        (check_literal)   '%' != 'b'
        (check_literal) check_literal: ret0
       (check_atom) check_atom:Checking for string

        (check_literal) check_literal:lit=' "' idx=19 'b)+c'
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=19 'b)+c'
        (check_literal)   '"' != 'b'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) Fltval:'' float:0.000000e+00
         (check_float) check_float: ret0

         (check_integer) check_integer: 'b)+c'
         (check_integer) check_integer:ret0

         (check_hex) check_hex: 'b)+c'
         (check_hex) check_hex:ret0 not '$'
        (check_number) check_number: ret0

        (check_proc_call) check_proc_call:

         (check_textlabel) 'b)+c'
         (check_textlabel) 'b' is a text label chstr:'b'
         (check_textlabel) Exit char:)
         (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
        (check_proc_call) 'b' is text label

         (check_literal) check_literal:lit=':' idx=20 ')+c'
         (check_literal) check_literal:After drop space:':' idx=20 ')+c'
         (check_literal)   ':' != ')'
         (check_literal) check_literal: ret0
        (check_proc_call) check_proc_call:ret0

        (check_variable) 'b)+c'

         (check_operator) 'b)+c' igncomma:1
         (check_operator) ret0:is comma: 32767

         (check_vname) check_vname 'b)+c':
         (check_vname) check_vname ret1 ')+c':
        (check_variable) Name: ''
        (check_variable) check_variable: Ary test ')+c'

         (check_literal) check_literal:lit='(' idx=20 ')+c'
         (check_literal) check_literal:After drop space:'(' idx=20 ')+c'
         (check_literal)   '(' != ')'
         (check_literal) check_literal: ret0
        (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
       (check_variable) check_variable:ret1 
      (check_atom) ret1
     (check_eitem) ret1
    (check_expression) n commas now:0

     (check_literal) check_literal:lit=' %' idx=20 ')+c'
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=20 ')+c'
     (check_literal)   '%' != ')'
     (check_literal) check_literal: ret0

     (check_operator) ')+c' igncomma:1
     (check_operator) ret0:is comma: 0
    (check_expression) ret1 ')+c' commas:0

    (check_literal) check_literal:lit=' )' idx=20 ')+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:')' idx=20 ')+c'
    (check_literal) check_literal:After while():+c
    (check_literal) ret1 Match. ' )' == ')+c'
   (check_sub_expr) check_sub_expr: ret1
  (check_eitem) ret1

  (check_operator) '+c' igncomma:1
  (check_operator) ret1:is comma: 0

  (check_operator) 'c' igncomma:1
  (check_operator) ret0:is comma: 0

  (check_eitem) check_eitem: 'c'

   (check_function)  'c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=22 'c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 'c'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=22 'c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 'c'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c'
     (check_textlabel) 'c' is a text label chstr:'c'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
    (check_proc_call) 'c' is text label

     (check_literal) check_literal:lit=':' idx=23 ''
     (check_literal) check_literal:After drop space:':' idx=23 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c'

     (check_operator) 'c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=23 ''
     (check_literal) check_literal:After drop space:'(' idx=23 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=23 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=23 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' (a+b)+c' igncomma:1

  (check_eitem) check_eitem: '(a+b)+c'

   (check_function)  '(a+b)+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=16 '(a+b)+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=16 '(a+b)+c'
    (check_literal)   '%' != '('
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=16 '(a+b)+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=16 '(a+b)+c'
    (check_literal)   '"' != '('
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: '(a+b)+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: '(a+b)+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) '(a+b)+c'
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:(
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=16 '(a+b)+c'
     (check_literal) check_literal:After drop space:':' idx=16 '(a+b)+c'
     (check_literal)   ':' != '('
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) '(a+b)+c'

     (check_operator) '(a+b)+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '(a+b)+c':
     (check_vname) check_vname ret0 '(a+b)+c':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=16 '(a+b)+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=16 '(a+b)+c'
    (check_literal) check_literal:After while():a+b)+c
    (check_literal) ret1 Match. ' (' == '(a+b)+c'

    (check_expression) 'a+b)+c'

     (check_eitem) check_eitem: 'a+b)+c'

      (check_function)  'a+b)+c'
      (check_function) ret0

      (check_atom) check_atom:
      (check_atom) check_atom:Checking for character constant

       (check_literal) check_literal:lit=' %' idx=17 'a+b)+c'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=17 'a+b)+c'
       (check_literal)   '%' != 'a'
       (check_literal) check_literal: ret0
      (check_atom) check_atom:Checking for string

       (check_literal) check_literal:lit=' "' idx=17 'a+b)+c'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=17 'a+b)+c'
       (check_literal)   '"' != 'a'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) Fltval:'' float:0.000000e+00
        (check_float) check_float: ret0

        (check_integer) check_integer: 'a+b)+c'
        (check_integer) check_integer:ret0

        (check_hex) check_hex: 'a+b)+c'
        (check_hex) check_hex:ret0 not '$'
       (check_number) check_number: ret0

       (check_proc_call) check_proc_call:

        (check_textlabel) 'a+b)+c'
        (check_textlabel) 'a' is a text label chstr:'a'
        (check_textlabel) Exit char:+
        (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
       (check_proc_call) 'a' is text label

        (check_literal) check_literal:lit=':' idx=18 '+b)+c'
        (check_literal) check_literal:After drop space:':' idx=18 '+b)+c'
        (check_literal)   ':' != '+'
        (check_literal) check_literal: ret0
       (check_proc_call) check_proc_call:ret0

       (check_variable) 'a+b)+c'

        (check_operator) 'a+b)+c' igncomma:1
        (check_operator) ret0:is comma: 32767

        (check_vname) check_vname 'a+b)+c':
        (check_vname) check_vname ret1 '+b)+c':
       (check_variable) Name: ''
       (check_variable) check_variable: Ary test '+b)+c'

        (check_literal) check_literal:lit='(' idx=18 '+b)+c'
        (check_literal) check_literal:After drop space:'(' idx=18 '+b)+c'
        (check_literal)   '(' != '+'
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
      (check_variable) check_variable:ret1 
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '+b)+c' igncomma:1
    (check_operator) ret1:is comma: 0

    (check_operator) 'b)+c' igncomma:1
    (check_operator) ret0:is comma: 0

    (check_eitem) check_eitem: 'b)+c'

     (check_function)  'b)+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=19 'b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=19 'b)+c'
      (check_literal)   '%' != 'b'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=19 'b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=19 'b)+c'
      (check_literal)   '"' != 'b'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'' float:0.000000e+00
       (check_float) check_float: ret0

       (check_integer) check_integer: 'b)+c'
       (check_integer) check_integer:ret0

       (check_hex) check_hex: 'b)+c'
       (check_hex) check_hex:ret0 not '$'
      (check_number) check_number: ret0

      (check_proc_call) check_proc_call:

       (check_textlabel) 'b)+c'
       (check_textlabel) 'b' is a text label chstr:'b'
       (check_textlabel) Exit char:)
       (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
      (check_proc_call) 'b' is text label

       (check_literal) check_literal:lit=':' idx=20 ')+c'
       (check_literal) check_literal:After drop space:':' idx=20 ')+c'
       (check_literal)   ':' != ')'
       (check_literal) check_literal: ret0
      (check_proc_call) check_proc_call:ret0

      (check_variable) 'b)+c'

       (check_operator) 'b)+c' igncomma:1
       (check_operator) ret0:is comma: 32767

       (check_vname) check_vname 'b)+c':
       (check_vname) check_vname ret1 ')+c':
      (check_variable) Name: ''
      (check_variable) check_variable: Ary test ')+c'

       (check_literal) check_literal:lit='(' idx=20 ')+c'
       (check_literal) check_literal:After drop space:'(' idx=20 ')+c'
       (check_literal)   '(' != ')'
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) ret1
   (check_eitem) ret1
  (check_expression) n commas now:0

   (check_literal) check_literal:lit=' %' idx=20 ')+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=20 ')+c'
   (check_literal)   '%' != ')'
   (check_literal) check_literal: ret0

   (check_operator) ')+c' igncomma:1
   (check_operator) ret0:is comma: 0
  (check_expression) ret1 ')+c' commas:0

  (check_literal) check_literal:lit=' )' idx=20 ')+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:')' idx=20 ')+c'
  (check_literal) check_literal:After while():+c
  (check_literal) ret1 Match. ' )' == ')+c'
 (check_sub_expr) check_sub_expr: ret1
(check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  '(a+b)+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=16 '(a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=16 '(a+b)+c'
   (check_literal)   '%' != '('
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=16 '(a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=16 '(a+b)+c'
   (check_literal)   '"' != '('
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: '(a+b)+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: '(a+b)+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) '(a+b)+c'
    (check_textlabel) '' is a text label chstr:'@'
    (check_textlabel) Exit char:(
    (check_textlabel) check_textlabel:ret1 Name:'' Type:f
   (check_proc_call) '' is text label

    (check_literal) check_literal:lit=':' idx=16 '(a+b)+c'
    (check_literal) check_literal:After drop space:':' idx=16 '(a+b)+c'
    (check_literal)   ':' != '('
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) '(a+b)+c'

    (check_operator) '(a+b)+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname '(a+b)+c':
    (check_vname) check_vname ret0 '(a+b)+c':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret0

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=16 '(a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=16 '(a+b)+c'
   (check_literal) check_literal:After while():a+b)+c
   (check_literal) ret1 Match. ' (' == '(a+b)+c'

   (check_expression) 'a+b)+c'

    (check_eitem) check_eitem: 'a+b)+c'

     (check_function)  'a+b)+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=17 'a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=17 'a+b)+c'
      (check_literal)   '%' != 'a'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=17 'a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=17 'a+b)+c'
      (check_literal)   '"' != 'a'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'' float:0.000000e+00
       (check_float) check_float: ret0

       (check_integer) check_integer: 'a+b)+c'
       (check_integer) check_integer:ret0

       (check_hex) check_hex: 'a+b)+c'
       (check_hex) check_hex:ret0 not '$'
      (check_number) check_number: ret0

      (check_proc_call) check_proc_call:

       (check_textlabel) 'a+b)+c'
       (check_textlabel) 'a' is a text label chstr:'a'
       (check_textlabel) Exit char:+
       (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
      (check_proc_call) 'a' is text label

       (check_literal) check_literal:lit=':' idx=18 '+b)+c'
       (check_literal) check_literal:After drop space:':' idx=18 '+b)+c'
       (check_literal)   ':' != '+'
       (check_literal) check_literal: ret0
      (check_proc_call) check_proc_call:ret0

      (check_variable) 'a+b)+c'

       (check_operator) 'a+b)+c' igncomma:1
       (check_operator) ret0:is comma: 32767

       (check_vname) check_vname 'a+b)+c':
       (check_vname) check_vname ret1 '+b)+c':
      (check_variable) Name: ''
      (check_variable) check_variable: Ary test '+b)+c'

       (check_literal) check_literal:lit='(' idx=18 '+b)+c'
       (check_literal) check_literal:After drop space:'(' idx=18 '+b)+c'
       (check_literal)   '(' != '+'
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) ret1
   (check_eitem) ret1

   (check_operator) '+b)+c' igncomma:1
   (check_operator) ret1:is comma: 0

   (check_operator) 'b)+c' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_eitem) check_eitem: 'b)+c'

    (check_function)  'b)+c'
    (check_function) ret0

    (check_atom) check_atom:
    (check_atom) check_atom:Checking for character constant

     (check_literal) check_literal:lit=' %' idx=19 'b)+c'
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=19 'b)+c'
     (check_literal)   '%' != 'b'
     (check_literal) check_literal: ret0
    (check_atom) check_atom:Checking for string

     (check_literal) check_literal:lit=' "' idx=19 'b)+c'
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=19 'b)+c'
     (check_literal)   '"' != 'b'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) Fltval:'' float:0.000000e+00
      (check_float) check_float: ret0

      (check_integer) check_integer: 'b)+c'
      (check_integer) check_integer:ret0

      (check_hex) check_hex: 'b)+c'
      (check_hex) check_hex:ret0 not '$'
     (check_number) check_number: ret0

     (check_proc_call) check_proc_call:

      (check_textlabel) 'b)+c'
      (check_textlabel) 'b' is a text label chstr:'b'
      (check_textlabel) Exit char:)
      (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
     (check_proc_call) 'b' is text label

      (check_literal) check_literal:lit=':' idx=20 ')+c'
      (check_literal) check_literal:After drop space:':' idx=20 ')+c'
      (check_literal)   ':' != ')'
      (check_literal) check_literal: ret0
     (check_proc_call) check_proc_call:ret0

     (check_variable) 'b)+c'

      (check_operator) 'b)+c' igncomma:1
      (check_operator) ret0:is comma: 32767

      (check_vname) check_vname 'b)+c':
      (check_vname) check_vname ret1 ')+c':
     (check_variable) Name: ''
     (check_variable) check_variable: Ary test ')+c'

      (check_literal) check_literal:lit='(' idx=20 ')+c'
      (check_literal) check_literal:After drop space:'(' idx=20 ')+c'
      (check_literal)   '(' != ')'
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) ret1
  (check_eitem) ret1
 (check_expression) n commas now:0

  (check_literal) check_literal:lit=' %' idx=20 ')+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=20 ')+c'
  (check_literal)   '%' != ')'
  (check_literal) check_literal: ret0

  (check_operator) ')+c' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret1 ')+c' commas:0

 (check_literal) check_literal:lit=' )' idx=20 ')+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:')' idx=20 ')+c'
 (check_literal) check_literal:After while():+c
 (check_literal) ret1 Match. ' )' == ')+c'
(check_sub_expr) check_sub_expr: ret1

 (scan_sub_expr) scan_sub_expr:

  (scan_literal_core) scan_literal_core:lit=' (' '(a+b)+c'
  (scan_literal_core) scan_literal_core:After drop space:'(a+b)+c'
  (scan_literal_core) scan_literal_core:while loop:(a+b)+c
  (scan_literal_core) ret1
 (process_token)    Frst:1 T:'(' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
(output_sub_start)
 Push:'('
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: ( type:U id:EXP_BUFF_ID_SUB_START
 (op_stack_print) ------------------

 (scan_literal) ret1
(scan_sub_expr) Before scan expression

 (scan_expression) 'a+b)+c' igncomma:0

  (check_eitem) check_eitem: 'a+b)+c'

   (check_function)  'a+b)+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=17 'a+b)+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=17 'a+b)+c'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=17 'a+b)+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=17 'a+b)+c'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+b)+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+b)+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+b)+c'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=18 '+b)+c'
     (check_literal) check_literal:After drop space:':' idx=18 '+b)+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+b)+c'

     (check_operator) 'a+b)+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+b)+c':
     (check_vname) check_vname ret1 '+b)+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+b)+c'

     (check_literal) check_literal:lit='(' idx=18 '+b)+c'
     (check_literal) check_literal:After drop space:'(' idx=18 '+b)+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'a+b)+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=17 'a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=17 'a+b)+c'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=17 'a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=17 'a+b)+c'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a+b)+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'a+b)+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'a+b)+c'
    (check_textlabel) 'a' is a text label chstr:'a'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
   (check_proc_call) 'a' is text label

    (check_literal) check_literal:lit=':' idx=18 '+b)+c'
    (check_literal) check_literal:After drop space:':' idx=18 '+b)+c'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'a+b)+c'

    (check_operator) 'a+b)+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'a+b)+c':
    (check_vname) check_vname ret1 '+b)+c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+b)+c'

    (check_literal) check_literal:lit='(' idx=18 '+b)+c'
    (check_literal) check_literal:After drop space:'(' idx=18 '+b)+c'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=17 'a+b)+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=17 'a+b)+c'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=17 'a+b)+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=17 'a+b)+c'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'a+b)+c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'a+b)+c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'a+b)+c'
   (check_textlabel) 'a' is a text label chstr:'a'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
  (check_proc_call) 'a' is text label

   (check_literal) check_literal:lit=':' idx=18 '+b)+c'
   (check_literal) check_literal:After drop space:':' idx=18 '+b)+c'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'a+b)+c'

   (check_operator) 'a+b)+c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'a+b)+c':
   (check_vname) check_vname ret1 '+b)+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+b)+c'

   (check_literal) check_literal:lit='(' idx=18 '+b)+c'
   (check_literal) check_literal:After drop space:'(' idx=18 '+b)+c'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'a+b)+c' ref_ndeclare:1

  (scan_vname) scan_vname: 'a+b)+c'
  (scan_vname) scan_vname: ret1 'a'
 (scan_variable) scan_variable: '+b)+c' vname='A'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'A' is not other keyword
 (scan_variable) Array test '+b)+c'

  (check_literal) check_literal:lit='(' idx=18 '+b)+c'
  (check_literal) check_literal:After drop space:'(' idx=18 '+b)+c'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='A' Float
(process_token)    Frst:0 T:'A' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'A'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
process_token:type:f
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,(U)] f A
(add_var_info) Name:A Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 A'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+b)+c' Before while igncomma:0

 (check_operator) '+b)+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '+b)+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+b)+c'

  (check_literal) check_literal:lit=' ,' idx=18 '+b)+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=18 '+b)+c'
  (check_literal)   ',' != '+'
  (check_literal) check_literal: ret0
 (scan_operator) scan_operator: ret1 'b)+c' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:(
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (2)

(op_stack_print) 000: ( type:U id:EXP_BUFF_ID_SUB_START
(op_stack_print) 001: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'b)+c' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) 'b)+c' Before scan_eitem igncomma:0

 (scan_eitem) scan_eitem:

  (check_function)  'b)+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=19 'b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=19 'b)+c'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=19 'b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=19 'b)+c'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b)+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b)+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b)+c'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:)
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=20 ')+c'
    (check_literal) check_literal:After drop space:':' idx=20 ')+c'
    (check_literal)   ':' != ')'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b)+c'

    (check_operator) 'b)+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b)+c':
    (check_vname) check_vname ret1 ')+c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ')+c'

    (check_literal) check_literal:lit='(' idx=20 ')+c'
    (check_literal) check_literal:After drop space:'(' idx=20 ')+c'
    (check_literal)   '(' != ')'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=19 'b)+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=19 'b)+c'
  (check_literal)   '%' != 'b'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=19 'b)+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=19 'b)+c'
  (check_literal)   '"' != 'b'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'b)+c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'b)+c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'b)+c'
   (check_textlabel) 'b' is a text label chstr:'b'
   (check_textlabel) Exit char:)
   (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
  (check_proc_call) 'b' is text label

   (check_literal) check_literal:lit=':' idx=20 ')+c'
   (check_literal) check_literal:After drop space:':' idx=20 ')+c'
   (check_literal)   ':' != ')'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'b)+c'

   (check_operator) 'b)+c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'b)+c':
   (check_vname) check_vname ret1 ')+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ')+c'

   (check_literal) check_literal:lit='(' idx=20 ')+c'
   (check_literal) check_literal:After drop space:'(' idx=20 ')+c'
   (check_literal)   '(' != ')'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'b)+c' ref_ndeclare:1

  (scan_vname) scan_vname: 'b)+c'
  (scan_vname) scan_vname: ret1 'b'
 (scan_variable) scan_variable: ')+c' vname='B'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'B' is not other keyword
 (scan_variable) Array test ')+c'

  (check_literal) check_literal:lit='(' idx=20 ')+c'
  (check_literal) check_literal:After drop space:'(' idx=20 ')+c'
  (check_literal)   '(' != ')'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='B' Float
(process_token)    Frst:0 T:'B' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'B'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,(U)] f B
(add_var_info) Name:B Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 B'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=20 ')+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=20 ')+c'
 (check_literal)   '%' != ')'
 (check_literal) check_literal: ret0

 (check_operator) ')+c' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 ')+c' commas:0
(scan_sub_expr) scan expr ok, scanning for )

 (scan_literal_core) scan_literal_core:lit=' )' ')+c'
 (scan_literal_core) scan_literal_core:After drop space:')+c'
 (scan_literal_core) scan_literal_core:while loop:)+c
 (scan_literal_core) ret1
(process_token)    Frst:0 T:')' toktype:i exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) 
Pop 3
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: ( type:U id:EXP_BUFF_ID_SUB_START
(op_stack_print) ------------------

(output_operator) [f,(U)] f +
Pop 4
(op_stack_pop) Pop '(' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(  output_sub_end)
(  output_sub_end)
(scan_literal) ret1
(scan_sub_expr) ret1
(scan_expression) '+c' Before while igncomma:1

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c'
 (scan_operator) scan_operator: ret1 'c' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:U bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:U id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'c' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=22 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=22 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=22 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=22 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=23 ''
    (check_literal) check_literal:After drop space:':' idx=23 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=23 ''
    (check_literal) check_literal:After drop space:'(' idx=23 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=22 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=22 'c'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=22 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=22 'c'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c'
   (check_textlabel) 'c' is a text label chstr:'c'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
  (check_proc_call) 'c' is text label

   (check_literal) check_literal:lit=':' idx=23 ''
   (check_literal) check_literal:After drop space:':' idx=23 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c'

   (check_operator) 'c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=23 ''
   (check_literal) check_literal:After drop space:'(' idx=23 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c' ref_ndeclare:1

  (scan_vname) scan_vname: 'c'
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '' vname='C'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=23 ''
  (check_literal) check_literal:After drop space:'(' idx=23 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C' Float
(process_token)    Frst:0 T:'C' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
token_is_variable: tok:'C'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
process_token:type:f
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,()] f C
(add_var_info) Name:C Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 C'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=23 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=23 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ U
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=23 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=23 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=23 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=23 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:9 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_SUB_START                  ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N006       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  2: 5 4  nb 0:()
N007       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  2: 6 1  nb 0:()
N000       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N000       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :   *************
(type_check_stack_display) Type Check Stack (0)
(process_syntax_tree) *********Processing :A   *************
(type_check_stack_push)  type_check_stack_push: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N002: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(process_syntax_tree) *********Processing :B   *************
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N002: 'A' type:1 %:0
(type_check_stack_print)  N003: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(type_check_stack_display) 001: 'B' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N002: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N003) percent:0
(process_syntax_tree) Mutable type (B) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N004: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :   *************
(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :   *************
(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :C   *************
(type_check_stack_push)  type_check_stack_push: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N004: '000' type:1 %:0
(type_check_stack_print)  N007: 'C' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: '000' type:f (1), %:0
(type_check_stack_display) 001: 'C' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N004: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N007) percent:0
(process_syntax_tree) Mutable type (C) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N008: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:    **********
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression)  *** BE:A    **********
(type_check_stack_push)  type_check_stack_push: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N002: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(typecheck_expression)  *** BE:B    **********
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N002: 'A' type:1 %:0
(type_check_stack_print)  N003: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(type_check_stack_display) 001: 'B' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N002: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N004: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:    **********
(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:    **********
(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:C    **********
(type_check_stack_push)  type_check_stack_push: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N004: '000' type:1 %:0
(type_check_stack_print)  N007: 'C' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: '000' type:f (1), %:0
(type_check_stack_display) 001: 'C' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N004: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N008: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_SUB_START                  ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N006       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  2: 5 4  nb 0:()
N007       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N008       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 7 4  nb 0:()
N009       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_SUB_START                  ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N006       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  2: 5 4  nb 0:()
N007       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N008       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 7 4  nb 0:()
N009       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ()
(infix_from_rpn) (A)
Var: A Float NumIdx:0
infix_stack_push: 'A'
(infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
(infix_from_rpn) (+)
infix_stack_pop: 'B'
infix_stack_pop: 'A'
infix_stack_push: '(A + B)'
(infix_from_rpn) ()
(infix_from_rpn) ()
(infix_from_rpn) (C)
Var: C Float NumIdx:0
infix_stack_push: 'C'
(infix_from_rpn) (+)
infix_stack_pop: 'C'
infix_stack_pop: '(A + B)'
infix_stack_push: '((A + B) + C)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '((A + B) + C)'
infix_stack_push: 'PRINT(((A + B) + C))'
Done

infix_stack_pop: 'PRINT(((A + B) + C))'
Infix stack result PRINT(((A + B) + C))
(infix_from_rpn) exit  'PRINT(((A + B) + C))'
(process_expression_types) ==RINT(((A + B) + C))==
(process_expression_types) 


(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:9
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=23 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=23 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=23 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=23 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=23 ''
     (check_literal) check_literal:After drop space:':' idx=23 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=23 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=23 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=23 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=23 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=23 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=23 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=23 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=23 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print "(a+b)+c" (a+b)+c
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=23 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=23 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=23 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'a' (97)
 (is_all_spaces) cline[1] = 'b' (98)
 (is_all_spaces) cline[2] = ' ' (32)
 (is_all_spaces) cline[3] = '=' (61)
 (is_all_spaces) cline[4] = ' ' (32)
 (is_all_spaces) cline[5] = 'a' (97)
 (is_all_spaces) cline[6] = '+' (43)
 (is_all_spaces) cline[7] = 'b' (98)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'ab = a+b'
************
**ab = a+b**
************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'ab = a+b'
 (check_literal) check_literal:After drop space:'REM' idx=0 'ab = a+b'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'ab = a+b'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'ab = a+b'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'ab = a+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'ab = a+b'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'ab = a+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'ab = a+b'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'ab = a+b'

   (check_operator) 'ab = a+b' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'ab = a+b':
   (check_vname) check_vname ret1 ' = a+b':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' = a+b'

   (check_literal) check_literal:lit='(' idx=2 ' = a+b'
   (check_literal) check_literal:After drop space:'(' idx=2 ' = a+b'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=2 ' = a+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=3 '= a+b'
 (check_literal) check_literal:After while(): a+b
 (check_literal) ret1 Match. ' =' == ' = a+b'

 (check_expression) ' a+b'

  (check_eitem) check_eitem: 'a+b'

   (check_function)  'a+b'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=5 'a+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a+b'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=5 'a+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a+b'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+b'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+b'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+b'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=6 '+b'
     (check_literal) check_literal:After drop space:':' idx=6 '+b'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+b'

     (check_operator) 'a+b' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+b':
     (check_vname) check_vname ret1 '+b':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+b'

     (check_literal) check_literal:lit='(' idx=6 '+b'
     (check_literal) check_literal:After drop space:'(' idx=6 '+b'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+b' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) 'b' igncomma:0
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'b'

  (check_function)  'b'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=7 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=7 'b'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=7 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=7 'b'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=8 ''
    (check_literal) check_literal:After drop space:':' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b'

    (check_operator) 'b' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=8 ''
    (check_literal) check_literal:After drop space:'(' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'ab = a+b' ref_ndeclare:1

   (scan_vname) scan_vname: 'ab = a+b'
   (scan_vname) scan_vname: ret1 'ab'
  (scan_variable) scan_variable: ' = a+b' vname='AB'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'AB' is not other keyword
  (scan_variable) Array test ' = a+b'

   (check_literal) check_literal:lit='(' idx=2 ' = a+b'
   (check_literal) check_literal:After drop space:'(' idx=2 ' = a+b'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='AB' Float
 (process_token)    Frst:1 T:'AB' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'AB'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AB is not function
token_is_variable: tok:'AB'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AB is not function
(init_get_name) 
init_get_name:'AB'
(init_get_name) 
init_get_name:'AB'
(get_name) 
get_name:gn:'AB'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f AB
(add_var_info) Name:AB Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                AB'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' ' = a+b'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= a+b'
 (scan_assignment_equals) scan_assignment_equals:while loop:= a+b
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' a+b' igncomma:0

  (check_eitem) check_eitem: 'a+b'

   (check_function)  'a+b'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=5 'a+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a+b'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=5 'a+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a+b'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+b'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+b'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+b'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=6 '+b'
     (check_literal) check_literal:After drop space:':' idx=6 '+b'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+b'

     (check_operator) 'a+b' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+b':
     (check_vname) check_vname ret1 '+b':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+b'

     (check_literal) check_literal:lit='(' idx=6 '+b'
     (check_literal) check_literal:After drop space:'(' idx=6 '+b'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'a+b'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=5 'a+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'a+b'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=5 'a+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'a+b'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a+b'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'a+b'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'a+b'
    (check_textlabel) 'a' is a text label chstr:'a'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
   (check_proc_call) 'a' is text label

    (check_literal) check_literal:lit=':' idx=6 '+b'
    (check_literal) check_literal:After drop space:':' idx=6 '+b'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'a+b'

    (check_operator) 'a+b' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'a+b':
    (check_vname) check_vname ret1 '+b':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+b'

    (check_literal) check_literal:lit='(' idx=6 '+b'
    (check_literal) check_literal:After drop space:'(' idx=6 '+b'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=5 'a+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=5 'a+b'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=5 'a+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=5 'a+b'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'a+b'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'a+b'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'a+b'
   (check_textlabel) 'a' is a text label chstr:'a'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
  (check_proc_call) 'a' is text label

   (check_literal) check_literal:lit=':' idx=6 '+b'
   (check_literal) check_literal:After drop space:':' idx=6 '+b'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'a+b'

   (check_operator) 'a+b' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'a+b':
   (check_vname) check_vname ret1 '+b':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+b'

   (check_literal) check_literal:lit='(' idx=6 '+b'
   (check_literal) check_literal:After drop space:'(' idx=6 '+b'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'a+b' ref_ndeclare:1

  (scan_vname) scan_vname: 'a+b'
  (scan_vname) scan_vname: ret1 'a'
 (scan_variable) scan_variable: '+b' vname='A'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'A' is not other keyword
 (scan_variable) Array test '+b'

  (check_literal) check_literal:lit='(' idx=6 '+b'
  (check_literal) check_literal:After drop space:'(' idx=6 '+b'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='A' Float
(process_token)    Frst:0 T:'A' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'A'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f A
(add_var_info) Name:A Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 A'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+b' Before while igncomma:0

 (check_operator) '+b' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '+b' igncomma:0
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+b'

  (check_literal) check_literal:lit=' ,' idx=6 '+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=6 '+b'
  (check_literal)   ',' != '+'
  (check_literal) check_literal: ret0
 (scan_operator) scan_operator: ret1 'b' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name::=
(process_token) 
opr1:3 opr2:1
(operator_precedence) 
:= is operator
(operator_precedence) 
:= is operator
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (2)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) 001: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'b' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) 'b' Before scan_eitem igncomma:0

 (scan_eitem) scan_eitem:

  (check_function)  'b'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=7 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=7 'b'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=7 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=7 'b'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=8 ''
    (check_literal) check_literal:After drop space:':' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b'

    (check_operator) 'b' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=8 ''
    (check_literal) check_literal:After drop space:'(' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=7 'b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=7 'b'
  (check_literal)   '%' != 'b'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=7 'b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=7 'b'
  (check_literal)   '"' != 'b'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'b'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'b'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'b'
   (check_textlabel) 'b' is a text label chstr:'b'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
  (check_proc_call) 'b' is text label

   (check_literal) check_literal:lit=':' idx=8 ''
   (check_literal) check_literal:After drop space:':' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'b'

   (check_operator) 'b' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'b':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=8 ''
   (check_literal) check_literal:After drop space:'(' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'b' ref_ndeclare:1

  (scan_vname) scan_vname: 'b'
  (scan_vname) scan_vname: ret1 'b'
 (scan_variable) scan_variable: '' vname='B'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'B' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=8 ''
  (check_literal) check_literal:After drop space:'(' idx=8 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='B' Float
(process_token)    Frst:0 T:'B' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'B'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f B
(add_var_info) Name:B Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 B'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(add_var_info) Name:AB Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_assignment) scan_assignment: ret1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:3 buf2 i:0
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop '+' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (op_stack_finalise) Popped:+ f
 (output_operator) [f,()] f +
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AB' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing :AB   *************
 (type_check_stack_push)  type_check_stack_push: 'AB'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (process_syntax_tree) *********Processing :A   *************
 (type_check_stack_push)  type_check_stack_push: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (process_syntax_tree) *********Processing :B   *************
 (type_check_stack_push)  type_check_stack_push: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (type_check_stack_display) 002: 'B' type:f (1), %:0
 (process_syntax_tree) *********Processing :+   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator + %conv:1
 (type_check_stack_pop)   type_check_stack_pop: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:1
 (process_syntax_tree) Percent convertible operator op1 (N003) percent:0
 (process_syntax_tree) Mutable type (B) f f
 (process_syntax_tree) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'AB'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (000) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE:AB    **********
 (type_check_stack_push)  type_check_stack_push: 'AB'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (typecheck_expression)  *** BE:A    **********
 (type_check_stack_push)  type_check_stack_push: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (typecheck_expression)  *** BE:B    **********
 (type_check_stack_push)  type_check_stack_push: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (type_check_stack_display) 002: 'B' type:f (1), %:0
 (typecheck_expression)  *** BE:+    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator +
 (type_check_stack_pop)   type_check_stack_pop: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (+) f f
 (typecheck_expression) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'AB'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AB' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AB' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (AB)
Var: AB Float NumIdx:0
infix_stack_push: 'AB'
 (infix_from_rpn) (A)
Var: A Float NumIdx:0
infix_stack_push: 'A'
 (infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
 (infix_from_rpn) (+)
infix_stack_pop: 'B'
infix_stack_pop: 'A'
infix_stack_push: '(A + B)'
 (infix_from_rpn) (:=)
infix_stack_pop: '(A + B)'
infix_stack_pop: 'AB'
infix_stack_push: '(AB := (A + B))'
Done

infix_stack_pop: '(AB := (A + B))'
Infix stack result (AB := (A + B))
 (infix_from_rpn) exit  'AB := (A + B)'
 (process_expression_types) ==AB := (A + B)==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
ab = a+b
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=8 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=8 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=8 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'b' (98)
 (is_all_spaces) cline[1] = 'c' (99)
 (is_all_spaces) cline[2] = ' ' (32)
 (is_all_spaces) cline[3] = '=' (61)
 (is_all_spaces) cline[4] = ' ' (32)
 (is_all_spaces) cline[5] = 'b' (98)
 (is_all_spaces) cline[6] = '+' (43)
 (is_all_spaces) cline[7] = 'c' (99)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'bc = b+c'
************
**bc = b+c**
************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'bc = b+c'
 (check_literal) check_literal:After drop space:'REM' idx=0 'bc = b+c'
 (check_literal)   'R' != 'b'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'bc = b+c'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'bc = b+c'
 (check_literal)   'R' != 'b'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'bc = b+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'bc = b+c'
 (check_literal)   'R' != 'b'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'bc = b+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'bc = b+c'
 (check_literal)   'R' != 'b'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'bc = b+c'

   (check_operator) 'bc = b+c' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'bc = b+c':
   (check_vname) check_vname ret1 ' = b+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' = b+c'

   (check_literal) check_literal:lit='(' idx=2 ' = b+c'
   (check_literal) check_literal:After drop space:'(' idx=2 ' = b+c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=2 ' = b+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=3 '= b+c'
 (check_literal) check_literal:After while(): b+c
 (check_literal) ret1 Match. ' =' == ' = b+c'

 (check_expression) ' b+c'

  (check_eitem) check_eitem: 'b+c'

   (check_function)  'b+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=5 'b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'b+c'
    (check_literal)   '%' != 'b'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=5 'b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'b+c'
    (check_literal)   '"' != 'b'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'b+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'b+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'b+c'
     (check_textlabel) 'b' is a text label chstr:'b'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
    (check_proc_call) 'b' is text label

     (check_literal) check_literal:lit=':' idx=6 '+c'
     (check_literal) check_literal:After drop space:':' idx=6 '+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'b+c'

     (check_operator) 'b+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'b+c':
     (check_vname) check_vname ret1 '+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c'

     (check_literal) check_literal:lit='(' idx=6 '+c'
     (check_literal) check_literal:After drop space:'(' idx=6 '+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) 'c' igncomma:0
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c'

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=7 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=7 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=7 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=7 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=8 ''
    (check_literal) check_literal:After drop space:':' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=8 ''
    (check_literal) check_literal:After drop space:'(' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'bc = b+c' ref_ndeclare:1

   (scan_vname) scan_vname: 'bc = b+c'
   (scan_vname) scan_vname: ret1 'bc'
  (scan_variable) scan_variable: ' = b+c' vname='BC'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'BC' is not other keyword
  (scan_variable) Array test ' = b+c'

   (check_literal) check_literal:lit='(' idx=2 ' = b+c'
   (check_literal) check_literal:After drop space:'(' idx=2 ' = b+c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='BC' Float
 (process_token)    Frst:1 T:'BC' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'BC'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:BC is not function
token_is_variable: tok:'BC'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:BC is not function
(init_get_name) 
init_get_name:'BC'
(init_get_name) 
init_get_name:'BC'
(get_name) 
get_name:gn:'BC'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f BC
(add_var_info) Name:BC Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                BC'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' ' = b+c'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= b+c'
 (scan_assignment_equals) scan_assignment_equals:while loop:= b+c
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' b+c' igncomma:0

  (check_eitem) check_eitem: 'b+c'

   (check_function)  'b+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=5 'b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'b+c'
    (check_literal)   '%' != 'b'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=5 'b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'b+c'
    (check_literal)   '"' != 'b'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'b+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'b+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'b+c'
     (check_textlabel) 'b' is a text label chstr:'b'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
    (check_proc_call) 'b' is text label

     (check_literal) check_literal:lit=':' idx=6 '+c'
     (check_literal) check_literal:After drop space:':' idx=6 '+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'b+c'

     (check_operator) 'b+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'b+c':
     (check_vname) check_vname ret1 '+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c'

     (check_literal) check_literal:lit='(' idx=6 '+c'
     (check_literal) check_literal:After drop space:'(' idx=6 '+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'b+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=5 'b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'b+c'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=5 'b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'b+c'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b+c'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=6 '+c'
    (check_literal) check_literal:After drop space:':' idx=6 '+c'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b+c'

    (check_operator) 'b+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b+c':
    (check_vname) check_vname ret1 '+c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c'

    (check_literal) check_literal:lit='(' idx=6 '+c'
    (check_literal) check_literal:After drop space:'(' idx=6 '+c'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=5 'b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=5 'b+c'
  (check_literal)   '%' != 'b'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=5 'b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=5 'b+c'
  (check_literal)   '"' != 'b'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'b+c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'b+c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'b+c'
   (check_textlabel) 'b' is a text label chstr:'b'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
  (check_proc_call) 'b' is text label

   (check_literal) check_literal:lit=':' idx=6 '+c'
   (check_literal) check_literal:After drop space:':' idx=6 '+c'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'b+c'

   (check_operator) 'b+c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'b+c':
   (check_vname) check_vname ret1 '+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c'

   (check_literal) check_literal:lit='(' idx=6 '+c'
   (check_literal) check_literal:After drop space:'(' idx=6 '+c'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'b+c' ref_ndeclare:1

  (scan_vname) scan_vname: 'b+c'
  (scan_vname) scan_vname: ret1 'b'
 (scan_variable) scan_variable: '+c' vname='B'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'B' is not other keyword
 (scan_variable) Array test '+c'

  (check_literal) check_literal:lit='(' idx=6 '+c'
  (check_literal) check_literal:After drop space:'(' idx=6 '+c'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='B' Float
(process_token)    Frst:0 T:'B' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'B'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f B
(add_var_info) Name:B Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 B'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+c' Before while igncomma:0

 (check_operator) '+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c'

  (check_literal) check_literal:lit=' ,' idx=6 '+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=6 '+c'
  (check_literal)   ',' != '+'
  (check_literal) check_literal: ret0
 (scan_operator) scan_operator: ret1 'c' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name::=
(process_token) 
opr1:3 opr2:1
(operator_precedence) 
:= is operator
(operator_precedence) 
:= is operator
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (2)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) 001: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) 'c' Before scan_eitem igncomma:0

 (scan_eitem) scan_eitem:

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=7 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=7 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=7 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=7 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=8 ''
    (check_literal) check_literal:After drop space:':' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=8 ''
    (check_literal) check_literal:After drop space:'(' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=7 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=7 'c'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=7 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=7 'c'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c'
   (check_textlabel) 'c' is a text label chstr:'c'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
  (check_proc_call) 'c' is text label

   (check_literal) check_literal:lit=':' idx=8 ''
   (check_literal) check_literal:After drop space:':' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c'

   (check_operator) 'c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=8 ''
   (check_literal) check_literal:After drop space:'(' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c' ref_ndeclare:1

  (scan_vname) scan_vname: 'c'
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '' vname='C'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=8 ''
  (check_literal) check_literal:After drop space:'(' idx=8 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C' Float
(process_token)    Frst:0 T:'C' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
token_is_variable: tok:'C'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C
(add_var_info) Name:C Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 C'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(add_var_info) Name:BC Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_assignment) scan_assignment: ret1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:3 buf2 i:5
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop '+' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (op_stack_finalise) Popped:+ f
 (output_operator) [f,()] f +
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'BC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing :BC   *************
 (type_check_stack_push)  type_check_stack_push: 'BC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'BC' type:f (1), %:0
 (process_syntax_tree) *********Processing :B   *************
 (type_check_stack_push)  type_check_stack_push: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print)  N002: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'BC' type:f (1), %:0
 (type_check_stack_display) 001: 'B' type:f (1), %:0
 (process_syntax_tree) *********Processing :C   *************
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print)  N002: 'B' type:1 %:0
 (type_check_stack_print)  N003: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'BC' type:f (1), %:0
 (type_check_stack_display) 001: 'B' type:f (1), %:0
 (type_check_stack_display) 002: 'C' type:f (1), %:0
 (process_syntax_tree) *********Processing :+   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator + %conv:1
 (type_check_stack_pop)   type_check_stack_pop: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print)  N002: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:1
 (process_syntax_tree) Percent convertible operator op1 (N003) percent:0
 (process_syntax_tree) Mutable type (C) f f
 (process_syntax_tree) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'BC' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'BC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (000) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE:BC    **********
 (type_check_stack_push)  type_check_stack_push: 'BC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'BC' type:f (1), %:0
 (typecheck_expression)  *** BE:B    **********
 (type_check_stack_push)  type_check_stack_push: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print)  N002: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'BC' type:f (1), %:0
 (type_check_stack_display) 001: 'B' type:f (1), %:0
 (typecheck_expression)  *** BE:C    **********
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print)  N002: 'B' type:1 %:0
 (type_check_stack_print)  N003: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'BC' type:f (1), %:0
 (type_check_stack_display) 001: 'B' type:f (1), %:0
 (type_check_stack_display) 002: 'C' type:f (1), %:0
 (typecheck_expression)  *** BE:+    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator +
 (type_check_stack_pop)   type_check_stack_pop: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print)  N002: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (+) f f
 (typecheck_expression) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'BC' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'BC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'BC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'BC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (BC)
Var: BC Float NumIdx:0
infix_stack_push: 'BC'
 (infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
 (infix_from_rpn) (C)
Var: C Float NumIdx:0
infix_stack_push: 'C'
 (infix_from_rpn) (+)
infix_stack_pop: 'C'
infix_stack_pop: 'B'
infix_stack_push: '(B + C)'
 (infix_from_rpn) (:=)
infix_stack_pop: '(B + C)'
infix_stack_pop: 'BC'
infix_stack_push: '(BC := (B + C))'
Done

infix_stack_pop: '(BC := (B + C))'
Infix stack result (BC := (B + C))
 (infix_from_rpn) exit  'BC := (B + C)'
 (process_expression_types) ==BC := (B + C)==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
bc = b+c
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=8 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=8 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=8 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'a' (97)
 (is_all_spaces) cline[1] = 'c' (99)
 (is_all_spaces) cline[2] = ' ' (32)
 (is_all_spaces) cline[3] = '=' (61)
 (is_all_spaces) cline[4] = ' ' (32)
 (is_all_spaces) cline[5] = 'a' (97)
 (is_all_spaces) cline[6] = '+' (43)
 (is_all_spaces) cline[7] = 'c' (99)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'ac = a+c'
************
**ac = a+c**
************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'ac = a+c'
 (check_literal) check_literal:After drop space:'REM' idx=0 'ac = a+c'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'ac = a+c'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'ac = a+c'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'ac = a+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'ac = a+c'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'ac = a+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'ac = a+c'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'ac = a+c'

   (check_operator) 'ac = a+c' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'ac = a+c':
   (check_vname) check_vname ret1 ' = a+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' = a+c'

   (check_literal) check_literal:lit='(' idx=2 ' = a+c'
   (check_literal) check_literal:After drop space:'(' idx=2 ' = a+c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=2 ' = a+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=3 '= a+c'
 (check_literal) check_literal:After while(): a+c
 (check_literal) ret1 Match. ' =' == ' = a+c'

 (check_expression) ' a+c'

  (check_eitem) check_eitem: 'a+c'

   (check_function)  'a+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=5 'a+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a+c'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=5 'a+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a+c'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+c'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=6 '+c'
     (check_literal) check_literal:After drop space:':' idx=6 '+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+c'

     (check_operator) 'a+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+c':
     (check_vname) check_vname ret1 '+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c'

     (check_literal) check_literal:lit='(' idx=6 '+c'
     (check_literal) check_literal:After drop space:'(' idx=6 '+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) 'c' igncomma:0
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c'

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=7 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=7 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=7 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=7 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=8 ''
    (check_literal) check_literal:After drop space:':' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=8 ''
    (check_literal) check_literal:After drop space:'(' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'ac = a+c' ref_ndeclare:1

   (scan_vname) scan_vname: 'ac = a+c'
   (scan_vname) scan_vname: ret1 'ac'
  (scan_variable) scan_variable: ' = a+c' vname='AC'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'AC' is not other keyword
  (scan_variable) Array test ' = a+c'

   (check_literal) check_literal:lit='(' idx=2 ' = a+c'
   (check_literal) check_literal:After drop space:'(' idx=2 ' = a+c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='AC' Float
 (process_token)    Frst:1 T:'AC' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'AC'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AC is not function
token_is_variable: tok:'AC'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AC is not function
(init_get_name) 
init_get_name:'AC'
(init_get_name) 
init_get_name:'AC'
(get_name) 
get_name:gn:'AC'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f AC
(add_var_info) Name:AC Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                AC'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' ' = a+c'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= a+c'
 (scan_assignment_equals) scan_assignment_equals:while loop:= a+c
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' a+c' igncomma:0

  (check_eitem) check_eitem: 'a+c'

   (check_function)  'a+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=5 'a+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a+c'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=5 'a+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a+c'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+c'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=6 '+c'
     (check_literal) check_literal:After drop space:':' idx=6 '+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+c'

     (check_operator) 'a+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+c':
     (check_vname) check_vname ret1 '+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c'

     (check_literal) check_literal:lit='(' idx=6 '+c'
     (check_literal) check_literal:After drop space:'(' idx=6 '+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'a+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=5 'a+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'a+c'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=5 'a+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'a+c'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'a+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'a+c'
    (check_textlabel) 'a' is a text label chstr:'a'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
   (check_proc_call) 'a' is text label

    (check_literal) check_literal:lit=':' idx=6 '+c'
    (check_literal) check_literal:After drop space:':' idx=6 '+c'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'a+c'

    (check_operator) 'a+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'a+c':
    (check_vname) check_vname ret1 '+c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c'

    (check_literal) check_literal:lit='(' idx=6 '+c'
    (check_literal) check_literal:After drop space:'(' idx=6 '+c'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=5 'a+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=5 'a+c'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=5 'a+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=5 'a+c'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'a+c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'a+c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'a+c'
   (check_textlabel) 'a' is a text label chstr:'a'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
  (check_proc_call) 'a' is text label

   (check_literal) check_literal:lit=':' idx=6 '+c'
   (check_literal) check_literal:After drop space:':' idx=6 '+c'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'a+c'

   (check_operator) 'a+c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'a+c':
   (check_vname) check_vname ret1 '+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c'

   (check_literal) check_literal:lit='(' idx=6 '+c'
   (check_literal) check_literal:After drop space:'(' idx=6 '+c'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'a+c' ref_ndeclare:1

  (scan_vname) scan_vname: 'a+c'
  (scan_vname) scan_vname: ret1 'a'
 (scan_variable) scan_variable: '+c' vname='A'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'A' is not other keyword
 (scan_variable) Array test '+c'

  (check_literal) check_literal:lit='(' idx=6 '+c'
  (check_literal) check_literal:After drop space:'(' idx=6 '+c'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='A' Float
(process_token)    Frst:0 T:'A' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'A'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f A
(add_var_info) Name:A Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 A'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+c' Before while igncomma:0

 (check_operator) '+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c'

  (check_literal) check_literal:lit=' ,' idx=6 '+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=6 '+c'
  (check_literal)   ',' != '+'
  (check_literal) check_literal: ret0
 (scan_operator) scan_operator: ret1 'c' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name::=
(process_token) 
opr1:3 opr2:1
(operator_precedence) 
:= is operator
(operator_precedence) 
:= is operator
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (2)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) 001: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) 'c' Before scan_eitem igncomma:0

 (scan_eitem) scan_eitem:

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=7 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=7 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=7 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=7 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=8 ''
    (check_literal) check_literal:After drop space:':' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=8 ''
    (check_literal) check_literal:After drop space:'(' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=7 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=7 'c'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=7 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=7 'c'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c'
   (check_textlabel) 'c' is a text label chstr:'c'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
  (check_proc_call) 'c' is text label

   (check_literal) check_literal:lit=':' idx=8 ''
   (check_literal) check_literal:After drop space:':' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c'

   (check_operator) 'c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=8 ''
   (check_literal) check_literal:After drop space:'(' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c' ref_ndeclare:1

  (scan_vname) scan_vname: 'c'
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '' vname='C'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=8 ''
  (check_literal) check_literal:After drop space:'(' idx=8 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C' Float
(process_token)    Frst:0 T:'C' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
token_is_variable: tok:'C'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C
(add_var_info) Name:C Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 C'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(add_var_info) Name:AC Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_assignment) scan_assignment: ret1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:3 buf2 i:5
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop '+' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (op_stack_finalise) Popped:+ f
 (output_operator) [f,()] f +
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing :AC   *************
 (type_check_stack_push)  type_check_stack_push: 'AC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'AC' type:f (1), %:0
 (process_syntax_tree) *********Processing :A   *************
 (type_check_stack_push)  type_check_stack_push: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'AC' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (process_syntax_tree) *********Processing :C   *************
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'AC' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (type_check_stack_display) 002: 'C' type:f (1), %:0
 (process_syntax_tree) *********Processing :+   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator + %conv:1
 (type_check_stack_pop)   type_check_stack_pop: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:1
 (process_syntax_tree) Percent convertible operator op1 (N003) percent:0
 (process_syntax_tree) Mutable type (C) f f
 (process_syntax_tree) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'AC' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'AC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (000) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE:AC    **********
 (type_check_stack_push)  type_check_stack_push: 'AC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'AC' type:f (1), %:0
 (typecheck_expression)  *** BE:A    **********
 (type_check_stack_push)  type_check_stack_push: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'AC' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (typecheck_expression)  *** BE:C    **********
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'AC' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (type_check_stack_display) 002: 'C' type:f (1), %:0
 (typecheck_expression)  *** BE:+    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator +
 (type_check_stack_pop)   type_check_stack_pop: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (+) f f
 (typecheck_expression) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'AC' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'AC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (AC)
Var: AC Float NumIdx:0
infix_stack_push: 'AC'
 (infix_from_rpn) (A)
Var: A Float NumIdx:0
infix_stack_push: 'A'
 (infix_from_rpn) (C)
Var: C Float NumIdx:0
infix_stack_push: 'C'
 (infix_from_rpn) (+)
infix_stack_pop: 'C'
infix_stack_pop: 'A'
infix_stack_push: '(A + C)'
 (infix_from_rpn) (:=)
infix_stack_pop: '(A + C)'
infix_stack_pop: 'AC'
infix_stack_push: '(AC := (A + C))'
Done

infix_stack_pop: '(AC := (A + C))'
Infix stack result (AC := (A + C))
 (infix_from_rpn) exit  'AC := (A + C)'
 (process_expression_types) ==AC := (A + C)==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
ac = a+c
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=8 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=8 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=8 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'a' (97)
 (is_all_spaces) cline[8] = 'b' (98)
 (is_all_spaces) cline[9] = '+' (43)
 (is_all_spaces) cline[10] = 'c' (99)
 (is_all_spaces) cline[11] = '"' (34)
 (is_all_spaces) cline[12] = ',' (44)
 (is_all_spaces) cline[13] = ' ' (32)
 (is_all_spaces) cline[14] = 'a' (97)
 (is_all_spaces) cline[15] = 'b' (98)
 (is_all_spaces) cline[16] = '+' (43)
 (is_all_spaces) cline[17] = 'c' (99)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "ab+c", ab+c'
**********************
**print "ab+c", ab+c**
**********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "ab+c", ab+c'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "ab+c", ab+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "ab+c", ab+c'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "ab+c", ab+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "ab+c", ab+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "ab+c", ab+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "ab+c", ab+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "ab+c", ab+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "ab+c", ab+c'

   (check_operator) 'print "ab+c", ab+c' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "ab+c", ab+c':
   (check_vname) check_vname ret1 ' "ab+c", ab+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "ab+c", ab+c'

   (check_literal) check_literal:lit='(' idx=5 ' "ab+c", ab+c'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "ab+c", ab+c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "ab+c", ab+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"ab+c", ab+c'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "ab+c", ab+c'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "ab+c", ab+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "ab+c", ab+c'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "ab+c", ab+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "ab+c", ab+c'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "ab+c", ab+c'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "ab+c", ab+c'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "ab+c", ab+c'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "ab+c", ab+c'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "ab+c", ab+c'
   (check_literal) check_literal:After drop space:':' idx=5 ' "ab+c", ab+c'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "ab+c", ab+c'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "ab+c", ab+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "ab+c", ab+c'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "ab+c", ab+c'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "ab+c", ab+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "ab+c", ab+c'
   (check_literal) check_literal:After while(): "ab+c", ab+c
   (check_literal) ret1 Match. ' PRINT' == 'print "ab+c", ab+c'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "ab+c", ab+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "ab+c", ab+c'
   (check_literal) check_literal:After while(): "ab+c", ab+c
   (check_literal) ret1 Match. ' PRINT' == 'print "ab+c", ab+c'

   (check_expression) ' "ab+c", ab+c'

    (check_eitem) check_eitem: '"ab+c", ab+c'

     (check_function)  '"ab+c", ab+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"ab+c", ab+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"ab+c", ab+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"ab+c", ab+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"ab+c", ab+c'
      (check_literal) check_literal:After while():ab+c", ab+c
      (check_literal) ret1 Match. ' "' == '"ab+c", ab+c'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', ab+c' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', ab+c' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "ab+c", ab+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "ab+c", ab+c'
   (check_literal) check_literal:After while(): "ab+c", ab+c
   (check_literal) ret1 Match. ' PRINT' == 'print "ab+c", ab+c'
  (scan_print) Before while

   (check_expression) ' "ab+c", ab+c'

    (check_eitem) check_eitem: '"ab+c", ab+c'

     (check_function)  '"ab+c", ab+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"ab+c", ab+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"ab+c", ab+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"ab+c", ab+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"ab+c", ab+c'
      (check_literal) check_literal:After while():ab+c", ab+c
      (check_literal) ret1 Match. ' "' == '"ab+c", ab+c'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', ab+c' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', ab+c' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "ab+c", ab+c' igncomma:1

    (check_eitem) check_eitem: '"ab+c", ab+c'

     (check_function)  '"ab+c", ab+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"ab+c", ab+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"ab+c", ab+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"ab+c", ab+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"ab+c", ab+c'
      (check_literal) check_literal:After while():ab+c", ab+c
      (check_literal) ret1 Match. ' "' == '"ab+c", ab+c'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"ab+c", ab+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"ab+c", ab+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"ab+c", ab+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"ab+c", ab+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"ab+c", ab+c'
      (check_literal) check_literal:After while():ab+c", ab+c
      (check_literal) ret1 Match. ' "' == '"ab+c", ab+c'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"ab+c", ab+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"ab+c", ab+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"ab+c", ab+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"ab+c", ab+c'
      (check_literal) check_literal:After while():ab+c", ab+c
      (check_literal) ret1 Match. ' "' == '"ab+c", ab+c'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"ab+c", ab+c'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"ab+c", ab+c'
       (check_literal) check_literal:After while():ab+c", ab+c
       (check_literal) ret1 Match. ' "' == '"ab+c", ab+c'
      (scan_string)   (in if) 'ab+c", ab+c'
      (scan_string)   (in wh) 'ab+c", ab+c'
      (scan_string)   (in wh) 'b+c", ab+c'
      (scan_string)   (in wh) 'b+c", ab+c'
      (scan_string)   (in wh) '+c", ab+c'
      (scan_string)   (in wh) '+c", ab+c'
      (scan_string)   (in wh) 'c", ab+c'
      (scan_string)   (in wh) 'c", ab+c'
      (scan_string)   (in wh) '", ab+c'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"ab+c"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"ab+c"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"ab+c" is not function
token_is_variable: tok:'"ab+c"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"ab+c" is not function
(   output_string) [U,()] s "ab+c"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', ab+c' Before while igncomma:1

    (check_operator) ', ab+c' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', ab+c' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=12 ', ab+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ', ab+c'
   (check_literal) check_literal:After while(): ab+c
   (check_literal) ret1 Match. ' ,' == ', ab+c'

   (scan_literal_core) scan_literal_core:lit=' ,' ', ab+c'
   (scan_literal_core) scan_literal_core:After drop space:', ab+c'
   (scan_literal_core) scan_literal_core:while loop:, ab+c
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=13 ' ab+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=14 'ab+c'
 (check_literal)   ';' != 'a'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:5
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"ab+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :"ab+c"   *************
(type_check_stack_push)  type_check_stack_push: '"ab+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"ab+c"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"ab+c"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"ab+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:"ab+c"    **********
(type_check_stack_push)  type_check_stack_push: '"ab+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"ab+c"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"ab+c"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"ab+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"ab+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"ab+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("ab+c")
infix_stack_push: '"ab+c"'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"ab+c"'
infix_stack_push: 'PRINT("ab+c")'
Done

infix_stack_pop: 'PRINT("ab+c")'
Infix stack result PRINT("ab+c")
(infix_from_rpn) exit  'PRINT("ab+c")'
(process_expression_types) ==RINT("ab+c")==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 ab+c
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 ab+c
========================================================
(output_expression_start)

 (check_expression) ' ab+c'

  (check_eitem) check_eitem: 'ab+c'

   (check_function)  'ab+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'ab+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'ab+c'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'ab+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'ab+c'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'ab+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'ab+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'ab+c'
     (check_textlabel) 'ab' is a text label chstr:'b'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'ab' Type:f
    (check_proc_call) 'ab' is text label

     (check_literal) check_literal:lit=':' idx=16 '+c'
     (check_literal) check_literal:After drop space:':' idx=16 '+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'ab+c'

     (check_operator) 'ab+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'ab+c':
     (check_vname) check_vname ret1 '+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c'

     (check_literal) check_literal:lit='(' idx=16 '+c'
     (check_literal) check_literal:After drop space:'(' idx=16 '+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) 'c' igncomma:1
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c'

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=17 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=17 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=17 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=17 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=18 ''
    (check_literal) check_literal:After drop space:':' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=18 ''
    (check_literal) check_literal:After drop space:'(' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' ab+c' igncomma:1

  (check_eitem) check_eitem: 'ab+c'

   (check_function)  'ab+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'ab+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'ab+c'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'ab+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'ab+c'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'ab+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'ab+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'ab+c'
     (check_textlabel) 'ab' is a text label chstr:'b'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'ab' Type:f
    (check_proc_call) 'ab' is text label

     (check_literal) check_literal:lit=':' idx=16 '+c'
     (check_literal) check_literal:After drop space:':' idx=16 '+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'ab+c'

     (check_operator) 'ab+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'ab+c':
     (check_vname) check_vname ret1 '+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c'

     (check_literal) check_literal:lit='(' idx=16 '+c'
     (check_literal) check_literal:After drop space:'(' idx=16 '+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'ab+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=14 'ab+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=14 'ab+c'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=14 'ab+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=14 'ab+c'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'ab+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'ab+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'ab+c'
    (check_textlabel) 'ab' is a text label chstr:'b'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'ab' Type:f
   (check_proc_call) 'ab' is text label

    (check_literal) check_literal:lit=':' idx=16 '+c'
    (check_literal) check_literal:After drop space:':' idx=16 '+c'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'ab+c'

    (check_operator) 'ab+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'ab+c':
    (check_vname) check_vname ret1 '+c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c'

    (check_literal) check_literal:lit='(' idx=16 '+c'
    (check_literal) check_literal:After drop space:'(' idx=16 '+c'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=14 'ab+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=14 'ab+c'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=14 'ab+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=14 'ab+c'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'ab+c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'ab+c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'ab+c'
   (check_textlabel) 'ab' is a text label chstr:'b'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'ab' Type:f
  (check_proc_call) 'ab' is text label

   (check_literal) check_literal:lit=':' idx=16 '+c'
   (check_literal) check_literal:After drop space:':' idx=16 '+c'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'ab+c'

   (check_operator) 'ab+c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'ab+c':
   (check_vname) check_vname ret1 '+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c'

   (check_literal) check_literal:lit='(' idx=16 '+c'
   (check_literal) check_literal:After drop space:'(' idx=16 '+c'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'ab+c' ref_ndeclare:1

  (scan_vname) scan_vname: 'ab+c'
  (scan_vname) scan_vname: ret1 'ab'
 (scan_variable) scan_variable: '+c' vname='AB'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'AB' is not other keyword
 (scan_variable) Array test '+c'

  (check_literal) check_literal:lit='(' idx=16 '+c'
  (check_literal) check_literal:After drop space:'(' idx=16 '+c'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='AB' Float
(process_token)    Frst:1 T:'AB' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'AB'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AB is not function
token_is_variable: tok:'AB'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AB is not function
(init_get_name) 
init_get_name:'AB'
(init_get_name) 
init_get_name:'AB'
(get_name) 
get_name:gn:'AB'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f AB
(add_var_info) Name:AB Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                AB'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+c' Before while igncomma:1

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c'
 (scan_operator) scan_operator: ret1 'c' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'c' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=17 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=17 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=17 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=17 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=18 ''
    (check_literal) check_literal:After drop space:':' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=18 ''
    (check_literal) check_literal:After drop space:'(' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=17 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=17 'c'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=17 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=17 'c'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c'
   (check_textlabel) 'c' is a text label chstr:'c'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
  (check_proc_call) 'c' is text label

   (check_literal) check_literal:lit=':' idx=18 ''
   (check_literal) check_literal:After drop space:':' idx=18 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c'

   (check_operator) 'c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=18 ''
   (check_literal) check_literal:After drop space:'(' idx=18 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c' ref_ndeclare:1

  (scan_vname) scan_vname: 'c'
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '' vname='C'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=18 ''
  (check_literal) check_literal:After drop space:'(' idx=18 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C' Float
(process_token)    Frst:0 T:'C' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
token_is_variable: tok:'C'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C
(add_var_info) Name:C Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 C'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ f
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:4 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AB' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :AB   *************
(type_check_stack_push)  type_check_stack_push: 'AB'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'AB' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'AB' type:f (1), %:0
(process_syntax_tree) *********Processing :C   *************
(type_check_stack_push)  type_check_stack_push: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'AB' type:1 %:0
(type_check_stack_print)  N002: 'C' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'AB' type:f (1), %:0
(type_check_stack_display) 001: 'C' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'AB' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'AB'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N002) percent:0
(process_syntax_tree) Mutable type (C) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:AB    **********
(type_check_stack_push)  type_check_stack_push: 'AB'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'AB' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'AB' type:f (1), %:0
(typecheck_expression)  *** BE:C    **********
(type_check_stack_push)  type_check_stack_push: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'AB' type:1 %:0
(type_check_stack_print)  N002: 'C' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'AB' type:f (1), %:0
(type_check_stack_display) 001: 'C' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'AB' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'AB'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AB' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AB' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (AB)
Var: AB Float NumIdx:0
infix_stack_push: 'AB'
(infix_from_rpn) (C)
Var: C Float NumIdx:0
infix_stack_push: 'C'
(infix_from_rpn) (+)
infix_stack_pop: 'C'
infix_stack_pop: 'AB'
infix_stack_push: '(AB + C)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(AB + C)'
infix_stack_push: 'PRINT((AB + C))'
Done

infix_stack_pop: 'PRINT((AB + C))'
Infix stack result PRINT((AB + C))
(infix_from_rpn) exit  'PRINT((AB + C))'
(process_expression_types) ==RINT((AB + C))==
(process_expression_types) 


(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:4
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=18 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=18 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=18 ''
     (check_literal) check_literal:After drop space:':' idx=18 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=18 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print "ab+c", ab+c
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=18 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=18 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=18 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'a' (97)
 (is_all_spaces) cline[8] = '+' (43)
 (is_all_spaces) cline[9] = 'b' (98)
 (is_all_spaces) cline[10] = 'c' (99)
 (is_all_spaces) cline[11] = '"' (34)
 (is_all_spaces) cline[12] = ',' (44)
 (is_all_spaces) cline[13] = ' ' (32)
 (is_all_spaces) cline[14] = 'a' (97)
 (is_all_spaces) cline[15] = '+' (43)
 (is_all_spaces) cline[16] = 'b' (98)
 (is_all_spaces) cline[17] = 'c' (99)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "a+bc", a+bc'
**********************
**print "a+bc", a+bc**
**********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "a+bc", a+bc'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "a+bc", a+bc'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "a+bc", a+bc'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "a+bc", a+bc'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "a+bc", a+bc'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "a+bc", a+bc'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "a+bc", a+bc'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "a+bc", a+bc'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "a+bc", a+bc'

   (check_operator) 'print "a+bc", a+bc' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "a+bc", a+bc':
   (check_vname) check_vname ret1 ' "a+bc", a+bc':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "a+bc", a+bc'

   (check_literal) check_literal:lit='(' idx=5 ' "a+bc", a+bc'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "a+bc", a+bc'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "a+bc", a+bc'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"a+bc", a+bc'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "a+bc", a+bc'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "a+bc", a+bc'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "a+bc", a+bc'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "a+bc", a+bc'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "a+bc", a+bc'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "a+bc", a+bc'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "a+bc", a+bc'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "a+bc", a+bc'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "a+bc", a+bc'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "a+bc", a+bc'
   (check_literal) check_literal:After drop space:':' idx=5 ' "a+bc", a+bc'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "a+bc", a+bc'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "a+bc", a+bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "a+bc", a+bc'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "a+bc", a+bc'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "a+bc", a+bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "a+bc", a+bc'
   (check_literal) check_literal:After while(): "a+bc", a+bc
   (check_literal) ret1 Match. ' PRINT' == 'print "a+bc", a+bc'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "a+bc", a+bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "a+bc", a+bc'
   (check_literal) check_literal:After while(): "a+bc", a+bc
   (check_literal) ret1 Match. ' PRINT' == 'print "a+bc", a+bc'

   (check_expression) ' "a+bc", a+bc'

    (check_eitem) check_eitem: '"a+bc", a+bc'

     (check_function)  '"a+bc", a+bc'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+bc", a+bc'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+bc", a+bc'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+bc", a+bc'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+bc", a+bc'
      (check_literal) check_literal:After while():a+bc", a+bc
      (check_literal) ret1 Match. ' "' == '"a+bc", a+bc'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', a+bc' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', a+bc' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "a+bc", a+bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "a+bc", a+bc'
   (check_literal) check_literal:After while(): "a+bc", a+bc
   (check_literal) ret1 Match. ' PRINT' == 'print "a+bc", a+bc'
  (scan_print) Before while

   (check_expression) ' "a+bc", a+bc'

    (check_eitem) check_eitem: '"a+bc", a+bc'

     (check_function)  '"a+bc", a+bc'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+bc", a+bc'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+bc", a+bc'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+bc", a+bc'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+bc", a+bc'
      (check_literal) check_literal:After while():a+bc", a+bc
      (check_literal) ret1 Match. ' "' == '"a+bc", a+bc'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', a+bc' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', a+bc' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "a+bc", a+bc' igncomma:1

    (check_eitem) check_eitem: '"a+bc", a+bc'

     (check_function)  '"a+bc", a+bc'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+bc", a+bc'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+bc", a+bc'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+bc", a+bc'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+bc", a+bc'
      (check_literal) check_literal:After while():a+bc", a+bc
      (check_literal) ret1 Match. ' "' == '"a+bc", a+bc'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"a+bc", a+bc'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+bc", a+bc'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+bc", a+bc'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+bc", a+bc'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+bc", a+bc'
      (check_literal) check_literal:After while():a+bc", a+bc
      (check_literal) ret1 Match. ' "' == '"a+bc", a+bc'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"a+bc", a+bc'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+bc", a+bc'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"a+bc", a+bc'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+bc", a+bc'
      (check_literal) check_literal:After while():a+bc", a+bc
      (check_literal) ret1 Match. ' "' == '"a+bc", a+bc'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"a+bc", a+bc'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"a+bc", a+bc'
       (check_literal) check_literal:After while():a+bc", a+bc
       (check_literal) ret1 Match. ' "' == '"a+bc", a+bc'
      (scan_string)   (in if) 'a+bc", a+bc'
      (scan_string)   (in wh) 'a+bc", a+bc'
      (scan_string)   (in wh) '+bc", a+bc'
      (scan_string)   (in wh) '+bc", a+bc'
      (scan_string)   (in wh) 'bc", a+bc'
      (scan_string)   (in wh) 'bc", a+bc'
      (scan_string)   (in wh) 'c", a+bc'
      (scan_string)   (in wh) 'c", a+bc'
      (scan_string)   (in wh) '", a+bc'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"a+bc"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"a+bc"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"a+bc" is not function
token_is_variable: tok:'"a+bc"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"a+bc" is not function
(   output_string) [U,()] s "a+bc"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', a+bc' Before while igncomma:1

    (check_operator) ', a+bc' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', a+bc' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=12 ', a+bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ', a+bc'
   (check_literal) check_literal:After while(): a+bc
   (check_literal) ret1 Match. ' ,' == ', a+bc'

   (scan_literal_core) scan_literal_core:lit=' ,' ', a+bc'
   (scan_literal_core) scan_literal_core:After drop space:', a+bc'
   (scan_literal_core) scan_literal_core:while loop:, a+bc
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=13 ' a+bc'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=14 'a+bc'
 (check_literal)   ';' != 'a'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"a+bc"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :"a+bc"   *************
(type_check_stack_push)  type_check_stack_push: '"a+bc"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"a+bc"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"a+bc"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"a+bc"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:"a+bc"    **********
(type_check_stack_push)  type_check_stack_push: '"a+bc"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"a+bc"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"a+bc"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"a+bc"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"a+bc"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"a+bc"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("a+bc")
infix_stack_push: '"a+bc"'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"a+bc"'
infix_stack_push: 'PRINT("a+bc")'
Done

infix_stack_pop: 'PRINT("a+bc")'
Infix stack result PRINT("a+bc")
(infix_from_rpn) exit  'PRINT("a+bc")'
(process_expression_types) ==RINT("a+bc")==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 a+bc
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 a+bc
========================================================
(output_expression_start)

 (check_expression) ' a+bc'

  (check_eitem) check_eitem: 'a+bc'

   (check_function)  'a+bc'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'a+bc'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'a+bc'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'a+bc'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'a+bc'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+bc'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+bc'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+bc'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=15 '+bc'
     (check_literal) check_literal:After drop space:':' idx=15 '+bc'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+bc'

     (check_operator) 'a+bc' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+bc':
     (check_vname) check_vname ret1 '+bc':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+bc'

     (check_literal) check_literal:lit='(' idx=15 '+bc'
     (check_literal) check_literal:After drop space:'(' idx=15 '+bc'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+bc' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) 'bc' igncomma:1
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'bc'

  (check_function)  'bc'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=16 'bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=16 'bc'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=16 'bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=16 'bc'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'bc'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'bc'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'bc'
    (check_textlabel) 'bc' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'bc' Type:f
   (check_proc_call) 'bc' is text label

    (check_literal) check_literal:lit=':' idx=18 ''
    (check_literal) check_literal:After drop space:':' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'bc'

    (check_operator) 'bc' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'bc':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=18 ''
    (check_literal) check_literal:After drop space:'(' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' a+bc' igncomma:1

  (check_eitem) check_eitem: 'a+bc'

   (check_function)  'a+bc'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'a+bc'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'a+bc'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'a+bc'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'a+bc'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+bc'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+bc'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+bc'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=15 '+bc'
     (check_literal) check_literal:After drop space:':' idx=15 '+bc'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+bc'

     (check_operator) 'a+bc' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+bc':
     (check_vname) check_vname ret1 '+bc':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+bc'

     (check_literal) check_literal:lit='(' idx=15 '+bc'
     (check_literal) check_literal:After drop space:'(' idx=15 '+bc'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'a+bc'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=14 'a+bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=14 'a+bc'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=14 'a+bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=14 'a+bc'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a+bc'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'a+bc'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'a+bc'
    (check_textlabel) 'a' is a text label chstr:'a'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
   (check_proc_call) 'a' is text label

    (check_literal) check_literal:lit=':' idx=15 '+bc'
    (check_literal) check_literal:After drop space:':' idx=15 '+bc'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'a+bc'

    (check_operator) 'a+bc' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'a+bc':
    (check_vname) check_vname ret1 '+bc':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+bc'

    (check_literal) check_literal:lit='(' idx=15 '+bc'
    (check_literal) check_literal:After drop space:'(' idx=15 '+bc'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=14 'a+bc'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=14 'a+bc'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=14 'a+bc'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=14 'a+bc'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'a+bc'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'a+bc'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'a+bc'
   (check_textlabel) 'a' is a text label chstr:'a'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
  (check_proc_call) 'a' is text label

   (check_literal) check_literal:lit=':' idx=15 '+bc'
   (check_literal) check_literal:After drop space:':' idx=15 '+bc'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'a+bc'

   (check_operator) 'a+bc' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'a+bc':
   (check_vname) check_vname ret1 '+bc':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+bc'

   (check_literal) check_literal:lit='(' idx=15 '+bc'
   (check_literal) check_literal:After drop space:'(' idx=15 '+bc'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'a+bc' ref_ndeclare:1

  (scan_vname) scan_vname: 'a+bc'
  (scan_vname) scan_vname: ret1 'a'
 (scan_variable) scan_variable: '+bc' vname='A'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'A' is not other keyword
 (scan_variable) Array test '+bc'

  (check_literal) check_literal:lit='(' idx=15 '+bc'
  (check_literal) check_literal:After drop space:'(' idx=15 '+bc'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='A' Float
(process_token)    Frst:1 T:'A' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'A'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f A
(add_var_info) Name:A Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 A'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+bc' Before while igncomma:1

 (check_operator) '+bc' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+bc' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+bc'
 (scan_operator) scan_operator: ret1 'bc' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'bc' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'bc' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'bc'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=16 'bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=16 'bc'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=16 'bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=16 'bc'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'bc'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'bc'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'bc'
    (check_textlabel) 'bc' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'bc' Type:f
   (check_proc_call) 'bc' is text label

    (check_literal) check_literal:lit=':' idx=18 ''
    (check_literal) check_literal:After drop space:':' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'bc'

    (check_operator) 'bc' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'bc':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=18 ''
    (check_literal) check_literal:After drop space:'(' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=16 'bc'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=16 'bc'
  (check_literal)   '%' != 'b'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=16 'bc'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=16 'bc'
  (check_literal)   '"' != 'b'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'bc'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'bc'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'bc'
   (check_textlabel) 'bc' is a text label chstr:'c'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'bc' Type:f
  (check_proc_call) 'bc' is text label

   (check_literal) check_literal:lit=':' idx=18 ''
   (check_literal) check_literal:After drop space:':' idx=18 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'bc'

   (check_operator) 'bc' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'bc':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=18 ''
   (check_literal) check_literal:After drop space:'(' idx=18 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'bc' ref_ndeclare:1

  (scan_vname) scan_vname: 'bc'
  (scan_vname) scan_vname: ret1 'bc'
 (scan_variable) scan_variable: '' vname='BC'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'BC' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=18 ''
  (check_literal) check_literal:After drop space:'(' idx=18 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='BC' Float
(process_token)    Frst:0 T:'BC' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'BC'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:BC is not function
token_is_variable: tok:'BC'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:BC is not function
(init_get_name) 
init_get_name:'BC'
(init_get_name) 
init_get_name:'BC'
(get_name) 
get_name:gn:'BC'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f BC
(add_var_info) Name:BC Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                BC'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ f
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:4 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'BC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :A   *************
(type_check_stack_push)  type_check_stack_push: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(process_syntax_tree) *********Processing :BC   *************
(type_check_stack_push)  type_check_stack_push: 'BC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print)  N002: 'BC' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(type_check_stack_display) 001: 'BC' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'BC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N002) percent:0
(process_syntax_tree) Mutable type (BC) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:A    **********
(type_check_stack_push)  type_check_stack_push: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(typecheck_expression)  *** BE:BC    **********
(type_check_stack_push)  type_check_stack_push: 'BC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print)  N002: 'BC' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(type_check_stack_display) 001: 'BC' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'BC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'BC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'BC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (A)
Var: A Float NumIdx:0
infix_stack_push: 'A'
(infix_from_rpn) (BC)
Var: BC Float NumIdx:0
infix_stack_push: 'BC'
(infix_from_rpn) (+)
infix_stack_pop: 'BC'
infix_stack_pop: 'A'
infix_stack_push: '(A + BC)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(A + BC)'
infix_stack_push: 'PRINT((A + BC))'
Done

infix_stack_pop: 'PRINT((A + BC))'
Infix stack result PRINT((A + BC))
(infix_from_rpn) exit  'PRINT((A + BC))'
(process_expression_types) ==RINT((A + BC))==
(process_expression_types) 


(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:4
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=18 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=18 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=18 ''
     (check_literal) check_literal:After drop space:':' idx=18 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=18 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print "a+bc", a+bc
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=18 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=18 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=18 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'a' (97)
 (is_all_spaces) cline[8] = 'c' (99)
 (is_all_spaces) cline[9] = '+' (43)
 (is_all_spaces) cline[10] = 'b' (98)
 (is_all_spaces) cline[11] = '"' (34)
 (is_all_spaces) cline[12] = ',' (44)
 (is_all_spaces) cline[13] = ' ' (32)
 (is_all_spaces) cline[14] = 'a' (97)
 (is_all_spaces) cline[15] = 'c' (99)
 (is_all_spaces) cline[16] = '+' (43)
 (is_all_spaces) cline[17] = 'b' (98)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "ac+b", ac+b'
**********************
**print "ac+b", ac+b**
**********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "ac+b", ac+b'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "ac+b", ac+b'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "ac+b", ac+b'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "ac+b", ac+b'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "ac+b", ac+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "ac+b", ac+b'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "ac+b", ac+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "ac+b", ac+b'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "ac+b", ac+b'

   (check_operator) 'print "ac+b", ac+b' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "ac+b", ac+b':
   (check_vname) check_vname ret1 ' "ac+b", ac+b':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "ac+b", ac+b'

   (check_literal) check_literal:lit='(' idx=5 ' "ac+b", ac+b'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "ac+b", ac+b'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "ac+b", ac+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"ac+b", ac+b'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "ac+b", ac+b'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "ac+b", ac+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "ac+b", ac+b'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "ac+b", ac+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "ac+b", ac+b'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "ac+b", ac+b'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "ac+b", ac+b'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "ac+b", ac+b'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "ac+b", ac+b'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "ac+b", ac+b'
   (check_literal) check_literal:After drop space:':' idx=5 ' "ac+b", ac+b'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "ac+b", ac+b'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "ac+b", ac+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "ac+b", ac+b'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "ac+b", ac+b'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "ac+b", ac+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "ac+b", ac+b'
   (check_literal) check_literal:After while(): "ac+b", ac+b
   (check_literal) ret1 Match. ' PRINT' == 'print "ac+b", ac+b'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "ac+b", ac+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "ac+b", ac+b'
   (check_literal) check_literal:After while(): "ac+b", ac+b
   (check_literal) ret1 Match. ' PRINT' == 'print "ac+b", ac+b'

   (check_expression) ' "ac+b", ac+b'

    (check_eitem) check_eitem: '"ac+b", ac+b'

     (check_function)  '"ac+b", ac+b'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"ac+b", ac+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"ac+b", ac+b'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"ac+b", ac+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"ac+b", ac+b'
      (check_literal) check_literal:After while():ac+b", ac+b
      (check_literal) ret1 Match. ' "' == '"ac+b", ac+b'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', ac+b' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', ac+b' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "ac+b", ac+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "ac+b", ac+b'
   (check_literal) check_literal:After while(): "ac+b", ac+b
   (check_literal) ret1 Match. ' PRINT' == 'print "ac+b", ac+b'
  (scan_print) Before while

   (check_expression) ' "ac+b", ac+b'

    (check_eitem) check_eitem: '"ac+b", ac+b'

     (check_function)  '"ac+b", ac+b'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"ac+b", ac+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"ac+b", ac+b'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"ac+b", ac+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"ac+b", ac+b'
      (check_literal) check_literal:After while():ac+b", ac+b
      (check_literal) ret1 Match. ' "' == '"ac+b", ac+b'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', ac+b' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', ac+b' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "ac+b", ac+b' igncomma:1

    (check_eitem) check_eitem: '"ac+b", ac+b'

     (check_function)  '"ac+b", ac+b'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"ac+b", ac+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"ac+b", ac+b'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"ac+b", ac+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"ac+b", ac+b'
      (check_literal) check_literal:After while():ac+b", ac+b
      (check_literal) ret1 Match. ' "' == '"ac+b", ac+b'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"ac+b", ac+b'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"ac+b", ac+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"ac+b", ac+b'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"ac+b", ac+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"ac+b", ac+b'
      (check_literal) check_literal:After while():ac+b", ac+b
      (check_literal) ret1 Match. ' "' == '"ac+b", ac+b'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"ac+b", ac+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"ac+b", ac+b'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"ac+b", ac+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"ac+b", ac+b'
      (check_literal) check_literal:After while():ac+b", ac+b
      (check_literal) ret1 Match. ' "' == '"ac+b", ac+b'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"ac+b", ac+b'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"ac+b", ac+b'
       (check_literal) check_literal:After while():ac+b", ac+b
       (check_literal) ret1 Match. ' "' == '"ac+b", ac+b'
      (scan_string)   (in if) 'ac+b", ac+b'
      (scan_string)   (in wh) 'ac+b", ac+b'
      (scan_string)   (in wh) 'c+b", ac+b'
      (scan_string)   (in wh) 'c+b", ac+b'
      (scan_string)   (in wh) '+b", ac+b'
      (scan_string)   (in wh) '+b", ac+b'
      (scan_string)   (in wh) 'b", ac+b'
      (scan_string)   (in wh) 'b", ac+b'
      (scan_string)   (in wh) '", ac+b'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"ac+b"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"ac+b"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"ac+b" is not function
token_is_variable: tok:'"ac+b"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"ac+b" is not function
(   output_string) [U,()] s "ac+b"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', ac+b' Before while igncomma:1

    (check_operator) ', ac+b' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', ac+b' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=12 ', ac+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ', ac+b'
   (check_literal) check_literal:After while(): ac+b
   (check_literal) ret1 Match. ' ,' == ', ac+b'

   (scan_literal_core) scan_literal_core:lit=' ,' ', ac+b'
   (scan_literal_core) scan_literal_core:After drop space:', ac+b'
   (scan_literal_core) scan_literal_core:while loop:, ac+b
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=13 ' ac+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=14 'ac+b'
 (check_literal)   ';' != 'a'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"ac+b"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :"ac+b"   *************
(type_check_stack_push)  type_check_stack_push: '"ac+b"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"ac+b"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"ac+b"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"ac+b"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:"ac+b"    **********
(type_check_stack_push)  type_check_stack_push: '"ac+b"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"ac+b"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"ac+b"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"ac+b"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"ac+b"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"ac+b"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("ac+b")
infix_stack_push: '"ac+b"'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"ac+b"'
infix_stack_push: 'PRINT("ac+b")'
Done

infix_stack_pop: 'PRINT("ac+b")'
Infix stack result PRINT("ac+b")
(infix_from_rpn) exit  'PRINT("ac+b")'
(process_expression_types) ==RINT("ac+b")==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 ac+b
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 ac+b
========================================================
(output_expression_start)

 (check_expression) ' ac+b'

  (check_eitem) check_eitem: 'ac+b'

   (check_function)  'ac+b'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'ac+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'ac+b'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'ac+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'ac+b'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'ac+b'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'ac+b'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'ac+b'
     (check_textlabel) 'ac' is a text label chstr:'c'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'ac' Type:f
    (check_proc_call) 'ac' is text label

     (check_literal) check_literal:lit=':' idx=16 '+b'
     (check_literal) check_literal:After drop space:':' idx=16 '+b'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'ac+b'

     (check_operator) 'ac+b' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'ac+b':
     (check_vname) check_vname ret1 '+b':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+b'

     (check_literal) check_literal:lit='(' idx=16 '+b'
     (check_literal) check_literal:After drop space:'(' idx=16 '+b'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+b' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) 'b' igncomma:1
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'b'

  (check_function)  'b'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=17 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=17 'b'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=17 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=17 'b'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=18 ''
    (check_literal) check_literal:After drop space:':' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b'

    (check_operator) 'b' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=18 ''
    (check_literal) check_literal:After drop space:'(' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' ac+b' igncomma:1

  (check_eitem) check_eitem: 'ac+b'

   (check_function)  'ac+b'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'ac+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'ac+b'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'ac+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'ac+b'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'ac+b'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'ac+b'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'ac+b'
     (check_textlabel) 'ac' is a text label chstr:'c'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'ac' Type:f
    (check_proc_call) 'ac' is text label

     (check_literal) check_literal:lit=':' idx=16 '+b'
     (check_literal) check_literal:After drop space:':' idx=16 '+b'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'ac+b'

     (check_operator) 'ac+b' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'ac+b':
     (check_vname) check_vname ret1 '+b':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+b'

     (check_literal) check_literal:lit='(' idx=16 '+b'
     (check_literal) check_literal:After drop space:'(' idx=16 '+b'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'ac+b'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=14 'ac+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=14 'ac+b'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=14 'ac+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=14 'ac+b'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'ac+b'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'ac+b'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'ac+b'
    (check_textlabel) 'ac' is a text label chstr:'c'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'ac' Type:f
   (check_proc_call) 'ac' is text label

    (check_literal) check_literal:lit=':' idx=16 '+b'
    (check_literal) check_literal:After drop space:':' idx=16 '+b'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'ac+b'

    (check_operator) 'ac+b' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'ac+b':
    (check_vname) check_vname ret1 '+b':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+b'

    (check_literal) check_literal:lit='(' idx=16 '+b'
    (check_literal) check_literal:After drop space:'(' idx=16 '+b'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=14 'ac+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=14 'ac+b'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=14 'ac+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=14 'ac+b'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'ac+b'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'ac+b'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'ac+b'
   (check_textlabel) 'ac' is a text label chstr:'c'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'ac' Type:f
  (check_proc_call) 'ac' is text label

   (check_literal) check_literal:lit=':' idx=16 '+b'
   (check_literal) check_literal:After drop space:':' idx=16 '+b'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'ac+b'

   (check_operator) 'ac+b' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'ac+b':
   (check_vname) check_vname ret1 '+b':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+b'

   (check_literal) check_literal:lit='(' idx=16 '+b'
   (check_literal) check_literal:After drop space:'(' idx=16 '+b'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'ac+b' ref_ndeclare:1

  (scan_vname) scan_vname: 'ac+b'
  (scan_vname) scan_vname: ret1 'ac'
 (scan_variable) scan_variable: '+b' vname='AC'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'AC' is not other keyword
 (scan_variable) Array test '+b'

  (check_literal) check_literal:lit='(' idx=16 '+b'
  (check_literal) check_literal:After drop space:'(' idx=16 '+b'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='AC' Float
(process_token)    Frst:1 T:'AC' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'AC'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AC is not function
token_is_variable: tok:'AC'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AC is not function
(init_get_name) 
init_get_name:'AC'
(init_get_name) 
init_get_name:'AC'
(get_name) 
get_name:gn:'AC'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f AC
(add_var_info) Name:AC Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                AC'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+b' Before while igncomma:1

 (check_operator) '+b' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+b' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+b'
 (scan_operator) scan_operator: ret1 'b' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'b' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'b' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'b'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=17 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=17 'b'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=17 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=17 'b'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=18 ''
    (check_literal) check_literal:After drop space:':' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b'

    (check_operator) 'b' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=18 ''
    (check_literal) check_literal:After drop space:'(' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=17 'b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=17 'b'
  (check_literal)   '%' != 'b'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=17 'b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=17 'b'
  (check_literal)   '"' != 'b'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'b'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'b'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'b'
   (check_textlabel) 'b' is a text label chstr:'b'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
  (check_proc_call) 'b' is text label

   (check_literal) check_literal:lit=':' idx=18 ''
   (check_literal) check_literal:After drop space:':' idx=18 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'b'

   (check_operator) 'b' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'b':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=18 ''
   (check_literal) check_literal:After drop space:'(' idx=18 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'b' ref_ndeclare:1

  (scan_vname) scan_vname: 'b'
  (scan_vname) scan_vname: ret1 'b'
 (scan_variable) scan_variable: '' vname='B'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'B' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=18 ''
  (check_literal) check_literal:After drop space:'(' idx=18 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='B' Float
(process_token)    Frst:0 T:'B' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'B'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f B
(add_var_info) Name:B Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 B'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ f
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:4 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :AC   *************
(type_check_stack_push)  type_check_stack_push: 'AC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'AC' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'AC' type:f (1), %:0
(process_syntax_tree) *********Processing :B   *************
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'AC' type:1 %:0
(type_check_stack_print)  N002: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'AC' type:f (1), %:0
(type_check_stack_display) 001: 'B' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'AC' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'AC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N002) percent:0
(process_syntax_tree) Mutable type (B) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:AC    **********
(type_check_stack_push)  type_check_stack_push: 'AC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'AC' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'AC' type:f (1), %:0
(typecheck_expression)  *** BE:B    **********
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'AC' type:1 %:0
(type_check_stack_print)  N002: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'AC' type:f (1), %:0
(type_check_stack_display) 001: 'B' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'AC' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'AC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (AC)
Var: AC Float NumIdx:0
infix_stack_push: 'AC'
(infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
(infix_from_rpn) (+)
infix_stack_pop: 'B'
infix_stack_pop: 'AC'
infix_stack_push: '(AC + B)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(AC + B)'
infix_stack_push: 'PRINT((AC + B))'
Done

infix_stack_pop: 'PRINT((AC + B))'
Infix stack result PRINT((AC + B))
(infix_from_rpn) exit  'PRINT((AC + B))'
(process_expression_types) ==RINT((AC + B))==
(process_expression_types) 


(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:4
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=18 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=18 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=18 ''
     (check_literal) check_literal:After drop space:':' idx=18 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=18 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print "ac+b", ac+b
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=18 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=18 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=18 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'b' (98)
 (is_all_spaces) cline[8] = '+' (43)
 (is_all_spaces) cline[9] = 'a' (97)
 (is_all_spaces) cline[10] = 'c' (99)
 (is_all_spaces) cline[11] = '"' (34)
 (is_all_spaces) cline[12] = ',' (44)
 (is_all_spaces) cline[13] = ' ' (32)
 (is_all_spaces) cline[14] = 'b' (98)
 (is_all_spaces) cline[15] = '+' (43)
 (is_all_spaces) cline[16] = 'a' (97)
 (is_all_spaces) cline[17] = 'c' (99)
 (is_all_spaces) cline[18] = '	' (9)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "b+ac", b+ac	'
***********************
**print "b+ac", b+ac	**
***********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "b+ac", b+ac	'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "b+ac", b+ac	'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "b+ac", b+ac	'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "b+ac", b+ac	'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "b+ac", b+ac	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "b+ac", b+ac	'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "b+ac", b+ac	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "b+ac", b+ac	'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "b+ac", b+ac	'

   (check_operator) 'print "b+ac", b+ac	' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "b+ac", b+ac	':
   (check_vname) check_vname ret1 ' "b+ac", b+ac	':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "b+ac", b+ac	'

   (check_literal) check_literal:lit='(' idx=5 ' "b+ac", b+ac	'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "b+ac", b+ac	'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "b+ac", b+ac	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"b+ac", b+ac	'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "b+ac", b+ac	'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "b+ac", b+ac	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "b+ac", b+ac	'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "b+ac", b+ac	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "b+ac", b+ac	'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "b+ac", b+ac	'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "b+ac", b+ac	'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "b+ac", b+ac	'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "b+ac", b+ac	'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "b+ac", b+ac	'
   (check_literal) check_literal:After drop space:':' idx=5 ' "b+ac", b+ac	'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "b+ac", b+ac	'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "b+ac", b+ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "b+ac", b+ac	'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "b+ac", b+ac	'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "b+ac", b+ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "b+ac", b+ac	'
   (check_literal) check_literal:After while(): "b+ac", b+ac	
   (check_literal) ret1 Match. ' PRINT' == 'print "b+ac", b+ac	'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "b+ac", b+ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "b+ac", b+ac	'
   (check_literal) check_literal:After while(): "b+ac", b+ac	
   (check_literal) ret1 Match. ' PRINT' == 'print "b+ac", b+ac	'

   (check_expression) ' "b+ac", b+ac	'

    (check_eitem) check_eitem: '"b+ac", b+ac	'

     (check_function)  '"b+ac", b+ac	'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"b+ac", b+ac	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"b+ac", b+ac	'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"b+ac", b+ac	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"b+ac", b+ac	'
      (check_literal) check_literal:After while():b+ac", b+ac	
      (check_literal) ret1 Match. ' "' == '"b+ac", b+ac	'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', b+ac	' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', b+ac	' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "b+ac", b+ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "b+ac", b+ac	'
   (check_literal) check_literal:After while(): "b+ac", b+ac	
   (check_literal) ret1 Match. ' PRINT' == 'print "b+ac", b+ac	'
  (scan_print) Before while

   (check_expression) ' "b+ac", b+ac	'

    (check_eitem) check_eitem: '"b+ac", b+ac	'

     (check_function)  '"b+ac", b+ac	'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"b+ac", b+ac	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"b+ac", b+ac	'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"b+ac", b+ac	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"b+ac", b+ac	'
      (check_literal) check_literal:After while():b+ac", b+ac	
      (check_literal) ret1 Match. ' "' == '"b+ac", b+ac	'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', b+ac	' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', b+ac	' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "b+ac", b+ac	' igncomma:1

    (check_eitem) check_eitem: '"b+ac", b+ac	'

     (check_function)  '"b+ac", b+ac	'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"b+ac", b+ac	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"b+ac", b+ac	'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"b+ac", b+ac	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"b+ac", b+ac	'
      (check_literal) check_literal:After while():b+ac", b+ac	
      (check_literal) ret1 Match. ' "' == '"b+ac", b+ac	'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"b+ac", b+ac	'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"b+ac", b+ac	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"b+ac", b+ac	'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"b+ac", b+ac	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"b+ac", b+ac	'
      (check_literal) check_literal:After while():b+ac", b+ac	
      (check_literal) ret1 Match. ' "' == '"b+ac", b+ac	'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"b+ac", b+ac	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"b+ac", b+ac	'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"b+ac", b+ac	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"b+ac", b+ac	'
      (check_literal) check_literal:After while():b+ac", b+ac	
      (check_literal) ret1 Match. ' "' == '"b+ac", b+ac	'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"b+ac", b+ac	'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"b+ac", b+ac	'
       (check_literal) check_literal:After while():b+ac", b+ac	
       (check_literal) ret1 Match. ' "' == '"b+ac", b+ac	'
      (scan_string)   (in if) 'b+ac", b+ac	'
      (scan_string)   (in wh) 'b+ac", b+ac	'
      (scan_string)   (in wh) '+ac", b+ac	'
      (scan_string)   (in wh) '+ac", b+ac	'
      (scan_string)   (in wh) 'ac", b+ac	'
      (scan_string)   (in wh) 'ac", b+ac	'
      (scan_string)   (in wh) 'c", b+ac	'
      (scan_string)   (in wh) 'c", b+ac	'
      (scan_string)   (in wh) '", b+ac	'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"b+ac"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"b+ac"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"b+ac" is not function
token_is_variable: tok:'"b+ac"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"b+ac" is not function
(   output_string) [U,()] s "b+ac"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', b+ac	' Before while igncomma:1

    (check_operator) ', b+ac	' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', b+ac	' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=12 ', b+ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ', b+ac	'
   (check_literal) check_literal:After while(): b+ac	
   (check_literal) ret1 Match. ' ,' == ', b+ac	'

   (scan_literal_core) scan_literal_core:lit=' ,' ', b+ac	'
   (scan_literal_core) scan_literal_core:After drop space:', b+ac	'
   (scan_literal_core) scan_literal_core:while loop:, b+ac	
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=13 ' b+ac	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=14 'b+ac	'
 (check_literal)   ';' != 'b'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"b+ac"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :"b+ac"   *************
(type_check_stack_push)  type_check_stack_push: '"b+ac"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"b+ac"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"b+ac"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"b+ac"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:"b+ac"    **********
(type_check_stack_push)  type_check_stack_push: '"b+ac"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"b+ac"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"b+ac"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"b+ac"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"b+ac"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"b+ac"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("b+ac")
infix_stack_push: '"b+ac"'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"b+ac"'
infix_stack_push: 'PRINT("b+ac")'
Done

infix_stack_pop: 'PRINT("b+ac")'
Infix stack result PRINT("b+ac")
(infix_from_rpn) exit  'PRINT("b+ac")'
(process_expression_types) ==RINT("b+ac")==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 b+ac	
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 b+ac	
========================================================
(output_expression_start)

 (check_expression) ' b+ac	'

  (check_eitem) check_eitem: 'b+ac	'

   (check_function)  'b+ac	'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'b+ac	'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'b+ac	'
    (check_literal)   '%' != 'b'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'b+ac	'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'b+ac	'
    (check_literal)   '"' != 'b'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'b+ac	'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'b+ac	'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'b+ac	'
     (check_textlabel) 'b' is a text label chstr:'b'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
    (check_proc_call) 'b' is text label

     (check_literal) check_literal:lit=':' idx=15 '+ac	'
     (check_literal) check_literal:After drop space:':' idx=15 '+ac	'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'b+ac	'

     (check_operator) 'b+ac	' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'b+ac	':
     (check_vname) check_vname ret1 '+ac	':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+ac	'

     (check_literal) check_literal:lit='(' idx=15 '+ac	'
     (check_literal) check_literal:After drop space:'(' idx=15 '+ac	'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+ac	' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) 'ac	' igncomma:1
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'ac	'

  (check_function)  'ac	'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=16 'ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=16 'ac	'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=16 'ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=16 'ac	'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'ac	'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'ac	'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'ac	'
    (check_textlabel) 'ac' is a text label chstr:'c'
    (check_textlabel) Exit char:	
    (check_textlabel) check_textlabel:ret1 Name:'ac' Type:f
   (check_proc_call) 'ac' is text label

    (check_literal) check_literal:lit=':' idx=18 '	'
    (check_literal) check_literal:After drop space:':' idx=18 '	'
    (check_literal)   ':' != '	'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'ac	'

    (check_operator) 'ac	' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'ac	':
    (check_vname) check_vname ret1 '	':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '	'

    (check_literal) check_literal:lit='(' idx=18 '	'
    (check_literal) check_literal:After drop space:'(' idx=18 '	'
    (check_literal)   '(' != '	'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=18 '	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=19 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' b+ac	' igncomma:1

  (check_eitem) check_eitem: 'b+ac	'

   (check_function)  'b+ac	'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'b+ac	'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'b+ac	'
    (check_literal)   '%' != 'b'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'b+ac	'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'b+ac	'
    (check_literal)   '"' != 'b'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'b+ac	'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'b+ac	'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'b+ac	'
     (check_textlabel) 'b' is a text label chstr:'b'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
    (check_proc_call) 'b' is text label

     (check_literal) check_literal:lit=':' idx=15 '+ac	'
     (check_literal) check_literal:After drop space:':' idx=15 '+ac	'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'b+ac	'

     (check_operator) 'b+ac	' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'b+ac	':
     (check_vname) check_vname ret1 '+ac	':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+ac	'

     (check_literal) check_literal:lit='(' idx=15 '+ac	'
     (check_literal) check_literal:After drop space:'(' idx=15 '+ac	'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'b+ac	'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=14 'b+ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=14 'b+ac	'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=14 'b+ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=14 'b+ac	'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b+ac	'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b+ac	'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b+ac	'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=15 '+ac	'
    (check_literal) check_literal:After drop space:':' idx=15 '+ac	'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b+ac	'

    (check_operator) 'b+ac	' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b+ac	':
    (check_vname) check_vname ret1 '+ac	':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+ac	'

    (check_literal) check_literal:lit='(' idx=15 '+ac	'
    (check_literal) check_literal:After drop space:'(' idx=15 '+ac	'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=14 'b+ac	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=14 'b+ac	'
  (check_literal)   '%' != 'b'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=14 'b+ac	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=14 'b+ac	'
  (check_literal)   '"' != 'b'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'b+ac	'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'b+ac	'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'b+ac	'
   (check_textlabel) 'b' is a text label chstr:'b'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
  (check_proc_call) 'b' is text label

   (check_literal) check_literal:lit=':' idx=15 '+ac	'
   (check_literal) check_literal:After drop space:':' idx=15 '+ac	'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'b+ac	'

   (check_operator) 'b+ac	' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'b+ac	':
   (check_vname) check_vname ret1 '+ac	':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+ac	'

   (check_literal) check_literal:lit='(' idx=15 '+ac	'
   (check_literal) check_literal:After drop space:'(' idx=15 '+ac	'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'b+ac	' ref_ndeclare:1

  (scan_vname) scan_vname: 'b+ac	'
  (scan_vname) scan_vname: ret1 'b'
 (scan_variable) scan_variable: '+ac	' vname='B'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'B' is not other keyword
 (scan_variable) Array test '+ac	'

  (check_literal) check_literal:lit='(' idx=15 '+ac	'
  (check_literal) check_literal:After drop space:'(' idx=15 '+ac	'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='B' Float
(process_token)    Frst:1 T:'B' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'B'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f B
(add_var_info) Name:B Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 B'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+ac	' Before while igncomma:1

 (check_operator) '+ac	' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+ac	' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+ac	'
 (scan_operator) scan_operator: ret1 'ac	' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'ac	' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'ac	' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'ac	'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=16 'ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=16 'ac	'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=16 'ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=16 'ac	'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'ac	'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'ac	'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'ac	'
    (check_textlabel) 'ac' is a text label chstr:'c'
    (check_textlabel) Exit char:	
    (check_textlabel) check_textlabel:ret1 Name:'ac' Type:f
   (check_proc_call) 'ac' is text label

    (check_literal) check_literal:lit=':' idx=18 '	'
    (check_literal) check_literal:After drop space:':' idx=18 '	'
    (check_literal)   ':' != '	'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'ac	'

    (check_operator) 'ac	' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'ac	':
    (check_vname) check_vname ret1 '	':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '	'

    (check_literal) check_literal:lit='(' idx=18 '	'
    (check_literal) check_literal:After drop space:'(' idx=18 '	'
    (check_literal)   '(' != '	'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=16 'ac	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=16 'ac	'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=16 'ac	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=16 'ac	'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'ac	'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'ac	'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'ac	'
   (check_textlabel) 'ac' is a text label chstr:'c'
   (check_textlabel) Exit char:	
   (check_textlabel) check_textlabel:ret1 Name:'ac' Type:f
  (check_proc_call) 'ac' is text label

   (check_literal) check_literal:lit=':' idx=18 '	'
   (check_literal) check_literal:After drop space:':' idx=18 '	'
   (check_literal)   ':' != '	'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'ac	'

   (check_operator) 'ac	' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'ac	':
   (check_vname) check_vname ret1 '	':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '	'

   (check_literal) check_literal:lit='(' idx=18 '	'
   (check_literal) check_literal:After drop space:'(' idx=18 '	'
   (check_literal)   '(' != '	'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'ac	' ref_ndeclare:1

  (scan_vname) scan_vname: 'ac	'
  (scan_vname) scan_vname: ret1 'ac'
 (scan_variable) scan_variable: '	' vname='AC'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'AC' is not other keyword
 (scan_variable) Array test '	'

  (check_literal) check_literal:lit='(' idx=18 '	'
  (check_literal) check_literal:After drop space:'(' idx=18 '	'
  (check_literal)   '(' != '	'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='AC' Float
(process_token)    Frst:0 T:'AC' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'AC'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AC is not function
token_is_variable: tok:'AC'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AC is not function
(init_get_name) 
init_get_name:'AC'
(init_get_name) 
init_get_name:'AC'
(get_name) 
get_name:gn:'AC'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f AC
(add_var_info) Name:AC Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                AC'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=18 '	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=19 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '	' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ f
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=18 '	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=19 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=19 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=19 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:4 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :B   *************
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'B' type:f (1), %:0
(process_syntax_tree) *********Processing :AC   *************
(type_check_stack_push)  type_check_stack_push: 'AC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print)  N002: 'AC' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'B' type:f (1), %:0
(type_check_stack_display) 001: 'AC' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'AC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N002) percent:0
(process_syntax_tree) Mutable type (AC) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:B    **********
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'B' type:f (1), %:0
(typecheck_expression)  *** BE:AC    **********
(type_check_stack_push)  type_check_stack_push: 'AC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print)  N002: 'AC' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'B' type:f (1), %:0
(type_check_stack_display) 001: 'AC' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'AC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
(infix_from_rpn) (AC)
Var: AC Float NumIdx:0
infix_stack_push: 'AC'
(infix_from_rpn) (+)
infix_stack_pop: 'AC'
infix_stack_pop: 'B'
infix_stack_push: '(B + AC)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(B + AC)'
infix_stack_push: 'PRINT((B + AC))'
Done

infix_stack_pop: 'PRINT((B + AC))'
Infix stack result PRINT((B + AC))
(infix_from_rpn) exit  'PRINT((B + AC))'
(process_expression_types) ==RINT((B + AC))==
(process_expression_types) 


(finalise_expression) Finalise expression done.
	
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:4
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(finalise_expression) Finalise expression done.
	
========================================================
(output_expression_start)

 (check_expression) '	'

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=19 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=19 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=19 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=19 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=19 ''
     (check_literal) check_literal:After drop space:':' idx=19 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=19 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=19 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=18 '	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=19 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=19 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=19 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=18 '	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=19 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print "b+ac", b+ac	
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=19 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=19 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=19 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = '1' (49)
 (is_all_spaces) cline[8] = '2' (50)
 (is_all_spaces) cline[9] = '6' (54)
 (is_all_spaces) cline[10] = '8' (56)
 (is_all_spaces) cline[11] = '.' (46)
 (is_all_spaces) cline[12] = '7' (55)
 (is_all_spaces) cline[13] = '+' (43)
 (is_all_spaces) cline[14] = '1' (49)
 (is_all_spaces) cline[15] = '.' (46)
 (is_all_spaces) cline[16] = '3' (51)
 (is_all_spaces) cline[17] = '3' (51)
 (is_all_spaces) cline[18] = '3' (51)
 (is_all_spaces) cline[19] = '"' (34)
 (is_all_spaces) cline[20] = ',' (44)
 (is_all_spaces) cline[21] = ' ' (32)
 (is_all_spaces) cline[22] = '1' (49)
 (is_all_spaces) cline[23] = '2' (50)
 (is_all_spaces) cline[24] = '6' (54)
 (is_all_spaces) cline[25] = '8' (56)
 (is_all_spaces) cline[26] = '.' (46)
 (is_all_spaces) cline[27] = '7' (55)
 (is_all_spaces) cline[28] = '+' (43)
 (is_all_spaces) cline[29] = '1' (49)
 (is_all_spaces) cline[30] = '.' (46)
 (is_all_spaces) cline[31] = '3' (51)
 (is_all_spaces) cline[32] = '3' (51)
 (is_all_spaces) cline[33] = '3' (51)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "1268.7+1.333", 1268.7+1.333'
**************************************
**print "1268.7+1.333", 1268.7+1.333**
**************************************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "1268.7+1.333", 1268.7+1.333'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "1268.7+1.333", 1268.7+1.333'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "1268.7+1.333", 1268.7+1.333'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "1268.7+1.333", 1268.7+1.333'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "1268.7+1.333", 1268.7+1.333'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "1268.7+1.333", 1268.7+1.333'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "1268.7+1.333", 1268.7+1.333'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "1268.7+1.333", 1268.7+1.333'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "1268.7+1.333", 1268.7+1.333'

   (check_operator) 'print "1268.7+1.333", 1268.7+1.333' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "1268.7+1.333", 1268.7+1.333':
   (check_vname) check_vname ret1 ' "1268.7+1.333", 1268.7+1.333':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "1268.7+1.333", 1268.7+1.333'

   (check_literal) check_literal:lit='(' idx=5 ' "1268.7+1.333", 1268.7+1.333'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "1268.7+1.333", 1268.7+1.333'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "1268.7+1.333", 1268.7+1.333'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"1268.7+1.333", 1268.7+1.333'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "1268.7+1.333", 1268.7+1.333'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "1268.7+1.333", 1268.7+1.333'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "1268.7+1.333", 1268.7+1.333'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "1268.7+1.333", 1268.7+1.333'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "1268.7+1.333", 1268.7+1.333'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "1268.7+1.333", 1268.7+1.333'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "1268.7+1.333", 1268.7+1.333'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "1268.7+1.333", 1268.7+1.333'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "1268.7+1.333", 1268.7+1.333'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "1268.7+1.333", 1268.7+1.333'
   (check_literal) check_literal:After drop space:':' idx=5 ' "1268.7+1.333", 1268.7+1.333'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "1268.7+1.333", 1268.7+1.333'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "1268.7+1.333", 1268.7+1.333'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "1268.7+1.333", 1268.7+1.333'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "1268.7+1.333", 1268.7+1.333'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "1268.7+1.333", 1268.7+1.333'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "1268.7+1.333", 1268.7+1.333'
   (check_literal) check_literal:After while(): "1268.7+1.333", 1268.7+1.333
   (check_literal) ret1 Match. ' PRINT' == 'print "1268.7+1.333", 1268.7+1.333'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "1268.7+1.333", 1268.7+1.333'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "1268.7+1.333", 1268.7+1.333'
   (check_literal) check_literal:After while(): "1268.7+1.333", 1268.7+1.333
   (check_literal) ret1 Match. ' PRINT' == 'print "1268.7+1.333", 1268.7+1.333'

   (check_expression) ' "1268.7+1.333", 1268.7+1.333'

    (check_eitem) check_eitem: '"1268.7+1.333", 1268.7+1.333'

     (check_function)  '"1268.7+1.333", 1268.7+1.333'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) check_literal:After while():1268.7+1.333", 1268.7+1.333
      (check_literal) ret1 Match. ' "' == '"1268.7+1.333", 1268.7+1.333'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', 1268.7+1.333' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', 1268.7+1.333' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "1268.7+1.333", 1268.7+1.333'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "1268.7+1.333", 1268.7+1.333'
   (check_literal) check_literal:After while(): "1268.7+1.333", 1268.7+1.333
   (check_literal) ret1 Match. ' PRINT' == 'print "1268.7+1.333", 1268.7+1.333'
  (scan_print) Before while

   (check_expression) ' "1268.7+1.333", 1268.7+1.333'

    (check_eitem) check_eitem: '"1268.7+1.333", 1268.7+1.333'

     (check_function)  '"1268.7+1.333", 1268.7+1.333'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) check_literal:After while():1268.7+1.333", 1268.7+1.333
      (check_literal) ret1 Match. ' "' == '"1268.7+1.333", 1268.7+1.333'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', 1268.7+1.333' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', 1268.7+1.333' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "1268.7+1.333", 1268.7+1.333' igncomma:1

    (check_eitem) check_eitem: '"1268.7+1.333", 1268.7+1.333'

     (check_function)  '"1268.7+1.333", 1268.7+1.333'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) check_literal:After while():1268.7+1.333", 1268.7+1.333
      (check_literal) ret1 Match. ' "' == '"1268.7+1.333", 1268.7+1.333'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"1268.7+1.333", 1268.7+1.333'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) check_literal:After while():1268.7+1.333", 1268.7+1.333
      (check_literal) ret1 Match. ' "' == '"1268.7+1.333", 1268.7+1.333'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) check_literal:After while():1268.7+1.333", 1268.7+1.333
      (check_literal) ret1 Match. ' "' == '"1268.7+1.333", 1268.7+1.333'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"1268.7+1.333", 1268.7+1.333'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"1268.7+1.333", 1268.7+1.333'
       (check_literal) check_literal:After while():1268.7+1.333", 1268.7+1.333
       (check_literal) ret1 Match. ' "' == '"1268.7+1.333", 1268.7+1.333'
      (scan_string)   (in if) '1268.7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '1268.7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '268.7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '268.7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '68.7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '68.7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '8.7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '8.7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '.7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '.7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '1.333", 1268.7+1.333'
      (scan_string)   (in wh) '1.333", 1268.7+1.333'
      (scan_string)   (in wh) '.333", 1268.7+1.333'
      (scan_string)   (in wh) '.333", 1268.7+1.333'
      (scan_string)   (in wh) '333", 1268.7+1.333'
      (scan_string)   (in wh) '333", 1268.7+1.333'
      (scan_string)   (in wh) '33", 1268.7+1.333'
      (scan_string)   (in wh) '33", 1268.7+1.333'
      (scan_string)   (in wh) '3", 1268.7+1.333'
      (scan_string)   (in wh) '3", 1268.7+1.333'
      (scan_string)   (in wh) '", 1268.7+1.333'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"1268.7+1.333"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"1268.7+1.333"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"1268.7+1.333" is not function
token_is_variable: tok:'"1268.7+1.333"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"1268.7+1.333" is not function
(   output_string) [U,()] s "1268.7+1.333"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', 1268.7+1.333' Before while igncomma:1

    (check_operator) ', 1268.7+1.333' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', 1268.7+1.333' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=20 ', 1268.7+1.333'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=20 ', 1268.7+1.333'
   (check_literal) check_literal:After while(): 1268.7+1.333
   (check_literal) ret1 Match. ' ,' == ', 1268.7+1.333'

   (scan_literal_core) scan_literal_core:lit=' ,' ', 1268.7+1.333'
   (scan_literal_core) scan_literal_core:After drop space:', 1268.7+1.333'
   (scan_literal_core) scan_literal_core:while loop:, 1268.7+1.333
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=21 ' 1268.7+1.333'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=22 '1268.7+1.333'
 (check_literal)   ';' != '1'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"1268.7+1.333"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :"1268.7+1.333"   *************
(type_check_stack_push)  type_check_stack_push: '"1268.7+1.333"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"1268.7+1.333"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"1268.7+1.333"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"1268.7+1.333"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:"1268.7+1.333"    **********
(type_check_stack_push)  type_check_stack_push: '"1268.7+1.333"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"1268.7+1.333"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"1268.7+1.333"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"1268.7+1.333"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"1268.7+1.333"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"1268.7+1.333"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("1268.7+1.333")
infix_stack_push: '"1268.7+1.333"'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"1268.7+1.333"'
infix_stack_push: 'PRINT("1268.7+1.333")'
Done

infix_stack_pop: 'PRINT("1268.7+1.333")'
Infix stack result PRINT("1268.7+1.333")
(infix_from_rpn) exit  'PRINT("1268.7+1.333")'
(process_expression_types) ==RINT("1268.7+1.333")==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 1268.7+1.333
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 1268.7+1.333
========================================================
(output_expression_start)

 (check_expression) ' 1268.7+1.333'

  (check_eitem) check_eitem: '1268.7+1.333'

   (check_function)  '1268.7+1.333'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=22 '1268.7+1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 '1268.7+1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=22 '1268.7+1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 '1268.7+1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1268.7' float:1.268700e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (check_operator) '+1.333' igncomma:1
  (check_operator) ret1:is comma: 0

  (check_operator) '1.333' igncomma:1
  (check_operator) ret0:is comma: 0

  (check_eitem) check_eitem: '1.333'

   (check_function)  '1.333'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=29 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=29 '1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=29 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=29 '1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1
 (check_expression) n commas now:0

  (check_literal) check_literal:lit=' %' idx=34 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=34 ''
  (check_literal) check_literal  ret0 Empty test string

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' 1268.7+1.333' igncomma:1

  (check_eitem) check_eitem: '1268.7+1.333'

   (check_function)  '1268.7+1.333'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=22 '1268.7+1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 '1268.7+1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=22 '1268.7+1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 '1268.7+1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1268.7' float:1.268700e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (scan_eitem) scan_eitem:

   (check_function)  '1268.7+1.333'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=22 '1268.7+1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 '1268.7+1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=22 '1268.7+1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 '1268.7+1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1268.7' float:1.268700e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=22 '1268.7+1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 '1268.7+1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=22 '1268.7+1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 '1268.7+1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1268.7' float:1.268700e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1268.7' float:1.268700e+03
     (check_float) check_float: ret1

     (scan_float) scan_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (scan_float) Fltval:'1268.7' float:1.268700e+03
     (scan_float) scan_float: ret1
    (process_token)    Frst:1 T:'1268.7' toktype:i exptype:U bufid:'EXP_BUFF_ID_FLT'
    (process_token) Before switch, bufid:'EXP_BUFF_ID_FLT'
modify_expression_type:Inittype:U Intype:f Outtype:f
(    output_float) [f,()] f 1268.7
    (scan_atom) ret1
   (scan_expression) '+1.333' Before while igncomma:1

    (check_operator) '+1.333' igncomma:1
    (check_operator) ret1:is comma: 0

    (check_operator) '+1.333' igncomma:1
    (check_operator) ret1:is comma: 0

    (scan_operator) scan_operator: '+1.333'
    (scan_operator) scan_operator: ret1 '1.333' nb:0
   (process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
   (operator_precedence) 
+ is operator
   (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
   (process_token) 
Token is operator o1 name:+ o2 name:
   (process_token) 
opr1:3 opr2:100
   (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
   (op_stack_print) ------------------
   (op_stack_print) Operator Stack     (1)

   (op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
   (op_stack_print) ------------------


    (check_operator) '1.333' igncomma:1
    (check_operator) ret0:is comma: 0
   (scan_expression) '1.333' Before scan_eitem igncomma:1

    (scan_eitem) scan_eitem:

     (check_function)  '1.333'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=29 '1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=29 '1.333'
      (check_literal)   '%' != '1'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=29 '1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=29 '1.333'
      (check_literal)   '"' != '1'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'1.333' float:1.333000e+00
       (check_float) check_float: ret1
      (check_number) check_number: ret1
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=29 '1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=29 '1.333'
      (check_literal)   '%' != '1'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=29 '1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=29 '1.333'
      (check_literal)   '"' != '1'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'1.333' float:1.333000e+00
       (check_float) check_float: ret1
      (check_number) check_number: ret1

      (scan_number) scan_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'1.333' float:1.333000e+00
       (check_float) check_float: ret1

       (scan_float) scan_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (scan_float) Fltval:'1.333' float:1.333000e+00
       (scan_float) scan_float: ret1
      (process_token)    Frst:0 T:'1.333' toktype:i exptype:f bufid:'EXP_BUFF_ID_FLT'
      (operator_precedence) 
+ is operator
      (process_token) Before switch, bufid:'EXP_BUFF_ID_FLT'
modify_expression_type:Inittype:f Intype:f Outtype:f
(    output_float) [f,()] f 1.333
      (scan_atom) ret1
     (scan_expression) n commas now:0

      (check_literal) check_literal:lit=' %' idx=34 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=34 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_operator) '' igncomma:1
      (check_operator) ret0:is comma: 0
     (scan_expression) ret1 '' commas:0
    (op_stack_finalise) Finalise stack
    (op_stack_pop) Pop '+' type:f 
    (op_stack_print) ------------------
    (op_stack_print) Operator Stack     (0)

    (op_stack_print) ------------------

    (op_stack_finalise) Popped:+ f
    (output_operator) [f,()] f +
    (output_generic) [f,()] f PRINT exp_type:f
    (scan_print) After scan expression I

     (check_literal) check_literal:lit=' ,' idx=34 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=34 ''
     (check_literal) check_literal  ret0 Empty test string
    (scan_print) After scan expression II

     (check_literal) check_literal:lit=' ;' idx=34 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:';' idx=34 ''
     (check_literal) check_literal  ret0 Empty test string
    (scan_print) Checking if delimiter was present
    (scan_print) No delimiter present
    (finalise_expression) Finalise expression Buf i:4 buf2 i:1
    (op_stack_finalise) Finalise stack
    (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1268.7' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1.333' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

    (process_syntax_tree) Pass:1
    (process_syntax_tree) *********Processing :1268.7   *************
    (type_check_stack_push)  type_check_stack_push: '1268.7'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (1)

    (type_check_stack_print)  N001: '1268.7' type:1 %:0
    (type_check_stack_print) ------------------

    (type_check_stack_display) Type Check Stack (1)
    (type_check_stack_display) 000: '1268.7' type:f (1), %:0
    (process_syntax_tree) *********Processing :1.333   *************
    (type_check_stack_push)  type_check_stack_push: '1.333'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (2)

    (type_check_stack_print)  N001: '1268.7' type:1 %:0
    (type_check_stack_print)  N002: '1.333' type:1 %:0
    (type_check_stack_print) ------------------

    (type_check_stack_display) Type Check Stack (2)
    (type_check_stack_display) 000: '1268.7' type:f (1), %:0
    (type_check_stack_display) 001: '1.333' type:f (1), %:0
    (process_syntax_tree) *********Processing :+   *************
    (process_syntax_tree) BUFF_ID_OPERATOR
    (process_syntax_tree) Found operator + %conv:1
    (type_check_stack_pop)   type_check_stack_pop: '1.333'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (1)

    (type_check_stack_print)  N001: '1268.7' type:1 %:0
    (type_check_stack_print) ------------------

    (type_check_stack_pop)   type_check_stack_pop: '1268.7'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (0)

    (type_check_stack_print) ------------------

    (process_syntax_tree) op1 type:f op2 type:f %conv:1
    (process_syntax_tree) Percent convertible operator op1 (N002) percent:0
    (process_syntax_tree) Mutable type (1.333) f f
    (process_syntax_tree) Same type
    (type_check_stack_push)  type_check_stack_push: '000'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (1)

    (type_check_stack_print)  N003: '000' type:1 %:0
    (type_check_stack_print) ------------------

    (type_check_stack_display) Type Check Stack (1)
    (type_check_stack_display) 000: '000' type:f (1), %:0
    (process_syntax_tree) *********Processing :PRINT   *************
    (process_syntax_tree) PRINT type adjust
    (type_check_stack_pop)   type_check_stack_pop: '000'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (0)

    (type_check_stack_print) ------------------

    (type_check_stack_display) Type Check Stack (0)
    (typecheck_expression) Pass:1
    (typecheck_expression)  *** BE:1268.7    **********
    (type_check_stack_push)  type_check_stack_push: '1268.7'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (1)

    (type_check_stack_print)  N001: '1268.7' type:1 %:0
    (type_check_stack_print) ------------------

    (type_check_stack_display) Type Check Stack (1)
    (type_check_stack_display) 000: '1268.7' type:f (1), %:0
    (typecheck_expression)  *** BE:1.333    **********
    (type_check_stack_push)  type_check_stack_push: '1.333'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (2)

    (type_check_stack_print)  N001: '1268.7' type:1 %:0
    (type_check_stack_print)  N002: '1.333' type:1 %:0
    (type_check_stack_print) ------------------

    (type_check_stack_display) Type Check Stack (2)
    (type_check_stack_display) 000: '1268.7' type:f (1), %:0
    (type_check_stack_display) 001: '1.333' type:f (1), %:0
    (typecheck_expression)  *** BE:+    **********
    (typecheck_expression) BUFF_ID_OPERATOR
    (typecheck_expression) Found operator +
    (type_check_stack_pop)   type_check_stack_pop: '1.333'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (1)

    (type_check_stack_print)  N001: '1268.7' type:1 %:0
    (type_check_stack_print) ------------------

    (type_check_stack_pop)   type_check_stack_pop: '1268.7'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (0)

    (type_check_stack_print) ------------------

    (typecheck_expression) op1 type:f op2 type:f
    (typecheck_expression) Mutable type (+) f f
    (typecheck_expression) Same type
    (type_check_stack_push)  type_check_stack_push: '000'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (1)

    (type_check_stack_print)  N003: '000' type:1 %:0
    (type_check_stack_print) ------------------

    (type_check_stack_display) Type Check Stack (1)
    (type_check_stack_display) 000: '000' type:f (1), %:0
    (typecheck_expression)  *** BE:PRINT    **********
    (typecheck_expression) PRINT type adjust
    (type_check_stack_pop)   type_check_stack_pop: '000'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (0)

    (type_check_stack_print) ------------------

    (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1268.7' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1.333' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1268.7' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1.333' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

    (process_expression_types) 
==INFIX==

    (infix_from_rpn) (1268.7)
infix_stack_push: '1268.7'
    (infix_from_rpn) (1.333)
infix_stack_push: '1.333'
    (infix_from_rpn) (+)
infix_stack_pop: '1.333'
infix_stack_pop: '1268.7'
infix_stack_push: '(1268.7 + 1.333)'
    (infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(1268.7 + 1.333)'
infix_stack_push: 'PRINT((1268.7 + 1.333))'
Done

infix_stack_pop: 'PRINT((1268.7 + 1.333))'
Infix stack result PRINT((1268.7 + 1.333))
    (infix_from_rpn) exit  'PRINT((1268.7 + 1.333))'
    (process_expression_types) ==RINT((1268.7 + 1.333))==
    (process_expression_types) 


    (finalise_expression) Finalise expression done.
    (process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
    (process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
    (op_stack_print) ------------------
    (op_stack_print) Operator Stack     (1)

    (op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
    (op_stack_print) ------------------

    (finalise_expression) Finalise expression Buf i:0 buf2 i:4
    (op_stack_finalise) Finalise stack
    (op_stack_pop) Pop 'PRINT' type:U 
    (op_stack_print) ------------------
    (op_stack_print) Operator Stack     (0)

    (op_stack_print) ------------------

    (op_stack_finalise) Popped:PRINT U
    (output_operator) [U,()] U PRINT
    (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

    (process_syntax_tree) Pass:1
    (process_syntax_tree) *********Processing :PRINT   *************
default buf_id
    (type_check_stack_display) Type Check Stack (0)
    (typecheck_expression) Pass:1
    (typecheck_expression)  *** BE:PRINT    **********
default buf_id
    (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

    (process_expression_types) 
==INFIX==

    (infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
    (infix_from_rpn) exit  '<nl>'
    (process_expression_types) ==nl>==
    (process_expression_types) 


    (finalise_expression) Finalise expression done.

     (check_expression) ''

      (check_eitem) check_eitem: ''

       (check_function)  ''
       (check_function) ret0

       (check_atom) check_atom:
       (check_atom) check_atom:Checking for character constant

        (check_literal) check_literal:lit=' %' idx=34 ''
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=34 ''
        (check_literal) check_literal  ret0 Empty test string
       (check_atom) check_atom:Checking for string

        (check_literal) check_literal:lit=' "' idx=34 ''
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=34 ''
        (check_literal) check_literal  ret0 Empty test string

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) Fltval:'' float:0.000000e+00
         (check_float) check_float: ret0

         (check_integer) check_integer: ''
         (check_integer) check_integer:ret0

         (check_hex) check_hex: ''
         (check_hex) check_hex:ret0 not '$'
        (check_number) check_number: ret0

        (check_proc_call) check_proc_call:

         (check_textlabel) ''
         (check_textlabel) '' is a text label chstr:'@'
         (check_textlabel) Exit char:
         (check_textlabel) check_textlabel:ret1 Name:'' Type:f
        (check_proc_call) '' is text label

         (check_literal) check_literal:lit=':' idx=34 ''
         (check_literal) check_literal:After drop space:':' idx=34 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_proc_call) check_proc_call:ret0

        (check_variable) ''

         (check_operator) '' igncomma:1
         (check_operator) ret0:is comma: 32767

         (check_vname) check_vname '':
         (check_vname) check_vname ret0 '':
        (check_variable) check_variable:ret0 
       (check_atom) check_atom:ret0

       (check_sub_expr) check_sub_expr:

        (check_literal) check_literal:lit=' (' idx=34 ''
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'(' idx=34 ''
        (check_literal) check_literal  ret0 Empty test string
       (check_sub_expr) ret0: No '('

       (check_addr_name) check_addr_name: ''

        (check_vname) check_vname '':
        (check_vname) check_vname ret0 '':
       (check_addr_name) check_addr_name: ret0
      (check_eitem) check_eitem:ret0

      (check_operator) '' igncomma:1
      (check_operator) ret0:is comma: 0
     (check_expression) ret0 ''
    (scan_print) Check for trailing delimiter

     (check_literal) check_literal:lit=' ;' idx=34 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:';' idx=34 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' ,' idx=34 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=34 ''
     (check_literal) check_literal  ret0 Empty test string
    (scan_print) scan_print:ret1 Expression 
   (scan_line) ret1 print
  (translate_file) ********************************************************************************
  (translate_file) ********************************************************************************
  (translate_file) Scan line ok

   (check_literal) check_literal:lit=' :' idx=34 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:':' idx=34 ''
   (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print "1268.7+1.333", 1268.7+1.333
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=34 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=34 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=34 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = 'c' (99)
 (is_all_spaces) cline[7] = '.' (46)
 (is_all_spaces) cline[8] = 't' (116)
 (is_all_spaces) cline[9] = 'e' (101)
 (is_all_spaces) cline[10] = 's' (115)
 (is_all_spaces) cline[11] = 't' (116)
 (is_all_spaces) cline[12] = ',' (44)
 (is_all_spaces) cline[13] = ' ' (32)
 (is_all_spaces) cline[14] = 'c' (99)
 (is_all_spaces) cline[15] = '.' (46)
 (is_all_spaces) cline[16] = 's' (115)
 (is_all_spaces) cline[17] = 'e' (101)
 (is_all_spaces) cline[18] = 'c' (99)
 (is_all_spaces) cline[19] = 'o' (111)
 (is_all_spaces) cline[20] = 'n' (110)
 (is_all_spaces) cline[21] = 'd' (100)
 (is_all_spaces) cline[22] = ',' (44)
 (is_all_spaces) cline[23] = ' ' (32)
 (is_all_spaces) cline[24] = 'c' (99)
 (is_all_spaces) cline[25] = '.' (46)
 (is_all_spaces) cline[26] = 't' (116)
 (is_all_spaces) cline[27] = 'h' (104)
 (is_all_spaces) cline[28] = 'i' (105)
 (is_all_spaces) cline[29] = 'r' (114)
 (is_all_spaces) cline[30] = 'd' (100)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print c.test, c.second, c.third'
***********************************
**print c.test, c.second, c.third**
***********************************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print c.test, c.second, c.third'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print c.test, c.second, c.third'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print c.test, c.second, c.third'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print c.test, c.second, c.third'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print c.test, c.second, c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print c.test, c.second, c.third'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print c.test, c.second, c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print c.test, c.second, c.third'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print c.test, c.second, c.third'

   (check_operator) 'print c.test, c.second, c.third' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print c.test, c.second, c.third':
   (check_vname) check_vname ret1 ' c.test, c.second, c.third':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' c.test, c.second, c.third'

   (check_literal) check_literal:lit='(' idx=5 ' c.test, c.second, c.third'
   (check_literal) check_literal:After drop space:'(' idx=5 ' c.test, c.second, c.third'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' c.test, c.second, c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 'c.test, c.second, c.third'
 (check_literal)   '=' != 'c'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print c.test, c.second, c.third'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print c.test, c.second, c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print c.test, c.second, c.third'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print c.test, c.second, c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print c.test, c.second, c.third'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print c.test, c.second, c.third'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' c.test, c.second, c.third'
   (check_literal) check_literal:After drop space:'::' idx=5 ' c.test, c.second, c.third'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print c.test, c.second, c.third'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' c.test, c.second, c.third'
   (check_literal) check_literal:After drop space:':' idx=5 ' c.test, c.second, c.third'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print c.test, c.second, c.third'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print c.test, c.second, c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print c.test, c.second, c.third'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print c.test, c.second, c.third'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print c.test, c.second, c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print c.test, c.second, c.third'
   (check_literal) check_literal:After while(): c.test, c.second, c.third
   (check_literal) ret1 Match. ' PRINT' == 'print c.test, c.second, c.third'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print c.test, c.second, c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print c.test, c.second, c.third'
   (check_literal) check_literal:After while(): c.test, c.second, c.third
   (check_literal) ret1 Match. ' PRINT' == 'print c.test, c.second, c.third'

   (check_expression) ' c.test, c.second, c.third'

    (check_eitem) check_eitem: 'c.test, c.second, c.third'

     (check_function)  'c.test, c.second, c.third'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 'c.test, c.second, c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 'c.test, c.second, c.third'
      (check_literal)   '%' != 'c'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 'c.test, c.second, c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 'c.test, c.second, c.third'
      (check_literal)   '"' != 'c'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'' float:0.000000e+00
       (check_float) check_float: ret0

       (check_integer) check_integer: 'c.test, c.second, c.third'
       (check_integer) check_integer:ret0

       (check_hex) check_hex: 'c.test, c.second, c.third'
       (check_hex) check_hex:ret0 not '$'
      (check_number) check_number: ret0

      (check_proc_call) check_proc_call:

       (check_textlabel) 'c.test, c.second, c.third'
       (check_textlabel) 'c.test' is a text label chstr:'t'
       (check_textlabel) Exit char:,
       (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
      (check_proc_call) 'c.test' is text label

       (check_literal) check_literal:lit=':' idx=12 ', c.second, c.third'
       (check_literal) check_literal:After drop space:':' idx=12 ', c.second, c.third'
       (check_literal)   ':' != ','
       (check_literal) check_literal: ret0
      (check_proc_call) check_proc_call:ret0

      (check_variable) 'c.test, c.second, c.third'

       (check_operator) 'c.test, c.second, c.third' igncomma:1
       (check_operator) ret0:is comma: 32767

       (check_vname) check_vname 'c.test, c.second, c.third':
       (check_vname) check_vname ret1 ', c.second, c.third':
      (check_variable) Name: ''
      (check_variable) check_variable: Ary test ', c.second, c.third'

       (check_literal) check_literal:lit='(' idx=12 ', c.second, c.third'
       (check_literal) check_literal:After drop space:'(' idx=12 ', c.second, c.third'
       (check_literal)   '(' != ','
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) ret1
   (check_eitem) ret1

   (check_operator) ', c.second, c.third' igncomma:1
   (check_operator) ret0:is comma: 0
  (check_expression) ret1 ', c.second, c.third' commas:0

  (check_literal) check_literal:lit=' PRINT' idx=0 'print c.test, c.second, c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'PRINT' idx=0 'print c.test, c.second, c.third'
  (check_literal) check_literal:After while(): c.test, c.second, c.third
  (check_literal) ret1 Match. ' PRINT' == 'print c.test, c.second, c.third'
 (scan_print) Before while

  (check_expression) ' c.test, c.second, c.third'

   (check_eitem) check_eitem: 'c.test, c.second, c.third'

    (check_function)  'c.test, c.second, c.third'
    (check_function) ret0

    (check_atom) check_atom:
    (check_atom) check_atom:Checking for character constant

     (check_literal) check_literal:lit=' %' idx=6 'c.test, c.second, c.third'
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'c.test, c.second, c.third'
     (check_literal)   '%' != 'c'
     (check_literal) check_literal: ret0
    (check_atom) check_atom:Checking for string

     (check_literal) check_literal:lit=' "' idx=6 'c.test, c.second, c.third'
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'c.test, c.second, c.third'
     (check_literal)   '"' != 'c'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) Fltval:'' float:0.000000e+00
      (check_float) check_float: ret0

      (check_integer) check_integer: 'c.test, c.second, c.third'
      (check_integer) check_integer:ret0

      (check_hex) check_hex: 'c.test, c.second, c.third'
      (check_hex) check_hex:ret0 not '$'
     (check_number) check_number: ret0

     (check_proc_call) check_proc_call:

      (check_textlabel) 'c.test, c.second, c.third'
      (check_textlabel) 'c.test' is a text label chstr:'t'
      (check_textlabel) Exit char:,
      (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
     (check_proc_call) 'c.test' is text label

      (check_literal) check_literal:lit=':' idx=12 ', c.second, c.third'
      (check_literal) check_literal:After drop space:':' idx=12 ', c.second, c.third'
      (check_literal)   ':' != ','
      (check_literal) check_literal: ret0
     (check_proc_call) check_proc_call:ret0

     (check_variable) 'c.test, c.second, c.third'

      (check_operator) 'c.test, c.second, c.third' igncomma:1
      (check_operator) ret0:is comma: 32767

      (check_vname) check_vname 'c.test, c.second, c.third':
      (check_vname) check_vname ret1 ', c.second, c.third':
     (check_variable) Name: ''
     (check_variable) check_variable: Ary test ', c.second, c.third'

      (check_literal) check_literal:lit='(' idx=12 ', c.second, c.third'
      (check_literal) check_literal:After drop space:'(' idx=12 ', c.second, c.third'
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) ret1
  (check_eitem) ret1

  (check_operator) ', c.second, c.third' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret1 ', c.second, c.third' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' c.test, c.second, c.third' igncomma:1

  (check_eitem) check_eitem: 'c.test, c.second, c.third'

   (check_function)  'c.test, c.second, c.third'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=6 'c.test, c.second, c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=6 'c.test, c.second, c.third'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=6 'c.test, c.second, c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=6 'c.test, c.second, c.third'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.test, c.second, c.third'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.test, c.second, c.third'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.test, c.second, c.third'
     (check_textlabel) 'c.test' is a text label chstr:'t'
     (check_textlabel) Exit char:,
     (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
    (check_proc_call) 'c.test' is text label

     (check_literal) check_literal:lit=':' idx=12 ', c.second, c.third'
     (check_literal) check_literal:After drop space:':' idx=12 ', c.second, c.third'
     (check_literal)   ':' != ','
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.test, c.second, c.third'

     (check_operator) 'c.test, c.second, c.third' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.test, c.second, c.third':
     (check_vname) check_vname ret1 ', c.second, c.third':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ', c.second, c.third'

     (check_literal) check_literal:lit='(' idx=12 ', c.second, c.third'
     (check_literal) check_literal:After drop space:'(' idx=12 ', c.second, c.third'
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'c.test, c.second, c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=6 'c.test, c.second, c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'c.test, c.second, c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=6 'c.test, c.second, c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'c.test, c.second, c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.test, c.second, c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.test, c.second, c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.test, c.second, c.third'
    (check_textlabel) 'c.test' is a text label chstr:'t'
    (check_textlabel) Exit char:,
    (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
   (check_proc_call) 'c.test' is text label

    (check_literal) check_literal:lit=':' idx=12 ', c.second, c.third'
    (check_literal) check_literal:After drop space:':' idx=12 ', c.second, c.third'
    (check_literal)   ':' != ','
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.test, c.second, c.third'

    (check_operator) 'c.test, c.second, c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.test, c.second, c.third':
    (check_vname) check_vname ret1 ', c.second, c.third':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ', c.second, c.third'

    (check_literal) check_literal:lit='(' idx=12 ', c.second, c.third'
    (check_literal) check_literal:After drop space:'(' idx=12 ', c.second, c.third'
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=6 'c.test, c.second, c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=6 'c.test, c.second, c.third'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=6 'c.test, c.second, c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=6 'c.test, c.second, c.third'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.test, c.second, c.third'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.test, c.second, c.third'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.test, c.second, c.third'
   (check_textlabel) 'c.test' is a text label chstr:'t'
   (check_textlabel) Exit char:,
   (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
  (check_proc_call) 'c.test' is text label

   (check_literal) check_literal:lit=':' idx=12 ', c.second, c.third'
   (check_literal) check_literal:After drop space:':' idx=12 ', c.second, c.third'
   (check_literal)   ':' != ','
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.test, c.second, c.third'

   (check_operator) 'c.test, c.second, c.third' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.test, c.second, c.third':
   (check_vname) check_vname ret1 ', c.second, c.third':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ', c.second, c.third'

   (check_literal) check_literal:lit='(' idx=12 ', c.second, c.third'
   (check_literal) check_literal:After drop space:'(' idx=12 ', c.second, c.third'
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.test, c.second, c.third' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.test, c.second, c.third'
  (scan_vname) scan_vname: ret1 'c.test'
 (scan_variable) scan_variable: ', c.second, c.third' vname='C.TEST'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.TEST' is not other keyword
 (scan_variable) Array test ', c.second, c.third'

  (check_literal) check_literal:lit='(' idx=12 ', c.second, c.third'
  (check_literal) check_literal:After drop space:'(' idx=12 ', c.second, c.third'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C.TEST' Float
(process_token)    Frst:1 T:'C.TEST' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.TEST'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.TEST is not function
token_is_variable: tok:'C.TEST'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.TEST is not function
(init_get_name) 
init_get_name:'C.TEST'
(init_get_name) 
init_get_name:'C.TEST'
(get_name) 
get_name:gn:'C.TEST'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C.TEST
(add_var_info) Name:C.TEST Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '            C.TEST'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) ', c.second, c.third' Before while igncomma:1

 (check_operator) ', c.second, c.third' igncomma:1
 (check_operator) ret0:is comma: 32767
(scan_expression) ret1 ', c.second, c.third' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=12 ', c.second, c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=12 ', c.second, c.third'
 (check_literal) check_literal:After while(): c.second, c.third
 (check_literal) ret1 Match. ' ,' == ', c.second, c.third'

 (scan_literal_core) scan_literal_core:lit=' ,' ', c.second, c.third'
 (scan_literal_core) scan_literal_core:After drop space:', c.second, c.third'
 (scan_literal_core) scan_literal_core:while loop:, c.second, c.third
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=13 ' c.second, c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=14 'c.second, c.third'
 (check_literal)   ';' != 'c'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :C.TEST   *************
(type_check_stack_push)  type_check_stack_push: 'C.TEST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.TEST' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.TEST' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'C.TEST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:C.TEST    **********
(type_check_stack_push)  type_check_stack_push: 'C.TEST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.TEST' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.TEST' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'C.TEST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (C.TEST)
Var: C.TEST Float NumIdx:0
infix_stack_push: 'C.TEST'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: 'C.TEST'
infix_stack_push: 'PRINT(C.TEST)'
Done

infix_stack_pop: 'PRINT(C.TEST)'
Infix stack result PRINT(C.TEST)
(infix_from_rpn) exit  'PRINT(C.TEST)'
(process_expression_types) ==RINT(C.TEST)==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 c.second, c.third
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 c.second, c.third
========================================================
(output_expression_start)

 (check_expression) ' c.second, c.third'

  (check_eitem) check_eitem: 'c.second, c.third'

   (check_function)  'c.second, c.third'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'c.second, c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'c.second, c.third'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'c.second, c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'c.second, c.third'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.second, c.third'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.second, c.third'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.second, c.third'
     (check_textlabel) 'c.second' is a text label chstr:'d'
     (check_textlabel) Exit char:,
     (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
    (check_proc_call) 'c.second' is text label

     (check_literal) check_literal:lit=':' idx=22 ', c.third'
     (check_literal) check_literal:After drop space:':' idx=22 ', c.third'
     (check_literal)   ':' != ','
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.second, c.third'

     (check_operator) 'c.second, c.third' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.second, c.third':
     (check_vname) check_vname ret1 ', c.third':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ', c.third'

     (check_literal) check_literal:lit='(' idx=22 ', c.third'
     (check_literal) check_literal:After drop space:'(' idx=22 ', c.third'
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) ', c.third' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 ', c.third' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' c.second, c.third' igncomma:1

  (check_eitem) check_eitem: 'c.second, c.third'

   (check_function)  'c.second, c.third'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'c.second, c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'c.second, c.third'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'c.second, c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'c.second, c.third'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.second, c.third'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.second, c.third'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.second, c.third'
     (check_textlabel) 'c.second' is a text label chstr:'d'
     (check_textlabel) Exit char:,
     (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
    (check_proc_call) 'c.second' is text label

     (check_literal) check_literal:lit=':' idx=22 ', c.third'
     (check_literal) check_literal:After drop space:':' idx=22 ', c.third'
     (check_literal)   ':' != ','
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.second, c.third'

     (check_operator) 'c.second, c.third' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.second, c.third':
     (check_vname) check_vname ret1 ', c.third':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ', c.third'

     (check_literal) check_literal:lit='(' idx=22 ', c.third'
     (check_literal) check_literal:After drop space:'(' idx=22 ', c.third'
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'c.second, c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=14 'c.second, c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=14 'c.second, c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=14 'c.second, c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=14 'c.second, c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.second, c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.second, c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.second, c.third'
    (check_textlabel) 'c.second' is a text label chstr:'d'
    (check_textlabel) Exit char:,
    (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
   (check_proc_call) 'c.second' is text label

    (check_literal) check_literal:lit=':' idx=22 ', c.third'
    (check_literal) check_literal:After drop space:':' idx=22 ', c.third'
    (check_literal)   ':' != ','
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.second, c.third'

    (check_operator) 'c.second, c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.second, c.third':
    (check_vname) check_vname ret1 ', c.third':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ', c.third'

    (check_literal) check_literal:lit='(' idx=22 ', c.third'
    (check_literal) check_literal:After drop space:'(' idx=22 ', c.third'
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=14 'c.second, c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=14 'c.second, c.third'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=14 'c.second, c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=14 'c.second, c.third'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.second, c.third'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.second, c.third'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.second, c.third'
   (check_textlabel) 'c.second' is a text label chstr:'d'
   (check_textlabel) Exit char:,
   (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
  (check_proc_call) 'c.second' is text label

   (check_literal) check_literal:lit=':' idx=22 ', c.third'
   (check_literal) check_literal:After drop space:':' idx=22 ', c.third'
   (check_literal)   ':' != ','
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.second, c.third'

   (check_operator) 'c.second, c.third' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.second, c.third':
   (check_vname) check_vname ret1 ', c.third':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ', c.third'

   (check_literal) check_literal:lit='(' idx=22 ', c.third'
   (check_literal) check_literal:After drop space:'(' idx=22 ', c.third'
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.second, c.third' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.second, c.third'
  (scan_vname) scan_vname: ret1 'c.second'
 (scan_variable) scan_variable: ', c.third' vname='C.SECOND'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.SECOND' is not other keyword
 (scan_variable) Array test ', c.third'

  (check_literal) check_literal:lit='(' idx=22 ', c.third'
  (check_literal) check_literal:After drop space:'(' idx=22 ', c.third'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C.SECOND' Float
(process_token)    Frst:1 T:'C.SECOND' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.SECOND'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.SECOND is not function
token_is_variable: tok:'C.SECOND'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.SECOND is not function
(init_get_name) 
init_get_name:'C.SECOND'
(init_get_name) 
init_get_name:'C.SECOND'
(get_name) 
get_name:gn:'C.SECOND'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C.SECOND
(add_var_info) Name:C.SECOND Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '          C.SECOND'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) ', c.third' Before while igncomma:1

 (check_operator) ', c.third' igncomma:1
 (check_operator) ret0:is comma: 32767
(scan_expression) ret1 ', c.third' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=22 ', c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=22 ', c.third'
 (check_literal) check_literal:After while(): c.third
 (check_literal) ret1 Match. ' ,' == ', c.third'

 (scan_literal_core) scan_literal_core:lit=' ,' ', c.third'
 (scan_literal_core) scan_literal_core:After drop space:', c.third'
 (scan_literal_core) scan_literal_core:while loop:, c.third
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=23 ' c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=24 'c.third'
 (check_literal)   ';' != 'c'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :C.SECOND   *************
(type_check_stack_push)  type_check_stack_push: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.SECOND' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:C.SECOND    **********
(type_check_stack_push)  type_check_stack_push: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.SECOND' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (C.SECOND)
Var: C.SECOND Float NumIdx:0
infix_stack_push: 'C.SECOND'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: 'C.SECOND'
infix_stack_push: 'PRINT(C.SECOND)'
Done

infix_stack_pop: 'PRINT(C.SECOND)'
Infix stack result PRINT(C.SECOND)
(infix_from_rpn) exit  'PRINT(C.SECOND)'
(process_expression_types) ==RINT(C.SECOND)==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 c.third
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 c.third
========================================================
(output_expression_start)

 (check_expression) ' c.third'

  (check_eitem) check_eitem: 'c.third'

   (check_function)  'c.third'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=24 'c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=24 'c.third'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=24 'c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=24 'c.third'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.third'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.third'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.third'
     (check_textlabel) 'c.third' is a text label chstr:'d'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
    (check_proc_call) 'c.third' is text label

     (check_literal) check_literal:lit=':' idx=31 ''
     (check_literal) check_literal:After drop space:':' idx=31 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.third'

     (check_operator) 'c.third' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.third':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=31 ''
     (check_literal) check_literal:After drop space:'(' idx=31 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' c.third' igncomma:1

  (check_eitem) check_eitem: 'c.third'

   (check_function)  'c.third'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=24 'c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=24 'c.third'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=24 'c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=24 'c.third'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.third'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.third'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.third'
     (check_textlabel) 'c.third' is a text label chstr:'d'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
    (check_proc_call) 'c.third' is text label

     (check_literal) check_literal:lit=':' idx=31 ''
     (check_literal) check_literal:After drop space:':' idx=31 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.third'

     (check_operator) 'c.third' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.third':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=31 ''
     (check_literal) check_literal:After drop space:'(' idx=31 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=24 'c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=24 'c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=24 'c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=24 'c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.third'
    (check_textlabel) 'c.third' is a text label chstr:'d'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
   (check_proc_call) 'c.third' is text label

    (check_literal) check_literal:lit=':' idx=31 ''
    (check_literal) check_literal:After drop space:':' idx=31 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.third'

    (check_operator) 'c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.third':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=31 ''
    (check_literal) check_literal:After drop space:'(' idx=31 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=24 'c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=24 'c.third'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=24 'c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=24 'c.third'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.third'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.third'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.third'
   (check_textlabel) 'c.third' is a text label chstr:'d'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
  (check_proc_call) 'c.third' is text label

   (check_literal) check_literal:lit=':' idx=31 ''
   (check_literal) check_literal:After drop space:':' idx=31 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.third'

   (check_operator) 'c.third' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.third':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=31 ''
   (check_literal) check_literal:After drop space:'(' idx=31 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.third' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.third'
  (scan_vname) scan_vname: ret1 'c.third'
 (scan_variable) scan_variable: '' vname='C.THIRD'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.THIRD' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=31 ''
  (check_literal) check_literal:After drop space:'(' idx=31 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C.THIRD' Float
(process_token)    Frst:1 T:'C.THIRD' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.THIRD'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.THIRD is not function
token_is_variable: tok:'C.THIRD'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.THIRD is not function
(init_get_name) 
init_get_name:'C.THIRD'
(init_get_name) 
init_get_name:'C.THIRD'
(get_name) 
get_name:gn:'C.THIRD'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C.THIRD
(add_var_info) Name:C.THIRD Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '           C.THIRD'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '' Before while igncomma:1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 32767
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=31 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=31 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=31 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=31 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:2 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :C.THIRD   *************
(type_check_stack_push)  type_check_stack_push: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.THIRD' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.THIRD' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:C.THIRD    **********
(type_check_stack_push)  type_check_stack_push: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.THIRD' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.THIRD' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (C.THIRD)
Var: C.THIRD Float NumIdx:0
infix_stack_push: 'C.THIRD'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: 'C.THIRD'
infix_stack_push: 'PRINT(C.THIRD)'
Done

infix_stack_pop: 'PRINT(C.THIRD)'
Infix stack result PRINT(C.THIRD)
(infix_from_rpn) exit  'PRINT(C.THIRD)'
(process_expression_types) ==RINT(C.THIRD)==
(process_expression_types) 


(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=31 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=31 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=31 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=31 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=31 ''
     (check_literal) check_literal:After drop space:':' idx=31 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=31 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=31 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=31 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=31 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=31 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=31 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=31 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=31 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print c.test, c.second, c.third
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=31 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=31 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=31 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 't' (116)
 (is_all_spaces) cline[1] = 'o' (111)
 (is_all_spaces) cline[2] = 't' (116)
 (is_all_spaces) cline[3] = 'a' (97)
 (is_all_spaces) cline[4] = 'l' (108)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '=' (61)
 (is_all_spaces) cline[7] = ' ' (32)
 (is_all_spaces) cline[8] = 'c' (99)
 (is_all_spaces) cline[9] = '.' (46)
 (is_all_spaces) cline[10] = 't' (116)
 (is_all_spaces) cline[11] = 'e' (101)
 (is_all_spaces) cline[12] = 's' (115)
 (is_all_spaces) cline[13] = 't' (116)
 (is_all_spaces) cline[14] = '+' (43)
 (is_all_spaces) cline[15] = 'c' (99)
 (is_all_spaces) cline[16] = '.' (46)
 (is_all_spaces) cline[17] = 's' (115)
 (is_all_spaces) cline[18] = 'e' (101)
 (is_all_spaces) cline[19] = 'c' (99)
 (is_all_spaces) cline[20] = 'o' (111)
 (is_all_spaces) cline[21] = 'n' (110)
 (is_all_spaces) cline[22] = 'd' (100)
 (is_all_spaces) cline[23] = '+' (43)
 (is_all_spaces) cline[24] = 'c' (99)
 (is_all_spaces) cline[25] = '.' (46)
 (is_all_spaces) cline[26] = 't' (116)
 (is_all_spaces) cline[27] = 'h' (104)
 (is_all_spaces) cline[28] = 'i' (105)
 (is_all_spaces) cline[29] = 'r' (114)
 (is_all_spaces) cline[30] = 'd' (100)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'total = c.test+c.second+c.third'
***********************************
**total = c.test+c.second+c.third**
***********************************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'total = c.test+c.second+c.third'
 (check_literal) check_literal:After drop space:'REM' idx=0 'total = c.test+c.second+c.third'
 (check_literal)   'R' != 't'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'total = c.test+c.second+c.third'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'total = c.test+c.second+c.third'
 (check_literal)   'R' != 't'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'total = c.test+c.second+c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'total = c.test+c.second+c.third'
 (check_literal)   'R' != 't'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'total = c.test+c.second+c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'total = c.test+c.second+c.third'
 (check_literal)   'R' != 't'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'total = c.test+c.second+c.third'

   (check_operator) 'total = c.test+c.second+c.third' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'total = c.test+c.second+c.third':
   (check_vname) check_vname ret1 ' = c.test+c.second+c.third':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' = c.test+c.second+c.third'

   (check_literal) check_literal:lit='(' idx=5 ' = c.test+c.second+c.third'
   (check_literal) check_literal:After drop space:'(' idx=5 ' = c.test+c.second+c.third'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' = c.test+c.second+c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '= c.test+c.second+c.third'
 (check_literal) check_literal:After while(): c.test+c.second+c.third
 (check_literal) ret1 Match. ' =' == ' = c.test+c.second+c.third'

 (check_expression) ' c.test+c.second+c.third'

  (check_eitem) check_eitem: 'c.test+c.second+c.third'

   (check_function)  'c.test+c.second+c.third'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=8 'c.test+c.second+c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'c.test+c.second+c.third'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=8 'c.test+c.second+c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'c.test+c.second+c.third'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.test+c.second+c.third'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.test+c.second+c.third'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.test+c.second+c.third'
     (check_textlabel) 'c.test' is a text label chstr:'t'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
    (check_proc_call) 'c.test' is text label

     (check_literal) check_literal:lit=':' idx=14 '+c.second+c.third'
     (check_literal) check_literal:After drop space:':' idx=14 '+c.second+c.third'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.test+c.second+c.third'

     (check_operator) 'c.test+c.second+c.third' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.test+c.second+c.third':
     (check_vname) check_vname ret1 '+c.second+c.third':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c.second+c.third'

     (check_literal) check_literal:lit='(' idx=14 '+c.second+c.third'
     (check_literal) check_literal:After drop space:'(' idx=14 '+c.second+c.third'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+c.second+c.third' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) 'c.second+c.third' igncomma:0
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c.second+c.third'

  (check_function)  'c.second+c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=15 'c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=15 'c.second+c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=15 'c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=15 'c.second+c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.second+c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.second+c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.second+c.third'
    (check_textlabel) 'c.second' is a text label chstr:'d'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
   (check_proc_call) 'c.second' is text label

    (check_literal) check_literal:lit=':' idx=23 '+c.third'
    (check_literal) check_literal:After drop space:':' idx=23 '+c.third'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.second+c.third'

    (check_operator) 'c.second+c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.second+c.third':
    (check_vname) check_vname ret1 '+c.third':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c.third'

    (check_literal) check_literal:lit='(' idx=23 '+c.third'
    (check_literal) check_literal:After drop space:'(' idx=23 '+c.third'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=23 '+c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=23 '+c.third'
 (check_literal)   '%' != '+'
 (check_literal) check_literal: ret0

 (check_operator) '+c.third' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) 'c.third' igncomma:0
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c.third'

  (check_function)  'c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=24 'c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=24 'c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=24 'c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=24 'c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.third'
    (check_textlabel) 'c.third' is a text label chstr:'d'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
   (check_proc_call) 'c.third' is text label

    (check_literal) check_literal:lit=':' idx=31 ''
    (check_literal) check_literal:After drop space:':' idx=31 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.third'

    (check_operator) 'c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.third':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=31 ''
    (check_literal) check_literal:After drop space:'(' idx=31 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=31 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=31 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'total = c.test+c.second+c.third' ref_ndeclare:1

   (scan_vname) scan_vname: 'total = c.test+c.second+c.third'
   (scan_vname) scan_vname: ret1 'total'
  (scan_variable) scan_variable: ' = c.test+c.second+c.third' vname='TOTAL'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'TOTAL' is not other keyword
  (scan_variable) Array test ' = c.test+c.second+c.third'

   (check_literal) check_literal:lit='(' idx=5 ' = c.test+c.second+c.third'
   (check_literal) check_literal:After drop space:'(' idx=5 ' = c.test+c.second+c.third'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='TOTAL' Float
 (process_token)    Frst:1 T:'TOTAL' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'TOTAL'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:TOTAL is not function
token_is_variable: tok:'TOTAL'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:TOTAL is not function
(init_get_name) 
init_get_name:'TOTAL'
(init_get_name) 
init_get_name:'TOTAL'
(get_name) 
get_name:gn:'TOTAL'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f TOTAL
(add_var_info) Name:TOTAL Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '             TOTAL'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' ' = c.test+c.second+c.third'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= c.test+c.second+c.third'
 (scan_assignment_equals) scan_assignment_equals:while loop:= c.test+c.second+c.third
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' c.test+c.second+c.third' igncomma:0

  (check_eitem) check_eitem: 'c.test+c.second+c.third'

   (check_function)  'c.test+c.second+c.third'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=8 'c.test+c.second+c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'c.test+c.second+c.third'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=8 'c.test+c.second+c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'c.test+c.second+c.third'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.test+c.second+c.third'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.test+c.second+c.third'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.test+c.second+c.third'
     (check_textlabel) 'c.test' is a text label chstr:'t'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
    (check_proc_call) 'c.test' is text label

     (check_literal) check_literal:lit=':' idx=14 '+c.second+c.third'
     (check_literal) check_literal:After drop space:':' idx=14 '+c.second+c.third'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.test+c.second+c.third'

     (check_operator) 'c.test+c.second+c.third' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.test+c.second+c.third':
     (check_vname) check_vname ret1 '+c.second+c.third':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c.second+c.third'

     (check_literal) check_literal:lit='(' idx=14 '+c.second+c.third'
     (check_literal) check_literal:After drop space:'(' idx=14 '+c.second+c.third'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'c.test+c.second+c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=8 'c.test+c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'c.test+c.second+c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=8 'c.test+c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'c.test+c.second+c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.test+c.second+c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.test+c.second+c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.test+c.second+c.third'
    (check_textlabel) 'c.test' is a text label chstr:'t'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
   (check_proc_call) 'c.test' is text label

    (check_literal) check_literal:lit=':' idx=14 '+c.second+c.third'
    (check_literal) check_literal:After drop space:':' idx=14 '+c.second+c.third'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.test+c.second+c.third'

    (check_operator) 'c.test+c.second+c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.test+c.second+c.third':
    (check_vname) check_vname ret1 '+c.second+c.third':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c.second+c.third'

    (check_literal) check_literal:lit='(' idx=14 '+c.second+c.third'
    (check_literal) check_literal:After drop space:'(' idx=14 '+c.second+c.third'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=8 'c.test+c.second+c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=8 'c.test+c.second+c.third'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=8 'c.test+c.second+c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=8 'c.test+c.second+c.third'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.test+c.second+c.third'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.test+c.second+c.third'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.test+c.second+c.third'
   (check_textlabel) 'c.test' is a text label chstr:'t'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
  (check_proc_call) 'c.test' is text label

   (check_literal) check_literal:lit=':' idx=14 '+c.second+c.third'
   (check_literal) check_literal:After drop space:':' idx=14 '+c.second+c.third'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.test+c.second+c.third'

   (check_operator) 'c.test+c.second+c.third' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.test+c.second+c.third':
   (check_vname) check_vname ret1 '+c.second+c.third':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c.second+c.third'

   (check_literal) check_literal:lit='(' idx=14 '+c.second+c.third'
   (check_literal) check_literal:After drop space:'(' idx=14 '+c.second+c.third'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.test+c.second+c.third' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.test+c.second+c.third'
  (scan_vname) scan_vname: ret1 'c.test'
 (scan_variable) scan_variable: '+c.second+c.third' vname='C.TEST'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.TEST' is not other keyword
 (scan_variable) Array test '+c.second+c.third'

  (check_literal) check_literal:lit='(' idx=14 '+c.second+c.third'
  (check_literal) check_literal:After drop space:'(' idx=14 '+c.second+c.third'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C.TEST' Float
(process_token)    Frst:0 T:'C.TEST' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.TEST'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.TEST is not function
token_is_variable: tok:'C.TEST'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.TEST is not function
(init_get_name) 
init_get_name:'C.TEST'
(init_get_name) 
init_get_name:'C.TEST'
(get_name) 
get_name:gn:'C.TEST'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C.TEST
(add_var_info) Name:C.TEST Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '            C.TEST'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+c.second+c.third' Before while igncomma:0

 (check_operator) '+c.second+c.third' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '+c.second+c.third' igncomma:0
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c.second+c.third'

  (check_literal) check_literal:lit=' ,' idx=14 '+c.second+c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=14 '+c.second+c.third'
  (check_literal)   ',' != '+'
  (check_literal) check_literal: ret0
 (scan_operator) scan_operator: ret1 'c.second+c.third' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name::=
(process_token) 
opr1:3 opr2:1
(operator_precedence) 
:= is operator
(operator_precedence) 
:= is operator
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (2)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) 001: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c.second+c.third' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) 'c.second+c.third' Before scan_eitem igncomma:0

 (scan_eitem) scan_eitem:

  (check_function)  'c.second+c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=15 'c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=15 'c.second+c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=15 'c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=15 'c.second+c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.second+c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.second+c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.second+c.third'
    (check_textlabel) 'c.second' is a text label chstr:'d'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
   (check_proc_call) 'c.second' is text label

    (check_literal) check_literal:lit=':' idx=23 '+c.third'
    (check_literal) check_literal:After drop space:':' idx=23 '+c.third'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.second+c.third'

    (check_operator) 'c.second+c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.second+c.third':
    (check_vname) check_vname ret1 '+c.third':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c.third'

    (check_literal) check_literal:lit='(' idx=23 '+c.third'
    (check_literal) check_literal:After drop space:'(' idx=23 '+c.third'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=15 'c.second+c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=15 'c.second+c.third'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=15 'c.second+c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=15 'c.second+c.third'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.second+c.third'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.second+c.third'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.second+c.third'
   (check_textlabel) 'c.second' is a text label chstr:'d'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
  (check_proc_call) 'c.second' is text label

   (check_literal) check_literal:lit=':' idx=23 '+c.third'
   (check_literal) check_literal:After drop space:':' idx=23 '+c.third'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.second+c.third'

   (check_operator) 'c.second+c.third' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.second+c.third':
   (check_vname) check_vname ret1 '+c.third':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c.third'

   (check_literal) check_literal:lit='(' idx=23 '+c.third'
   (check_literal) check_literal:After drop space:'(' idx=23 '+c.third'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.second+c.third' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.second+c.third'
  (scan_vname) scan_vname: ret1 'c.second'
 (scan_variable) scan_variable: '+c.third' vname='C.SECOND'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.SECOND' is not other keyword
 (scan_variable) Array test '+c.third'

  (check_literal) check_literal:lit='(' idx=23 '+c.third'
  (check_literal) check_literal:After drop space:'(' idx=23 '+c.third'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C.SECOND' Float
(process_token)    Frst:0 T:'C.SECOND' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.SECOND'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.SECOND is not function
token_is_variable: tok:'C.SECOND'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.SECOND is not function
(init_get_name) 
init_get_name:'C.SECOND'
(init_get_name) 
init_get_name:'C.SECOND'
(get_name) 
get_name:gn:'C.SECOND'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C.SECOND
(add_var_info) Name:C.SECOND Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '          C.SECOND'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=23 '+c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=23 '+c.third'
 (check_literal)   '%' != '+'
 (check_literal) check_literal: ret0

 (check_operator) '+c.third' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '+c.second+c.third' igncomma:0
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c.third'

  (check_literal) check_literal:lit=' ,' idx=23 '+c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=23 '+c.third'
  (check_literal)   ',' != '+'
  (check_literal) check_literal: ret0
 (scan_operator) scan_operator: ret1 'c.third' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:+
(process_token) 
opr1:3 opr2:3
(operator_precedence) 
+ is operator
(operator_precedence) 
+ is operator
(operator_left_assoc) 
+ is operator
Pop 1
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------

(operator_precedence) 
+ is operator
(operator_precedence) 
+ is operator
(output_operator) [f,()] f +
(operator_precedence) 
:= is operator
(operator_precedence) 
:= is operator
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (2)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) 001: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c.third' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) 'c.third' Before scan_eitem igncomma:0

 (scan_eitem) scan_eitem:

  (check_function)  'c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=24 'c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=24 'c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=24 'c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=24 'c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.third'
    (check_textlabel) 'c.third' is a text label chstr:'d'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
   (check_proc_call) 'c.third' is text label

    (check_literal) check_literal:lit=':' idx=31 ''
    (check_literal) check_literal:After drop space:':' idx=31 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.third'

    (check_operator) 'c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.third':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=31 ''
    (check_literal) check_literal:After drop space:'(' idx=31 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=24 'c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=24 'c.third'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=24 'c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=24 'c.third'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.third'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.third'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.third'
   (check_textlabel) 'c.third' is a text label chstr:'d'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
  (check_proc_call) 'c.third' is text label

   (check_literal) check_literal:lit=':' idx=31 ''
   (check_literal) check_literal:After drop space:':' idx=31 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.third'

   (check_operator) 'c.third' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.third':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=31 ''
   (check_literal) check_literal:After drop space:'(' idx=31 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.third' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.third'
  (scan_vname) scan_vname: ret1 'c.third'
 (scan_variable) scan_variable: '' vname='C.THIRD'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.THIRD' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=31 ''
  (check_literal) check_literal:After drop space:'(' idx=31 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C.THIRD' Float
(process_token)    Frst:0 T:'C.THIRD' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.THIRD'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.THIRD is not function
token_is_variable: tok:'C.THIRD'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.THIRD is not function
(init_get_name) 
init_get_name:'C.THIRD'
(init_get_name) 
init_get_name:'C.THIRD'
(get_name) 
get_name:gn:'C.THIRD'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C.THIRD
(add_var_info) Name:C.THIRD Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '           C.THIRD'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=31 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=31 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(add_var_info) Name:TOTAL Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_assignment) scan_assignment: ret1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=31 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=31 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:5 buf2 i:0
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop '+' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (op_stack_finalise) Popped:+ f
 (output_operator) [f,()] f +
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  2: 4 1  nb 0:()
N006       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 5 4  nb 0:()
N007       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing :TOTAL   *************
 (type_check_stack_push)  type_check_stack_push: 'TOTAL'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (process_syntax_tree) *********Processing :C.TEST   *************
 (type_check_stack_push)  type_check_stack_push: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N002: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_display) 001: 'C.TEST' type:f (1), %:0
 (process_syntax_tree) *********Processing :C.SECOND   *************
 (type_check_stack_push)  type_check_stack_push: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N002: 'C.TEST' type:1 %:0
 (type_check_stack_print)  N003: 'C.SECOND' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_display) 001: 'C.TEST' type:f (1), %:0
 (type_check_stack_display) 002: 'C.SECOND' type:f (1), %:0
 (process_syntax_tree) *********Processing :+   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator + %conv:1
 (type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N002: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:1
 (process_syntax_tree) Percent convertible operator op1 (N003) percent:0
 (process_syntax_tree) Mutable type (C.SECOND) f f
 (process_syntax_tree) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (process_syntax_tree) *********Processing :C.THIRD   *************
 (type_check_stack_push)  type_check_stack_push: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print)  N005: 'C.THIRD' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (type_check_stack_display) 002: 'C.THIRD' type:f (1), %:0
 (process_syntax_tree) *********Processing :+   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator + %conv:1
 (type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:1
 (process_syntax_tree) Percent convertible operator op1 (N005) percent:0
 (process_syntax_tree) Mutable type (C.THIRD) f f
 (process_syntax_tree) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N006: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'TOTAL'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (000) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE:TOTAL    **********
 (type_check_stack_push)  type_check_stack_push: 'TOTAL'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (typecheck_expression)  *** BE:C.TEST    **********
 (type_check_stack_push)  type_check_stack_push: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N002: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_display) 001: 'C.TEST' type:f (1), %:0
 (typecheck_expression)  *** BE:C.SECOND    **********
 (type_check_stack_push)  type_check_stack_push: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N002: 'C.TEST' type:1 %:0
 (type_check_stack_print)  N003: 'C.SECOND' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_display) 001: 'C.TEST' type:f (1), %:0
 (type_check_stack_display) 002: 'C.SECOND' type:f (1), %:0
 (typecheck_expression)  *** BE:+    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator +
 (type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N002: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (+) f f
 (typecheck_expression) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (typecheck_expression)  *** BE:C.THIRD    **********
 (type_check_stack_push)  type_check_stack_push: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print)  N005: 'C.THIRD' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (type_check_stack_display) 002: 'C.THIRD' type:f (1), %:0
 (typecheck_expression)  *** BE:+    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator +
 (type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (+) f f
 (typecheck_expression) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N006: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'TOTAL'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N006       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 5 4  nb 0:()
N007       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 6 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N006       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 5 4  nb 0:()
N007       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 6 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (TOTAL)
Var: TOTAL Float NumIdx:0
infix_stack_push: 'TOTAL'
 (infix_from_rpn) (C.TEST)
Var: C.TEST Float NumIdx:0
infix_stack_push: 'C.TEST'
 (infix_from_rpn) (C.SECOND)
Var: C.SECOND Float NumIdx:0
infix_stack_push: 'C.SECOND'
 (infix_from_rpn) (+)
infix_stack_pop: 'C.SECOND'
infix_stack_pop: 'C.TEST'
infix_stack_push: '(C.TEST + C.SECOND)'
 (infix_from_rpn) (C.THIRD)
Var: C.THIRD Float NumIdx:0
infix_stack_push: 'C.THIRD'
 (infix_from_rpn) (+)
infix_stack_pop: 'C.THIRD'
infix_stack_pop: '(C.TEST + C.SECOND)'
infix_stack_push: '((C.TEST + C.SECOND) + C.THIRD)'
 (infix_from_rpn) (:=)
infix_stack_pop: '((C.TEST + C.SECOND) + C.THIRD)'
infix_stack_pop: 'TOTAL'
infix_stack_push: '(TOTAL := ((C.TEST + C.SECOND) + C.THIRD))'
Done

infix_stack_pop: '(TOTAL := ((C.TEST + C.SECOND) + C.THIRD))'
Infix stack result (TOTAL := ((C.TEST + C.SECOND) + C.THIRD))
 (infix_from_rpn) exit  'TOTAL := ((C.TEST + C.SECOND) + C.THIRD)'
 (process_expression_types) ==TOTAL := ((C.TEST + C.SECOND) + C.THIRD)==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
total = c.test+c.second+c.third
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=31 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=31 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=31 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 't' (116)
 (is_all_spaces) cline[8] = 'e' (101)
 (is_all_spaces) cline[9] = 's' (115)
 (is_all_spaces) cline[10] = 't' (116)
 (is_all_spaces) cline[11] = '+' (43)
 (is_all_spaces) cline[12] = 's' (115)
 (is_all_spaces) cline[13] = 'e' (101)
 (is_all_spaces) cline[14] = 'c' (99)
 (is_all_spaces) cline[15] = 'o' (111)
 (is_all_spaces) cline[16] = 'n' (110)
 (is_all_spaces) cline[17] = 'd' (100)
 (is_all_spaces) cline[18] = '=' (61)
 (is_all_spaces) cline[19] = '"' (34)
 (is_all_spaces) cline[20] = ',' (44)
 (is_all_spaces) cline[21] = ' ' (32)
 (is_all_spaces) cline[22] = 'c' (99)
 (is_all_spaces) cline[23] = '.' (46)
 (is_all_spaces) cline[24] = 't' (116)
 (is_all_spaces) cline[25] = 'e' (101)
 (is_all_spaces) cline[26] = 's' (115)
 (is_all_spaces) cline[27] = 't' (116)
 (is_all_spaces) cline[28] = '+' (43)
 (is_all_spaces) cline[29] = 'c' (99)
 (is_all_spaces) cline[30] = '.' (46)
 (is_all_spaces) cline[31] = 's' (115)
 (is_all_spaces) cline[32] = 'e' (101)
 (is_all_spaces) cline[33] = 'c' (99)
 (is_all_spaces) cline[34] = 'o' (111)
 (is_all_spaces) cline[35] = 'n' (110)
 (is_all_spaces) cline[36] = 'd' (100)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "test+second=", c.test+c.second'
*****************************************
**print "test+second=", c.test+c.second**
*****************************************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "test+second=", c.test+c.second'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "test+second=", c.test+c.second'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "test+second=", c.test+c.second'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "test+second=", c.test+c.second'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "test+second=", c.test+c.second'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "test+second=", c.test+c.second'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "test+second=", c.test+c.second'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "test+second=", c.test+c.second'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "test+second=", c.test+c.second'

   (check_operator) 'print "test+second=", c.test+c.second' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "test+second=", c.test+c.second':
   (check_vname) check_vname ret1 ' "test+second=", c.test+c.second':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "test+second=", c.test+c.second'

   (check_literal) check_literal:lit='(' idx=5 ' "test+second=", c.test+c.second'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "test+second=", c.test+c.second'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "test+second=", c.test+c.second'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"test+second=", c.test+c.second'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "test+second=", c.test+c.second'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "test+second=", c.test+c.second'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "test+second=", c.test+c.second'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "test+second=", c.test+c.second'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "test+second=", c.test+c.second'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "test+second=", c.test+c.second'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "test+second=", c.test+c.second'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "test+second=", c.test+c.second'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "test+second=", c.test+c.second'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "test+second=", c.test+c.second'
   (check_literal) check_literal:After drop space:':' idx=5 ' "test+second=", c.test+c.second'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "test+second=", c.test+c.second'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "test+second=", c.test+c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "test+second=", c.test+c.second'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "test+second=", c.test+c.second'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "test+second=", c.test+c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "test+second=", c.test+c.second'
   (check_literal) check_literal:After while(): "test+second=", c.test+c.second
   (check_literal) ret1 Match. ' PRINT' == 'print "test+second=", c.test+c.second'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "test+second=", c.test+c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "test+second=", c.test+c.second'
   (check_literal) check_literal:After while(): "test+second=", c.test+c.second
   (check_literal) ret1 Match. ' PRINT' == 'print "test+second=", c.test+c.second'

   (check_expression) ' "test+second=", c.test+c.second'

    (check_eitem) check_eitem: '"test+second=", c.test+c.second'

     (check_function)  '"test+second=", c.test+c.second'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"test+second=", c.test+c.second'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"test+second=", c.test+c.second'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"test+second=", c.test+c.second'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"test+second=", c.test+c.second'
      (check_literal) check_literal:After while():test+second=", c.test+c.second
      (check_literal) ret1 Match. ' "' == '"test+second=", c.test+c.second'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', c.test+c.second' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', c.test+c.second' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "test+second=", c.test+c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "test+second=", c.test+c.second'
   (check_literal) check_literal:After while(): "test+second=", c.test+c.second
   (check_literal) ret1 Match. ' PRINT' == 'print "test+second=", c.test+c.second'
  (scan_print) Before while

   (check_expression) ' "test+second=", c.test+c.second'

    (check_eitem) check_eitem: '"test+second=", c.test+c.second'

     (check_function)  '"test+second=", c.test+c.second'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"test+second=", c.test+c.second'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"test+second=", c.test+c.second'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"test+second=", c.test+c.second'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"test+second=", c.test+c.second'
      (check_literal) check_literal:After while():test+second=", c.test+c.second
      (check_literal) ret1 Match. ' "' == '"test+second=", c.test+c.second'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', c.test+c.second' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', c.test+c.second' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "test+second=", c.test+c.second' igncomma:1

    (check_eitem) check_eitem: '"test+second=", c.test+c.second'

     (check_function)  '"test+second=", c.test+c.second'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"test+second=", c.test+c.second'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"test+second=", c.test+c.second'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"test+second=", c.test+c.second'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"test+second=", c.test+c.second'
      (check_literal) check_literal:After while():test+second=", c.test+c.second
      (check_literal) ret1 Match. ' "' == '"test+second=", c.test+c.second'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"test+second=", c.test+c.second'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"test+second=", c.test+c.second'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"test+second=", c.test+c.second'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"test+second=", c.test+c.second'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"test+second=", c.test+c.second'
      (check_literal) check_literal:After while():test+second=", c.test+c.second
      (check_literal) ret1 Match. ' "' == '"test+second=", c.test+c.second'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"test+second=", c.test+c.second'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"test+second=", c.test+c.second'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"test+second=", c.test+c.second'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"test+second=", c.test+c.second'
      (check_literal) check_literal:After while():test+second=", c.test+c.second
      (check_literal) ret1 Match. ' "' == '"test+second=", c.test+c.second'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"test+second=", c.test+c.second'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"test+second=", c.test+c.second'
       (check_literal) check_literal:After while():test+second=", c.test+c.second
       (check_literal) ret1 Match. ' "' == '"test+second=", c.test+c.second'
      (scan_string)   (in if) 'test+second=", c.test+c.second'
      (scan_string)   (in wh) 'test+second=", c.test+c.second'
      (scan_string)   (in wh) 'est+second=", c.test+c.second'
      (scan_string)   (in wh) 'est+second=", c.test+c.second'
      (scan_string)   (in wh) 'st+second=", c.test+c.second'
      (scan_string)   (in wh) 'st+second=", c.test+c.second'
      (scan_string)   (in wh) 't+second=", c.test+c.second'
      (scan_string)   (in wh) 't+second=", c.test+c.second'
      (scan_string)   (in wh) '+second=", c.test+c.second'
      (scan_string)   (in wh) '+second=", c.test+c.second'
      (scan_string)   (in wh) 'second=", c.test+c.second'
      (scan_string)   (in wh) 'second=", c.test+c.second'
      (scan_string)   (in wh) 'econd=", c.test+c.second'
      (scan_string)   (in wh) 'econd=", c.test+c.second'
      (scan_string)   (in wh) 'cond=", c.test+c.second'
      (scan_string)   (in wh) 'cond=", c.test+c.second'
      (scan_string)   (in wh) 'ond=", c.test+c.second'
      (scan_string)   (in wh) 'ond=", c.test+c.second'
      (scan_string)   (in wh) 'nd=", c.test+c.second'
      (scan_string)   (in wh) 'nd=", c.test+c.second'
      (scan_string)   (in wh) 'd=", c.test+c.second'
      (scan_string)   (in wh) 'd=", c.test+c.second'
      (scan_string)   (in wh) '=", c.test+c.second'
      (scan_string)   (in wh) '=", c.test+c.second'
      (scan_string)   (in wh) '", c.test+c.second'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"test+second="' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"test+second="'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"test+second=" is not function
token_is_variable: tok:'"test+second="'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"test+second=" is not function
(   output_string) [U,()] s "test+second="
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', c.test+c.second' Before while igncomma:1

    (check_operator) ', c.test+c.second' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', c.test+c.second' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=20 ', c.test+c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=20 ', c.test+c.second'
   (check_literal) check_literal:After while(): c.test+c.second
   (check_literal) ret1 Match. ' ,' == ', c.test+c.second'

   (scan_literal_core) scan_literal_core:lit=' ,' ', c.test+c.second'
   (scan_literal_core) scan_literal_core:After drop space:', c.test+c.second'
   (scan_literal_core) scan_literal_core:while loop:, c.test+c.second
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=21 ' c.test+c.second'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=22 'c.test+c.second'
 (check_literal)   ';' != 'c'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:7
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"test+second="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :"test+second="   *************
(type_check_stack_push)  type_check_stack_push: '"test+second="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"test+second="' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"test+second="' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"test+second="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:"test+second="    **********
(type_check_stack_push)  type_check_stack_push: '"test+second="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"test+second="' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"test+second="' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"test+second="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"test+second="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"test+second="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("test+second=")
infix_stack_push: '"test+second="'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"test+second="'
infix_stack_push: 'PRINT("test+second=")'
Done

infix_stack_pop: 'PRINT("test+second=")'
Infix stack result PRINT("test+second=")
(infix_from_rpn) exit  'PRINT("test+second=")'
(process_expression_types) ==RINT("test+second=")==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 c.test+c.second
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 c.test+c.second
========================================================
(output_expression_start)

 (check_expression) ' c.test+c.second'

  (check_eitem) check_eitem: 'c.test+c.second'

   (check_function)  'c.test+c.second'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=22 'c.test+c.second'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 'c.test+c.second'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=22 'c.test+c.second'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 'c.test+c.second'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.test+c.second'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.test+c.second'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.test+c.second'
     (check_textlabel) 'c.test' is a text label chstr:'t'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
    (check_proc_call) 'c.test' is text label

     (check_literal) check_literal:lit=':' idx=28 '+c.second'
     (check_literal) check_literal:After drop space:':' idx=28 '+c.second'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.test+c.second'

     (check_operator) 'c.test+c.second' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.test+c.second':
     (check_vname) check_vname ret1 '+c.second':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c.second'

     (check_literal) check_literal:lit='(' idx=28 '+c.second'
     (check_literal) check_literal:After drop space:'(' idx=28 '+c.second'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+c.second' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) 'c.second' igncomma:1
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c.second'

  (check_function)  'c.second'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=29 'c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=29 'c.second'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=29 'c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=29 'c.second'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.second'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.second'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.second'
    (check_textlabel) 'c.second' is a text label chstr:'d'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
   (check_proc_call) 'c.second' is text label

    (check_literal) check_literal:lit=':' idx=37 ''
    (check_literal) check_literal:After drop space:':' idx=37 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.second'

    (check_operator) 'c.second' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.second':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=37 ''
    (check_literal) check_literal:After drop space:'(' idx=37 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=37 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=37 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' c.test+c.second' igncomma:1

  (check_eitem) check_eitem: 'c.test+c.second'

   (check_function)  'c.test+c.second'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=22 'c.test+c.second'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 'c.test+c.second'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=22 'c.test+c.second'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 'c.test+c.second'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.test+c.second'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.test+c.second'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.test+c.second'
     (check_textlabel) 'c.test' is a text label chstr:'t'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
    (check_proc_call) 'c.test' is text label

     (check_literal) check_literal:lit=':' idx=28 '+c.second'
     (check_literal) check_literal:After drop space:':' idx=28 '+c.second'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.test+c.second'

     (check_operator) 'c.test+c.second' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.test+c.second':
     (check_vname) check_vname ret1 '+c.second':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c.second'

     (check_literal) check_literal:lit='(' idx=28 '+c.second'
     (check_literal) check_literal:After drop space:'(' idx=28 '+c.second'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'c.test+c.second'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=22 'c.test+c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=22 'c.test+c.second'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=22 'c.test+c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=22 'c.test+c.second'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.test+c.second'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.test+c.second'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.test+c.second'
    (check_textlabel) 'c.test' is a text label chstr:'t'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
   (check_proc_call) 'c.test' is text label

    (check_literal) check_literal:lit=':' idx=28 '+c.second'
    (check_literal) check_literal:After drop space:':' idx=28 '+c.second'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.test+c.second'

    (check_operator) 'c.test+c.second' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.test+c.second':
    (check_vname) check_vname ret1 '+c.second':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c.second'

    (check_literal) check_literal:lit='(' idx=28 '+c.second'
    (check_literal) check_literal:After drop space:'(' idx=28 '+c.second'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=22 'c.test+c.second'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=22 'c.test+c.second'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=22 'c.test+c.second'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=22 'c.test+c.second'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.test+c.second'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.test+c.second'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.test+c.second'
   (check_textlabel) 'c.test' is a text label chstr:'t'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
  (check_proc_call) 'c.test' is text label

   (check_literal) check_literal:lit=':' idx=28 '+c.second'
   (check_literal) check_literal:After drop space:':' idx=28 '+c.second'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.test+c.second'

   (check_operator) 'c.test+c.second' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.test+c.second':
   (check_vname) check_vname ret1 '+c.second':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c.second'

   (check_literal) check_literal:lit='(' idx=28 '+c.second'
   (check_literal) check_literal:After drop space:'(' idx=28 '+c.second'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.test+c.second' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.test+c.second'
  (scan_vname) scan_vname: ret1 'c.test'
 (scan_variable) scan_variable: '+c.second' vname='C.TEST'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.TEST' is not other keyword
 (scan_variable) Array test '+c.second'

  (check_literal) check_literal:lit='(' idx=28 '+c.second'
  (check_literal) check_literal:After drop space:'(' idx=28 '+c.second'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C.TEST' Float
(process_token)    Frst:1 T:'C.TEST' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.TEST'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.TEST is not function
token_is_variable: tok:'C.TEST'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.TEST is not function
(init_get_name) 
init_get_name:'C.TEST'
(init_get_name) 
init_get_name:'C.TEST'
(get_name) 
get_name:gn:'C.TEST'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C.TEST
(add_var_info) Name:C.TEST Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '            C.TEST'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+c.second' Before while igncomma:1

 (check_operator) '+c.second' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+c.second' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c.second'
 (scan_operator) scan_operator: ret1 'c.second' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c.second' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'c.second' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'c.second'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=29 'c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=29 'c.second'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=29 'c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=29 'c.second'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.second'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.second'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.second'
    (check_textlabel) 'c.second' is a text label chstr:'d'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
   (check_proc_call) 'c.second' is text label

    (check_literal) check_literal:lit=':' idx=37 ''
    (check_literal) check_literal:After drop space:':' idx=37 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.second'

    (check_operator) 'c.second' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.second':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=37 ''
    (check_literal) check_literal:After drop space:'(' idx=37 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=29 'c.second'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=29 'c.second'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=29 'c.second'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=29 'c.second'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.second'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.second'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.second'
   (check_textlabel) 'c.second' is a text label chstr:'d'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
  (check_proc_call) 'c.second' is text label

   (check_literal) check_literal:lit=':' idx=37 ''
   (check_literal) check_literal:After drop space:':' idx=37 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.second'

   (check_operator) 'c.second' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.second':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=37 ''
   (check_literal) check_literal:After drop space:'(' idx=37 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.second' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.second'
  (scan_vname) scan_vname: ret1 'c.second'
 (scan_variable) scan_variable: '' vname='C.SECOND'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.SECOND' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=37 ''
  (check_literal) check_literal:After drop space:'(' idx=37 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C.SECOND' Float
(process_token)    Frst:0 T:'C.SECOND' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.SECOND'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.SECOND is not function
token_is_variable: tok:'C.SECOND'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.SECOND is not function
(init_get_name) 
init_get_name:'C.SECOND'
(init_get_name) 
init_get_name:'C.SECOND'
(get_name) 
get_name:gn:'C.SECOND'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C.SECOND
(add_var_info) Name:C.SECOND Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '          C.SECOND'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=37 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=37 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ f
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=37 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=37 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=37 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=37 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:4 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :C.TEST   *************
(type_check_stack_push)  type_check_stack_push: 'C.TEST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.TEST' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.TEST' type:f (1), %:0
(process_syntax_tree) *********Processing :C.SECOND   *************
(type_check_stack_push)  type_check_stack_push: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'C.TEST' type:1 %:0
(type_check_stack_print)  N002: 'C.SECOND' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'C.TEST' type:f (1), %:0
(type_check_stack_display) 001: 'C.SECOND' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.TEST' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'C.TEST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N002) percent:0
(process_syntax_tree) Mutable type (C.SECOND) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:C.TEST    **********
(type_check_stack_push)  type_check_stack_push: 'C.TEST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.TEST' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.TEST' type:f (1), %:0
(typecheck_expression)  *** BE:C.SECOND    **********
(type_check_stack_push)  type_check_stack_push: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'C.TEST' type:1 %:0
(type_check_stack_print)  N002: 'C.SECOND' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'C.TEST' type:f (1), %:0
(type_check_stack_display) 001: 'C.SECOND' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.TEST' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'C.TEST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (C.TEST)
Var: C.TEST Float NumIdx:0
infix_stack_push: 'C.TEST'
(infix_from_rpn) (C.SECOND)
Var: C.SECOND Float NumIdx:0
infix_stack_push: 'C.SECOND'
(infix_from_rpn) (+)
infix_stack_pop: 'C.SECOND'
infix_stack_pop: 'C.TEST'
infix_stack_push: '(C.TEST + C.SECOND)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(C.TEST + C.SECOND)'
infix_stack_push: 'PRINT((C.TEST + C.SECOND))'
Done

infix_stack_pop: 'PRINT((C.TEST + C.SECOND))'
Infix stack result PRINT((C.TEST + C.SECOND))
(infix_from_rpn) exit  'PRINT((C.TEST + C.SECOND))'
(process_expression_types) ==RINT((C.TEST + C.SECOND))==
(process_expression_types) 


(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:4
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=37 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=37 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=37 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=37 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=37 ''
     (check_literal) check_literal:After drop space:':' idx=37 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=37 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=37 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=37 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=37 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=37 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=37 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=37 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=37 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print "test+second=", c.test+c.second
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=37 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=37 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=37 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 's' (115)
 (is_all_spaces) cline[8] = 'e' (101)
 (is_all_spaces) cline[9] = 'c' (99)
 (is_all_spaces) cline[10] = 'o' (111)
 (is_all_spaces) cline[11] = 'n' (110)
 (is_all_spaces) cline[12] = 'd' (100)
 (is_all_spaces) cline[13] = '+' (43)
 (is_all_spaces) cline[14] = 't' (116)
 (is_all_spaces) cline[15] = 'h' (104)
 (is_all_spaces) cline[16] = 'i' (105)
 (is_all_spaces) cline[17] = 'r' (114)
 (is_all_spaces) cline[18] = 'd' (100)
 (is_all_spaces) cline[19] = '=' (61)
 (is_all_spaces) cline[20] = '"' (34)
 (is_all_spaces) cline[21] = ',' (44)
 (is_all_spaces) cline[22] = ' ' (32)
 (is_all_spaces) cline[23] = 'c' (99)
 (is_all_spaces) cline[24] = '.' (46)
 (is_all_spaces) cline[25] = 's' (115)
 (is_all_spaces) cline[26] = 'e' (101)
 (is_all_spaces) cline[27] = 'c' (99)
 (is_all_spaces) cline[28] = 'o' (111)
 (is_all_spaces) cline[29] = 'n' (110)
 (is_all_spaces) cline[30] = 'd' (100)
 (is_all_spaces) cline[31] = '+' (43)
 (is_all_spaces) cline[32] = 'c' (99)
 (is_all_spaces) cline[33] = '.' (46)
 (is_all_spaces) cline[34] = 't' (116)
 (is_all_spaces) cline[35] = 'h' (104)
 (is_all_spaces) cline[36] = 'i' (105)
 (is_all_spaces) cline[37] = 'r' (114)
 (is_all_spaces) cline[38] = 'd' (100)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "second+third=", c.second+c.third'
*******************************************
**print "second+third=", c.second+c.third**
*******************************************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "second+third=", c.second+c.third'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "second+third=", c.second+c.third'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "second+third=", c.second+c.third'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "second+third=", c.second+c.third'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "second+third=", c.second+c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "second+third=", c.second+c.third'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "second+third=", c.second+c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "second+third=", c.second+c.third'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "second+third=", c.second+c.third'

   (check_operator) 'print "second+third=", c.second+c.third' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "second+third=", c.second+c.third':
   (check_vname) check_vname ret1 ' "second+third=", c.second+c.third':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "second+third=", c.second+c.third'

   (check_literal) check_literal:lit='(' idx=5 ' "second+third=", c.second+c.third'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "second+third=", c.second+c.third'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "second+third=", c.second+c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"second+third=", c.second+c.third'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "second+third=", c.second+c.third'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "second+third=", c.second+c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "second+third=", c.second+c.third'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "second+third=", c.second+c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "second+third=", c.second+c.third'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "second+third=", c.second+c.third'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "second+third=", c.second+c.third'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "second+third=", c.second+c.third'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "second+third=", c.second+c.third'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "second+third=", c.second+c.third'
   (check_literal) check_literal:After drop space:':' idx=5 ' "second+third=", c.second+c.third'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "second+third=", c.second+c.third'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "second+third=", c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "second+third=", c.second+c.third'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "second+third=", c.second+c.third'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "second+third=", c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "second+third=", c.second+c.third'
   (check_literal) check_literal:After while(): "second+third=", c.second+c.third
   (check_literal) ret1 Match. ' PRINT' == 'print "second+third=", c.second+c.third'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "second+third=", c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "second+third=", c.second+c.third'
   (check_literal) check_literal:After while(): "second+third=", c.second+c.third
   (check_literal) ret1 Match. ' PRINT' == 'print "second+third=", c.second+c.third'

   (check_expression) ' "second+third=", c.second+c.third'

    (check_eitem) check_eitem: '"second+third=", c.second+c.third'

     (check_function)  '"second+third=", c.second+c.third'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"second+third=", c.second+c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"second+third=", c.second+c.third'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"second+third=", c.second+c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"second+third=", c.second+c.third'
      (check_literal) check_literal:After while():second+third=", c.second+c.third
      (check_literal) ret1 Match. ' "' == '"second+third=", c.second+c.third'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', c.second+c.third' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', c.second+c.third' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "second+third=", c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "second+third=", c.second+c.third'
   (check_literal) check_literal:After while(): "second+third=", c.second+c.third
   (check_literal) ret1 Match. ' PRINT' == 'print "second+third=", c.second+c.third'
  (scan_print) Before while

   (check_expression) ' "second+third=", c.second+c.third'

    (check_eitem) check_eitem: '"second+third=", c.second+c.third'

     (check_function)  '"second+third=", c.second+c.third'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"second+third=", c.second+c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"second+third=", c.second+c.third'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"second+third=", c.second+c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"second+third=", c.second+c.third'
      (check_literal) check_literal:After while():second+third=", c.second+c.third
      (check_literal) ret1 Match. ' "' == '"second+third=", c.second+c.third'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', c.second+c.third' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', c.second+c.third' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "second+third=", c.second+c.third' igncomma:1

    (check_eitem) check_eitem: '"second+third=", c.second+c.third'

     (check_function)  '"second+third=", c.second+c.third'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"second+third=", c.second+c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"second+third=", c.second+c.third'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"second+third=", c.second+c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"second+third=", c.second+c.third'
      (check_literal) check_literal:After while():second+third=", c.second+c.third
      (check_literal) ret1 Match. ' "' == '"second+third=", c.second+c.third'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"second+third=", c.second+c.third'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"second+third=", c.second+c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"second+third=", c.second+c.third'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"second+third=", c.second+c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"second+third=", c.second+c.third'
      (check_literal) check_literal:After while():second+third=", c.second+c.third
      (check_literal) ret1 Match. ' "' == '"second+third=", c.second+c.third'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"second+third=", c.second+c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"second+third=", c.second+c.third'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"second+third=", c.second+c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"second+third=", c.second+c.third'
      (check_literal) check_literal:After while():second+third=", c.second+c.third
      (check_literal) ret1 Match. ' "' == '"second+third=", c.second+c.third'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"second+third=", c.second+c.third'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"second+third=", c.second+c.third'
       (check_literal) check_literal:After while():second+third=", c.second+c.third
       (check_literal) ret1 Match. ' "' == '"second+third=", c.second+c.third'
      (scan_string)   (in if) 'second+third=", c.second+c.third'
      (scan_string)   (in wh) 'second+third=", c.second+c.third'
      (scan_string)   (in wh) 'econd+third=", c.second+c.third'
      (scan_string)   (in wh) 'econd+third=", c.second+c.third'
      (scan_string)   (in wh) 'cond+third=", c.second+c.third'
      (scan_string)   (in wh) 'cond+third=", c.second+c.third'
      (scan_string)   (in wh) 'ond+third=", c.second+c.third'
      (scan_string)   (in wh) 'ond+third=", c.second+c.third'
      (scan_string)   (in wh) 'nd+third=", c.second+c.third'
      (scan_string)   (in wh) 'nd+third=", c.second+c.third'
      (scan_string)   (in wh) 'd+third=", c.second+c.third'
      (scan_string)   (in wh) 'd+third=", c.second+c.third'
      (scan_string)   (in wh) '+third=", c.second+c.third'
      (scan_string)   (in wh) '+third=", c.second+c.third'
      (scan_string)   (in wh) 'third=", c.second+c.third'
      (scan_string)   (in wh) 'third=", c.second+c.third'
      (scan_string)   (in wh) 'hird=", c.second+c.third'
      (scan_string)   (in wh) 'hird=", c.second+c.third'
      (scan_string)   (in wh) 'ird=", c.second+c.third'
      (scan_string)   (in wh) 'ird=", c.second+c.third'
      (scan_string)   (in wh) 'rd=", c.second+c.third'
      (scan_string)   (in wh) 'rd=", c.second+c.third'
      (scan_string)   (in wh) 'd=", c.second+c.third'
      (scan_string)   (in wh) 'd=", c.second+c.third'
      (scan_string)   (in wh) '=", c.second+c.third'
      (scan_string)   (in wh) '=", c.second+c.third'
      (scan_string)   (in wh) '", c.second+c.third'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"second+third="' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"second+third="'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"second+third=" is not function
token_is_variable: tok:'"second+third="'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"second+third=" is not function
(   output_string) [U,()] s "second+third="
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', c.second+c.third' Before while igncomma:1

    (check_operator) ', c.second+c.third' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', c.second+c.third' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=21 ', c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=21 ', c.second+c.third'
   (check_literal) check_literal:After while(): c.second+c.third
   (check_literal) ret1 Match. ' ,' == ', c.second+c.third'

   (scan_literal_core) scan_literal_core:lit=' ,' ', c.second+c.third'
   (scan_literal_core) scan_literal_core:After drop space:', c.second+c.third'
   (scan_literal_core) scan_literal_core:while loop:, c.second+c.third
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=22 ' c.second+c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=23 'c.second+c.third'
 (check_literal)   ';' != 'c'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"second+third="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :"second+third="   *************
(type_check_stack_push)  type_check_stack_push: '"second+third="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"second+third="' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"second+third="' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"second+third="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:"second+third="    **********
(type_check_stack_push)  type_check_stack_push: '"second+third="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"second+third="' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"second+third="' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"second+third="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"second+third="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"second+third="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("second+third=")
infix_stack_push: '"second+third="'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"second+third="'
infix_stack_push: 'PRINT("second+third=")'
Done

infix_stack_pop: 'PRINT("second+third=")'
Infix stack result PRINT("second+third=")
(infix_from_rpn) exit  'PRINT("second+third=")'
(process_expression_types) ==RINT("second+third=")==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 c.second+c.third
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 c.second+c.third
========================================================
(output_expression_start)

 (check_expression) ' c.second+c.third'

  (check_eitem) check_eitem: 'c.second+c.third'

   (check_function)  'c.second+c.third'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=23 'c.second+c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=23 'c.second+c.third'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=23 'c.second+c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=23 'c.second+c.third'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.second+c.third'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.second+c.third'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.second+c.third'
     (check_textlabel) 'c.second' is a text label chstr:'d'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
    (check_proc_call) 'c.second' is text label

     (check_literal) check_literal:lit=':' idx=31 '+c.third'
     (check_literal) check_literal:After drop space:':' idx=31 '+c.third'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.second+c.third'

     (check_operator) 'c.second+c.third' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.second+c.third':
     (check_vname) check_vname ret1 '+c.third':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c.third'

     (check_literal) check_literal:lit='(' idx=31 '+c.third'
     (check_literal) check_literal:After drop space:'(' idx=31 '+c.third'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+c.third' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) 'c.third' igncomma:1
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c.third'

  (check_function)  'c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=32 'c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=32 'c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=32 'c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=32 'c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.third'
    (check_textlabel) 'c.third' is a text label chstr:'d'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
   (check_proc_call) 'c.third' is text label

    (check_literal) check_literal:lit=':' idx=39 ''
    (check_literal) check_literal:After drop space:':' idx=39 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.third'

    (check_operator) 'c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.third':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=39 ''
    (check_literal) check_literal:After drop space:'(' idx=39 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=39 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=39 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' c.second+c.third' igncomma:1

  (check_eitem) check_eitem: 'c.second+c.third'

   (check_function)  'c.second+c.third'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=23 'c.second+c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=23 'c.second+c.third'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=23 'c.second+c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=23 'c.second+c.third'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.second+c.third'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.second+c.third'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.second+c.third'
     (check_textlabel) 'c.second' is a text label chstr:'d'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
    (check_proc_call) 'c.second' is text label

     (check_literal) check_literal:lit=':' idx=31 '+c.third'
     (check_literal) check_literal:After drop space:':' idx=31 '+c.third'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.second+c.third'

     (check_operator) 'c.second+c.third' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.second+c.third':
     (check_vname) check_vname ret1 '+c.third':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c.third'

     (check_literal) check_literal:lit='(' idx=31 '+c.third'
     (check_literal) check_literal:After drop space:'(' idx=31 '+c.third'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'c.second+c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=23 'c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=23 'c.second+c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=23 'c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=23 'c.second+c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.second+c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.second+c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.second+c.third'
    (check_textlabel) 'c.second' is a text label chstr:'d'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
   (check_proc_call) 'c.second' is text label

    (check_literal) check_literal:lit=':' idx=31 '+c.third'
    (check_literal) check_literal:After drop space:':' idx=31 '+c.third'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.second+c.third'

    (check_operator) 'c.second+c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.second+c.third':
    (check_vname) check_vname ret1 '+c.third':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c.third'

    (check_literal) check_literal:lit='(' idx=31 '+c.third'
    (check_literal) check_literal:After drop space:'(' idx=31 '+c.third'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=23 'c.second+c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=23 'c.second+c.third'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=23 'c.second+c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=23 'c.second+c.third'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.second+c.third'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.second+c.third'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.second+c.third'
   (check_textlabel) 'c.second' is a text label chstr:'d'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
  (check_proc_call) 'c.second' is text label

   (check_literal) check_literal:lit=':' idx=31 '+c.third'
   (check_literal) check_literal:After drop space:':' idx=31 '+c.third'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.second+c.third'

   (check_operator) 'c.second+c.third' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.second+c.third':
   (check_vname) check_vname ret1 '+c.third':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c.third'

   (check_literal) check_literal:lit='(' idx=31 '+c.third'
   (check_literal) check_literal:After drop space:'(' idx=31 '+c.third'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.second+c.third' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.second+c.third'
  (scan_vname) scan_vname: ret1 'c.second'
 (scan_variable) scan_variable: '+c.third' vname='C.SECOND'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.SECOND' is not other keyword
 (scan_variable) Array test '+c.third'

  (check_literal) check_literal:lit='(' idx=31 '+c.third'
  (check_literal) check_literal:After drop space:'(' idx=31 '+c.third'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C.SECOND' Float
(process_token)    Frst:1 T:'C.SECOND' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.SECOND'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.SECOND is not function
token_is_variable: tok:'C.SECOND'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.SECOND is not function
(init_get_name) 
init_get_name:'C.SECOND'
(init_get_name) 
init_get_name:'C.SECOND'
(get_name) 
get_name:gn:'C.SECOND'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C.SECOND
(add_var_info) Name:C.SECOND Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '          C.SECOND'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+c.third' Before while igncomma:1

 (check_operator) '+c.third' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+c.third' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c.third'
 (scan_operator) scan_operator: ret1 'c.third' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c.third' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'c.third' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=32 'c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=32 'c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=32 'c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=32 'c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.third'
    (check_textlabel) 'c.third' is a text label chstr:'d'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
   (check_proc_call) 'c.third' is text label

    (check_literal) check_literal:lit=':' idx=39 ''
    (check_literal) check_literal:After drop space:':' idx=39 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.third'

    (check_operator) 'c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.third':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=39 ''
    (check_literal) check_literal:After drop space:'(' idx=39 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=32 'c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=32 'c.third'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=32 'c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=32 'c.third'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.third'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.third'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.third'
   (check_textlabel) 'c.third' is a text label chstr:'d'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
  (check_proc_call) 'c.third' is text label

   (check_literal) check_literal:lit=':' idx=39 ''
   (check_literal) check_literal:After drop space:':' idx=39 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.third'

   (check_operator) 'c.third' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.third':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=39 ''
   (check_literal) check_literal:After drop space:'(' idx=39 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.third' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.third'
  (scan_vname) scan_vname: ret1 'c.third'
 (scan_variable) scan_variable: '' vname='C.THIRD'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.THIRD' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=39 ''
  (check_literal) check_literal:After drop space:'(' idx=39 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C.THIRD' Float
(process_token)    Frst:0 T:'C.THIRD' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.THIRD'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.THIRD is not function
token_is_variable: tok:'C.THIRD'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.THIRD is not function
(init_get_name) 
init_get_name:'C.THIRD'
(init_get_name) 
init_get_name:'C.THIRD'
(get_name) 
get_name:gn:'C.THIRD'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C.THIRD
(add_var_info) Name:C.THIRD Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '           C.THIRD'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=39 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=39 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ f
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=39 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=39 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=39 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=39 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:4 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :C.SECOND   *************
(type_check_stack_push)  type_check_stack_push: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.SECOND' type:f (1), %:0
(process_syntax_tree) *********Processing :C.THIRD   *************
(type_check_stack_push)  type_check_stack_push: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
(type_check_stack_print)  N002: 'C.THIRD' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'C.SECOND' type:f (1), %:0
(type_check_stack_display) 001: 'C.THIRD' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N002) percent:0
(process_syntax_tree) Mutable type (C.THIRD) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:C.SECOND    **********
(type_check_stack_push)  type_check_stack_push: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.SECOND' type:f (1), %:0
(typecheck_expression)  *** BE:C.THIRD    **********
(type_check_stack_push)  type_check_stack_push: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
(type_check_stack_print)  N002: 'C.THIRD' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'C.SECOND' type:f (1), %:0
(type_check_stack_display) 001: 'C.THIRD' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (C.SECOND)
Var: C.SECOND Float NumIdx:0
infix_stack_push: 'C.SECOND'
(infix_from_rpn) (C.THIRD)
Var: C.THIRD Float NumIdx:0
infix_stack_push: 'C.THIRD'
(infix_from_rpn) (+)
infix_stack_pop: 'C.THIRD'
infix_stack_pop: 'C.SECOND'
infix_stack_push: '(C.SECOND + C.THIRD)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(C.SECOND + C.THIRD)'
infix_stack_push: 'PRINT((C.SECOND + C.THIRD))'
Done

infix_stack_pop: 'PRINT((C.SECOND + C.THIRD))'
Infix stack result PRINT((C.SECOND + C.THIRD))
(infix_from_rpn) exit  'PRINT((C.SECOND + C.THIRD))'
(process_expression_types) ==RINT((C.SECOND + C.THIRD))==
(process_expression_types) 


(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:4
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=39 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=39 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=39 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=39 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=39 ''
     (check_literal) check_literal:After drop space:':' idx=39 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=39 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=39 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=39 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=39 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=39 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=39 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=39 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=39 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print "second+third=", c.second+c.third
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=39 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=39 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=39 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'f' (102)
 (is_all_spaces) cline[8] = 'i' (105)
 (is_all_spaces) cline[9] = 'r' (114)
 (is_all_spaces) cline[10] = 's' (115)
 (is_all_spaces) cline[11] = 't' (116)
 (is_all_spaces) cline[12] = '+' (43)
 (is_all_spaces) cline[13] = 't' (116)
 (is_all_spaces) cline[14] = 'h' (104)
 (is_all_spaces) cline[15] = 'i' (105)
 (is_all_spaces) cline[16] = 'r' (114)
 (is_all_spaces) cline[17] = 'd' (100)
 (is_all_spaces) cline[18] = '=' (61)
 (is_all_spaces) cline[19] = '"' (34)
 (is_all_spaces) cline[20] = ',' (44)
 (is_all_spaces) cline[21] = ' ' (32)
 (is_all_spaces) cline[22] = 'c' (99)
 (is_all_spaces) cline[23] = '.' (46)
 (is_all_spaces) cline[24] = 'f' (102)
 (is_all_spaces) cline[25] = 'i' (105)
 (is_all_spaces) cline[26] = 'r' (114)
 (is_all_spaces) cline[27] = 's' (115)
 (is_all_spaces) cline[28] = 't' (116)
 (is_all_spaces) cline[29] = '+' (43)
 (is_all_spaces) cline[30] = 'c' (99)
 (is_all_spaces) cline[31] = '.' (46)
 (is_all_spaces) cline[32] = 't' (116)
 (is_all_spaces) cline[33] = 'h' (104)
 (is_all_spaces) cline[34] = 'i' (105)
 (is_all_spaces) cline[35] = 'r' (114)
 (is_all_spaces) cline[36] = 'd' (100)
 (is_all_spaces) cline[37] = '	' (9)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "first+third=", c.first+c.third	'
******************************************
**print "first+third=", c.first+c.third	**
******************************************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "first+third=", c.first+c.third	'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "first+third=", c.first+c.third	'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "first+third=", c.first+c.third	'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "first+third=", c.first+c.third	'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "first+third=", c.first+c.third	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "first+third=", c.first+c.third	'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "first+third=", c.first+c.third	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "first+third=", c.first+c.third	'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "first+third=", c.first+c.third	'

   (check_operator) 'print "first+third=", c.first+c.third	' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "first+third=", c.first+c.third	':
   (check_vname) check_vname ret1 ' "first+third=", c.first+c.third	':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "first+third=", c.first+c.third	'

   (check_literal) check_literal:lit='(' idx=5 ' "first+third=", c.first+c.third	'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "first+third=", c.first+c.third	'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "first+third=", c.first+c.third	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"first+third=", c.first+c.third	'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "first+third=", c.first+c.third	'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "first+third=", c.first+c.third	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "first+third=", c.first+c.third	'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "first+third=", c.first+c.third	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "first+third=", c.first+c.third	'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "first+third=", c.first+c.third	'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "first+third=", c.first+c.third	'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "first+third=", c.first+c.third	'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "first+third=", c.first+c.third	'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "first+third=", c.first+c.third	'
   (check_literal) check_literal:After drop space:':' idx=5 ' "first+third=", c.first+c.third	'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "first+third=", c.first+c.third	'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "first+third=", c.first+c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "first+third=", c.first+c.third	'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "first+third=", c.first+c.third	'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "first+third=", c.first+c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "first+third=", c.first+c.third	'
   (check_literal) check_literal:After while(): "first+third=", c.first+c.third	
   (check_literal) ret1 Match. ' PRINT' == 'print "first+third=", c.first+c.third	'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "first+third=", c.first+c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "first+third=", c.first+c.third	'
   (check_literal) check_literal:After while(): "first+third=", c.first+c.third	
   (check_literal) ret1 Match. ' PRINT' == 'print "first+third=", c.first+c.third	'

   (check_expression) ' "first+third=", c.first+c.third	'

    (check_eitem) check_eitem: '"first+third=", c.first+c.third	'

     (check_function)  '"first+third=", c.first+c.third	'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"first+third=", c.first+c.third	'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) check_literal:After while():first+third=", c.first+c.third	
      (check_literal) ret1 Match. ' "' == '"first+third=", c.first+c.third	'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', c.first+c.third	' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', c.first+c.third	' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "first+third=", c.first+c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "first+third=", c.first+c.third	'
   (check_literal) check_literal:After while(): "first+third=", c.first+c.third	
   (check_literal) ret1 Match. ' PRINT' == 'print "first+third=", c.first+c.third	'
  (scan_print) Before while

   (check_expression) ' "first+third=", c.first+c.third	'

    (check_eitem) check_eitem: '"first+third=", c.first+c.third	'

     (check_function)  '"first+third=", c.first+c.third	'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"first+third=", c.first+c.third	'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) check_literal:After while():first+third=", c.first+c.third	
      (check_literal) ret1 Match. ' "' == '"first+third=", c.first+c.third	'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', c.first+c.third	' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', c.first+c.third	' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "first+third=", c.first+c.third	' igncomma:1

    (check_eitem) check_eitem: '"first+third=", c.first+c.third	'

     (check_function)  '"first+third=", c.first+c.third	'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"first+third=", c.first+c.third	'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) check_literal:After while():first+third=", c.first+c.third	
      (check_literal) ret1 Match. ' "' == '"first+third=", c.first+c.third	'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"first+third=", c.first+c.third	'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"first+third=", c.first+c.third	'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) check_literal:After while():first+third=", c.first+c.third	
      (check_literal) ret1 Match. ' "' == '"first+third=", c.first+c.third	'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"first+third=", c.first+c.third	'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) check_literal:After while():first+third=", c.first+c.third	
      (check_literal) ret1 Match. ' "' == '"first+third=", c.first+c.third	'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"first+third=", c.first+c.third	'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"first+third=", c.first+c.third	'
       (check_literal) check_literal:After while():first+third=", c.first+c.third	
       (check_literal) ret1 Match. ' "' == '"first+third=", c.first+c.third	'
      (scan_string)   (in if) 'first+third=", c.first+c.third	'
      (scan_string)   (in wh) 'first+third=", c.first+c.third	'
      (scan_string)   (in wh) 'irst+third=", c.first+c.third	'
      (scan_string)   (in wh) 'irst+third=", c.first+c.third	'
      (scan_string)   (in wh) 'rst+third=", c.first+c.third	'
      (scan_string)   (in wh) 'rst+third=", c.first+c.third	'
      (scan_string)   (in wh) 'st+third=", c.first+c.third	'
      (scan_string)   (in wh) 'st+third=", c.first+c.third	'
      (scan_string)   (in wh) 't+third=", c.first+c.third	'
      (scan_string)   (in wh) 't+third=", c.first+c.third	'
      (scan_string)   (in wh) '+third=", c.first+c.third	'
      (scan_string)   (in wh) '+third=", c.first+c.third	'
      (scan_string)   (in wh) 'third=", c.first+c.third	'
      (scan_string)   (in wh) 'third=", c.first+c.third	'
      (scan_string)   (in wh) 'hird=", c.first+c.third	'
      (scan_string)   (in wh) 'hird=", c.first+c.third	'
      (scan_string)   (in wh) 'ird=", c.first+c.third	'
      (scan_string)   (in wh) 'ird=", c.first+c.third	'
      (scan_string)   (in wh) 'rd=", c.first+c.third	'
      (scan_string)   (in wh) 'rd=", c.first+c.third	'
      (scan_string)   (in wh) 'd=", c.first+c.third	'
      (scan_string)   (in wh) 'd=", c.first+c.third	'
      (scan_string)   (in wh) '=", c.first+c.third	'
      (scan_string)   (in wh) '=", c.first+c.third	'
      (scan_string)   (in wh) '", c.first+c.third	'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"first+third="' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"first+third="'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"first+third=" is not function
token_is_variable: tok:'"first+third="'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"first+third=" is not function
(   output_string) [U,()] s "first+third="
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', c.first+c.third	' Before while igncomma:1

    (check_operator) ', c.first+c.third	' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', c.first+c.third	' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=20 ', c.first+c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=20 ', c.first+c.third	'
   (check_literal) check_literal:After while(): c.first+c.third	
   (check_literal) ret1 Match. ' ,' == ', c.first+c.third	'

   (scan_literal_core) scan_literal_core:lit=' ,' ', c.first+c.third	'
   (scan_literal_core) scan_literal_core:After drop space:', c.first+c.third	'
   (scan_literal_core) scan_literal_core:while loop:, c.first+c.third	
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=21 ' c.first+c.third	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=22 'c.first+c.third	'
 (check_literal)   ';' != 'c'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"first+third="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :"first+third="   *************
(type_check_stack_push)  type_check_stack_push: '"first+third="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"first+third="' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"first+third="' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"first+third="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:"first+third="    **********
(type_check_stack_push)  type_check_stack_push: '"first+third="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"first+third="' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"first+third="' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"first+third="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"first+third="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"first+third="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("first+third=")
infix_stack_push: '"first+third="'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"first+third="'
infix_stack_push: 'PRINT("first+third=")'
Done

infix_stack_pop: 'PRINT("first+third=")'
Infix stack result PRINT("first+third=")
(infix_from_rpn) exit  'PRINT("first+third=")'
(process_expression_types) ==RINT("first+third=")==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 c.first+c.third	
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(finalise_expression) Finalise expression done.
 c.first+c.third	
========================================================
(output_expression_start)

 (check_expression) ' c.first+c.third	'

  (check_eitem) check_eitem: 'c.first+c.third	'

   (check_function)  'c.first+c.third	'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=22 'c.first+c.third	'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 'c.first+c.third	'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=22 'c.first+c.third	'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 'c.first+c.third	'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.first+c.third	'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.first+c.third	'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.first+c.third	'
     (check_textlabel) 'c.first' is a text label chstr:'t'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'c.first' Type:f
    (check_proc_call) 'c.first' is text label

     (check_literal) check_literal:lit=':' idx=29 '+c.third	'
     (check_literal) check_literal:After drop space:':' idx=29 '+c.third	'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.first+c.third	'

     (check_operator) 'c.first+c.third	' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.first+c.third	':
     (check_vname) check_vname ret1 '+c.third	':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c.third	'

     (check_literal) check_literal:lit='(' idx=29 '+c.third	'
     (check_literal) check_literal:After drop space:'(' idx=29 '+c.third	'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+c.third	' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) 'c.third	' igncomma:1
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c.third	'

  (check_function)  'c.third	'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=30 'c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=30 'c.third	'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=30 'c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=30 'c.third	'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.third	'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.third	'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.third	'
    (check_textlabel) 'c.third' is a text label chstr:'d'
    (check_textlabel) Exit char:	
    (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
   (check_proc_call) 'c.third' is text label

    (check_literal) check_literal:lit=':' idx=37 '	'
    (check_literal) check_literal:After drop space:':' idx=37 '	'
    (check_literal)   ':' != '	'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.third	'

    (check_operator) 'c.third	' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.third	':
    (check_vname) check_vname ret1 '	':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '	'

    (check_literal) check_literal:lit='(' idx=37 '	'
    (check_literal) check_literal:After drop space:'(' idx=37 '	'
    (check_literal)   '(' != '	'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=37 '	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=38 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' c.first+c.third	' igncomma:1

  (check_eitem) check_eitem: 'c.first+c.third	'

   (check_function)  'c.first+c.third	'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=22 'c.first+c.third	'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 'c.first+c.third	'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=22 'c.first+c.third	'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 'c.first+c.third	'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.first+c.third	'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.first+c.third	'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.first+c.third	'
     (check_textlabel) 'c.first' is a text label chstr:'t'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'c.first' Type:f
    (check_proc_call) 'c.first' is text label

     (check_literal) check_literal:lit=':' idx=29 '+c.third	'
     (check_literal) check_literal:After drop space:':' idx=29 '+c.third	'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.first+c.third	'

     (check_operator) 'c.first+c.third	' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.first+c.third	':
     (check_vname) check_vname ret1 '+c.third	':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c.third	'

     (check_literal) check_literal:lit='(' idx=29 '+c.third	'
     (check_literal) check_literal:After drop space:'(' idx=29 '+c.third	'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'c.first+c.third	'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=22 'c.first+c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=22 'c.first+c.third	'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=22 'c.first+c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=22 'c.first+c.third	'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.first+c.third	'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.first+c.third	'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.first+c.third	'
    (check_textlabel) 'c.first' is a text label chstr:'t'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'c.first' Type:f
   (check_proc_call) 'c.first' is text label

    (check_literal) check_literal:lit=':' idx=29 '+c.third	'
    (check_literal) check_literal:After drop space:':' idx=29 '+c.third	'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.first+c.third	'

    (check_operator) 'c.first+c.third	' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.first+c.third	':
    (check_vname) check_vname ret1 '+c.third	':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c.third	'

    (check_literal) check_literal:lit='(' idx=29 '+c.third	'
    (check_literal) check_literal:After drop space:'(' idx=29 '+c.third	'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=22 'c.first+c.third	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=22 'c.first+c.third	'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=22 'c.first+c.third	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=22 'c.first+c.third	'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.first+c.third	'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.first+c.third	'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.first+c.third	'
   (check_textlabel) 'c.first' is a text label chstr:'t'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'c.first' Type:f
  (check_proc_call) 'c.first' is text label

   (check_literal) check_literal:lit=':' idx=29 '+c.third	'
   (check_literal) check_literal:After drop space:':' idx=29 '+c.third	'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.first+c.third	'

   (check_operator) 'c.first+c.third	' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.first+c.third	':
   (check_vname) check_vname ret1 '+c.third	':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c.third	'

   (check_literal) check_literal:lit='(' idx=29 '+c.third	'
   (check_literal) check_literal:After drop space:'(' idx=29 '+c.third	'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.first+c.third	' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.first+c.third	'
  (scan_vname) scan_vname: ret1 'c.first'
 (scan_variable) scan_variable: '+c.third	' vname='C.FIRST'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.FIRST' is not other keyword
 (scan_variable) Array test '+c.third	'

  (check_literal) check_literal:lit='(' idx=29 '+c.third	'
  (check_literal) check_literal:After drop space:'(' idx=29 '+c.third	'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C.FIRST' Float
(process_token)    Frst:1 T:'C.FIRST' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.FIRST'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.FIRST is not function
token_is_variable: tok:'C.FIRST'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.FIRST is not function
(init_get_name) 
init_get_name:'C.FIRST'
(init_get_name) 
init_get_name:'C.FIRST'
(get_name) 
get_name:gn:'C.FIRST'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C.FIRST
(add_var_info) Name:C.FIRST Idx:-1
Variables

   0:  VAR: '             TOTAL'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   1:  VAR: '                 A'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   2:  VAR: '                 B'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   3:  VAR: '                 C'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   4:  VAR: '                 T'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   5:  VAR: '                AB'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   6:  VAR: '                BC'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   7:  VAR: '                AC'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   8:  VAR: '            C.TEST'       Open Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   9:  VAR: '          C.SECOND'       Open Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
  10:  VAR: '           C.THIRD'       Open Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

(find_var_info) ******
(find_var_info) 
Could not find var 'C.FIRST'
(find_var_info) ******
(add_var_info) Not already present
(scan_variable) ret1
VAR: '           C.FIRST'   FieldVar Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
(scan_atom) ret1
(scan_expression) '+c.third	' Before while igncomma:1

 (check_operator) '+c.third	' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+c.third	' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c.third	'
 (scan_operator) scan_operator: ret1 'c.third	' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c.third	' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'c.third	' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'c.third	'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=30 'c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=30 'c.third	'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=30 'c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=30 'c.third	'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.third	'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.third	'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.third	'
    (check_textlabel) 'c.third' is a text label chstr:'d'
    (check_textlabel) Exit char:	
    (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
   (check_proc_call) 'c.third' is text label

    (check_literal) check_literal:lit=':' idx=37 '	'
    (check_literal) check_literal:After drop space:':' idx=37 '	'
    (check_literal)   ':' != '	'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.third	'

    (check_operator) 'c.third	' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.third	':
    (check_vname) check_vname ret1 '	':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '	'

    (check_literal) check_literal:lit='(' idx=37 '	'
    (check_literal) check_literal:After drop space:'(' idx=37 '	'
    (check_literal)   '(' != '	'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=30 'c.third	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=30 'c.third	'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=30 'c.third	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=30 'c.third	'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.third	'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.third	'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.third	'
   (check_textlabel) 'c.third' is a text label chstr:'d'
   (check_textlabel) Exit char:	
   (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
  (check_proc_call) 'c.third' is text label

   (check_literal) check_literal:lit=':' idx=37 '	'
   (check_literal) check_literal:After drop space:':' idx=37 '	'
   (check_literal)   ':' != '	'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.third	'

   (check_operator) 'c.third	' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.third	':
   (check_vname) check_vname ret1 '	':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '	'

   (check_literal) check_literal:lit='(' idx=37 '	'
   (check_literal) check_literal:After drop space:'(' idx=37 '	'
   (check_literal)   '(' != '	'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.third	' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.third	'
  (scan_vname) scan_vname: ret1 'c.third'
 (scan_variable) scan_variable: '	' vname='C.THIRD'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.THIRD' is not other keyword
 (scan_variable) Array test '	'

  (check_literal) check_literal:lit='(' idx=37 '	'
  (check_literal) check_literal:After drop space:'(' idx=37 '	'
  (check_literal)   '(' != '	'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C.THIRD' Float
(process_token)    Frst:0 T:'C.THIRD' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.THIRD'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.THIRD is not function
token_is_variable: tok:'C.THIRD'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.THIRD is not function
(init_get_name) 
init_get_name:'C.THIRD'
(init_get_name) 
init_get_name:'C.THIRD'
(get_name) 
get_name:gn:'C.THIRD'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C.THIRD
(add_var_info) Name:C.THIRD Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '           C.THIRD'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=37 '	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=38 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '	' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ f
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=37 '	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=38 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=38 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=38 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:4 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.FIRST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :C.FIRST   *************
(type_check_stack_push)  type_check_stack_push: 'C.FIRST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.FIRST' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.FIRST' type:f (1), %:0
(process_syntax_tree) *********Processing :C.THIRD   *************
(type_check_stack_push)  type_check_stack_push: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'C.FIRST' type:1 %:0
(type_check_stack_print)  N002: 'C.THIRD' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'C.FIRST' type:f (1), %:0
(type_check_stack_display) 001: 'C.THIRD' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.FIRST' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'C.FIRST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N002) percent:0
(process_syntax_tree) Mutable type (C.THIRD) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:C.FIRST    **********
(type_check_stack_push)  type_check_stack_push: 'C.FIRST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.FIRST' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.FIRST' type:f (1), %:0
(typecheck_expression)  *** BE:C.THIRD    **********
(type_check_stack_push)  type_check_stack_push: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'C.FIRST' type:1 %:0
(type_check_stack_print)  N002: 'C.THIRD' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'C.FIRST' type:f (1), %:0
(type_check_stack_display) 001: 'C.THIRD' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.FIRST' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'C.FIRST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.FIRST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.FIRST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (C.FIRST)
Var: C.FIRST Float NumIdx:0
infix_stack_push: 'C.FIRST'
(infix_from_rpn) (C.THIRD)
Var: C.THIRD Float NumIdx:0
infix_stack_push: 'C.THIRD'
(infix_from_rpn) (+)
infix_stack_pop: 'C.THIRD'
infix_stack_pop: 'C.FIRST'
infix_stack_push: '(C.FIRST + C.THIRD)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(C.FIRST + C.THIRD)'
infix_stack_push: 'PRINT((C.FIRST + C.THIRD))'
Done

infix_stack_pop: 'PRINT((C.FIRST + C.THIRD))'
Infix stack result PRINT((C.FIRST + C.THIRD))
(infix_from_rpn) exit  'PRINT((C.FIRST + C.THIRD))'
(process_expression_types) ==RINT((C.FIRST + C.THIRD))==
(process_expression_types) 


(finalise_expression) Finalise expression done.
	
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:4
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(finalise_expression) Finalise expression done.
	
========================================================
(output_expression_start)

 (check_expression) '	'

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=38 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=38 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=38 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=38 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=38 ''
     (check_literal) check_literal:After drop space:':' idx=38 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=38 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=38 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=37 '	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=38 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=38 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=38 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=37 '	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=38 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print "first+third=", c.first+c.third	
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=38 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=38 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=38 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'T' (84)
 (is_all_spaces) cline[8] = 'o' (111)
 (is_all_spaces) cline[9] = 't' (116)
 (is_all_spaces) cline[10] = 'a' (97)
 (is_all_spaces) cline[11] = 'l' (108)
 (is_all_spaces) cline[12] = ':' (58)
 (is_all_spaces) cline[13] = '"' (34)
 (is_all_spaces) cline[14] = ',' (44)
 (is_all_spaces) cline[15] = 't' (116)
 (is_all_spaces) cline[16] = 'o' (111)
 (is_all_spaces) cline[17] = 't' (116)
 (is_all_spaces) cline[18] = 'a' (97)
 (is_all_spaces) cline[19] = 'l' (108)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "Total:",total'
************************
**print "Total:",total**
************************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "Total:",total'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "Total:",total'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "Total:",total'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "Total:",total'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "Total:",total'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "Total:",total'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "Total:",total'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "Total:",total'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "Total:",total'

   (check_operator) 'print "Total:",total' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "Total:",total':
   (check_vname) check_vname ret1 ' "Total:",total':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "Total:",total'

   (check_literal) check_literal:lit='(' idx=5 ' "Total:",total'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "Total:",total'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "Total:",total'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"Total:",total'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "Total:",total'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "Total:",total'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "Total:",total'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "Total:",total'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "Total:",total'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "Total:",total'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "Total:",total'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "Total:",total'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "Total:",total'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "Total:",total'
   (check_literal) check_literal:After drop space:':' idx=5 ' "Total:",total'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "Total:",total'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "Total:",total'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "Total:",total'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "Total:",total'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Total:",total'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Total:",total'
   (check_literal) check_literal:After while(): "Total:",total
   (check_literal) ret1 Match. ' PRINT' == 'print "Total:",total'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Total:",total'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Total:",total'
   (check_literal) check_literal:After while(): "Total:",total
   (check_literal) ret1 Match. ' PRINT' == 'print "Total:",total'

   (check_expression) ' "Total:",total'

    (check_eitem) check_eitem: '"Total:",total'

     (check_function)  '"Total:",total'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Total:",total'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Total:",total'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Total:",total'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Total:",total'
      (check_literal) check_literal:After while():Total:",total
      (check_literal) ret1 Match. ' "' == '"Total:",total'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ',total' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ',total' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Total:",total'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Total:",total'
   (check_literal) check_literal:After while(): "Total:",total
   (check_literal) ret1 Match. ' PRINT' == 'print "Total:",total'
  (scan_print) Before while

   (check_expression) ' "Total:",total'

    (check_eitem) check_eitem: '"Total:",total'

     (check_function)  '"Total:",total'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Total:",total'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Total:",total'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Total:",total'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Total:",total'
      (check_literal) check_literal:After while():Total:",total
      (check_literal) ret1 Match. ' "' == '"Total:",total'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ',total' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ',total' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "Total:",total' igncomma:1

    (check_eitem) check_eitem: '"Total:",total'

     (check_function)  '"Total:",total'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Total:",total'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Total:",total'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Total:",total'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Total:",total'
      (check_literal) check_literal:After while():Total:",total
      (check_literal) ret1 Match. ' "' == '"Total:",total'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"Total:",total'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Total:",total'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Total:",total'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Total:",total'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Total:",total'
      (check_literal) check_literal:After while():Total:",total
      (check_literal) ret1 Match. ' "' == '"Total:",total'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"Total:",total'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Total:",total'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"Total:",total'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Total:",total'
      (check_literal) check_literal:After while():Total:",total
      (check_literal) ret1 Match. ' "' == '"Total:",total'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"Total:",total'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"Total:",total'
       (check_literal) check_literal:After while():Total:",total
       (check_literal) ret1 Match. ' "' == '"Total:",total'
      (scan_string)   (in if) 'Total:",total'
      (scan_string)   (in wh) 'Total:",total'
      (scan_string)   (in wh) 'otal:",total'
      (scan_string)   (in wh) 'otal:",total'
      (scan_string)   (in wh) 'tal:",total'
      (scan_string)   (in wh) 'tal:",total'
      (scan_string)   (in wh) 'al:",total'
      (scan_string)   (in wh) 'al:",total'
      (scan_string)   (in wh) 'l:",total'
      (scan_string)   (in wh) 'l:",total'
      (scan_string)   (in wh) ':",total'
      (scan_string)   (in wh) ':",total'
      (scan_string)   (in wh) '",total'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"Total:"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"Total:"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Total:" is not function
token_is_variable: tok:'"Total:"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Total:" is not function
(   output_string) [U,()] s "Total:"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ',total' Before while igncomma:1

    (check_operator) ',total' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ',total' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=14 ',total'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=14 ',total'
   (check_literal) check_literal:After while():total
   (check_literal) ret1 Match. ' ,' == ',total'

   (scan_literal_core) scan_literal_core:lit=' ,' ',total'
   (scan_literal_core) scan_literal_core:After drop space:',total'
   (scan_literal_core) scan_literal_core:while loop:,total
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=15 'total'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=15 'total'
 (check_literal)   ';' != 't'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Total:"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :"Total:"   *************
(type_check_stack_push)  type_check_stack_push: '"Total:"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"Total:"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"Total:"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"Total:"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:"Total:"    **********
(type_check_stack_push)  type_check_stack_push: '"Total:"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"Total:"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"Total:"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"Total:"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Total:"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Total:"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("Total:")
infix_stack_push: '"Total:"'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"Total:"'
infix_stack_push: 'PRINT("Total:")'
Done

infix_stack_pop: 'PRINT("Total:")'
Infix stack result PRINT("Total:")
(infix_from_rpn) exit  'PRINT("Total:")'
(process_expression_types) ==RINT("Total:")==
(process_expression_types) 


(finalise_expression) Finalise expression done.
total
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(finalise_expression) Finalise expression done.
total
========================================================
(output_expression_start)

 (check_expression) 'total'

  (check_eitem) check_eitem: 'total'

   (check_function)  'total'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=15 'total'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=15 'total'
    (check_literal)   '%' != 't'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=15 'total'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=15 'total'
    (check_literal)   '"' != 't'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'total'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'total'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'total'
     (check_textlabel) 'total' is a text label chstr:'l'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'total' Type:f
    (check_proc_call) 'total' is text label

     (check_literal) check_literal:lit=':' idx=20 ''
     (check_literal) check_literal:After drop space:':' idx=20 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'total'

     (check_operator) 'total' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'total':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=20 ''
     (check_literal) check_literal:After drop space:'(' idx=20 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) 'total' igncomma:1

  (check_eitem) check_eitem: 'total'

   (check_function)  'total'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=15 'total'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=15 'total'
    (check_literal)   '%' != 't'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=15 'total'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=15 'total'
    (check_literal)   '"' != 't'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'total'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'total'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'total'
     (check_textlabel) 'total' is a text label chstr:'l'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'total' Type:f
    (check_proc_call) 'total' is text label

     (check_literal) check_literal:lit=':' idx=20 ''
     (check_literal) check_literal:After drop space:':' idx=20 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'total'

     (check_operator) 'total' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'total':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=20 ''
     (check_literal) check_literal:After drop space:'(' idx=20 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'total'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=15 'total'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=15 'total'
   (check_literal)   '%' != 't'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=15 'total'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=15 'total'
   (check_literal)   '"' != 't'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'total'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'total'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'total'
    (check_textlabel) 'total' is a text label chstr:'l'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'total' Type:f
   (check_proc_call) 'total' is text label

    (check_literal) check_literal:lit=':' idx=20 ''
    (check_literal) check_literal:After drop space:':' idx=20 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'total'

    (check_operator) 'total' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'total':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=20 ''
    (check_literal) check_literal:After drop space:'(' idx=20 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=15 'total'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=15 'total'
  (check_literal)   '%' != 't'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=15 'total'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=15 'total'
  (check_literal)   '"' != 't'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'total'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'total'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'total'
   (check_textlabel) 'total' is a text label chstr:'l'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'total' Type:f
  (check_proc_call) 'total' is text label

   (check_literal) check_literal:lit=':' idx=20 ''
   (check_literal) check_literal:After drop space:':' idx=20 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'total'

   (check_operator) 'total' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'total':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=20 ''
   (check_literal) check_literal:After drop space:'(' idx=20 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'total' ref_ndeclare:1

  (scan_vname) scan_vname: 'total'
  (scan_vname) scan_vname: ret1 'total'
 (scan_variable) scan_variable: '' vname='TOTAL'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'TOTAL' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=20 ''
  (check_literal) check_literal:After drop space:'(' idx=20 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='TOTAL' Float
(process_token)    Frst:1 T:'TOTAL' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'TOTAL'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:TOTAL is not function
token_is_variable: tok:'TOTAL'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:TOTAL is not function
(init_get_name) 
init_get_name:'TOTAL'
(init_get_name) 
init_get_name:'TOTAL'
(get_name) 
get_name:gn:'TOTAL'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f TOTAL
(add_var_info) Name:TOTAL Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '             TOTAL'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '' Before while igncomma:1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 32767
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=20 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=20 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=20 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=20 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:2 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :TOTAL   *************
(type_check_stack_push)  type_check_stack_push: 'TOTAL'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'TOTAL' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'TOTAL'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:TOTAL    **********
(type_check_stack_push)  type_check_stack_push: 'TOTAL'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'TOTAL' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'TOTAL'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (TOTAL)
Var: TOTAL Float NumIdx:0
infix_stack_push: 'TOTAL'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: 'TOTAL'
infix_stack_push: 'PRINT(TOTAL)'
Done

infix_stack_pop: 'PRINT(TOTAL)'
Infix stack result PRINT(TOTAL)
(infix_from_rpn) exit  'PRINT(TOTAL)'
(process_expression_types) ==RINT(TOTAL)==
(process_expression_types) 


(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=20 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=20 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=20 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=20 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=20 ''
     (check_literal) check_literal:After drop space:':' idx=20 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=20 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=20 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=20 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=20 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=20 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=20 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=20 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=20 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print "Total:",total
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=20 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=20 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=20 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'i' (105)
 (is_all_spaces) cline[1] = 'f' (102)
 (is_all_spaces) cline[2] = ' ' (32)
 (is_all_spaces) cline[3] = 't' (116)
 (is_all_spaces) cline[4] = 'o' (111)
 (is_all_spaces) cline[5] = 't' (116)
 (is_all_spaces) cline[6] = 'a' (97)
 (is_all_spaces) cline[7] = 'l' (108)
 (is_all_spaces) cline[8] = ' ' (32)
 (is_all_spaces) cline[9] = '=' (61)
 (is_all_spaces) cline[10] = ' ' (32)
 (is_all_spaces) cline[11] = '1' (49)
 (is_all_spaces) cline[12] = '2' (50)
 (is_all_spaces) cline[13] = '7' (55)
 (is_all_spaces) cline[14] = '0' (48)
 (is_all_spaces) cline[15] = '.' (46)
 (is_all_spaces) cline[16] = '0' (48)
 (is_all_spaces) cline[17] = '3' (51)
 (is_all_spaces) cline[18] = '3' (51)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'if total = 1270.033'
***********************
**if total = 1270.033**
***********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'if total = 1270.033'
 (check_literal) check_literal:After drop space:'REM' idx=0 'if total = 1270.033'
 (check_literal)   'R' != 'i'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'if total = 1270.033'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'if total = 1270.033'
 (check_literal)   'R' != 'i'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'if total = 1270.033'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'if total = 1270.033'
 (check_literal)   'R' != 'i'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'if total = 1270.033'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'if total = 1270.033'
 (check_literal)   'R' != 'i'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'if total = 1270.033'

   (check_operator) 'if total = 1270.033' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'if total = 1270.033':
   (check_vname) check_vname ret1 ' total = 1270.033':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' total = 1270.033'

   (check_literal) check_literal:lit='(' idx=2 ' total = 1270.033'
   (check_literal) check_literal:After drop space:'(' idx=2 ' total = 1270.033'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=2 ' total = 1270.033'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=3 'total = 1270.033'
 (check_literal)   '=' != 't'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'if total = 1270.033'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'if total = 1270.033'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'if total = 1270.033'
  (check_literal)   'L' != 'i'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'if total = 1270.033'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'if total = 1270.033'
  (check_literal)   'G' != 'i'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'if total = 1270.033'
   (check_textlabel) 'if' is a text label chstr:'f'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'if' Type:f

   (check_literal) check_literal:lit='::' idx=2 ' total = 1270.033'
   (check_literal) check_literal:After drop space:'::' idx=2 ' total = 1270.033'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'if total = 1270.033'
   (check_textlabel) 'if' is a text label chstr:'f'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'if' Type:f
  (check_proc_call) 'if' is text label

   (check_literal) check_literal:lit=':' idx=2 ' total = 1270.033'
   (check_literal) check_literal:After drop space:':' idx=2 ' total = 1270.033'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'if total = 1270.033'

   (check_literal) check_literal:lit=' INPUT' idx=0 'if total = 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'if total = 1270.033'
   (check_literal)   'N' != 'f'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'if total = 1270.033'

   (check_literal) check_literal:lit=' PRINT' idx=0 'if total = 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'if total = 1270.033'
   (check_literal)   'P' != 'i'
   (check_literal) check_literal: ret0
  (check_print) check_print:ret0

  (check_print) check_print: 'if total = 1270.033'

   (check_literal) check_literal:lit=' LPRINT' idx=0 'if total = 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LPRINT' idx=0 'if total = 1270.033'
   (check_literal)   'L' != 'i'
   (check_literal) check_literal: ret0
  (check_print) check_print:ret0

  (check_return) check_return: 'if total = 1270.033'

   (check_literal) check_literal:lit=' RETURN' idx=0 'if total = 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'RETURN' idx=0 'if total = 1270.033'
   (check_literal)   'R' != 'i'
   (check_literal) check_literal: ret0
  (check_return) check_return:ret0

  (check_use) 'if total = 1270.033'

   (check_literal) check_literal:lit=' USE' idx=0 'if total = 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'USE' idx=0 'if total = 1270.033'
   (check_literal)   'U' != 'i'
   (check_literal) check_literal: ret0
  (check_use) ret0

  (check_onerr) check_onerr: 'if total = 1270.033'

   (check_literal) check_literal:lit=' ONERR' idx=0 'if total = 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'ONERR' idx=0 'if total = 1270.033'
   (check_literal)   'O' != 'i'
   (check_literal) check_literal: ret0
  (check_onerr) check_onerr:ret0

  (check_if) 'if total = 1270.033'

   (check_literal) check_literal:lit=' IF' idx=0 'if total = 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'IF' idx=0 'if total = 1270.033'
   (check_literal) check_literal:After while(): total = 1270.033
   (check_literal) ret1 Match. ' IF' == 'if total = 1270.033'
  (check_if) ret1
 (scan_line) scan_line:check_if: 

  (scan_if) Entry 'if total = 1270.033'

   (check_literal) check_literal:lit=' IF' idx=0 'if total = 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'IF' idx=0 'if total = 1270.033'
   (check_literal) check_literal:After while(): total = 1270.033
   (check_literal) ret1 Match. ' IF' == 'if total = 1270.033'

   (scan_expression) ' total = 1270.033' igncomma:1

    (check_eitem) check_eitem: 'total = 1270.033'

     (check_function)  'total = 1270.033'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=3 'total = 1270.033'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=3 'total = 1270.033'
      (check_literal)   '%' != 't'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=3 'total = 1270.033'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=3 'total = 1270.033'
      (check_literal)   '"' != 't'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'' float:0.000000e+00
       (check_float) check_float: ret0

       (check_integer) check_integer: 'total = 1270.033'
       (check_integer) check_integer:ret0

       (check_hex) check_hex: 'total = 1270.033'
       (check_hex) check_hex:ret0 not '$'
      (check_number) check_number: ret0

      (check_proc_call) check_proc_call:

       (check_textlabel) 'total = 1270.033'
       (check_textlabel) 'total' is a text label chstr:'l'
       (check_textlabel) Exit char: 
       (check_textlabel) check_textlabel:ret1 Name:'total' Type:f
      (check_proc_call) 'total' is text label

       (check_literal) check_literal:lit=':' idx=8 ' = 1270.033'
       (check_literal) check_literal:After drop space:':' idx=8 ' = 1270.033'
       (check_literal)   ':' != ' '
       (check_literal) check_literal: ret0
      (check_proc_call) check_proc_call:ret0

      (check_variable) 'total = 1270.033'

       (check_operator) 'total = 1270.033' igncomma:1
       (check_operator) ret0:is comma: 32767

       (check_vname) check_vname 'total = 1270.033':
       (check_vname) check_vname ret1 ' = 1270.033':
      (check_variable) Name: ''
      (check_variable) check_variable: Ary test ' = 1270.033'

       (check_literal) check_literal:lit='(' idx=8 ' = 1270.033'
       (check_literal) check_literal:After drop space:'(' idx=8 ' = 1270.033'
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) ret1
   (check_eitem) ret1

   (scan_eitem) scan_eitem:

    (check_function)  'total = 1270.033'
    (check_function) ret0

    (check_atom) check_atom:
    (check_atom) check_atom:Checking for character constant

     (check_literal) check_literal:lit=' %' idx=3 'total = 1270.033'
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=3 'total = 1270.033'
     (check_literal)   '%' != 't'
     (check_literal) check_literal: ret0
    (check_atom) check_atom:Checking for string

     (check_literal) check_literal:lit=' "' idx=3 'total = 1270.033'
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=3 'total = 1270.033'
     (check_literal)   '"' != 't'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) Fltval:'' float:0.000000e+00
      (check_float) check_float: ret0

      (check_integer) check_integer: 'total = 1270.033'
      (check_integer) check_integer:ret0

      (check_hex) check_hex: 'total = 1270.033'
      (check_hex) check_hex:ret0 not '$'
     (check_number) check_number: ret0

     (check_proc_call) check_proc_call:

      (check_textlabel) 'total = 1270.033'
      (check_textlabel) 'total' is a text label chstr:'l'
      (check_textlabel) Exit char: 
      (check_textlabel) check_textlabel:ret1 Name:'total' Type:f
     (check_proc_call) 'total' is text label

      (check_literal) check_literal:lit=':' idx=8 ' = 1270.033'
      (check_literal) check_literal:After drop space:':' idx=8 ' = 1270.033'
      (check_literal)   ':' != ' '
      (check_literal) check_literal: ret0
     (check_proc_call) check_proc_call:ret0

     (check_variable) 'total = 1270.033'

      (check_operator) 'total = 1270.033' igncomma:1
      (check_operator) ret0:is comma: 32767

      (check_vname) check_vname 'total = 1270.033':
      (check_vname) check_vname ret1 ' = 1270.033':
     (check_variable) Name: ''
     (check_variable) check_variable: Ary test ' = 1270.033'

      (check_literal) check_literal:lit='(' idx=8 ' = 1270.033'
      (check_literal) check_literal:After drop space:'(' idx=8 ' = 1270.033'
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=3 'total = 1270.033'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=3 'total = 1270.033'
    (check_literal)   '%' != 't'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=3 'total = 1270.033'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=3 'total = 1270.033'
    (check_literal)   '"' != 't'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'total = 1270.033'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'total = 1270.033'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'total = 1270.033'
     (check_textlabel) 'total' is a text label chstr:'l'
     (check_textlabel) Exit char: 
     (check_textlabel) check_textlabel:ret1 Name:'total' Type:f
    (check_proc_call) 'total' is text label

     (check_literal) check_literal:lit=':' idx=8 ' = 1270.033'
     (check_literal) check_literal:After drop space:':' idx=8 ' = 1270.033'
     (check_literal)   ':' != ' '
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'total = 1270.033'

     (check_operator) 'total = 1270.033' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'total = 1270.033':
     (check_vname) check_vname ret1 ' = 1270.033':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ' = 1270.033'

     (check_literal) check_literal:lit='(' idx=8 ' = 1270.033'
     (check_literal) check_literal:After drop space:'(' idx=8 ' = 1270.033'
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (scan_variable) 'total = 1270.033' ref_ndeclare:1

    (scan_vname) scan_vname: 'total = 1270.033'
    (scan_vname) scan_vname: ret1 'total'
   (scan_variable) scan_variable: ' = 1270.033' vname='TOTAL'
   (token_is_other_keyword) 
   (token_is_other_keyword) 'TOTAL' is not other keyword
   (scan_variable) Array test ' = 1270.033'

    (check_literal) check_literal:lit='(' idx=8 ' = 1270.033'
    (check_literal) check_literal:After drop space:'(' idx=8 ' = 1270.033'
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (scan_variable) scan_variable:ret1 vname='TOTAL' Float
  (process_token)    Frst:1 T:'TOTAL' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:'TOTAL'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:TOTAL is not function
token_is_variable: tok:'TOTAL'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:TOTAL is not function
 (init_get_name) 
init_get_name:'TOTAL'
 (init_get_name) 
init_get_name:'TOTAL'
 (get_name) 
get_name:gn:'TOTAL'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f TOTAL
 (add_var_info) Name:TOTAL Idx:-1
 (add_var_info) Already present
 (add_var_info)   reference so OK
 (scan_variable) ret1
VAR: '             TOTAL'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) ' = 1270.033' Before while igncomma:1

 (check_operator) '= 1270.033' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '= 1270.033' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: ' = 1270.033'
 (scan_operator) scan_operator: ret1 ' 1270.033' nb:0
(process_token)    Frst:0 T:'=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'=' is operator
(process_token) 
Token is operator o1 name:= o2 name:
(process_token) 
opr1:2 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'='
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: = type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) '1270.033' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) '1270.033' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  '1270.033'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=10 ' 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=11 '1270.033'
   (check_literal)   '%' != '1'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=10 ' 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=11 '1270.033'
   (check_literal)   '"' != '1'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'1270.033' float:1.270033e+03
    (check_float) check_float: ret1
   (check_number) check_number: ret1
  (check_atom) ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=10 ' 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=11 '1270.033'
   (check_literal)   '%' != '1'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=10 ' 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=11 '1270.033'
   (check_literal)   '"' != '1'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'1270.033' float:1.270033e+03
    (check_float) check_float: ret1
   (check_number) check_number: ret1

   (scan_number) scan_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'1270.033' float:1.270033e+03
    (check_float) check_float: ret1

    (scan_float) scan_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (scan_float) Fltval:'1270.033' float:1.270033e+03
    (scan_float) scan_float: ret1
   (process_token)    Frst:0 T:'1270.033' toktype:i exptype:f bufid:'EXP_BUFF_ID_FLT'
   (operator_precedence) 
= is operator
   (process_token) Before switch, bufid:'EXP_BUFF_ID_FLT'
modify_expression_type:Inittype:f Intype:f Outtype:f
(    output_float) [f,()] f 1270.033
   (scan_atom) ret1
  (scan_expression) n commas now:0

   (check_literal) check_literal:lit=' %' idx=19 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=19 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_operator) '' igncomma:1
   (check_operator) ret0:is comma: 0
  (scan_expression) ret1 '' commas:0
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop '=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped:= f
 (output_operator) [f,()] f =
(       output_if) [f,()] i IF
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=19 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=19 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit

  (scan_line) cline:''
  (pull_next_line) Processing expression just parsed
  (finalise_expression) Finalise expression Buf i:4 buf2 i:0
  (op_stack_finalise) Finalise stack
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1270.033' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_IF                 L:1     ty:i qcty:U 'IF' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

  (process_syntax_tree) Pass:1
  (process_syntax_tree) *********Processing :TOTAL   *************
  (type_check_stack_push)  type_check_stack_push: 'TOTAL'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
  (process_syntax_tree) *********Processing :1270.033   *************
  (type_check_stack_push)  type_check_stack_push: '1270.033'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (2)

  (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
  (type_check_stack_print)  N002: '1270.033' type:1 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (2)
  (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
  (type_check_stack_display) 001: '1270.033' type:f (1), %:0
  (process_syntax_tree) *********Processing :=   *************
  (process_syntax_tree) BUFF_ID_OPERATOR
  (process_syntax_tree) Found operator = %conv:0
  (type_check_stack_pop)   type_check_stack_pop: '1270.033'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_pop)   type_check_stack_pop: 'TOTAL'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (process_syntax_tree) op1 type:f op2 type:f %conv:0
  (process_syntax_tree) Mutable type (1270.033) f f
  (process_syntax_tree) Same type
  (process_syntax_tree) (A) Forced type to f
  (type_check_stack_push)  type_check_stack_push: '000'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N003: '000' type:0 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '000' type:i (0), %:0
  (process_syntax_tree) *********Processing :IF   *************
  (process_syntax_tree) 0 args
  (type_check_stack_pop)   type_check_stack_pop: '000'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:1
  (typecheck_expression)  *** BE:TOTAL    **********
  (type_check_stack_push)  type_check_stack_push: 'TOTAL'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
  (typecheck_expression)  *** BE:1270.033    **********
  (type_check_stack_push)  type_check_stack_push: '1270.033'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (2)

  (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
  (type_check_stack_print)  N002: '1270.033' type:1 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (2)
  (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
  (type_check_stack_display) 001: '1270.033' type:f (1), %:0
  (typecheck_expression)  *** BE:=    **********
  (typecheck_expression) BUFF_ID_OPERATOR
  (typecheck_expression) Found operator =
  (type_check_stack_pop)   type_check_stack_pop: '1270.033'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_pop)   type_check_stack_pop: 'TOTAL'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (typecheck_expression) op1 type:f op2 type:f
  (typecheck_expression) Mutable type (=) f f
  (typecheck_expression) Same type
  (typecheck_expression) (A) Forced type to f
  (type_check_stack_push)  type_check_stack_push: '000'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N003: '000' type:0 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '000' type:i (0), %:0
  (typecheck_expression)  *** BE:IF    **********
  (typecheck_expression) 0 args
  (type_check_stack_pop)   type_check_stack_pop: '000'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1270.033' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:i qcty:f '=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_IF                 L:1     ty:i qcty:U 'IF' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1270.033' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:i qcty:f '=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_IF                 L:1     ty:i qcty:U 'IF' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

  (process_expression_types) 
==INFIX==

  (infix_from_rpn) (TOTAL)
Var: TOTAL Float NumIdx:0
infix_stack_push: 'TOTAL'
  (infix_from_rpn) (1270.033)
infix_stack_push: '1270.033'
  (infix_from_rpn) (=)
infix_stack_pop: '1270.033'
infix_stack_pop: 'TOTAL'
infix_stack_push: '(TOTAL = 1270.033)'
  (infix_from_rpn) (IF)
infix_stack_pop: '(TOTAL = 1270.033)'
IF
infix_stack_push: 'IF (TOTAL = 1270.033)'
Done

infix_stack_pop: 'IF (TOTAL = 1270.033)'
Infix stack result IF (TOTAL = 1270.033)
  (infix_from_rpn) exit  'IF (TOTAL = 1270.033)'
  (process_expression_types) ==F (TOTAL = 1270.033)==
  (process_expression_types) 


  (finalise_expression) Finalise expression done.
if total = 1270.033
========================================================
(output_expression_start)
  (drop_colon) Entry

   (check_literal) check_literal:lit=' :' idx=19 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:':' idx=19 ''
   (check_literal) check_literal  ret0 Empty test string
  (drop_colon) Exit
  (pull_next_line) Checking for existing data in cline. cline_i=19 strlen:0 
  (pull_next_line) Reading line
  (pull_next_line) ------------------------------
  (is_all_spaces) cline[0] = 'p' (112)
  (is_all_spaces) cline[1] = 'r' (114)
  (is_all_spaces) cline[2] = 'i' (105)
  (is_all_spaces) cline[3] = 'n' (110)
  (is_all_spaces) cline[4] = 't' (116)
  (is_all_spaces) cline[5] = ' ' (32)
  (is_all_spaces) cline[6] = '"' (34)
  (is_all_spaces) cline[7] = 'P' (80)
  (is_all_spaces) cline[8] = 'A' (65)
  (is_all_spaces) cline[9] = 'S' (83)
  (is_all_spaces) cline[10] = 'S' (83)
  (is_all_spaces) cline[11] = '"' (34)
  (is_all_spaces) Is not all spaces
  (pull_next_line) Got a line: 'print "PASS"'
****************
**print "PASS"**
****************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "PASS"'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "PASS"'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "PASS"'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "PASS"'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "PASS"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "PASS"'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "PASS"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "PASS"'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "PASS"'

   (check_operator) 'print "PASS"' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "PASS"':
   (check_vname) check_vname ret1 ' "PASS"':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "PASS"'

   (check_literal) check_literal:lit='(' idx=5 ' "PASS"'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "PASS"'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "PASS"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"PASS"'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "PASS"'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "PASS"'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "PASS"'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "PASS"'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "PASS"'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "PASS"'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "PASS"'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "PASS"'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "PASS"'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "PASS"'
   (check_literal) check_literal:After drop space:':' idx=5 ' "PASS"'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "PASS"'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "PASS"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "PASS"'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "PASS"'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "PASS"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "PASS"'
   (check_literal) check_literal:After while(): "PASS"
   (check_literal) ret1 Match. ' PRINT' == 'print "PASS"'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "PASS"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "PASS"'
   (check_literal) check_literal:After while(): "PASS"
   (check_literal) ret1 Match. ' PRINT' == 'print "PASS"'

   (check_expression) ' "PASS"'

    (check_eitem) check_eitem: '"PASS"'

     (check_function)  '"PASS"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"PASS"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"PASS"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"PASS"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"PASS"'
      (check_literal) check_literal:After while():PASS"
      (check_literal) ret1 Match. ' "' == '"PASS"'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 '' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "PASS"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "PASS"'
   (check_literal) check_literal:After while(): "PASS"
   (check_literal) ret1 Match. ' PRINT' == 'print "PASS"'
  (scan_print) Before while

   (check_expression) ' "PASS"'

    (check_eitem) check_eitem: '"PASS"'

     (check_function)  '"PASS"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"PASS"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"PASS"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"PASS"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"PASS"'
      (check_literal) check_literal:After while():PASS"
      (check_literal) ret1 Match. ' "' == '"PASS"'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 '' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "PASS"' igncomma:1

    (check_eitem) check_eitem: '"PASS"'

     (check_function)  '"PASS"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"PASS"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"PASS"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"PASS"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"PASS"'
      (check_literal) check_literal:After while():PASS"
      (check_literal) ret1 Match. ' "' == '"PASS"'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"PASS"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"PASS"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"PASS"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"PASS"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"PASS"'
      (check_literal) check_literal:After while():PASS"
      (check_literal) ret1 Match. ' "' == '"PASS"'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"PASS"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"PASS"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"PASS"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"PASS"'
      (check_literal) check_literal:After while():PASS"
      (check_literal) ret1 Match. ' "' == '"PASS"'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"PASS"'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"PASS"'
       (check_literal) check_literal:After while():PASS"
       (check_literal) ret1 Match. ' "' == '"PASS"'
      (scan_string)   (in if) 'PASS"'
      (scan_string)   (in wh) 'PASS"'
      (scan_string)   (in wh) 'ASS"'
      (scan_string)   (in wh) 'ASS"'
      (scan_string)   (in wh) 'SS"'
      (scan_string)   (in wh) 'SS"'
      (scan_string)   (in wh) 'S"'
      (scan_string)   (in wh) 'S"'
      (scan_string)   (in wh) '"'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"PASS"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"PASS"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"PASS" is not function
token_is_variable: tok:'"PASS"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"PASS" is not function
(   output_string) [U,()] s "PASS"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) '' Before while igncomma:1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 '' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=12 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) After scan expression II

   (check_literal) check_literal:lit=' ;' idx=12 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=12 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) Checking if delimiter was present
  (scan_print) No delimiter present
  (finalise_expression) Finalise expression Buf i:2 buf2 i:4
  (op_stack_finalise) Finalise stack
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"PASS"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_syntax_tree) Pass:1
  (process_syntax_tree) *********Processing :"PASS"   *************
  (type_check_stack_push)  type_check_stack_push: '"PASS"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: '"PASS"' type:2 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '"PASS"' type:s (2), %:0
  (process_syntax_tree) *********Processing :PRINT   *************
  (process_syntax_tree) PRINT type adjust
  (type_check_stack_pop)   type_check_stack_pop: '"PASS"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:1
  (typecheck_expression)  *** BE:"PASS"    **********
  (type_check_stack_push)  type_check_stack_push: '"PASS"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: '"PASS"' type:2 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '"PASS"' type:s (2), %:0
  (typecheck_expression)  *** BE:PRINT    **********
  (typecheck_expression) PRINT type adjust
  (type_check_stack_pop)   type_check_stack_pop: '"PASS"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"PASS"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"PASS"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_expression_types) 
==INFIX==

  (infix_from_rpn) ("PASS")
infix_stack_push: '"PASS"'
  (infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"PASS"'
infix_stack_push: 'PRINT("PASS")'
Done

infix_stack_pop: 'PRINT("PASS")'
Infix stack result PRINT("PASS")
  (infix_from_rpn) exit  'PRINT("PASS")'
  (process_expression_types) ==RINT("PASS")==
  (process_expression_types) 


  (finalise_expression) Finalise expression done.
  (process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (1)

  (op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
  (op_stack_print) ------------------

  (finalise_expression) Finalise expression Buf i:0 buf2 i:2
  (op_stack_finalise) Finalise stack
  (op_stack_pop) Pop 'PRINT' type:U 
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (0)

  (op_stack_print) ------------------

  (op_stack_finalise) Popped:PRINT U
  (output_operator) [U,()] U PRINT
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_syntax_tree) Pass:1
  (process_syntax_tree) *********Processing :PRINT   *************
default buf_id
  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:1
  (typecheck_expression)  *** BE:PRINT    **********
default buf_id
  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_expression_types) 
==INFIX==

  (infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
  (infix_from_rpn) exit  '<nl>'
  (process_expression_types) ==nl>==
  (process_expression_types) 


  (finalise_expression) Finalise expression done.

   (check_expression) ''

    (check_eitem) check_eitem: ''

     (check_function)  ''
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=12 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=12 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=12 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=12 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'' float:0.000000e+00
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0

       (check_hex) check_hex: ''
       (check_hex) check_hex:ret0 not '$'
      (check_number) check_number: ret0

      (check_proc_call) check_proc_call:

       (check_textlabel) ''
       (check_textlabel) '' is a text label chstr:'@'
       (check_textlabel) Exit char:
       (check_textlabel) check_textlabel:ret1 Name:'' Type:f
      (check_proc_call) '' is text label

       (check_literal) check_literal:lit=':' idx=12 ''
       (check_literal) check_literal:After drop space:':' idx=12 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_proc_call) check_proc_call:ret0

      (check_variable) ''

       (check_operator) '' igncomma:1
       (check_operator) ret0:is comma: 32767

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret0

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=12 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=12 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) ret0: No '('

     (check_addr_name) check_addr_name: ''

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_addr_name) check_addr_name: ret0
    (check_eitem) check_eitem:ret0

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret0 ''
  (scan_print) Check for trailing delimiter

   (check_literal) check_literal:lit=' ;' idx=12 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=12 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' ,' idx=12 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) scan_print:ret1 Expression 
 (scan_line) ret1 print
(scan_if) Line scanned ok
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=12 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=12 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print "PASS"
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=12 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=12 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=12 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'e' (101)
 (is_all_spaces) cline[1] = 'l' (108)
 (is_all_spaces) cline[2] = 's' (115)
 (is_all_spaces) cline[3] = 'e' (101)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'else'
********
**else**
********

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'else'
 (check_literal) check_literal:After drop space:'REM' idx=0 'else'
 (check_literal)   'R' != 'e'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'else'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'else'
 (check_literal)   'R' != 'e'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'else'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'else'
 (check_literal)   'R' != 'e'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'else'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'else'
 (check_literal)   'R' != 'e'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'else'

   (check_operator) 'else' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'else':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=4 ''
   (check_literal) check_literal:After drop space:'(' idx=4 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=4 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=4 ''
 (check_literal) check_literal  ret0 Empty test string
(check_assignment) check_assignment:ret0

 (check_declare) 'else'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'else'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'else'
  (check_literal)   'L' != 'e'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'else'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'else'
  (check_literal)   'G' != 'e'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'else'
   (check_textlabel) 'else' is a text label chstr:'e'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'else' Type:f

   (check_literal) check_literal:lit='::' idx=4 ''
   (check_literal) check_literal:After drop space:'::' idx=4 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'else'
   (check_textlabel) 'else' is a text label chstr:'e'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'else' Type:f
  (check_proc_call) 'else' is text label

   (check_literal) check_literal:lit=':' idx=4 ''
   (check_literal) check_literal:After drop space:':' idx=4 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_input) 'else'

   (check_literal) check_literal:lit=' INPUT' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'else'
   (check_literal)   'I' != 'e'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'else'

   (check_literal) check_literal:lit=' PRINT' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'else'
   (check_literal)   'P' != 'e'
   (check_literal) check_literal: ret0
  (check_print) check_print:ret0

  (check_print) check_print: 'else'

   (check_literal) check_literal:lit=' LPRINT' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LPRINT' idx=0 'else'
   (check_literal)   'L' != 'e'
   (check_literal) check_literal: ret0
  (check_print) check_print:ret0

  (check_return) check_return: 'else'

   (check_literal) check_literal:lit=' RETURN' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'RETURN' idx=0 'else'
   (check_literal)   'R' != 'e'
   (check_literal) check_literal: ret0
  (check_return) check_return:ret0

  (check_use) 'else'

   (check_literal) check_literal:lit=' USE' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'USE' idx=0 'else'
   (check_literal)   'U' != 'e'
   (check_literal) check_literal: ret0
  (check_use) ret0

  (check_onerr) check_onerr: 'else'

   (check_literal) check_literal:lit=' ONERR' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'ONERR' idx=0 'else'
   (check_literal)   'O' != 'e'
   (check_literal) check_literal: ret0
  (check_onerr) check_onerr:ret0

  (check_if) 'else'

   (check_literal) check_literal:lit=' IF' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'IF' idx=0 'else'
   (check_literal)   'I' != 'e'
   (check_literal) check_literal: ret0
  (check_if) ret0

  (check_do) 'else'

   (check_literal) check_literal:lit=' DO' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'DO' idx=0 'else'
   (check_literal)   'D' != 'e'
   (check_literal) check_literal: ret0
  (check_do) ret0

  (check_literal) check_literal:lit=' OFF' idx=0 'else'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'OFF' idx=0 'else'
  (check_literal)   'O' != 'e'
  (check_literal) check_literal: ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function)  'else'
  (check_function) ret0

  (check_literal) check_literal:lit=' DO' idx=0 'else'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'DO' idx=0 'else'
  (check_literal)   'D' != 'e'
  (check_literal) check_literal: ret0

  (check_createopen) Create:1 Open:0

   (check_literal) check_literal:lit=' CREATE' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'CREATE' idx=0 'else'
   (check_literal)   'C' != 'e'
   (check_literal) check_literal: ret0
  (check_createopen) ret0

  (check_createopen) Create:0 Open:1

   (check_literal) check_literal:lit=' OPEN' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'OPEN' idx=0 'else'
   (check_literal)   'O' != 'e'
   (check_literal) check_literal: ret0
  (check_createopen) ret0

  (check_while) 'else'

   (check_literal) check_literal:lit=' WHILE' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'WHILE' idx=0 'else'
   (check_literal)   'W' != 'e'
   (check_literal) check_literal: ret0
  (check_while) ret0

  (check_literal) check_literal:lit=' GOTO' idx=0 'else'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GOTO' idx=0 'else'
  (check_literal)   'G' != 'e'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' TRAP' idx=0 'else'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'TRAP' idx=0 'else'
  (check_literal)   'T' != 'e'
  (check_literal) check_literal: ret0
 (scan_line) ret0
(scan_if) Checking for conditionals

 (check_literal) check_literal:lit=' CONTINUE' idx=0 'else'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'CONTINUE' idx=0 'else'
 (check_literal)   'C' != 'e'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' BREAK' idx=0 'else'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'BREAK' idx=0 'else'
 (check_literal)   'B' != 'e'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ENDIF' idx=0 'else'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ENDIF' idx=0 'else'
 (check_literal)   'N' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSEIF' idx=0 'else'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSEIF' idx=0 'else'
 (check_literal) check_literal:After while():
 (check_literal) ret0 Full string not seen

 (check_literal) check_literal:lit=' ELSE' idx=0 'else'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSE' idx=0 'else'
 (check_literal) check_literal:After while():
 (check_literal) ret1 Match. ' ELSE' == 'else'
(scan_if) ELSE found in if
(output_generic) [U,()] U ELSE exp_type:U
(scan_if) Done ELSE
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=4 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=4 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:1 buf2 i:0
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_ELSE               L:1     ty:U qcty:U 'ELSE' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing :ELSE   *************
default buf_id
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE:ELSE    **********
default buf_id
 (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_ELSE               L:1     ty:U qcty:U 'ELSE' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_ELSE               L:1     ty:U qcty:U 'ELSE' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (ELSE)
 (infix_from_rpn) ELSE
infix_stack_push: 'ELSE'
 (infix_from_rpn) endif done
Done

infix_stack_pop: 'ELSE'
Infix stack result ELSE
 (infix_from_rpn) exit  'ELSE'
 (process_expression_types) ==LSE==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
else
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=4 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=4 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=4 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'F' (70)
 (is_all_spaces) cline[8] = 'A' (65)
 (is_all_spaces) cline[9] = 'I' (73)
 (is_all_spaces) cline[10] = 'L' (76)
 (is_all_spaces) cline[11] = '"' (34)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "FAIL"'
****************
**print "FAIL"**
****************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "FAIL"'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "FAIL"'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "FAIL"'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "FAIL"'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "FAIL"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "FAIL"'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "FAIL"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "FAIL"'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "FAIL"'

   (check_operator) 'print "FAIL"' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "FAIL"':
   (check_vname) check_vname ret1 ' "FAIL"':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "FAIL"'

   (check_literal) check_literal:lit='(' idx=5 ' "FAIL"'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "FAIL"'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "FAIL"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"FAIL"'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "FAIL"'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "FAIL"'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "FAIL"'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "FAIL"'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "FAIL"'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "FAIL"'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "FAIL"'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "FAIL"'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "FAIL"'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "FAIL"'
   (check_literal) check_literal:After drop space:':' idx=5 ' "FAIL"'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "FAIL"'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "FAIL"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "FAIL"'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "FAIL"'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "FAIL"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "FAIL"'
   (check_literal) check_literal:After while(): "FAIL"
   (check_literal) ret1 Match. ' PRINT' == 'print "FAIL"'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "FAIL"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "FAIL"'
   (check_literal) check_literal:After while(): "FAIL"
   (check_literal) ret1 Match. ' PRINT' == 'print "FAIL"'

   (check_expression) ' "FAIL"'

    (check_eitem) check_eitem: '"FAIL"'

     (check_function)  '"FAIL"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"FAIL"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"FAIL"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"FAIL"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"FAIL"'
      (check_literal) check_literal:After while():FAIL"
      (check_literal) ret1 Match. ' "' == '"FAIL"'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 '' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "FAIL"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "FAIL"'
   (check_literal) check_literal:After while(): "FAIL"
   (check_literal) ret1 Match. ' PRINT' == 'print "FAIL"'
  (scan_print) Before while

   (check_expression) ' "FAIL"'

    (check_eitem) check_eitem: '"FAIL"'

     (check_function)  '"FAIL"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"FAIL"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"FAIL"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"FAIL"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"FAIL"'
      (check_literal) check_literal:After while():FAIL"
      (check_literal) ret1 Match. ' "' == '"FAIL"'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 '' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "FAIL"' igncomma:1

    (check_eitem) check_eitem: '"FAIL"'

     (check_function)  '"FAIL"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"FAIL"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"FAIL"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"FAIL"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"FAIL"'
      (check_literal) check_literal:After while():FAIL"
      (check_literal) ret1 Match. ' "' == '"FAIL"'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"FAIL"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"FAIL"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"FAIL"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"FAIL"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"FAIL"'
      (check_literal) check_literal:After while():FAIL"
      (check_literal) ret1 Match. ' "' == '"FAIL"'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"FAIL"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"FAIL"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"FAIL"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"FAIL"'
      (check_literal) check_literal:After while():FAIL"
      (check_literal) ret1 Match. ' "' == '"FAIL"'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"FAIL"'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"FAIL"'
       (check_literal) check_literal:After while():FAIL"
       (check_literal) ret1 Match. ' "' == '"FAIL"'
      (scan_string)   (in if) 'FAIL"'
      (scan_string)   (in wh) 'FAIL"'
      (scan_string)   (in wh) 'AIL"'
      (scan_string)   (in wh) 'AIL"'
      (scan_string)   (in wh) 'IL"'
      (scan_string)   (in wh) 'IL"'
      (scan_string)   (in wh) 'L"'
      (scan_string)   (in wh) 'L"'
      (scan_string)   (in wh) '"'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"FAIL"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"FAIL"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"FAIL" is not function
token_is_variable: tok:'"FAIL"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"FAIL" is not function
(   output_string) [U,()] s "FAIL"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) '' Before while igncomma:1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 '' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=12 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) After scan expression II

   (check_literal) check_literal:lit=' ;' idx=12 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=12 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) Checking if delimiter was present
  (scan_print) No delimiter present
  (finalise_expression) Finalise expression Buf i:2 buf2 i:1
  (op_stack_finalise) Finalise stack
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"FAIL"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_syntax_tree) Pass:1
  (process_syntax_tree) *********Processing :"FAIL"   *************
  (type_check_stack_push)  type_check_stack_push: '"FAIL"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: '"FAIL"' type:2 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '"FAIL"' type:s (2), %:0
  (process_syntax_tree) *********Processing :PRINT   *************
  (process_syntax_tree) PRINT type adjust
  (type_check_stack_pop)   type_check_stack_pop: '"FAIL"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:1
  (typecheck_expression)  *** BE:"FAIL"    **********
  (type_check_stack_push)  type_check_stack_push: '"FAIL"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: '"FAIL"' type:2 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '"FAIL"' type:s (2), %:0
  (typecheck_expression)  *** BE:PRINT    **********
  (typecheck_expression) PRINT type adjust
  (type_check_stack_pop)   type_check_stack_pop: '"FAIL"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"FAIL"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"FAIL"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_expression_types) 
==INFIX==

  (infix_from_rpn) ("FAIL")
infix_stack_push: '"FAIL"'
  (infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"FAIL"'
infix_stack_push: 'PRINT("FAIL")'
Done

infix_stack_pop: 'PRINT("FAIL")'
Infix stack result PRINT("FAIL")
  (infix_from_rpn) exit  'PRINT("FAIL")'
  (process_expression_types) ==RINT("FAIL")==
  (process_expression_types) 


  (finalise_expression) Finalise expression done.
  (process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (1)

  (op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
  (op_stack_print) ------------------

  (finalise_expression) Finalise expression Buf i:0 buf2 i:2
  (op_stack_finalise) Finalise stack
  (op_stack_pop) Pop 'PRINT' type:U 
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (0)

  (op_stack_print) ------------------

  (op_stack_finalise) Popped:PRINT U
  (output_operator) [U,()] U PRINT
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_syntax_tree) Pass:1
  (process_syntax_tree) *********Processing :PRINT   *************
default buf_id
  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:1
  (typecheck_expression)  *** BE:PRINT    **********
default buf_id
  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_expression_types) 
==INFIX==

  (infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
  (infix_from_rpn) exit  '<nl>'
  (process_expression_types) ==nl>==
  (process_expression_types) 


  (finalise_expression) Finalise expression done.

   (check_expression) ''

    (check_eitem) check_eitem: ''

     (check_function)  ''
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=12 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=12 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=12 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=12 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'' float:0.000000e+00
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0

       (check_hex) check_hex: ''
       (check_hex) check_hex:ret0 not '$'
      (check_number) check_number: ret0

      (check_proc_call) check_proc_call:

       (check_textlabel) ''
       (check_textlabel) '' is a text label chstr:'@'
       (check_textlabel) Exit char:
       (check_textlabel) check_textlabel:ret1 Name:'' Type:f
      (check_proc_call) '' is text label

       (check_literal) check_literal:lit=':' idx=12 ''
       (check_literal) check_literal:After drop space:':' idx=12 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_proc_call) check_proc_call:ret0

      (check_variable) ''

       (check_operator) '' igncomma:1
       (check_operator) ret0:is comma: 32767

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret0

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=12 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=12 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) ret0: No '('

     (check_addr_name) check_addr_name: ''

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_addr_name) check_addr_name: ret0
    (check_eitem) check_eitem:ret0

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret0 ''
  (scan_print) Check for trailing delimiter

   (check_literal) check_literal:lit=' ;' idx=12 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=12 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' ,' idx=12 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) scan_print:ret1 Expression 
 (scan_line) ret1 print
(scan_if) Line scanned ok
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=12 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=12 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print "FAIL"
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=12 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=12 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=12 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'e' (101)
 (is_all_spaces) cline[1] = 'n' (110)
 (is_all_spaces) cline[2] = 'd' (100)
 (is_all_spaces) cline[3] = 'i' (105)
 (is_all_spaces) cline[4] = 'f' (102)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'endif'
*********
**endif**
*********

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'endif'
 (check_literal) check_literal:After drop space:'REM' idx=0 'endif'
 (check_literal)   'R' != 'e'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'endif'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'endif'
 (check_literal)   'R' != 'e'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'endif'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'endif'
 (check_literal)   'R' != 'e'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'endif'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'endif'
 (check_literal)   'R' != 'e'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'endif'

   (check_operator) 'endif' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'endif':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=5 ''
   (check_literal) check_literal:After drop space:'(' idx=5 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=5 ''
 (check_literal) check_literal  ret0 Empty test string
(check_assignment) check_assignment:ret0

 (check_declare) 'endif'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'endif'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'endif'
  (check_literal)   'L' != 'e'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'endif'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'endif'
  (check_literal)   'G' != 'e'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'endif'
   (check_textlabel) 'endif' is a text label chstr:'f'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'endif' Type:f

   (check_literal) check_literal:lit='::' idx=5 ''
   (check_literal) check_literal:After drop space:'::' idx=5 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'endif'
   (check_textlabel) 'endif' is a text label chstr:'f'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'endif' Type:f
  (check_proc_call) 'endif' is text label

   (check_literal) check_literal:lit=':' idx=5 ''
   (check_literal) check_literal:After drop space:':' idx=5 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_input) 'endif'

   (check_literal) check_literal:lit=' INPUT' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'endif'
   (check_literal)   'I' != 'e'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'endif'

   (check_literal) check_literal:lit=' PRINT' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'endif'
   (check_literal)   'P' != 'e'
   (check_literal) check_literal: ret0
  (check_print) check_print:ret0

  (check_print) check_print: 'endif'

   (check_literal) check_literal:lit=' LPRINT' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LPRINT' idx=0 'endif'
   (check_literal)   'L' != 'e'
   (check_literal) check_literal: ret0
  (check_print) check_print:ret0

  (check_return) check_return: 'endif'

   (check_literal) check_literal:lit=' RETURN' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'RETURN' idx=0 'endif'
   (check_literal)   'R' != 'e'
   (check_literal) check_literal: ret0
  (check_return) check_return:ret0

  (check_use) 'endif'

   (check_literal) check_literal:lit=' USE' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'USE' idx=0 'endif'
   (check_literal)   'U' != 'e'
   (check_literal) check_literal: ret0
  (check_use) ret0

  (check_onerr) check_onerr: 'endif'

   (check_literal) check_literal:lit=' ONERR' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'ONERR' idx=0 'endif'
   (check_literal)   'O' != 'e'
   (check_literal) check_literal: ret0
  (check_onerr) check_onerr:ret0

  (check_if) 'endif'

   (check_literal) check_literal:lit=' IF' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'IF' idx=0 'endif'
   (check_literal)   'I' != 'e'
   (check_literal) check_literal: ret0
  (check_if) ret0

  (check_do) 'endif'

   (check_literal) check_literal:lit=' DO' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'DO' idx=0 'endif'
   (check_literal)   'D' != 'e'
   (check_literal) check_literal: ret0
  (check_do) ret0

  (check_literal) check_literal:lit=' OFF' idx=0 'endif'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'OFF' idx=0 'endif'
  (check_literal)   'O' != 'e'
  (check_literal) check_literal: ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function)  'endif'
  (check_function) ret0

  (check_literal) check_literal:lit=' DO' idx=0 'endif'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'DO' idx=0 'endif'
  (check_literal)   'D' != 'e'
  (check_literal) check_literal: ret0

  (check_createopen) Create:1 Open:0

   (check_literal) check_literal:lit=' CREATE' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'CREATE' idx=0 'endif'
   (check_literal)   'C' != 'e'
   (check_literal) check_literal: ret0
  (check_createopen) ret0

  (check_createopen) Create:0 Open:1

   (check_literal) check_literal:lit=' OPEN' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'OPEN' idx=0 'endif'
   (check_literal)   'O' != 'e'
   (check_literal) check_literal: ret0
  (check_createopen) ret0

  (check_while) 'endif'

   (check_literal) check_literal:lit=' WHILE' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'WHILE' idx=0 'endif'
   (check_literal)   'W' != 'e'
   (check_literal) check_literal: ret0
  (check_while) ret0

  (check_literal) check_literal:lit=' GOTO' idx=0 'endif'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GOTO' idx=0 'endif'
  (check_literal)   'G' != 'e'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' TRAP' idx=0 'endif'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'TRAP' idx=0 'endif'
  (check_literal)   'T' != 'e'
  (check_literal) check_literal: ret0
 (scan_line) ret0
(scan_if) Checking for conditionals

 (check_literal) check_literal:lit=' CONTINUE' idx=0 'endif'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'CONTINUE' idx=0 'endif'
 (check_literal)   'C' != 'e'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' BREAK' idx=0 'endif'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'BREAK' idx=0 'endif'
 (check_literal)   'B' != 'e'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ENDIF' idx=0 'endif'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ENDIF' idx=0 'endif'
 (check_literal) check_literal:After while():
 (check_literal) ret1 Match. ' ENDIF' == 'endif'
(scan_if) ENDIF found in if
(process_token)    Frst:1 T:'ENDIF' toktype:i exptype:U bufid:'EXP_BUFF_ID_ENDIF'
(process_token) Before switch, bufid:'EXP_BUFF_ID_ENDIF'
(process_token) Buff id ENDIF
(output_generic) [U,()] U ENDIF exp_type:U
(scan_if) ret1
(scan_line) ret1 if
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=5 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=5 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:1 buf2 i:0
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_ENDIF              L:1     ty:U qcty:U 'ENDIF' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing :ENDIF   *************
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE:ENDIF    **********
 (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_ENDIF              L:1     ty:U qcty:U 'ENDIF' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_ENDIF              L:1     ty:U qcty:U 'ENDIF' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (ENDIF)
 (infix_from_rpn) ENDIF
infix_stack_push: 'ENDIF'
 (infix_from_rpn) endif done
Done

infix_stack_pop: 'ENDIF'
Infix stack result ENDIF
 (infix_from_rpn) exit  'ENDIF'
 (process_expression_types) ==NDIF==
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
endif
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=5 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=5 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=5 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ret0: End of input file
(scan_line) ret0: pull_next_line=0
(translate_file) Scan line failed
(finalise_expression) Finalise expression Buf i:0 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
(process_syntax_tree) Pass:1
(typecheck_expression) Pass:1
(process_expression_types) 
==INFIX==

Done

Infix stack empty
(infix_from_rpn) exit  ''
(process_expression_types) ==NDIF==
(process_expression_types) 


(finalise_expression) Finalise expression done.
(translate_file) Done
(translate_file) 
(main) ********************************************************************************
(main) **                         Pass 2                                             **
(main) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) **                                                                            **
(translate_file) **                 TRANSLATE FILE                                             **
(translate_file) **                                                                            **
(translate_file) ********************************************************************************
(pull_next_line) Processing expression just parsed
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=0 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=0 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit
(pull_next_line) Checking for existing data in cline. cline_i=0 strlen:0 
(pull_next_line) Reading line
(pull_next_line) ------------------------------
(is_all_spaces) cline[0] = 'f' (102)
(is_all_spaces) cline[1] = 'i' (105)
(is_all_spaces) cline[2] = 'l' (108)
(is_all_spaces) cline[3] = 'e' (101)
(is_all_spaces) cline[4] = 's' (115)
(is_all_spaces) cline[5] = '0' (48)
(is_all_spaces) cline[6] = ':' (58)
(is_all_spaces) Is not all spaces
(pull_next_line) Got a line: 'files0:'
***********
**files0:**
***********

(pull_next_line) ret1
(process_token)    Frst:1 T:'PROCDEF' toktype:i exptype:U bufid:'EXP_BUFF_ID_META'
(process_token) Before switch, bufid:'EXP_BUFF_ID_META'
(process_token) Buff id PROCDEF
(output_generic) [U,()] U PROCDEF exp_type:U

 (scan_procdef) 

  (check_textlabel) 'files0:'
  (check_textlabel) 'files0' is a text label chstr:'0'
  (check_textlabel) Exit char::
  (check_textlabel) check_textlabel:ret1 Name:'files0' Type:f
 (scan_procdef) Text label:'files0'

  (check_literal) check_literal:lit=':' idx=6 ':'
  (check_literal) check_literal:After drop space:':' idx=6 ':'
  (check_literal) check_literal:After while():
  (check_literal) ret1 Match. ':' == ':'

  (check_literal) check_literal:lit=' (' idx=7 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'(' idx=7 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_param_list) scan_param_list:ret0
(scan_procdef) ret1 Type:f
(translate_file) 
cline scanned OK
(pull_next_line) Processing expression just parsed
(finalise_expression) Finalise expression Buf i:1 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U 'PROCDEF' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PROCDEF   *************
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PROCDEF    **********
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U 'PROCDEF' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_META                       ty:U qcty:U 'PROCDEF' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PROCDEF)
Done

Infix stack empty
(infix_from_rpn) exit  ''
(process_expression_types) ==NDIF==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:0000
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:META 'PROCDEF'
(output_qcode_for_line) QC:Building QCode header
(build_qcode_header) ===Pass number:2 qcode_idx:0000===
(build_qcode_header) ===Building qcode header===
(set_qcode_header_byte_at) idx:0000 len:2 val:00
(set_qcode_header_byte_at) idx:0002 len:2 val:00
(build_qcode_header) ===Num externals: 0===
(build_qcode_header) ===Num parameters:0===
(set_qcode_header_byte_at) idx:0004 len:1 val:00
(set_qcode_header_byte_at) idx:0005 len:2 val:00
(build_qcode_header) ===Num globals:0===
(build_qcode_header) **Globals**
(set_qcode_header_byte_at) idx:0005 len:2 val:00
(build_qcode_header) Global start:7 Global end:7 global_table_size:0
(build_qcode_header) **Externals**
(set_qcode_header_byte_at) idx:0007 len:2 val:00
(set_qcode_header_byte_at) idx:0007 len:2 val:00
(build_qcode_header) ===First byte after global table:0002  first_byte_of_globals:0002===
(build_qcode_header) **Rewriting globals**
(build_qcode_header) 0 TOTAL FFFFFFF6 delta:8
(build_qcode_header) 1 A FFFFFFEE delta:8
(build_qcode_header) 2 B FFFFFFE6 delta:8
(build_qcode_header) 3 C FFFFFFDE delta:8
(build_qcode_header) 4 T FFFFFFD6 delta:8
(build_qcode_header) 5 AB FFFFFFCE delta:8
(build_qcode_header) 6 BC FFFFFFC6 delta:8
(build_qcode_header) 7 AC FFFFFFBE delta:8
(build_qcode_header) size of string fixup idx:0009 idx:0009
(set_qcode_header_byte_at) idx:0009 len:2 val:00
(set_qcode_header_byte_at) idx:0009 len:2 val:00
(build_qcode_header) Size of string fixups:00
(set_qcode_header_byte_at) idx:000B len:2 val:00
(set_qcode_header_byte_at) idx:000B len:2 val:00
(build_qcode_header) Size of array fixups:00
(build_qcode_header) Var_ptr:0042 first byte glob:0002 size vars:0040
(set_qcode_header_byte_at) idx:0000 len:2 val:42
(build_qcode_header) First byte of QCode:000D
(set_qcode_header_byte_at) idx:000D len:1 val:59
(set_qcode_header_byte_at) idx:000E len:1 val:B2
(build_qcode_header) After build qcode_idx:000F
(finalise_expression) Finalise expression done.
files0:
========================================================
(output_expression_start)
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=7 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=7 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit
(pull_next_line) Checking for existing data in cline. cline_i=7 strlen:0 
(pull_next_line) Reading line
(pull_next_line) ------------------------------
(is_all_spaces) Is all spaces
(pull_next_line) Line was all spaces
(pull_next_line) Reading line
(pull_next_line) ------------------------------
(is_all_spaces) cline[0] = 'l' (108)
(is_all_spaces) cline[1] = 'o' (111)
(is_all_spaces) cline[2] = 'c' (99)
(is_all_spaces) cline[3] = 'a' (97)
(is_all_spaces) cline[4] = 'l' (108)
(is_all_spaces) cline[5] = ' ' (32)
(is_all_spaces) cline[6] = 't' (116)
(is_all_spaces) cline[7] = 'o' (111)
(is_all_spaces) cline[8] = 't' (116)
(is_all_spaces) cline[9] = 'a' (97)
(is_all_spaces) cline[10] = 'l' (108)
(is_all_spaces) Is not all spaces
(pull_next_line) Got a line: 'local total'
***************
**local total**
***************

(pull_next_line) ret1

 (scan_line) cline:'local total'
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==NDIF==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:000F
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
local total
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=0 'local total'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=0 'local total'
  (check_literal)   ':' != 'l'
  (check_literal) check_literal: ret0
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=0 strlen:11 
 (pull_next_line) Data still in line buffer, check not all space
 (is_all_spaces) cline[0] = 'l' (108)
 (is_all_spaces) cline[1] = 'o' (111)
 (is_all_spaces) cline[2] = 'c' (99)
 (is_all_spaces) cline[3] = 'a' (97)
 (is_all_spaces) cline[4] = 'l' (108)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = 't' (116)
 (is_all_spaces) cline[7] = 'o' (111)
 (is_all_spaces) cline[8] = 't' (116)
 (is_all_spaces) cline[9] = 'a' (97)
 (is_all_spaces) cline[10] = 'l' (108)
 (is_all_spaces) Is not all spaces
 (pull_next_line) ret1  Not all spaces

 (check_literal) check_literal:lit='REM' idx=0 'local total'
 (check_literal) check_literal:After drop space:'REM' idx=0 'local total'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'local total'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'local total'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'local total'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'local total'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'local total'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'local total'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'local total'

   (check_operator) 'local total' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'local total':
   (check_vname) check_vname ret1 ' total':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' total'

   (check_literal) check_literal:lit='(' idx=5 ' total'
   (check_literal) check_literal:After drop space:'(' idx=5 ' total'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' total'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 'total'
 (check_literal)   '=' != 't'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'local total'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'local total'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local total'
  (check_literal) check_literal:After while(): total
  (check_literal) ret1 Match. ' LOCAL' == 'local total'
 (check_declare) check_declare:ret 1

  (scan_declare) scan_declare:

   (check_literal) check_literal:lit=' LOCAL' idx=0 'local total'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local total'
   (check_literal) check_literal:After while(): total
   (check_literal) ret1 Match. ' LOCAL' == 'local total'

   (scan_localglobal) 'local total'

    (check_literal) check_literal:lit=' LOCAL' idx=0 'local total'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local total'
    (check_literal) check_literal:After while(): total
    (check_literal) ret1 Match. ' LOCAL' == 'local total'
   (process_token)    Frst:1 T:' LOCAL' toktype:? exptype:U bufid:'EXP_BUFF_ID_META'
   (process_token) Before switch, bufid:'EXP_BUFF_ID_META'
   (process_token) Buff id  LOCAL
   (output_generic) [U,()] U  LOCAL exp_type:U

    (check_variable) 'total'

     (check_operator) 'total' igncomma:1
     (check_operator) ret0:is comma: 1952533792

     (check_vname) check_vname 'total':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=11 ''
     (check_literal) check_literal:After drop space:'(' idx=11 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (scan_variable) ' total' ref_ndeclare:0

    (scan_vname) scan_vname: ' total'
    (scan_vname) scan_vname: ret1 'total'
   (scan_variable) scan_variable: '' vname='TOTAL'
   (token_is_other_keyword) 
   (token_is_other_keyword) 'TOTAL' is not other keyword
   (scan_variable) Array test ''

    (check_literal) check_literal:lit='(' idx=11 ''
    (check_literal) check_literal:After drop space:'(' idx=11 ''
    (check_literal) check_literal  ret0 Empty test string
   (scan_variable) scan_variable:ret1 vname='TOTAL' Float
  (process_token)    Frst:1 T:'TOTAL' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:'TOTAL'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:TOTAL is not function
token_is_variable: tok:'TOTAL'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:TOTAL is not function
 (init_get_name) 
init_get_name:'TOTAL'
 (init_get_name) 
init_get_name:'TOTAL'
 (get_name) 
get_name:gn:'TOTAL'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f TOTAL
 (add_var_info) Name:TOTAL Idx:-1
 (add_var_info) Already present
 (add_var_info)   Declaration so possibly BAD
 (scan_variable) ret1
(scan_localglobal)  LOCAL variable:'TOTAL'
VAR: '             TOTAL'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=11 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=11 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=11 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=11 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_variable) ''

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 32767

  (check_vname) check_vname '':
  (check_vname) check_vname ret0 '':
 (check_variable) check_variable:ret0 
(scan_localglobal) ret1:End of line
(scan_declare) scan_declare:ret 1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=11 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=11 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:2 buf2 i:0
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing : LOCAL   *************
 (type_check_stack_display) Type Check Stack (0)
 (process_syntax_tree) *********Processing :TOTAL   *************
 (type_check_stack_push)  type_check_stack_push: 'TOTAL'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: 'TOTAL' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_only_field_data) Type Check Stack ptr:(1)
 (type_check_stack_only_field_data) 000: 'TOTAL' type:f (1)
 (process_syntax_tree) Value left stacked so DROP needed
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE: LOCAL    **********
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression)  *** BE:TOTAL    **********
 (type_check_stack_push)  type_check_stack_push: 'TOTAL'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: 'TOTAL' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_only_field_data) Type Check Stack ptr:(1)
 (type_check_stack_only_field_data) 000: 'TOTAL' type:f (1)
 (typecheck_expression) Value left stacked so DROP needed
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FUNCTION                   ty:f qcty:U 'DROP' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) ( LOCAL)
 (infix_from_rpn) (TOTAL)
Var: TOTAL Float NumIdx:0
infix_stack_push: 'TOTAL'
 (infix_from_rpn) (DROP)
infix_stack_push: 'DROP()'
Done

infix_stack_pop: 'DROP()'
Infix stack result DROP()
 (infix_from_rpn) exit  'DROP()'
 (process_expression_types) ==ROP()==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:3 qcode_idx:000F
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (output_qcode_for_line) QC:META ' LOCAL'
 (finalise_expression) Finalise expression done.
local total
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=11 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=11 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=11 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'l' (108)
 (is_all_spaces) cline[1] = 'o' (111)
 (is_all_spaces) cline[2] = 'c' (99)
 (is_all_spaces) cline[3] = 'a' (97)
 (is_all_spaces) cline[4] = 'l' (108)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = 'a' (97)
 (is_all_spaces) cline[7] = ',' (44)
 (is_all_spaces) cline[8] = 'b' (98)
 (is_all_spaces) cline[9] = ',' (44)
 (is_all_spaces) cline[10] = 'c' (99)
 (is_all_spaces) cline[11] = ',' (44)
 (is_all_spaces) cline[12] = 't' (116)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'local a,b,c,t'
*****************
**local a,b,c,t**
*****************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'local a,b,c,t'
 (check_literal) check_literal:After drop space:'REM' idx=0 'local a,b,c,t'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'local a,b,c,t'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'local a,b,c,t'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'local a,b,c,t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'local a,b,c,t'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'local a,b,c,t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'local a,b,c,t'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'local a,b,c,t'

   (check_operator) 'local a,b,c,t' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'local a,b,c,t':
   (check_vname) check_vname ret1 ' a,b,c,t':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' a,b,c,t'

   (check_literal) check_literal:lit='(' idx=5 ' a,b,c,t'
   (check_literal) check_literal:After drop space:'(' idx=5 ' a,b,c,t'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' a,b,c,t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 'a,b,c,t'
 (check_literal)   '=' != 'a'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'local a,b,c,t'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'local a,b,c,t'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local a,b,c,t'
  (check_literal) check_literal:After while(): a,b,c,t
  (check_literal) ret1 Match. ' LOCAL' == 'local a,b,c,t'
 (check_declare) check_declare:ret 1

  (scan_declare) scan_declare:

   (check_literal) check_literal:lit=' LOCAL' idx=0 'local a,b,c,t'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local a,b,c,t'
   (check_literal) check_literal:After while(): a,b,c,t
   (check_literal) ret1 Match. ' LOCAL' == 'local a,b,c,t'

   (scan_localglobal) 'local a,b,c,t'

    (check_literal) check_literal:lit=' LOCAL' idx=0 'local a,b,c,t'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local a,b,c,t'
    (check_literal) check_literal:After while(): a,b,c,t
    (check_literal) ret1 Match. ' LOCAL' == 'local a,b,c,t'
   (process_token)    Frst:1 T:' LOCAL' toktype:? exptype:U bufid:'EXP_BUFF_ID_META'
   (process_token) Before switch, bufid:'EXP_BUFF_ID_META'
   (process_token) Buff id  LOCAL
   (output_generic) [U,()] U  LOCAL exp_type:U

    (check_variable) 'a,b,c,t'

     (check_operator) 'a,b,c,t' igncomma:1
     (check_operator) ret0:is comma: 1952533792

     (check_vname) check_vname 'a,b,c,t':
     (check_vname) check_vname ret1 ',b,c,t':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ',b,c,t'

     (check_literal) check_literal:lit='(' idx=7 ',b,c,t'
     (check_literal) check_literal:After drop space:'(' idx=7 ',b,c,t'
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (scan_variable) ' a,b,c,t' ref_ndeclare:0

    (scan_vname) scan_vname: ' a,b,c,t'
    (scan_vname) scan_vname: ret1 'a'
   (scan_variable) scan_variable: ',b,c,t' vname='A'
   (token_is_other_keyword) 
   (token_is_other_keyword) 'A' is not other keyword
   (scan_variable) Array test ',b,c,t'

    (check_literal) check_literal:lit='(' idx=7 ',b,c,t'
    (check_literal) check_literal:After drop space:'(' idx=7 ',b,c,t'
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (scan_variable) scan_variable:ret1 vname='A' Float
  (process_token)    Frst:1 T:'A' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:'A'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A is not function
 (init_get_name) 
init_get_name:'A'
 (init_get_name) 
init_get_name:'A'
 (get_name) 
get_name:gn:'A'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f A
 (add_var_info) Name:A Idx:-1
 (add_var_info) Already present
 (add_var_info)   Declaration so possibly BAD
 (scan_variable) ret1
(scan_localglobal)  LOCAL variable:'A'
VAR: '                 A'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=7 ',b,c,t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=7 ',b,c,t'
 (check_literal)   ':' != ','
 (check_literal) check_literal: ret0
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=7 ',b,c,t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=7 ',b,c,t'
 (check_literal) check_literal:After while():b,c,t
 (check_literal) ret1 Match. ' ,' == ',b,c,t'

 (scan_literal_core) scan_literal_core:lit=' ,' ',b,c,t'
 (scan_literal_core) scan_literal_core:After drop space:',b,c,t'
 (scan_literal_core) scan_literal_core:while loop:,b,c,t
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 'b,c,t'

  (check_operator) 'b,c,t' igncomma:1
  (check_operator) ret0:is comma: 32767

  (check_vname) check_vname 'b,c,t':
  (check_vname) check_vname ret1 ',c,t':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ',c,t'

  (check_literal) check_literal:lit='(' idx=9 ',c,t'
  (check_literal) check_literal:After drop space:'(' idx=9 ',c,t'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) 'b,c,t' ref_ndeclare:0

  (scan_vname) scan_vname: 'b,c,t'
  (scan_vname) scan_vname: ret1 'b'
 (scan_variable) scan_variable: ',c,t' vname='B'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'B' is not other keyword
 (scan_variable) Array test ',c,t'

  (check_literal) check_literal:lit='(' idx=9 ',c,t'
  (check_literal) check_literal:After drop space:'(' idx=9 ',c,t'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='B' Float
(process_token)    Frst:0 T:'B' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'B'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f B
(add_var_info) Name:B Idx:-1
(add_var_info) Already present
(add_var_info)   Declaration so possibly BAD
(scan_variable) ret1
(scan_localglobal)  LOCAL variable:'B'
VAR: '                 B'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=9 ',c,t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=9 ',c,t'
 (check_literal)   ':' != ','
 (check_literal) check_literal: ret0
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=9 ',c,t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=9 ',c,t'
 (check_literal) check_literal:After while():c,t
 (check_literal) ret1 Match. ' ,' == ',c,t'

 (scan_literal_core) scan_literal_core:lit=' ,' ',c,t'
 (scan_literal_core) scan_literal_core:After drop space:',c,t'
 (scan_literal_core) scan_literal_core:while loop:,c,t
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 'c,t'

  (check_operator) 'c,t' igncomma:1
  (check_operator) ret0:is comma: 32767

  (check_vname) check_vname 'c,t':
  (check_vname) check_vname ret1 ',t':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ',t'

  (check_literal) check_literal:lit='(' idx=11 ',t'
  (check_literal) check_literal:After drop space:'(' idx=11 ',t'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) 'c,t' ref_ndeclare:0

  (scan_vname) scan_vname: 'c,t'
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: ',t' vname='C'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C' is not other keyword
 (scan_variable) Array test ',t'

  (check_literal) check_literal:lit='(' idx=11 ',t'
  (check_literal) check_literal:After drop space:'(' idx=11 ',t'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C' Float
(process_token)    Frst:0 T:'C' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
token_is_variable: tok:'C'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C
(add_var_info) Name:C Idx:-1
(add_var_info) Already present
(add_var_info)   Declaration so possibly BAD
(scan_variable) ret1
(scan_localglobal)  LOCAL variable:'C'
VAR: '                 C'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=11 ',t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=11 ',t'
 (check_literal)   ':' != ','
 (check_literal) check_literal: ret0
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=11 ',t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=11 ',t'
 (check_literal) check_literal:After while():t
 (check_literal) ret1 Match. ' ,' == ',t'

 (scan_literal_core) scan_literal_core:lit=' ,' ',t'
 (scan_literal_core) scan_literal_core:After drop space:',t'
 (scan_literal_core) scan_literal_core:while loop:,t
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 't'

  (check_operator) 't' igncomma:1
  (check_operator) ret0:is comma: 32767

  (check_vname) check_vname 't':
  (check_vname) check_vname ret1 '':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ''

  (check_literal) check_literal:lit='(' idx=13 ''
  (check_literal) check_literal:After drop space:'(' idx=13 ''
  (check_literal) check_literal  ret0 Empty test string
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) 't' ref_ndeclare:0

  (scan_vname) scan_vname: 't'
  (scan_vname) scan_vname: ret1 't'
 (scan_variable) scan_variable: '' vname='T'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'T' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=13 ''
  (check_literal) check_literal:After drop space:'(' idx=13 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='T' Float
(process_token)    Frst:0 T:'T' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'T'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:T is not function
token_is_variable: tok:'T'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:T is not function
(init_get_name) 
init_get_name:'T'
(init_get_name) 
init_get_name:'T'
(get_name) 
get_name:gn:'T'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f T
(add_var_info) Name:T Idx:-1
(add_var_info) Already present
(add_var_info)   Declaration so possibly BAD
(scan_variable) ret1
(scan_localglobal)  LOCAL variable:'T'
VAR: '                 T'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=13 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=13 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=13 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=13 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_variable) ''

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 32767

  (check_vname) check_vname '':
  (check_vname) check_vname ret0 '':
 (check_variable) check_variable:ret0 
(scan_localglobal) ret1:End of line
(scan_declare) scan_declare:ret 1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=13 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=13 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:5 buf2 i:3
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'T' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing : LOCAL   *************
 (type_check_stack_display) Type Check Stack (0)
 (process_syntax_tree) *********Processing :A   *************
 (type_check_stack_push)  type_check_stack_push: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (process_syntax_tree) *********Processing :B   *************
 (type_check_stack_push)  type_check_stack_push: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (type_check_stack_display) 001: 'B' type:f (1), %:0
 (process_syntax_tree) *********Processing :C   *************
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'B' type:1 %:0
 (type_check_stack_print)  N004: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (type_check_stack_display) 001: 'B' type:f (1), %:0
 (type_check_stack_display) 002: 'C' type:f (1), %:0
 (process_syntax_tree) *********Processing :T   *************
 (type_check_stack_push)  type_check_stack_push: 'T'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (4)

 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'B' type:1 %:0
 (type_check_stack_print)  N004: 'C' type:1 %:0
 (type_check_stack_print)  N005: 'T' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (4)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (type_check_stack_display) 001: 'B' type:f (1), %:0
 (type_check_stack_display) 002: 'C' type:f (1), %:0
 (type_check_stack_display) 003: 'T' type:f (1), %:0
 (type_check_stack_only_field_data) Type Check Stack ptr:(4)
 (type_check_stack_only_field_data) 000: 'A' type:f (1)
 (type_check_stack_only_field_data) 001: 'B' type:f (1)
 (type_check_stack_only_field_data) 002: 'C' type:f (1)
 (type_check_stack_only_field_data) 003: 'T' type:f (1)
 (process_syntax_tree) Value left stacked so DROP needed
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE: LOCAL    **********
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression)  *** BE:A    **********
 (type_check_stack_push)  type_check_stack_push: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (typecheck_expression)  *** BE:B    **********
 (type_check_stack_push)  type_check_stack_push: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (type_check_stack_display) 001: 'B' type:f (1), %:0
 (typecheck_expression)  *** BE:C    **********
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'B' type:1 %:0
 (type_check_stack_print)  N004: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (type_check_stack_display) 001: 'B' type:f (1), %:0
 (type_check_stack_display) 002: 'C' type:f (1), %:0
 (typecheck_expression)  *** BE:T    **********
 (type_check_stack_push)  type_check_stack_push: 'T'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (4)

 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'B' type:1 %:0
 (type_check_stack_print)  N004: 'C' type:1 %:0
 (type_check_stack_print)  N005: 'T' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (4)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (type_check_stack_display) 001: 'B' type:f (1), %:0
 (type_check_stack_display) 002: 'C' type:f (1), %:0
 (type_check_stack_display) 003: 'T' type:f (1), %:0
 (type_check_stack_only_field_data) Type Check Stack ptr:(4)
 (type_check_stack_only_field_data) 000: 'A' type:f (1)
 (type_check_stack_only_field_data) 001: 'B' type:f (1)
 (type_check_stack_only_field_data) 002: 'C' type:f (1)
 (type_check_stack_only_field_data) 003: 'T' type:f (1)
 (typecheck_expression) Value left stacked so DROP needed
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'T' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'T' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N005       Read EXP_BUFF_ID_FUNCTION                   ty:f qcty:U 'DROP' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) ( LOCAL)
 (infix_from_rpn) (A)
Var: A Float NumIdx:0
infix_stack_push: 'A'
 (infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
 (infix_from_rpn) (C)
Var: C Float NumIdx:0
infix_stack_push: 'C'
 (infix_from_rpn) (T)
Var: T Float NumIdx:0
infix_stack_push: 'T'
 (infix_from_rpn) (DROP)
infix_stack_push: 'DROP()'
Done

infix_stack_pop: 'DROP()'
Infix stack result DROP()
 (infix_from_rpn) exit  'DROP()'
 (process_expression_types) ==ROP()==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:6 qcode_idx:000F
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (output_qcode_for_line) QC:META ' LOCAL'
 (finalise_expression) Finalise expression done.
local a,b,c,t
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=13 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=13 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=13 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'l' (108)
 (is_all_spaces) cline[1] = 'o' (111)
 (is_all_spaces) cline[2] = 'c' (99)
 (is_all_spaces) cline[3] = 'a' (97)
 (is_all_spaces) cline[4] = 'l' (108)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = 'a' (97)
 (is_all_spaces) cline[7] = 'b' (98)
 (is_all_spaces) cline[8] = ',' (44)
 (is_all_spaces) cline[9] = 'b' (98)
 (is_all_spaces) cline[10] = 'c' (99)
 (is_all_spaces) cline[11] = ',' (44)
 (is_all_spaces) cline[12] = 'a' (97)
 (is_all_spaces) cline[13] = 'c' (99)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'local ab,bc,ac'
******************
**local ab,bc,ac**
******************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'local ab,bc,ac'
 (check_literal) check_literal:After drop space:'REM' idx=0 'local ab,bc,ac'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'local ab,bc,ac'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'local ab,bc,ac'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'local ab,bc,ac'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'local ab,bc,ac'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'local ab,bc,ac'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'local ab,bc,ac'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'local ab,bc,ac'

   (check_operator) 'local ab,bc,ac' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'local ab,bc,ac':
   (check_vname) check_vname ret1 ' ab,bc,ac':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' ab,bc,ac'

   (check_literal) check_literal:lit='(' idx=5 ' ab,bc,ac'
   (check_literal) check_literal:After drop space:'(' idx=5 ' ab,bc,ac'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' ab,bc,ac'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 'ab,bc,ac'
 (check_literal)   '=' != 'a'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'local ab,bc,ac'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'local ab,bc,ac'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local ab,bc,ac'
  (check_literal) check_literal:After while(): ab,bc,ac
  (check_literal) ret1 Match. ' LOCAL' == 'local ab,bc,ac'
 (check_declare) check_declare:ret 1

  (scan_declare) scan_declare:

   (check_literal) check_literal:lit=' LOCAL' idx=0 'local ab,bc,ac'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local ab,bc,ac'
   (check_literal) check_literal:After while(): ab,bc,ac
   (check_literal) ret1 Match. ' LOCAL' == 'local ab,bc,ac'

   (scan_localglobal) 'local ab,bc,ac'

    (check_literal) check_literal:lit=' LOCAL' idx=0 'local ab,bc,ac'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local ab,bc,ac'
    (check_literal) check_literal:After while(): ab,bc,ac
    (check_literal) ret1 Match. ' LOCAL' == 'local ab,bc,ac'
   (process_token)    Frst:1 T:' LOCAL' toktype:? exptype:U bufid:'EXP_BUFF_ID_META'
   (process_token) Before switch, bufid:'EXP_BUFF_ID_META'
   (process_token) Buff id  LOCAL
   (output_generic) [U,()] U  LOCAL exp_type:U

    (check_variable) 'ab,bc,ac'

     (check_operator) 'ab,bc,ac' igncomma:1
     (check_operator) ret0:is comma: 1952533792

     (check_vname) check_vname 'ab,bc,ac':
     (check_vname) check_vname ret1 ',bc,ac':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ',bc,ac'

     (check_literal) check_literal:lit='(' idx=8 ',bc,ac'
     (check_literal) check_literal:After drop space:'(' idx=8 ',bc,ac'
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (scan_variable) ' ab,bc,ac' ref_ndeclare:0

    (scan_vname) scan_vname: ' ab,bc,ac'
    (scan_vname) scan_vname: ret1 'ab'
   (scan_variable) scan_variable: ',bc,ac' vname='AB'
   (token_is_other_keyword) 
   (token_is_other_keyword) 'AB' is not other keyword
   (scan_variable) Array test ',bc,ac'

    (check_literal) check_literal:lit='(' idx=8 ',bc,ac'
    (check_literal) check_literal:After drop space:'(' idx=8 ',bc,ac'
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (scan_variable) scan_variable:ret1 vname='AB' Float
  (process_token)    Frst:1 T:'AB' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:'AB'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:AB is not function
token_is_variable: tok:'AB'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:AB is not function
 (init_get_name) 
init_get_name:'AB'
 (init_get_name) 
init_get_name:'AB'
 (get_name) 
get_name:gn:'AB'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f AB
 (add_var_info) Name:AB Idx:-1
 (add_var_info) Already present
 (add_var_info)   Declaration so possibly BAD
 (scan_variable) ret1
(scan_localglobal)  LOCAL variable:'AB'
VAR: '                AB'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=8 ',bc,ac'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=8 ',bc,ac'
 (check_literal)   ':' != ','
 (check_literal) check_literal: ret0
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=8 ',bc,ac'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=8 ',bc,ac'
 (check_literal) check_literal:After while():bc,ac
 (check_literal) ret1 Match. ' ,' == ',bc,ac'

 (scan_literal_core) scan_literal_core:lit=' ,' ',bc,ac'
 (scan_literal_core) scan_literal_core:After drop space:',bc,ac'
 (scan_literal_core) scan_literal_core:while loop:,bc,ac
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 'bc,ac'

  (check_operator) 'bc,ac' igncomma:1
  (check_operator) ret0:is comma: 32767

  (check_vname) check_vname 'bc,ac':
  (check_vname) check_vname ret1 ',ac':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ',ac'

  (check_literal) check_literal:lit='(' idx=11 ',ac'
  (check_literal) check_literal:After drop space:'(' idx=11 ',ac'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) 'bc,ac' ref_ndeclare:0

  (scan_vname) scan_vname: 'bc,ac'
  (scan_vname) scan_vname: ret1 'bc'
 (scan_variable) scan_variable: ',ac' vname='BC'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'BC' is not other keyword
 (scan_variable) Array test ',ac'

  (check_literal) check_literal:lit='(' idx=11 ',ac'
  (check_literal) check_literal:After drop space:'(' idx=11 ',ac'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='BC' Float
(process_token)    Frst:0 T:'BC' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'BC'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:BC is not function
token_is_variable: tok:'BC'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:BC is not function
(init_get_name) 
init_get_name:'BC'
(init_get_name) 
init_get_name:'BC'
(get_name) 
get_name:gn:'BC'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f BC
(add_var_info) Name:BC Idx:-1
(add_var_info) Already present
(add_var_info)   Declaration so possibly BAD
(scan_variable) ret1
(scan_localglobal)  LOCAL variable:'BC'
VAR: '                BC'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=11 ',ac'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=11 ',ac'
 (check_literal)   ':' != ','
 (check_literal) check_literal: ret0
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=11 ',ac'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=11 ',ac'
 (check_literal) check_literal:After while():ac
 (check_literal) ret1 Match. ' ,' == ',ac'

 (scan_literal_core) scan_literal_core:lit=' ,' ',ac'
 (scan_literal_core) scan_literal_core:After drop space:',ac'
 (scan_literal_core) scan_literal_core:while loop:,ac
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 'ac'

  (check_operator) 'ac' igncomma:1
  (check_operator) ret0:is comma: 32767

  (check_vname) check_vname 'ac':
  (check_vname) check_vname ret1 '':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ''

  (check_literal) check_literal:lit='(' idx=14 ''
  (check_literal) check_literal:After drop space:'(' idx=14 ''
  (check_literal) check_literal  ret0 Empty test string
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) 'ac' ref_ndeclare:0

  (scan_vname) scan_vname: 'ac'
  (scan_vname) scan_vname: ret1 'ac'
 (scan_variable) scan_variable: '' vname='AC'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'AC' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=14 ''
  (check_literal) check_literal:After drop space:'(' idx=14 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='AC' Float
(process_token)    Frst:0 T:'AC' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'AC'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AC is not function
token_is_variable: tok:'AC'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AC is not function
(init_get_name) 
init_get_name:'AC'
(init_get_name) 
init_get_name:'AC'
(get_name) 
get_name:gn:'AC'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f AC
(add_var_info) Name:AC Idx:-1
(add_var_info) Already present
(add_var_info)   Declaration so possibly BAD
(scan_variable) ret1
(scan_localglobal)  LOCAL variable:'AC'
VAR: '                AC'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=14 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=14 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=14 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=14 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_variable) ''

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 32767

  (check_vname) check_vname '':
  (check_vname) check_vname ret0 '':
 (check_variable) check_variable:ret0 
(scan_localglobal) ret1:End of line
(scan_declare) scan_declare:ret 1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=14 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=14 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:4 buf2 i:6
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AB' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'BC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing : LOCAL   *************
 (type_check_stack_display) Type Check Stack (0)
 (process_syntax_tree) *********Processing :AB   *************
 (type_check_stack_push)  type_check_stack_push: 'AB'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: 'AB' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (process_syntax_tree) *********Processing :BC   *************
 (type_check_stack_push)  type_check_stack_push: 'BC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N002: 'AB' type:1 %:0
 (type_check_stack_print)  N003: 'BC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (type_check_stack_display) 001: 'BC' type:f (1), %:0
 (process_syntax_tree) *********Processing :AC   *************
 (type_check_stack_push)  type_check_stack_push: 'AC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N002: 'AB' type:1 %:0
 (type_check_stack_print)  N003: 'BC' type:1 %:0
 (type_check_stack_print)  N004: 'AC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (type_check_stack_display) 001: 'BC' type:f (1), %:0
 (type_check_stack_display) 002: 'AC' type:f (1), %:0
 (type_check_stack_only_field_data) Type Check Stack ptr:(3)
 (type_check_stack_only_field_data) 000: 'AB' type:f (1)
 (type_check_stack_only_field_data) 001: 'BC' type:f (1)
 (type_check_stack_only_field_data) 002: 'AC' type:f (1)
 (process_syntax_tree) Value left stacked so DROP needed
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE: LOCAL    **********
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression)  *** BE:AB    **********
 (type_check_stack_push)  type_check_stack_push: 'AB'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: 'AB' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (typecheck_expression)  *** BE:BC    **********
 (type_check_stack_push)  type_check_stack_push: 'BC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N002: 'AB' type:1 %:0
 (type_check_stack_print)  N003: 'BC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (type_check_stack_display) 001: 'BC' type:f (1), %:0
 (typecheck_expression)  *** BE:AC    **********
 (type_check_stack_push)  type_check_stack_push: 'AC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N002: 'AB' type:1 %:0
 (type_check_stack_print)  N003: 'BC' type:1 %:0
 (type_check_stack_print)  N004: 'AC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (type_check_stack_display) 001: 'BC' type:f (1), %:0
 (type_check_stack_display) 002: 'AC' type:f (1), %:0
 (type_check_stack_only_field_data) Type Check Stack ptr:(3)
 (type_check_stack_only_field_data) 000: 'AB' type:f (1)
 (type_check_stack_only_field_data) 001: 'BC' type:f (1)
 (type_check_stack_only_field_data) 002: 'AC' type:f (1)
 (typecheck_expression) Value left stacked so DROP needed
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AB' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'BC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AB' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'BC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_FUNCTION                   ty:f qcty:U 'DROP' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) ( LOCAL)
 (infix_from_rpn) (AB)
Var: AB Float NumIdx:0
infix_stack_push: 'AB'
 (infix_from_rpn) (BC)
Var: BC Float NumIdx:0
infix_stack_push: 'BC'
 (infix_from_rpn) (AC)
Var: AC Float NumIdx:0
infix_stack_push: 'AC'
 (infix_from_rpn) (DROP)
infix_stack_push: 'DROP()'
Done

infix_stack_pop: 'DROP()'
Infix stack result DROP()
 (infix_from_rpn) exit  'DROP()'
 (process_expression_types) ==ROP()==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:5 qcode_idx:000F
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (output_qcode_for_line) QC:META ' LOCAL'
 (finalise_expression) Finalise expression done.
local ab,bc,ac
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=14 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=14 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=14 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'o' (111)
 (is_all_spaces) cline[1] = 'p' (112)
 (is_all_spaces) cline[2] = 'e' (101)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = ' ' (32)
 (is_all_spaces) cline[5] = '"' (34)
 (is_all_spaces) cline[6] = 'B' (66)
 (is_all_spaces) cline[7] = ':' (58)
 (is_all_spaces) cline[8] = 'T' (84)
 (is_all_spaces) cline[9] = 'E' (69)
 (is_all_spaces) cline[10] = 'S' (83)
 (is_all_spaces) cline[11] = 'T' (84)
 (is_all_spaces) cline[12] = '"' (34)
 (is_all_spaces) cline[13] = ',' (44)
 (is_all_spaces) cline[14] = ' ' (32)
 (is_all_spaces) cline[15] = 'C' (67)
 (is_all_spaces) cline[16] = ',' (44)
 (is_all_spaces) cline[17] = ' ' (32)
 (is_all_spaces) cline[18] = 't' (116)
 (is_all_spaces) cline[19] = 'e' (101)
 (is_all_spaces) cline[20] = 's' (115)
 (is_all_spaces) cline[21] = 't' (116)
 (is_all_spaces) cline[22] = ',' (44)
 (is_all_spaces) cline[23] = ' ' (32)
 (is_all_spaces) cline[24] = 's' (115)
 (is_all_spaces) cline[25] = 'e' (101)
 (is_all_spaces) cline[26] = 'c' (99)
 (is_all_spaces) cline[27] = 'o' (111)
 (is_all_spaces) cline[28] = 'n' (110)
 (is_all_spaces) cline[29] = 'd' (100)
 (is_all_spaces) cline[30] = ',' (44)
 (is_all_spaces) cline[31] = ' ' (32)
 (is_all_spaces) cline[32] = 't' (116)
 (is_all_spaces) cline[33] = 'h' (104)
 (is_all_spaces) cline[34] = 'i' (105)
 (is_all_spaces) cline[35] = 'r' (114)
 (is_all_spaces) cline[36] = 'd' (100)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'open "B:TEST", C, test, second, third'
*****************************************
**open "B:TEST", C, test, second, third**
*****************************************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'open "B:TEST", C, test, second, third'
 (check_literal) check_literal:After drop space:'REM' idx=0 'open "B:TEST", C, test, second, third'
 (check_literal)   'R' != 'o'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'open "B:TEST", C, test, second, third'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'open "B:TEST", C, test, second, third'
 (check_literal)   'R' != 'o'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'open "B:TEST", C, test, second, third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'open "B:TEST", C, test, second, third'
 (check_literal)   'R' != 'o'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'open "B:TEST", C, test, second, third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'open "B:TEST", C, test, second, third'
 (check_literal)   'R' != 'o'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'open "B:TEST", C, test, second, third'

   (check_operator) 'open "B:TEST", C, test, second, third' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'open "B:TEST", C, test, second, third':
   (check_vname) check_vname ret1 ' "B:TEST", C, test, second, third':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "B:TEST", C, test, second, third'

   (check_literal) check_literal:lit='(' idx=4 ' "B:TEST", C, test, second, third'
   (check_literal) check_literal:After drop space:'(' idx=4 ' "B:TEST", C, test, second, third'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=4 ' "B:TEST", C, test, second, third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=5 '"B:TEST", C, test, second, third'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'open "B:TEST", C, test, second, third'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'open "B:TEST", C, test, second, third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'open "B:TEST", C, test, second, third'
  (check_literal)   'L' != 'o'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'open "B:TEST", C, test, second, third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'open "B:TEST", C, test, second, third'
  (check_literal)   'G' != 'o'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'open "B:TEST", C, test, second, third'
   (check_textlabel) 'open' is a text label chstr:'n'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'open' Type:f

   (check_literal) check_literal:lit='::' idx=4 ' "B:TEST", C, test, second, third'
   (check_literal) check_literal:After drop space:'::' idx=4 ' "B:TEST", C, test, second, third'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'open "B:TEST", C, test, second, third'
   (check_textlabel) 'open' is a text label chstr:'n'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'open' Type:f
  (check_proc_call) 'open' is text label

   (check_literal) check_literal:lit=':' idx=4 ' "B:TEST", C, test, second, third'
   (check_literal) check_literal:After drop space:':' idx=4 ' "B:TEST", C, test, second, third'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'open "B:TEST", C, test, second, third'

   (check_literal) check_literal:lit=' INPUT' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal)   'I' != 'o'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'open "B:TEST", C, test, second, third'

   (check_literal) check_literal:lit=' PRINT' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal)   'P' != 'o'
   (check_literal) check_literal: ret0
  (check_print) check_print:ret0

  (check_print) check_print: 'open "B:TEST", C, test, second, third'

   (check_literal) check_literal:lit=' LPRINT' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LPRINT' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal)   'L' != 'o'
   (check_literal) check_literal: ret0
  (check_print) check_print:ret0

  (check_return) check_return: 'open "B:TEST", C, test, second, third'

   (check_literal) check_literal:lit=' RETURN' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'RETURN' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal)   'R' != 'o'
   (check_literal) check_literal: ret0
  (check_return) check_return:ret0

  (check_use) 'open "B:TEST", C, test, second, third'

   (check_literal) check_literal:lit=' USE' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'USE' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal)   'U' != 'o'
   (check_literal) check_literal: ret0
  (check_use) ret0

  (check_onerr) check_onerr: 'open "B:TEST", C, test, second, third'

   (check_literal) check_literal:lit=' ONERR' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'ONERR' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal)   'N' != 'p'
   (check_literal) check_literal: ret0
  (check_onerr) check_onerr:ret0

  (check_if) 'open "B:TEST", C, test, second, third'

   (check_literal) check_literal:lit=' IF' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'IF' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal)   'I' != 'o'
   (check_literal) check_literal: ret0
  (check_if) ret0

  (check_do) 'open "B:TEST", C, test, second, third'

   (check_literal) check_literal:lit=' DO' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'DO' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal)   'D' != 'o'
   (check_literal) check_literal: ret0
  (check_do) ret0

  (check_literal) check_literal:lit=' OFF' idx=0 'open "B:TEST", C, test, second, third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'OFF' idx=0 'open "B:TEST", C, test, second, third'
  (check_literal)   'F' != 'p'
  (check_literal) check_literal: ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function)  'open "B:TEST", C, test, second, third'
  (check_function) ret0

  (check_literal) check_literal:lit=' DO' idx=0 'open "B:TEST", C, test, second, third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'DO' idx=0 'open "B:TEST", C, test, second, third'
  (check_literal)   'D' != 'o'
  (check_literal) check_literal: ret0

  (check_createopen) Create:1 Open:0

   (check_literal) check_literal:lit=' CREATE' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'CREATE' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal)   'C' != 'o'
   (check_literal) check_literal: ret0
  (check_createopen) ret0

  (check_createopen) Create:0 Open:1

   (check_literal) check_literal:lit=' OPEN' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'OPEN' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) check_literal:After while(): "B:TEST", C, test, second, third
   (check_literal) ret1 Match. ' OPEN' == 'open "B:TEST", C, test, second, third'
  (check_createopen) ret1

  (scan_createopen) 'open "B:TEST", C, test, second, third'

   (check_literal) check_literal:lit=' OPEN' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'OPEN' idx=0 'open "B:TEST", C, test, second, third'
   (check_literal) check_literal:After while(): "B:TEST", C, test, second, third
   (check_literal) ret1 Match. ' OPEN' == 'open "B:TEST", C, test, second, third'

   (scan_createopen_list) scan_createopen_list:

    (scan_expression) ' "B:TEST", C, test, second, third' igncomma:0

     (check_eitem) check_eitem: '"B:TEST", C, test, second, third'

      (check_function)  '"B:TEST", C, test, second, third'
      (check_function) ret0

      (check_atom) check_atom:
      (check_atom) check_atom:Checking for character constant

       (check_literal) check_literal:lit=' %' idx=5 '"B:TEST", C, test, second, third'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=5 '"B:TEST", C, test, second, third'
       (check_literal)   '%' != '"'
       (check_literal) check_literal: ret0
      (check_atom) check_atom:Checking for string

       (check_literal) check_literal:lit=' "' idx=5 '"B:TEST", C, test, second, third'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=5 '"B:TEST", C, test, second, third'
       (check_literal) check_literal:After while():B:TEST", C, test, second, third
       (check_literal) ret1 Match. ' "' == '"B:TEST", C, test, second, third'
      (check_atom) ret1
     (check_eitem) ret1

     (scan_eitem) scan_eitem:

      (check_function)  '"B:TEST", C, test, second, third'
      (check_function) ret0

      (check_atom) check_atom:
      (check_atom) check_atom:Checking for character constant

       (check_literal) check_literal:lit=' %' idx=5 '"B:TEST", C, test, second, third'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=5 '"B:TEST", C, test, second, third'
       (check_literal)   '%' != '"'
       (check_literal) check_literal: ret0
      (check_atom) check_atom:Checking for string

       (check_literal) check_literal:lit=' "' idx=5 '"B:TEST", C, test, second, third'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=5 '"B:TEST", C, test, second, third'
       (check_literal) check_literal:After while():B:TEST", C, test, second, third
       (check_literal) ret1 Match. ' "' == '"B:TEST", C, test, second, third'
      (check_atom) ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=5 '"B:TEST", C, test, second, third'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=5 '"B:TEST", C, test, second, third'
       (check_literal)   '%' != '"'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=5 '"B:TEST", C, test, second, third'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=5 '"B:TEST", C, test, second, third'
       (check_literal) check_literal:After while():B:TEST", C, test, second, third
       (check_literal) ret1 Match. ' "' == '"B:TEST", C, test, second, third'

       (scan_string) scan_string:

        (check_literal) check_literal:lit=' "' idx=5 '"B:TEST", C, test, second, third'
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=5 '"B:TEST", C, test, second, third'
        (check_literal) check_literal:After while():B:TEST", C, test, second, third
        (check_literal) ret1 Match. ' "' == '"B:TEST", C, test, second, third'
       (scan_string)   (in if) 'B:TEST", C, test, second, third'
       (scan_string)   (in wh) 'B:TEST", C, test, second, third'
       (scan_string)   (in wh) ':TEST", C, test, second, third'
       (scan_string)   (in wh) ':TEST", C, test, second, third'
       (scan_string)   (in wh) 'TEST", C, test, second, third'
       (scan_string)   (in wh) 'TEST", C, test, second, third'
       (scan_string)   (in wh) 'EST", C, test, second, third'
       (scan_string)   (in wh) 'EST", C, test, second, third'
       (scan_string)   (in wh) 'ST", C, test, second, third'
       (scan_string)   (in wh) 'ST", C, test, second, third'
       (scan_string)   (in wh) 'T", C, test, second, third'
       (scan_string)   (in wh) 'T", C, test, second, third'
       (scan_string)   (in wh) '", C, test, second, third'
       (scan_string) scan_string: ret1
      (process_token)    Frst:1 T:'"B:TEST"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
      (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
      (token_is_integer)  tok:'"B:TEST"'
      (token_is_integer)  tok:ret0
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:"B:TEST" is not function
token_is_variable: tok:'"B:TEST"'
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:"B:TEST" is not function
(   output_string) [U,()] s "B:TEST"
modify_expression_type:Inittype:U Intype:s Outtype:s
     (scan_atom) ret1
    (scan_expression) ', C, test, second, third' Before while igncomma:0

     (check_operator) ', C, test, second, third' igncomma:0
     (check_operator) ret0:is comma: 32767
    (scan_expression) ret1 ', C, test, second, third' commas:0

    (check_literal) check_literal:lit=' ,' idx=13 ', C, test, second, third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=13 ', C, test, second, third'
    (check_literal) check_literal:After while(): C, test, second, third
    (check_literal) ret1 Match. ' ,' == ', C, test, second, third'

    (scan_literal_core) scan_literal_core:lit=' ,' ', C, test, second, third'
    (scan_literal_core) scan_literal_core:After drop space:', C, test, second, third'
    (scan_literal_core) scan_literal_core:while loop:, C, test, second, third
    (scan_literal_core) ret1
   (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
   (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
   (token_is_integer)  tok:','
   (token_is_integer)  tok:ret0
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:, is not function
  (process_token) **Unknown token **      ','
  (scan_literal) ret1
 (op_stack_finalise) Finalise stack
 (process_token)    Frst:0 T:' OPEN' toktype:i exptype:s bufid:'EXP_BUFF_ID_META'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_META'
 (process_token) Buff id  OPEN
 (output_generic) [s,()] s  OPEN exp_type:s

  (scan_logical_file) scan_logical_file:

   (check_literal) check_literal:lit=' A' idx=14 ' C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'A' idx=15 'C, test, second, third'
   (check_literal)   'A' != 'C'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' B' idx=14 ' C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'B' idx=15 'C, test, second, third'
   (check_literal)   'B' != 'C'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' C' idx=14 ' C, test, second, third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'C' idx=15 'C, test, second, third'
   (check_literal) check_literal:After while():, test, second, third
   (check_literal) ret1 Match. ' C' == ' C, test, second, third'
  (process_token)    Frst:0 T:'C' toktype:U exptype:s bufid:'EXP_BUFF_ID_LOGICALFILE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_LOGICALFILE'
  (process_token) Buff id C
  (output_generic) [s,()] s C exp_type:s
  (scan_logical_file) ret1:

  (check_literal) check_literal:lit=' ,' idx=16 ', test, second, third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=16 ', test, second, third'
  (check_literal) check_literal:After while(): test, second, third
  (check_literal) ret1 Match. ' ,' == ', test, second, third'

  (scan_literal_core) scan_literal_core:lit=' ,' ', test, second, third'
  (scan_literal_core) scan_literal_core:After drop space:', test, second, third'
  (scan_literal_core) scan_literal_core:while loop:, test, second, third
  (scan_literal_core) ret1
 (process_token)    Frst:0 T:',' toktype:U exptype:s bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:','
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 'test, second, third'

  (check_operator) 'test, second, third' igncomma:1
  (check_operator) ret0:is comma: 32767

  (check_vname) check_vname 'test, second, third':
  (check_vname) check_vname ret1 ', second, third':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ', second, third'

  (check_literal) check_literal:lit='(' idx=22 ', second, third'
  (check_literal) check_literal:After drop space:'(' idx=22 ', second, third'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) ' test, second, third' ref_ndeclare:3

  (scan_vname) scan_vname: ' test, second, third'
  (scan_vname) scan_vname: ret1 'test'
 (scan_variable) scan_variable: ', second, third' vname='C.TEST'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.TEST' is not other keyword
 (scan_variable) Array test ', second, third'

  (check_literal) check_literal:lit='(' idx=22 ', second, third'
  (check_literal) check_literal:After drop space:'(' idx=22 ', second, third'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C.TEST' Float
(process_token)    Frst:0 T:'C.TEST' toktype:f exptype:s bufid:'EXP_BUFF_ID_FIELDVAR'
(process_token) Before switch, bufid:'EXP_BUFF_ID_FIELDVAR'
(process_token) Buff id C.TEST
(init_get_name) 
init_get_name:'C.TEST'
(init_get_name) 
init_get_name:'C.TEST'
(get_name) 
get_name:gn:'C.TEST'
(output_fieldvar) [s,()] f C.TEST exp_type:s
(add_var_info) Name:C.TEST Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
(scan_createopen_list)  OPEN variable:'C.TEST'
VAR: '            C.TEST'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:206E

 (check_literal) check_literal:lit=' ,' idx=22 ', second, third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=22 ', second, third'
 (check_literal) check_literal:After while(): second, third
 (check_literal) ret1 Match. ' ,' == ', second, third'

 (scan_literal_core) scan_literal_core:lit=' ,' ', second, third'
 (scan_literal_core) scan_literal_core:After drop space:', second, third'
 (scan_literal_core) scan_literal_core:while loop:, second, third
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 'second, third'

  (check_operator) 'second, third' igncomma:1
  (check_operator) ret0:is comma: 32607

  (check_vname) check_vname 'second, third':
  (check_vname) check_vname ret1 ', third':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ', third'

  (check_literal) check_literal:lit='(' idx=30 ', third'
  (check_literal) check_literal:After drop space:'(' idx=30 ', third'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) ' second, third' ref_ndeclare:3

  (scan_vname) scan_vname: ' second, third'
  (scan_vname) scan_vname: ret1 'second'
 (scan_variable) scan_variable: ', third' vname='C.SECOND'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.SECOND' is not other keyword
 (scan_variable) Array test ', third'

  (check_literal) check_literal:lit='(' idx=30 ', third'
  (check_literal) check_literal:After drop space:'(' idx=30 ', third'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C.SECOND' Float
(process_token)    Frst:0 T:'C.SECOND' toktype:f exptype:s bufid:'EXP_BUFF_ID_FIELDVAR'
(process_token) Before switch, bufid:'EXP_BUFF_ID_FIELDVAR'
(process_token) Buff id C.SECOND
(init_get_name) 
init_get_name:'C.SECOND'
(init_get_name) 
init_get_name:'C.SECOND'
(get_name) 
get_name:gn:'C.SECOND'
(output_fieldvar) [s,()] f C.SECOND exp_type:s
(add_var_info) Name:C.SECOND Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
(scan_createopen_list)  OPEN variable:'C.SECOND'
VAR: '          C.SECOND'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:206E

 (check_literal) check_literal:lit=' ,' idx=30 ', third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=30 ', third'
 (check_literal) check_literal:After while(): third
 (check_literal) ret1 Match. ' ,' == ', third'

 (scan_literal_core) scan_literal_core:lit=' ,' ', third'
 (scan_literal_core) scan_literal_core:After drop space:', third'
 (scan_literal_core) scan_literal_core:while loop:, third
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 'third'

  (check_operator) 'third' igncomma:1
  (check_operator) ret0:is comma: 32607

  (check_vname) check_vname 'third':
  (check_vname) check_vname ret1 '':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ''

  (check_literal) check_literal:lit='(' idx=37 ''
  (check_literal) check_literal:After drop space:'(' idx=37 ''
  (check_literal) check_literal  ret0 Empty test string
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) ' third' ref_ndeclare:3

  (scan_vname) scan_vname: ' third'
  (scan_vname) scan_vname: ret1 'third'
 (scan_variable) scan_variable: '' vname='C.THIRD'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.THIRD' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=37 ''
  (check_literal) check_literal:After drop space:'(' idx=37 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C.THIRD' Float
(process_token)    Frst:0 T:'C.THIRD' toktype:f exptype:s bufid:'EXP_BUFF_ID_FIELDVAR'
(process_token) Before switch, bufid:'EXP_BUFF_ID_FIELDVAR'
(process_token) Buff id C.THIRD
(init_get_name) 
init_get_name:'C.THIRD'
(init_get_name) 
init_get_name:'C.THIRD'
(get_name) 
get_name:gn:'C.THIRD'
(output_fieldvar) [s,()] f C.THIRD exp_type:s
(add_var_info) Name:C.THIRD Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
(scan_createopen_list)  OPEN variable:'C.THIRD'
VAR: '           C.THIRD'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:206E

 (check_literal) check_literal:lit=' ,' idx=37 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=37 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_variable) ''

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 32607

  (check_vname) check_vname '':
  (check_vname) check_vname ret0 '':
 (check_variable) check_variable:ret0 
(scan_createopen_list) ret1
(scan_createopen) ret1
(scan_createopen) ENDEXP
(process_token)    Frst:0 T:'ENDFIELDS' toktype:i exptype:s bufid:'EXP_BUFF_ID_META'
(process_token) Before switch, bufid:'EXP_BUFF_ID_META'
(process_token) Buff id ENDFIELDS
(output_generic) [s,()] s ENDFIELDS exp_type:s
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=37 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=37 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:7 buf2 i:5
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"B:TEST"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_META                       ty:s qcty:U ' OPEN' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_LOGICALFILE                ty:s qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004   Fieldvar EXP_BUFF_ID_FIELDVAR                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N005   Fieldvar EXP_BUFF_ID_FIELDVAR                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N006   Fieldvar EXP_BUFF_ID_FIELDVAR                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  2: 5 4  nb 0:()
N007       Read EXP_BUFF_ID_META                       ty:s qcty:U 'ENDFIELDS' npar:0 nidx:0 trapped:0 %:0  2: 6 1  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing :"B:TEST"   *************
 (type_check_stack_push)  type_check_stack_push: '"B:TEST"'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: '"B:TEST"' type:2 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: '"B:TEST"' type:s (2), %:0
 (process_syntax_tree) *********Processing : OPEN   *************
 (type_check_stack_pop)   type_check_stack_pop: '"B:TEST"'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (type_check_stack_push)  type_check_stack_push: ' OPEN'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: ' OPEN' type:s (2), %:0
 (process_syntax_tree) *********Processing :C   *************
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: ' OPEN' type:s (2), %:0
 (type_check_stack_display) 001: 'C' type:s (2), %:0
 (process_syntax_tree) *********Processing :C.TEST   *************
 (type_check_stack_push)  type_check_stack_push: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print)  N004: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: ' OPEN' type:s (2), %:0
 (type_check_stack_display) 001: 'C' type:s (2), %:0
 (type_check_stack_display) 002: 'C.TEST' type:f (1), %:0
 (process_syntax_tree) *********Processing :C.SECOND   *************
 (type_check_stack_push)  type_check_stack_push: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (4)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print)  N004: 'C.TEST' type:1 %:0
 (type_check_stack_print)  N005: 'C.SECOND' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (4)
 (type_check_stack_display) 000: ' OPEN' type:s (2), %:0
 (type_check_stack_display) 001: 'C' type:s (2), %:0
 (type_check_stack_display) 002: 'C.TEST' type:f (1), %:0
 (type_check_stack_display) 003: 'C.SECOND' type:f (1), %:0
 (process_syntax_tree) *********Processing :C.THIRD   *************
 (type_check_stack_push)  type_check_stack_push: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (5)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print)  N004: 'C.TEST' type:1 %:0
 (type_check_stack_print)  N005: 'C.SECOND' type:1 %:0
 (type_check_stack_print)  N006: 'C.THIRD' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (5)
 (type_check_stack_display) 000: ' OPEN' type:s (2), %:0
 (type_check_stack_display) 001: 'C' type:s (2), %:0
 (type_check_stack_display) 002: 'C.TEST' type:f (1), %:0
 (type_check_stack_display) 003: 'C.SECOND' type:f (1), %:0
 (type_check_stack_display) 004: 'C.THIRD' type:f (1), %:0
 (process_syntax_tree) *********Processing :ENDFIELDS   *************
 (type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (4)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print)  N004: 'C.TEST' type:1 %:0
 (type_check_stack_print)  N005: 'C.SECOND' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print)  N004: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: ' OPEN'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE:"B:TEST"    **********
 (type_check_stack_push)  type_check_stack_push: '"B:TEST"'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: '"B:TEST"' type:2 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: '"B:TEST"' type:s (2), %:0
 (typecheck_expression)  *** BE: OPEN    **********
 (type_check_stack_pop)   type_check_stack_pop: '"B:TEST"'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (type_check_stack_push)  type_check_stack_push: ' OPEN'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: ' OPEN' type:s (2), %:0
 (typecheck_expression)  *** BE:C    **********
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: ' OPEN' type:s (2), %:0
 (type_check_stack_display) 001: 'C' type:s (2), %:0
 (typecheck_expression)  *** BE:C.TEST    **********
 (type_check_stack_push)  type_check_stack_push: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print)  N004: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: ' OPEN' type:s (2), %:0
 (type_check_stack_display) 001: 'C' type:s (2), %:0
 (type_check_stack_display) 002: 'C.TEST' type:f (1), %:0
 (typecheck_expression)  *** BE:C.SECOND    **********
 (type_check_stack_push)  type_check_stack_push: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (4)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print)  N004: 'C.TEST' type:1 %:0
 (type_check_stack_print)  N005: 'C.SECOND' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (4)
 (type_check_stack_display) 000: ' OPEN' type:s (2), %:0
 (type_check_stack_display) 001: 'C' type:s (2), %:0
 (type_check_stack_display) 002: 'C.TEST' type:f (1), %:0
 (type_check_stack_display) 003: 'C.SECOND' type:f (1), %:0
 (typecheck_expression)  *** BE:C.THIRD    **********
 (type_check_stack_push)  type_check_stack_push: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (5)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print)  N004: 'C.TEST' type:1 %:0
 (type_check_stack_print)  N005: 'C.SECOND' type:1 %:0
 (type_check_stack_print)  N006: 'C.THIRD' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (5)
 (type_check_stack_display) 000: ' OPEN' type:s (2), %:0
 (type_check_stack_display) 001: 'C' type:s (2), %:0
 (type_check_stack_display) 002: 'C.TEST' type:f (1), %:0
 (type_check_stack_display) 003: 'C.SECOND' type:f (1), %:0
 (type_check_stack_display) 004: 'C.THIRD' type:f (1), %:0
 (typecheck_expression)  *** BE:ENDFIELDS    **********
 (type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (4)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print)  N004: 'C.TEST' type:1 %:0
 (type_check_stack_print)  N005: 'C.SECOND' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print)  N004: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print)  N003: 'C' type:2 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: ' OPEN' type:2 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: ' OPEN'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"B:TEST"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_META                       ty:s qcty:U ' OPEN' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_LOGICALFILE                ty:s qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004   Fieldvar EXP_BUFF_ID_FIELDVAR                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N005   Fieldvar EXP_BUFF_ID_FIELDVAR                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N006   Fieldvar EXP_BUFF_ID_FIELDVAR                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N007       Read EXP_BUFF_ID_META                       ty:s qcty:U 'ENDFIELDS' npar:0 nidx:0 trapped:0 %:0  2: 6 1  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"B:TEST"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_META                       ty:s qcty:U ' OPEN' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_LOGICALFILE                ty:s qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004   Fieldvar EXP_BUFF_ID_FIELDVAR                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N005   Fieldvar EXP_BUFF_ID_FIELDVAR                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N006   Fieldvar EXP_BUFF_ID_FIELDVAR                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N007       Read EXP_BUFF_ID_META                       ty:s qcty:U 'ENDFIELDS' npar:0 nidx:0 trapped:0 %:0  2: 6 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) ("B:TEST")
infix_stack_push: '"B:TEST"'
 (infix_from_rpn) ( OPEN)
 (infix_from_rpn) (C)
 (infix_from_rpn) (C.TEST)
 (infix_from_rpn) (C.SECOND)
 (infix_from_rpn) (C.THIRD)
 (infix_from_rpn) (ENDFIELDS)
Done

infix_stack_pop: '"B:TEST"'
Infix stack result "B:TEST"
 (infix_from_rpn) exit  '"B:TEST"'
 (process_expression_types) ==B:TEST"==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:7 qcode_idx:000F
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (output_qcode_for_line) QC:0 String Literal '"B:TEST"' EXP_BUFF_ID_STR
 (set_qcode_header_byte_at) idx:000F len:1 val:24
 (set_qcode_header_byte_at) idx:0010 len:1 val:06
 (set_qcode_header_byte_at) idx:0011 len:1 val:42
 (set_qcode_header_byte_at) idx:0012 len:1 val:3A
 (set_qcode_header_byte_at) idx:0013 len:1 val:54
 (set_qcode_header_byte_at) idx:0014 len:1 val:45
 (set_qcode_header_byte_at) idx:0015 len:1 val:53
 (set_qcode_header_byte_at) idx:0016 len:1 val:54
 (output_qcode_for_line) QC: i:1
 (output_qcode_for_line) QC:META ' OPEN'
 (qcode_check_trapped)  OPEN: Trapped:0
 (set_qcode_header_byte_at) idx:0017 len:1 val:65
 (set_qcode_header_byte_at) idx:0018 len:1 val:02
 (set_qcode_header_byte_at) idx:0019 len:1 val:01
 (set_qcode_header_byte_at) idx:001A len:1 val:04
 (set_qcode_header_byte_at) idx:001B len:1 val:54
 (set_qcode_header_byte_at) idx:001C len:1 val:45
 (set_qcode_header_byte_at) idx:001D len:1 val:53
 (set_qcode_header_byte_at) idx:001E len:1 val:54
 (set_qcode_header_byte_at) idx:001F len:1 val:01
 (set_qcode_header_byte_at) idx:0020 len:1 val:06
 (set_qcode_header_byte_at) idx:0021 len:1 val:53
 (set_qcode_header_byte_at) idx:0022 len:1 val:45
 (set_qcode_header_byte_at) idx:0023 len:1 val:43
 (set_qcode_header_byte_at) idx:0024 len:1 val:4F
 (set_qcode_header_byte_at) idx:0025 len:1 val:4E
 (set_qcode_header_byte_at) idx:0026 len:1 val:44
 (set_qcode_header_byte_at) idx:0027 len:1 val:01
 (set_qcode_header_byte_at) idx:0028 len:1 val:05
 (set_qcode_header_byte_at) idx:0029 len:1 val:54
 (set_qcode_header_byte_at) idx:002A len:1 val:48
 (set_qcode_header_byte_at) idx:002B len:1 val:49
 (set_qcode_header_byte_at) idx:002C len:1 val:52
 (set_qcode_header_byte_at) idx:002D len:1 val:44
 (set_qcode_header_byte_at) idx:002E len:1 val:88
 (finalise_expression) Finalise expression done.
open "B:TEST", C, test, second, third
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=37 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=37 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=37 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'c' (99)
 (is_all_spaces) cline[1] = '.' (46)
 (is_all_spaces) cline[2] = 't' (116)
 (is_all_spaces) cline[3] = 'e' (101)
 (is_all_spaces) cline[4] = 's' (115)
 (is_all_spaces) cline[5] = 't' (116)
 (is_all_spaces) cline[6] = ' ' (32)
 (is_all_spaces) cline[7] = '=' (61)
 (is_all_spaces) cline[8] = ' ' (32)
 (is_all_spaces) cline[9] = '3' (51)
 (is_all_spaces) cline[10] = '4' (52)
 (is_all_spaces) cline[11] = '.' (46)
 (is_all_spaces) cline[12] = '2' (50)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'c.test = 34.2'
*****************
**c.test = 34.2**
*****************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'c.test = 34.2'
 (check_literal) check_literal:After drop space:'REM' idx=0 'c.test = 34.2'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'c.test = 34.2'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'c.test = 34.2'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'c.test = 34.2'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'c.test = 34.2'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'c.test = 34.2'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'c.test = 34.2'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'c.test = 34.2'

   (check_operator) 'c.test = 34.2' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'c.test = 34.2':
   (check_vname) check_vname ret1 ' = 34.2':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' = 34.2'

   (check_literal) check_literal:lit='(' idx=6 ' = 34.2'
   (check_literal) check_literal:After drop space:'(' idx=6 ' = 34.2'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=6 ' = 34.2'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=7 '= 34.2'
 (check_literal) check_literal:After while(): 34.2
 (check_literal) ret1 Match. ' =' == ' = 34.2'

 (check_expression) ' 34.2'

  (check_eitem) check_eitem: '34.2'

   (check_function)  '34.2'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=9 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '34.2'
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=9 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=9 '34.2'
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'34.2' float:3.420000e+01
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (check_operator) '' igncomma:0
  (check_operator) ret0:is comma: 0
 (check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'c.test = 34.2' ref_ndeclare:1

   (scan_vname) scan_vname: 'c.test = 34.2'
   (scan_vname) scan_vname: ret1 'c.test'
  (scan_variable) scan_variable: ' = 34.2' vname='C.TEST'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'C.TEST' is not other keyword
  (scan_variable) Array test ' = 34.2'

   (check_literal) check_literal:lit='(' idx=6 ' = 34.2'
   (check_literal) check_literal:After drop space:'(' idx=6 ' = 34.2'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='C.TEST' Float
 (process_token)    Frst:1 T:'C.TEST' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'C.TEST'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.TEST is not function
token_is_variable: tok:'C.TEST'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.TEST is not function
(init_get_name) 
init_get_name:'C.TEST'
(init_get_name) 
init_get_name:'C.TEST'
(get_name) 
get_name:gn:'C.TEST'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C.TEST
(add_var_info) Name:C.TEST Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '            C.TEST'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' ' = 34.2'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= 34.2'
 (scan_assignment_equals) scan_assignment_equals:while loop:= 34.2
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' 34.2' igncomma:0

  (check_eitem) check_eitem: '34.2'

   (check_function)  '34.2'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=9 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '34.2'
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=9 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=9 '34.2'
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'34.2' float:3.420000e+01
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (scan_eitem) scan_eitem:

   (check_function)  '34.2'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=9 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '34.2'
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=9 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=9 '34.2'
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'34.2' float:3.420000e+01
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=9 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '34.2'
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=9 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=9 '34.2'
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'34.2' float:3.420000e+01
     (check_float) check_float: ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'34.2' float:3.420000e+01
     (check_float) check_float: ret1

     (scan_float) scan_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (scan_float) Fltval:'34.2' float:3.420000e+01
     (scan_float) scan_float: ret1
    (process_token)    Frst:0 T:'34.2' toktype:i exptype:f bufid:'EXP_BUFF_ID_FLT'
    (operator_precedence) 
:= is operator
    (process_token) Before switch, bufid:'EXP_BUFF_ID_FLT'
modify_expression_type:Inittype:f Intype:f Outtype:f
(    output_float) [f,()] f 34.2
    (scan_atom) ret1
   (scan_expression) '' Before while igncomma:0

    (check_operator) '' igncomma:0
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 '' commas:0
  (add_var_info) Name:C.TEST Idx:-1
  (add_var_info) Already present
  (add_var_info)   reference so OK
  (scan_assignment) scan_assignment: ret1
 (scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=13 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=13 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:2 buf2 i:7
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '34.2' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing :C.TEST   *************
 (type_check_stack_push)  type_check_stack_push: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'C.TEST' type:f (1), %:0
 (process_syntax_tree) *********Processing :34.2   *************
 (type_check_stack_push)  type_check_stack_push: '34.2'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'C.TEST' type:1 %:0
 (type_check_stack_print)  N002: '34.2' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'C.TEST' type:f (1), %:0
 (type_check_stack_display) 001: '34.2' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '34.2'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (34.2) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE:C.TEST    **********
 (type_check_stack_push)  type_check_stack_push: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'C.TEST' type:f (1), %:0
 (typecheck_expression)  *** BE:34.2    **********
 (type_check_stack_push)  type_check_stack_push: '34.2'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'C.TEST' type:1 %:0
 (type_check_stack_print)  N002: '34.2' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'C.TEST' type:f (1), %:0
 (type_check_stack_display) 001: '34.2' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '34.2'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '34.2' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '34.2' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (C.TEST)
Var: C.TEST Float NumIdx:0
infix_stack_push: 'C.TEST'
 (infix_from_rpn) (34.2)
infix_stack_push: '34.2'
 (infix_from_rpn) (:=)
infix_stack_pop: '34.2'
infix_stack_pop: 'C.TEST'
infix_stack_push: '(C.TEST := 34.2)'
Done

infix_stack_pop: '(C.TEST := 34.2)'
Infix stack result (C.TEST := 34.2)
 (infix_from_rpn) exit  'C.TEST := 34.2'
 (process_expression_types) ==C.TEST := 34.2==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:3 qcode_idx:002F
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (set_qcode_header_byte_at) idx:002F len:1 val:24
 (set_qcode_header_byte_at) idx:0030 len:1 val:04
 (set_qcode_header_byte_at) idx:0031 len:1 val:54
 (set_qcode_header_byte_at) idx:0032 len:1 val:45
 (set_qcode_header_byte_at) idx:0033 len:1 val:53
 (set_qcode_header_byte_at) idx:0034 len:1 val:54
 (set_qcode_header_byte_at) idx:0035 len:1 val:1E
 (set_qcode_header_byte_at) idx:0036 len:1 val:02
 (output_qcode_for_line) QC: i:1
 (set_qcode_header_byte_at) idx:0037 len:1 val:23
 (convert_to_compact_float) INPUT:Idx:56 fltstr:'34.2'
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) Exponent:0
 (convert_to_compact_float) Idx:56 fltstr:'34.2'
 (convert_to_compact_float) Sign:0 start:0
 (convert_to_compact_float) Normalising:'34.2'
 (convert_to_compact_float) Need to make smaller
 (convert_to_compact_float) normalised='342'
 (convert_to_compact_float) Drop trailing zeros
 (convert_to_compact_float) normalised='342'
 (convert_to_compact_float) After adding zero back for odd number of digits: normalised='3420'
 (set_qcode_header_byte_at) idx:0038 len:1 val:03
 (convert_to_compact_float) 20
 (set_qcode_header_byte_at) idx:0039 len:1 val:20
 (convert_to_compact_float) 34
 (set_qcode_header_byte_at) idx:003A len:1 val:34
 (set_qcode_header_byte_at) idx:003B len:1 val:01
 (convert_to_compact_float) RESULT: Input:'34.2' Norm mant:'3420' Sign:0 Exponent:1
 (output_qcode_for_line) QC: i:2
 (add_simple_qcode) ':='
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (add_simple_qcode) NULL vi
 (qcode_check_trapped) :=: Trapped:0
 (set_qcode_header_byte_at) idx:003C len:1 val:80
 (finalise_expression) Finalise expression done.
c.test = 34.2
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=13 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=13 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=13 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'c' (99)
 (is_all_spaces) cline[1] = '.' (46)
 (is_all_spaces) cline[2] = 's' (115)
 (is_all_spaces) cline[3] = 'e' (101)
 (is_all_spaces) cline[4] = 'c' (99)
 (is_all_spaces) cline[5] = 'o' (111)
 (is_all_spaces) cline[6] = 'n' (110)
 (is_all_spaces) cline[7] = 'd' (100)
 (is_all_spaces) cline[8] = ' ' (32)
 (is_all_spaces) cline[9] = '=' (61)
 (is_all_spaces) cline[10] = ' ' (32)
 (is_all_spaces) cline[11] = '1' (49)
 (is_all_spaces) cline[12] = '2' (50)
 (is_all_spaces) cline[13] = '3' (51)
 (is_all_spaces) cline[14] = '4' (52)
 (is_all_spaces) cline[15] = '.' (46)
 (is_all_spaces) cline[16] = '5' (53)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'c.second = 1234.5'
*********************
**c.second = 1234.5**
*********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'c.second = 1234.5'
 (check_literal) check_literal:After drop space:'REM' idx=0 'c.second = 1234.5'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'c.second = 1234.5'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'c.second = 1234.5'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'c.second = 1234.5'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'c.second = 1234.5'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'c.second = 1234.5'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'c.second = 1234.5'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'c.second = 1234.5'

   (check_operator) 'c.second = 1234.5' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'c.second = 1234.5':
   (check_vname) check_vname ret1 ' = 1234.5':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' = 1234.5'

   (check_literal) check_literal:lit='(' idx=8 ' = 1234.5'
   (check_literal) check_literal:After drop space:'(' idx=8 ' = 1234.5'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=8 ' = 1234.5'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=9 '= 1234.5'
 (check_literal) check_literal:After while(): 1234.5
 (check_literal) ret1 Match. ' =' == ' = 1234.5'

 (check_expression) ' 1234.5'

  (check_eitem) check_eitem: '1234.5'

   (check_function)  '1234.5'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=11 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=11 '1234.5'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=11 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=11 '1234.5'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1234.5' float:1.234500e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (check_operator) '' igncomma:0
  (check_operator) ret0:is comma: 0
 (check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'c.second = 1234.5' ref_ndeclare:1

   (scan_vname) scan_vname: 'c.second = 1234.5'
   (scan_vname) scan_vname: ret1 'c.second'
  (scan_variable) scan_variable: ' = 1234.5' vname='C.SECOND'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'C.SECOND' is not other keyword
  (scan_variable) Array test ' = 1234.5'

   (check_literal) check_literal:lit='(' idx=8 ' = 1234.5'
   (check_literal) check_literal:After drop space:'(' idx=8 ' = 1234.5'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='C.SECOND' Float
 (process_token)    Frst:1 T:'C.SECOND' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'C.SECOND'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.SECOND is not function
token_is_variable: tok:'C.SECOND'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.SECOND is not function
(init_get_name) 
init_get_name:'C.SECOND'
(init_get_name) 
init_get_name:'C.SECOND'
(get_name) 
get_name:gn:'C.SECOND'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C.SECOND
(add_var_info) Name:C.SECOND Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '          C.SECOND'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' ' = 1234.5'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= 1234.5'
 (scan_assignment_equals) scan_assignment_equals:while loop:= 1234.5
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' 1234.5' igncomma:0

  (check_eitem) check_eitem: '1234.5'

   (check_function)  '1234.5'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=11 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=11 '1234.5'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=11 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=11 '1234.5'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1234.5' float:1.234500e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (scan_eitem) scan_eitem:

   (check_function)  '1234.5'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=11 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=11 '1234.5'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=11 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=11 '1234.5'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1234.5' float:1.234500e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=11 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=11 '1234.5'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=11 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=11 '1234.5'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1234.5' float:1.234500e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1234.5' float:1.234500e+03
     (check_float) check_float: ret1

     (scan_float) scan_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (scan_float) Fltval:'1234.5' float:1.234500e+03
     (scan_float) scan_float: ret1
    (process_token)    Frst:0 T:'1234.5' toktype:i exptype:f bufid:'EXP_BUFF_ID_FLT'
    (operator_precedence) 
:= is operator
    (process_token) Before switch, bufid:'EXP_BUFF_ID_FLT'
modify_expression_type:Inittype:f Intype:f Outtype:f
(    output_float) [f,()] f 1234.5
    (scan_atom) ret1
   (scan_expression) '' Before while igncomma:0

    (check_operator) '' igncomma:0
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 '' commas:0
  (add_var_info) Name:C.SECOND Idx:-1
  (add_var_info) Already present
  (add_var_info)   reference so OK
  (scan_assignment) scan_assignment: ret1
 (scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=17 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=17 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:2 buf2 i:3
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1234.5' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing :C.SECOND   *************
 (type_check_stack_push)  type_check_stack_push: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'C.SECOND' type:f (1), %:0
 (process_syntax_tree) *********Processing :1234.5   *************
 (type_check_stack_push)  type_check_stack_push: '1234.5'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
 (type_check_stack_print)  N002: '1234.5' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'C.SECOND' type:f (1), %:0
 (type_check_stack_display) 001: '1234.5' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '1234.5'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (1234.5) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE:C.SECOND    **********
 (type_check_stack_push)  type_check_stack_push: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'C.SECOND' type:f (1), %:0
 (typecheck_expression)  *** BE:1234.5    **********
 (type_check_stack_push)  type_check_stack_push: '1234.5'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
 (type_check_stack_print)  N002: '1234.5' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'C.SECOND' type:f (1), %:0
 (type_check_stack_display) 001: '1234.5' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '1234.5'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1234.5' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1234.5' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (C.SECOND)
Var: C.SECOND Float NumIdx:0
infix_stack_push: 'C.SECOND'
 (infix_from_rpn) (1234.5)
infix_stack_push: '1234.5'
 (infix_from_rpn) (:=)
infix_stack_pop: '1234.5'
infix_stack_pop: 'C.SECOND'
infix_stack_push: '(C.SECOND := 1234.5)'
Done

infix_stack_pop: '(C.SECOND := 1234.5)'
Infix stack result (C.SECOND := 1234.5)
 (infix_from_rpn) exit  'C.SECOND := 1234.5'
 (process_expression_types) ==C.SECOND := 1234.5==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:3 qcode_idx:003D
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (set_qcode_header_byte_at) idx:003D len:1 val:24
 (set_qcode_header_byte_at) idx:003E len:1 val:06
 (set_qcode_header_byte_at) idx:003F len:1 val:53
 (set_qcode_header_byte_at) idx:0040 len:1 val:45
 (set_qcode_header_byte_at) idx:0041 len:1 val:43
 (set_qcode_header_byte_at) idx:0042 len:1 val:4F
 (set_qcode_header_byte_at) idx:0043 len:1 val:4E
 (set_qcode_header_byte_at) idx:0044 len:1 val:44
 (set_qcode_header_byte_at) idx:0045 len:1 val:1E
 (set_qcode_header_byte_at) idx:0046 len:1 val:02
 (output_qcode_for_line) QC: i:1
 (set_qcode_header_byte_at) idx:0047 len:1 val:23
 (convert_to_compact_float) INPUT:Idx:72 fltstr:'1234.5'
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) Exponent:0
 (convert_to_compact_float) Idx:72 fltstr:'1234.5'
 (convert_to_compact_float) Sign:0 start:0
 (convert_to_compact_float) Normalising:'1234.5'
 (convert_to_compact_float) Need to make smaller
 (convert_to_compact_float) normalised='12345'
 (convert_to_compact_float) Drop trailing zeros
 (convert_to_compact_float) normalised='12345'
 (convert_to_compact_float) After adding zero back for odd number of digits: normalised='123450'
 (set_qcode_header_byte_at) idx:0048 len:1 val:04
 (convert_to_compact_float) 50
 (set_qcode_header_byte_at) idx:0049 len:1 val:50
 (convert_to_compact_float) 34
 (set_qcode_header_byte_at) idx:004A len:1 val:34
 (convert_to_compact_float) 12
 (set_qcode_header_byte_at) idx:004B len:1 val:12
 (set_qcode_header_byte_at) idx:004C len:1 val:03
 (convert_to_compact_float) RESULT: Input:'1234.5' Norm mant:'123450' Sign:0 Exponent:3
 (output_qcode_for_line) QC: i:2
 (add_simple_qcode) ':='
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (add_simple_qcode) NULL vi
 (qcode_check_trapped) :=: Trapped:0
 (set_qcode_header_byte_at) idx:004D len:1 val:80
 (finalise_expression) Finalise expression done.
c.second = 1234.5
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=17 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=17 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=17 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'c' (99)
 (is_all_spaces) cline[1] = '.' (46)
 (is_all_spaces) cline[2] = 't' (116)
 (is_all_spaces) cline[3] = 'h' (104)
 (is_all_spaces) cline[4] = 'i' (105)
 (is_all_spaces) cline[5] = 'r' (114)
 (is_all_spaces) cline[6] = 'd' (100)
 (is_all_spaces) cline[7] = ' ' (32)
 (is_all_spaces) cline[8] = ' ' (32)
 (is_all_spaces) cline[9] = '=' (61)
 (is_all_spaces) cline[10] = ' ' (32)
 (is_all_spaces) cline[11] = '1' (49)
 (is_all_spaces) cline[12] = '.' (46)
 (is_all_spaces) cline[13] = '3' (51)
 (is_all_spaces) cline[14] = '3' (51)
 (is_all_spaces) cline[15] = '3' (51)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'c.third  = 1.333'
********************
**c.third  = 1.333**
********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'c.third  = 1.333'
 (check_literal) check_literal:After drop space:'REM' idx=0 'c.third  = 1.333'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'c.third  = 1.333'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'c.third  = 1.333'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'c.third  = 1.333'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'c.third  = 1.333'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'c.third  = 1.333'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'c.third  = 1.333'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'c.third  = 1.333'

   (check_operator) 'c.third  = 1.333' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'c.third  = 1.333':
   (check_vname) check_vname ret1 '  = 1.333':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '  = 1.333'

   (check_literal) check_literal:lit='(' idx=7 '  = 1.333'
   (check_literal) check_literal:After drop space:'(' idx=7 '  = 1.333'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=7 '  = 1.333'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=9 '= 1.333'
 (check_literal) check_literal:After while(): 1.333
 (check_literal) ret1 Match. ' =' == '  = 1.333'

 (check_expression) ' 1.333'

  (check_eitem) check_eitem: '1.333'

   (check_function)  '1.333'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=11 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=11 '1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=11 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=11 '1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (check_operator) '' igncomma:0
  (check_operator) ret0:is comma: 0
 (check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'c.third  = 1.333' ref_ndeclare:1

   (scan_vname) scan_vname: 'c.third  = 1.333'
   (scan_vname) scan_vname: ret1 'c.third'
  (scan_variable) scan_variable: '  = 1.333' vname='C.THIRD'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'C.THIRD' is not other keyword
  (scan_variable) Array test '  = 1.333'

   (check_literal) check_literal:lit='(' idx=7 '  = 1.333'
   (check_literal) check_literal:After drop space:'(' idx=7 '  = 1.333'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='C.THIRD' Float
 (process_token)    Frst:1 T:'C.THIRD' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'C.THIRD'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.THIRD is not function
token_is_variable: tok:'C.THIRD'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.THIRD is not function
(init_get_name) 
init_get_name:'C.THIRD'
(init_get_name) 
init_get_name:'C.THIRD'
(get_name) 
get_name:gn:'C.THIRD'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C.THIRD
(add_var_info) Name:C.THIRD Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '           C.THIRD'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' '  = 1.333'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= 1.333'
 (scan_assignment_equals) scan_assignment_equals:while loop:= 1.333
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' 1.333' igncomma:0

  (check_eitem) check_eitem: '1.333'

   (check_function)  '1.333'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=11 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=11 '1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=11 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=11 '1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (scan_eitem) scan_eitem:

   (check_function)  '1.333'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=11 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=11 '1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=11 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=11 '1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=11 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=11 '1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=11 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=11 '1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1

     (scan_float) scan_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (scan_float) Fltval:'1.333' float:1.333000e+00
     (scan_float) scan_float: ret1
    (process_token)    Frst:0 T:'1.333' toktype:i exptype:f bufid:'EXP_BUFF_ID_FLT'
    (operator_precedence) 
:= is operator
    (process_token) Before switch, bufid:'EXP_BUFF_ID_FLT'
modify_expression_type:Inittype:f Intype:f Outtype:f
(    output_float) [f,()] f 1.333
    (scan_atom) ret1
   (scan_expression) '' Before while igncomma:0

    (check_operator) '' igncomma:0
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 '' commas:0
  (add_var_info) Name:C.THIRD Idx:-1
  (add_var_info) Already present
  (add_var_info)   reference so OK
  (scan_assignment) scan_assignment: ret1
 (scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:2 buf2 i:3
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1.333' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing :C.THIRD   *************
 (type_check_stack_push)  type_check_stack_push: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.THIRD' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'C.THIRD' type:f (1), %:0
 (process_syntax_tree) *********Processing :1.333   *************
 (type_check_stack_push)  type_check_stack_push: '1.333'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'C.THIRD' type:1 %:0
 (type_check_stack_print)  N002: '1.333' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'C.THIRD' type:f (1), %:0
 (type_check_stack_display) 001: '1.333' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '1.333'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.THIRD' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (1.333) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE:C.THIRD    **********
 (type_check_stack_push)  type_check_stack_push: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.THIRD' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'C.THIRD' type:f (1), %:0
 (typecheck_expression)  *** BE:1.333    **********
 (type_check_stack_push)  type_check_stack_push: '1.333'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'C.THIRD' type:1 %:0
 (type_check_stack_print)  N002: '1.333' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'C.THIRD' type:f (1), %:0
 (type_check_stack_display) 001: '1.333' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '1.333'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C.THIRD' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1.333' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1.333' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (C.THIRD)
Var: C.THIRD Float NumIdx:0
infix_stack_push: 'C.THIRD'
 (infix_from_rpn) (1.333)
infix_stack_push: '1.333'
 (infix_from_rpn) (:=)
infix_stack_pop: '1.333'
infix_stack_pop: 'C.THIRD'
infix_stack_push: '(C.THIRD := 1.333)'
Done

infix_stack_pop: '(C.THIRD := 1.333)'
Infix stack result (C.THIRD := 1.333)
 (infix_from_rpn) exit  'C.THIRD := 1.333'
 (process_expression_types) ==C.THIRD := 1.333==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:3 qcode_idx:004E
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (set_qcode_header_byte_at) idx:004E len:1 val:24
 (set_qcode_header_byte_at) idx:004F len:1 val:05
 (set_qcode_header_byte_at) idx:0050 len:1 val:54
 (set_qcode_header_byte_at) idx:0051 len:1 val:48
 (set_qcode_header_byte_at) idx:0052 len:1 val:49
 (set_qcode_header_byte_at) idx:0053 len:1 val:52
 (set_qcode_header_byte_at) idx:0054 len:1 val:44
 (set_qcode_header_byte_at) idx:0055 len:1 val:1E
 (set_qcode_header_byte_at) idx:0056 len:1 val:02
 (output_qcode_for_line) QC: i:1
 (set_qcode_header_byte_at) idx:0057 len:1 val:23
 (convert_to_compact_float) INPUT:Idx:88 fltstr:'1.333'
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) Exponent:0
 (convert_to_compact_float) Idx:88 fltstr:'1.333'
 (convert_to_compact_float) Sign:0 start:0
 (convert_to_compact_float) Normalising:'1.333'
 (convert_to_compact_float) Need to make smaller
 (convert_to_compact_float) normalised='1333'
 (convert_to_compact_float) Drop trailing zeros
 (convert_to_compact_float) normalised='1333'
 (convert_to_compact_float) After adding zero back for odd number of digits: normalised='1333'
 (set_qcode_header_byte_at) idx:0058 len:1 val:03
 (convert_to_compact_float) 33
 (set_qcode_header_byte_at) idx:0059 len:1 val:33
 (convert_to_compact_float) 13
 (set_qcode_header_byte_at) idx:005A len:1 val:13
 (set_qcode_header_byte_at) idx:005B len:1 val:00
 (convert_to_compact_float) RESULT: Input:'1.333' Norm mant:'1333' Sign:0 Exponent:0
 (output_qcode_for_line) QC: i:2
 (add_simple_qcode) ':='
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (add_simple_qcode) NULL vi
 (qcode_check_trapped) :=: Trapped:0
 (set_qcode_header_byte_at) idx:005C len:1 val:80
 (finalise_expression) Finalise expression done.
c.third  = 1.333
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=16 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=16 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'a' (97)
 (is_all_spaces) cline[1] = ' ' (32)
 (is_all_spaces) cline[2] = '=' (61)
 (is_all_spaces) cline[3] = ' ' (32)
 (is_all_spaces) cline[4] = '3' (51)
 (is_all_spaces) cline[5] = '4' (52)
 (is_all_spaces) cline[6] = '.' (46)
 (is_all_spaces) cline[7] = '2' (50)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'a = 34.2'
************
**a = 34.2**
************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'a = 34.2'
 (check_literal) check_literal:After drop space:'REM' idx=0 'a = 34.2'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'a = 34.2'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'a = 34.2'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'a = 34.2'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'a = 34.2'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'a = 34.2'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'a = 34.2'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'a = 34.2'

   (check_operator) 'a = 34.2' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'a = 34.2':
   (check_vname) check_vname ret1 ' = 34.2':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' = 34.2'

   (check_literal) check_literal:lit='(' idx=1 ' = 34.2'
   (check_literal) check_literal:After drop space:'(' idx=1 ' = 34.2'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=1 ' = 34.2'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=2 '= 34.2'
 (check_literal) check_literal:After while(): 34.2
 (check_literal) ret1 Match. ' =' == ' = 34.2'

 (check_expression) ' 34.2'

  (check_eitem) check_eitem: '34.2'

   (check_function)  '34.2'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=4 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 '34.2'
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=4 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 '34.2'
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'34.2' float:3.420000e+01
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (check_operator) '' igncomma:0
  (check_operator) ret0:is comma: 0
 (check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'a = 34.2' ref_ndeclare:1

   (scan_vname) scan_vname: 'a = 34.2'
   (scan_vname) scan_vname: ret1 'a'
  (scan_variable) scan_variable: ' = 34.2' vname='A'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'A' is not other keyword
  (scan_variable) Array test ' = 34.2'

   (check_literal) check_literal:lit='(' idx=1 ' = 34.2'
   (check_literal) check_literal:After drop space:'(' idx=1 ' = 34.2'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='A' Float
 (process_token)    Frst:1 T:'A' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'A'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f A
(add_var_info) Name:A Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 A'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' ' = 34.2'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= 34.2'
 (scan_assignment_equals) scan_assignment_equals:while loop:= 34.2
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' 34.2' igncomma:0

  (check_eitem) check_eitem: '34.2'

   (check_function)  '34.2'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=4 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 '34.2'
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=4 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 '34.2'
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'34.2' float:3.420000e+01
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (scan_eitem) scan_eitem:

   (check_function)  '34.2'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=4 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 '34.2'
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=4 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 '34.2'
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'34.2' float:3.420000e+01
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=4 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 '34.2'
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=4 '34.2'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 '34.2'
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'34.2' float:3.420000e+01
     (check_float) check_float: ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'34.2' float:3.420000e+01
     (check_float) check_float: ret1

     (scan_float) scan_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (scan_float) Fltval:'34.2' float:3.420000e+01
     (scan_float) scan_float: ret1
    (process_token)    Frst:0 T:'34.2' toktype:i exptype:f bufid:'EXP_BUFF_ID_FLT'
    (operator_precedence) 
:= is operator
    (process_token) Before switch, bufid:'EXP_BUFF_ID_FLT'
modify_expression_type:Inittype:f Intype:f Outtype:f
(    output_float) [f,()] f 34.2
    (scan_atom) ret1
   (scan_expression) '' Before while igncomma:0

    (check_operator) '' igncomma:0
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 '' commas:0
  (add_var_info) Name:A Idx:-1
  (add_var_info) Already present
  (add_var_info)   reference so OK
  (scan_assignment) scan_assignment: ret1
 (scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:2 buf2 i:3
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '34.2' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing :A   *************
 (type_check_stack_push)  type_check_stack_push: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (process_syntax_tree) *********Processing :34.2   *************
 (type_check_stack_push)  type_check_stack_push: '34.2'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'A' type:1 %:0
 (type_check_stack_print)  N002: '34.2' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (type_check_stack_display) 001: '34.2' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '34.2'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (34.2) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE:A    **********
 (type_check_stack_push)  type_check_stack_push: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (typecheck_expression)  *** BE:34.2    **********
 (type_check_stack_push)  type_check_stack_push: '34.2'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'A' type:1 %:0
 (type_check_stack_print)  N002: '34.2' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'A' type:f (1), %:0
 (type_check_stack_display) 001: '34.2' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '34.2'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '34.2' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '34.2' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (A)
Var: A Float NumIdx:0
infix_stack_push: 'A'
 (infix_from_rpn) (34.2)
infix_stack_push: '34.2'
 (infix_from_rpn) (:=)
infix_stack_pop: '34.2'
infix_stack_pop: 'A'
infix_stack_push: '(A := 34.2)'
Done

infix_stack_pop: '(A := 34.2)'
Infix stack result (A := 34.2)
 (infix_from_rpn) exit  'A := 34.2'
 (process_expression_types) ==A := 34.2==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:3 qcode_idx:005D
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (add_simple_qcode) 'A'
 (add_simple_qcode) Op type:f op access:Write qcode_type:U
 (qcode_check_trapped) A: Trapped:0
 (set_qcode_header_byte_at) idx:005D len:1 val:0E
 (set_qcode_header_byte_at) idx:005E len:1 val:FF
 (set_qcode_header_byte_at) idx:005F len:1 val:EE
 (output_qcode_for_line) QC: i:1
 (set_qcode_header_byte_at) idx:0060 len:1 val:23
 (convert_to_compact_float) INPUT:Idx:97 fltstr:'34.2'
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) Exponent:0
 (convert_to_compact_float) Idx:97 fltstr:'34.2'
 (convert_to_compact_float) Sign:0 start:0
 (convert_to_compact_float) Normalising:'34.2'
 (convert_to_compact_float) Need to make smaller
 (convert_to_compact_float) normalised='342'
 (convert_to_compact_float) Drop trailing zeros
 (convert_to_compact_float) normalised='342'
 (convert_to_compact_float) After adding zero back for odd number of digits: normalised='3420'
 (set_qcode_header_byte_at) idx:0061 len:1 val:03
 (convert_to_compact_float) 20
 (set_qcode_header_byte_at) idx:0062 len:1 val:20
 (convert_to_compact_float) 34
 (set_qcode_header_byte_at) idx:0063 len:1 val:34
 (set_qcode_header_byte_at) idx:0064 len:1 val:01
 (convert_to_compact_float) RESULT: Input:'34.2' Norm mant:'3420' Sign:0 Exponent:1
 (output_qcode_for_line) QC: i:2
 (add_simple_qcode) ':='
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) :=: Trapped:0
 (set_qcode_header_byte_at) idx:0065 len:1 val:80
 (finalise_expression) Finalise expression done.
a = 34.2
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=8 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=8 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=8 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'b' (98)
 (is_all_spaces) cline[1] = ' ' (32)
 (is_all_spaces) cline[2] = '=' (61)
 (is_all_spaces) cline[3] = ' ' (32)
 (is_all_spaces) cline[4] = '1' (49)
 (is_all_spaces) cline[5] = '2' (50)
 (is_all_spaces) cline[6] = '3' (51)
 (is_all_spaces) cline[7] = '4' (52)
 (is_all_spaces) cline[8] = '.' (46)
 (is_all_spaces) cline[9] = '5' (53)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'b = 1234.5'
**************
**b = 1234.5**
**************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'b = 1234.5'
 (check_literal) check_literal:After drop space:'REM' idx=0 'b = 1234.5'
 (check_literal)   'R' != 'b'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'b = 1234.5'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'b = 1234.5'
 (check_literal)   'R' != 'b'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'b = 1234.5'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'b = 1234.5'
 (check_literal)   'R' != 'b'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'b = 1234.5'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'b = 1234.5'
 (check_literal)   'R' != 'b'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'b = 1234.5'

   (check_operator) 'b = 1234.5' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'b = 1234.5':
   (check_vname) check_vname ret1 ' = 1234.5':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' = 1234.5'

   (check_literal) check_literal:lit='(' idx=1 ' = 1234.5'
   (check_literal) check_literal:After drop space:'(' idx=1 ' = 1234.5'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=1 ' = 1234.5'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=2 '= 1234.5'
 (check_literal) check_literal:After while(): 1234.5
 (check_literal) ret1 Match. ' =' == ' = 1234.5'

 (check_expression) ' 1234.5'

  (check_eitem) check_eitem: '1234.5'

   (check_function)  '1234.5'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=4 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 '1234.5'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=4 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 '1234.5'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1234.5' float:1.234500e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (check_operator) '' igncomma:0
  (check_operator) ret0:is comma: 0
 (check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'b = 1234.5' ref_ndeclare:1

   (scan_vname) scan_vname: 'b = 1234.5'
   (scan_vname) scan_vname: ret1 'b'
  (scan_variable) scan_variable: ' = 1234.5' vname='B'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'B' is not other keyword
  (scan_variable) Array test ' = 1234.5'

   (check_literal) check_literal:lit='(' idx=1 ' = 1234.5'
   (check_literal) check_literal:After drop space:'(' idx=1 ' = 1234.5'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='B' Float
 (process_token)    Frst:1 T:'B' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'B'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f B
(add_var_info) Name:B Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 B'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' ' = 1234.5'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= 1234.5'
 (scan_assignment_equals) scan_assignment_equals:while loop:= 1234.5
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' 1234.5' igncomma:0

  (check_eitem) check_eitem: '1234.5'

   (check_function)  '1234.5'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=4 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 '1234.5'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=4 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 '1234.5'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1234.5' float:1.234500e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (scan_eitem) scan_eitem:

   (check_function)  '1234.5'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=4 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 '1234.5'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=4 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 '1234.5'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1234.5' float:1.234500e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=4 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 '1234.5'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=4 '1234.5'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 '1234.5'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1234.5' float:1.234500e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1234.5' float:1.234500e+03
     (check_float) check_float: ret1

     (scan_float) scan_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (scan_float) Fltval:'1234.5' float:1.234500e+03
     (scan_float) scan_float: ret1
    (process_token)    Frst:0 T:'1234.5' toktype:i exptype:f bufid:'EXP_BUFF_ID_FLT'
    (operator_precedence) 
:= is operator
    (process_token) Before switch, bufid:'EXP_BUFF_ID_FLT'
modify_expression_type:Inittype:f Intype:f Outtype:f
(    output_float) [f,()] f 1234.5
    (scan_atom) ret1
   (scan_expression) '' Before while igncomma:0

    (check_operator) '' igncomma:0
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 '' commas:0
  (add_var_info) Name:B Idx:-1
  (add_var_info) Already present
  (add_var_info)   reference so OK
  (scan_assignment) scan_assignment: ret1
 (scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=10 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=10 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:2 buf2 i:3
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1234.5' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing :B   *************
 (type_check_stack_push)  type_check_stack_push: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'B' type:f (1), %:0
 (process_syntax_tree) *********Processing :1234.5   *************
 (type_check_stack_push)  type_check_stack_push: '1234.5'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'B' type:1 %:0
 (type_check_stack_print)  N002: '1234.5' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'B' type:f (1), %:0
 (type_check_stack_display) 001: '1234.5' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '1234.5'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (1234.5) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE:B    **********
 (type_check_stack_push)  type_check_stack_push: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'B' type:f (1), %:0
 (typecheck_expression)  *** BE:1234.5    **********
 (type_check_stack_push)  type_check_stack_push: '1234.5'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'B' type:1 %:0
 (type_check_stack_print)  N002: '1234.5' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'B' type:f (1), %:0
 (type_check_stack_display) 001: '1234.5' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '1234.5'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1234.5' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1234.5' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
 (infix_from_rpn) (1234.5)
infix_stack_push: '1234.5'
 (infix_from_rpn) (:=)
infix_stack_pop: '1234.5'
infix_stack_pop: 'B'
infix_stack_push: '(B := 1234.5)'
Done

infix_stack_pop: '(B := 1234.5)'
Infix stack result (B := 1234.5)
 (infix_from_rpn) exit  'B := 1234.5'
 (process_expression_types) ==B := 1234.5==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:3 qcode_idx:0066
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (add_simple_qcode) 'B'
 (add_simple_qcode) Op type:f op access:Write qcode_type:U
 (qcode_check_trapped) B: Trapped:0
 (set_qcode_header_byte_at) idx:0066 len:1 val:0E
 (set_qcode_header_byte_at) idx:0067 len:1 val:FF
 (set_qcode_header_byte_at) idx:0068 len:1 val:E6
 (output_qcode_for_line) QC: i:1
 (set_qcode_header_byte_at) idx:0069 len:1 val:23
 (convert_to_compact_float) INPUT:Idx:106 fltstr:'1234.5'
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) Exponent:0
 (convert_to_compact_float) Idx:106 fltstr:'1234.5'
 (convert_to_compact_float) Sign:0 start:0
 (convert_to_compact_float) Normalising:'1234.5'
 (convert_to_compact_float) Need to make smaller
 (convert_to_compact_float) normalised='12345'
 (convert_to_compact_float) Drop trailing zeros
 (convert_to_compact_float) normalised='12345'
 (convert_to_compact_float) After adding zero back for odd number of digits: normalised='123450'
 (set_qcode_header_byte_at) idx:006A len:1 val:04
 (convert_to_compact_float) 50
 (set_qcode_header_byte_at) idx:006B len:1 val:50
 (convert_to_compact_float) 34
 (set_qcode_header_byte_at) idx:006C len:1 val:34
 (convert_to_compact_float) 12
 (set_qcode_header_byte_at) idx:006D len:1 val:12
 (set_qcode_header_byte_at) idx:006E len:1 val:03
 (convert_to_compact_float) RESULT: Input:'1234.5' Norm mant:'123450' Sign:0 Exponent:3
 (output_qcode_for_line) QC: i:2
 (add_simple_qcode) ':='
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) :=: Trapped:0
 (set_qcode_header_byte_at) idx:006F len:1 val:80
 (finalise_expression) Finalise expression done.
b = 1234.5
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=10 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=10 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=10 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'c' (99)
 (is_all_spaces) cline[1] = ' ' (32)
 (is_all_spaces) cline[2] = ' ' (32)
 (is_all_spaces) cline[3] = '=' (61)
 (is_all_spaces) cline[4] = ' ' (32)
 (is_all_spaces) cline[5] = '1' (49)
 (is_all_spaces) cline[6] = '.' (46)
 (is_all_spaces) cline[7] = '3' (51)
 (is_all_spaces) cline[8] = '3' (51)
 (is_all_spaces) cline[9] = '3' (51)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'c  = 1.333'
**************
**c  = 1.333**
**************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'c  = 1.333'
 (check_literal) check_literal:After drop space:'REM' idx=0 'c  = 1.333'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'c  = 1.333'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'c  = 1.333'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'c  = 1.333'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'c  = 1.333'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'c  = 1.333'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'c  = 1.333'
 (check_literal)   'R' != 'c'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'c  = 1.333'

   (check_operator) 'c  = 1.333' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'c  = 1.333':
   (check_vname) check_vname ret1 '  = 1.333':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '  = 1.333'

   (check_literal) check_literal:lit='(' idx=1 '  = 1.333'
   (check_literal) check_literal:After drop space:'(' idx=1 '  = 1.333'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=1 '  = 1.333'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=3 '= 1.333'
 (check_literal) check_literal:After while(): 1.333
 (check_literal) ret1 Match. ' =' == '  = 1.333'

 (check_expression) ' 1.333'

  (check_eitem) check_eitem: '1.333'

   (check_function)  '1.333'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=5 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 '1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=5 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 '1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (check_operator) '' igncomma:0
  (check_operator) ret0:is comma: 0
 (check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'c  = 1.333' ref_ndeclare:1

   (scan_vname) scan_vname: 'c  = 1.333'
   (scan_vname) scan_vname: ret1 'c'
  (scan_variable) scan_variable: '  = 1.333' vname='C'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'C' is not other keyword
  (scan_variable) Array test '  = 1.333'

   (check_literal) check_literal:lit='(' idx=1 '  = 1.333'
   (check_literal) check_literal:After drop space:'(' idx=1 '  = 1.333'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='C' Float
 (process_token)    Frst:1 T:'C' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'C'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
token_is_variable: tok:'C'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C
(add_var_info) Name:C Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 C'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' '  = 1.333'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= 1.333'
 (scan_assignment_equals) scan_assignment_equals:while loop:= 1.333
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' 1.333' igncomma:0

  (check_eitem) check_eitem: '1.333'

   (check_function)  '1.333'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=5 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 '1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=5 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 '1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (scan_eitem) scan_eitem:

   (check_function)  '1.333'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=5 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 '1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=5 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 '1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=5 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 '1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=5 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 '1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1

     (scan_float) scan_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (scan_float) Fltval:'1.333' float:1.333000e+00
     (scan_float) scan_float: ret1
    (process_token)    Frst:0 T:'1.333' toktype:i exptype:f bufid:'EXP_BUFF_ID_FLT'
    (operator_precedence) 
:= is operator
    (process_token) Before switch, bufid:'EXP_BUFF_ID_FLT'
modify_expression_type:Inittype:f Intype:f Outtype:f
(    output_float) [f,()] f 1.333
    (scan_atom) ret1
   (scan_expression) '' Before while igncomma:0

    (check_operator) '' igncomma:0
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 '' commas:0
  (add_var_info) Name:C Idx:-1
  (add_var_info) Already present
  (add_var_info)   reference so OK
  (scan_assignment) scan_assignment: ret1
 (scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=10 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=10 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:2 buf2 i:3
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1.333' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing :C   *************
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'C' type:f (1), %:0
 (process_syntax_tree) *********Processing :1.333   *************
 (type_check_stack_push)  type_check_stack_push: '1.333'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'C' type:1 %:0
 (type_check_stack_print)  N002: '1.333' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'C' type:f (1), %:0
 (type_check_stack_display) 001: '1.333' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '1.333'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (1.333) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE:C    **********
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'C' type:f (1), %:0
 (typecheck_expression)  *** BE:1.333    **********
 (type_check_stack_push)  type_check_stack_push: '1.333'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'C' type:1 %:0
 (type_check_stack_print)  N002: '1.333' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'C' type:f (1), %:0
 (type_check_stack_display) 001: '1.333' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '1.333'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1.333' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1.333' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (C)
Var: C Float NumIdx:0
infix_stack_push: 'C'
 (infix_from_rpn) (1.333)
infix_stack_push: '1.333'
 (infix_from_rpn) (:=)
infix_stack_pop: '1.333'
infix_stack_pop: 'C'
infix_stack_push: '(C := 1.333)'
Done

infix_stack_pop: '(C := 1.333)'
Infix stack result (C := 1.333)
 (infix_from_rpn) exit  'C := 1.333'
 (process_expression_types) ==C := 1.333==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:3 qcode_idx:0070
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (add_simple_qcode) 'C'
 (add_simple_qcode) Op type:f op access:Write qcode_type:U
 (qcode_check_trapped) C: Trapped:0
 (set_qcode_header_byte_at) idx:0070 len:1 val:0E
 (set_qcode_header_byte_at) idx:0071 len:1 val:FF
 (set_qcode_header_byte_at) idx:0072 len:1 val:DE
 (output_qcode_for_line) QC: i:1
 (set_qcode_header_byte_at) idx:0073 len:1 val:23
 (convert_to_compact_float) INPUT:Idx:116 fltstr:'1.333'
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) Exponent:0
 (convert_to_compact_float) Idx:116 fltstr:'1.333'
 (convert_to_compact_float) Sign:0 start:0
 (convert_to_compact_float) Normalising:'1.333'
 (convert_to_compact_float) Need to make smaller
 (convert_to_compact_float) normalised='1333'
 (convert_to_compact_float) Drop trailing zeros
 (convert_to_compact_float) normalised='1333'
 (convert_to_compact_float) After adding zero back for odd number of digits: normalised='1333'
 (set_qcode_header_byte_at) idx:0074 len:1 val:03
 (convert_to_compact_float) 33
 (set_qcode_header_byte_at) idx:0075 len:1 val:33
 (convert_to_compact_float) 13
 (set_qcode_header_byte_at) idx:0076 len:1 val:13
 (set_qcode_header_byte_at) idx:0077 len:1 val:00
 (convert_to_compact_float) RESULT: Input:'1.333' Norm mant:'1333' Sign:0 Exponent:0
 (output_qcode_for_line) QC: i:2
 (add_simple_qcode) ':='
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) :=: Trapped:0
 (set_qcode_header_byte_at) idx:0078 len:1 val:80
 (finalise_expression) Finalise expression done.
c  = 1.333
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=10 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=10 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=10 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 't' (116)
 (is_all_spaces) cline[1] = ' ' (32)
 (is_all_spaces) cline[2] = '=' (61)
 (is_all_spaces) cline[3] = ' ' (32)
 (is_all_spaces) cline[4] = 'a' (97)
 (is_all_spaces) cline[5] = '+' (43)
 (is_all_spaces) cline[6] = 'b' (98)
 (is_all_spaces) cline[7] = '+' (43)
 (is_all_spaces) cline[8] = 'c' (99)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 't = a+b+c'
*************
**t = a+b+c**
*************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 't = a+b+c'
 (check_literal) check_literal:After drop space:'REM' idx=0 't = a+b+c'
 (check_literal)   'R' != 't'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 't = a+b+c'
 (check_literal) check_literal:After drop space:'REM&' idx=0 't = a+b+c'
 (check_literal)   'R' != 't'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 't = a+b+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 't = a+b+c'
 (check_literal)   'R' != 't'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 't = a+b+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 't = a+b+c'
 (check_literal)   'R' != 't'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 't = a+b+c'

   (check_operator) 't = a+b+c' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 't = a+b+c':
   (check_vname) check_vname ret1 ' = a+b+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' = a+b+c'

   (check_literal) check_literal:lit='(' idx=1 ' = a+b+c'
   (check_literal) check_literal:After drop space:'(' idx=1 ' = a+b+c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=1 ' = a+b+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=2 '= a+b+c'
 (check_literal) check_literal:After while(): a+b+c
 (check_literal) ret1 Match. ' =' == ' = a+b+c'

 (check_expression) ' a+b+c'

  (check_eitem) check_eitem: 'a+b+c'

   (check_function)  'a+b+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=4 'a+b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 'a+b+c'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=4 'a+b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 'a+b+c'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+b+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+b+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+b+c'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=5 '+b+c'
     (check_literal) check_literal:After drop space:':' idx=5 '+b+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+b+c'

     (check_operator) 'a+b+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+b+c':
     (check_vname) check_vname ret1 '+b+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+b+c'

     (check_literal) check_literal:lit='(' idx=5 '+b+c'
     (check_literal) check_literal:After drop space:'(' idx=5 '+b+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+b+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) 'b+c' igncomma:0
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'b+c'

  (check_function)  'b+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=6 'b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'b+c'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=6 'b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'b+c'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b+c'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=7 '+c'
    (check_literal) check_literal:After drop space:':' idx=7 '+c'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b+c'

    (check_operator) 'b+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b+c':
    (check_vname) check_vname ret1 '+c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c'

    (check_literal) check_literal:lit='(' idx=7 '+c'
    (check_literal) check_literal:After drop space:'(' idx=7 '+c'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=7 '+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=7 '+c'
 (check_literal)   '%' != '+'
 (check_literal) check_literal: ret0

 (check_operator) '+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) 'c' igncomma:0
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c'

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=8 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=8 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=9 ''
    (check_literal) check_literal:After drop space:':' idx=9 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=9 ''
    (check_literal) check_literal:After drop space:'(' idx=9 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=9 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=9 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 't = a+b+c' ref_ndeclare:1

   (scan_vname) scan_vname: 't = a+b+c'
   (scan_vname) scan_vname: ret1 't'
  (scan_variable) scan_variable: ' = a+b+c' vname='T'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'T' is not other keyword
  (scan_variable) Array test ' = a+b+c'

   (check_literal) check_literal:lit='(' idx=1 ' = a+b+c'
   (check_literal) check_literal:After drop space:'(' idx=1 ' = a+b+c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='T' Float
 (process_token)    Frst:1 T:'T' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'T'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:T is not function
token_is_variable: tok:'T'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:T is not function
(init_get_name) 
init_get_name:'T'
(init_get_name) 
init_get_name:'T'
(get_name) 
get_name:gn:'T'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f T
(add_var_info) Name:T Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 T'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' ' = a+b+c'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= a+b+c'
 (scan_assignment_equals) scan_assignment_equals:while loop:= a+b+c
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' a+b+c' igncomma:0

  (check_eitem) check_eitem: 'a+b+c'

   (check_function)  'a+b+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=4 'a+b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 'a+b+c'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=4 'a+b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 'a+b+c'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+b+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+b+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+b+c'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=5 '+b+c'
     (check_literal) check_literal:After drop space:':' idx=5 '+b+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+b+c'

     (check_operator) 'a+b+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+b+c':
     (check_vname) check_vname ret1 '+b+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+b+c'

     (check_literal) check_literal:lit='(' idx=5 '+b+c'
     (check_literal) check_literal:After drop space:'(' idx=5 '+b+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'a+b+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=4 'a+b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=4 'a+b+c'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=4 'a+b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=4 'a+b+c'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a+b+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'a+b+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'a+b+c'
    (check_textlabel) 'a' is a text label chstr:'a'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
   (check_proc_call) 'a' is text label

    (check_literal) check_literal:lit=':' idx=5 '+b+c'
    (check_literal) check_literal:After drop space:':' idx=5 '+b+c'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'a+b+c'

    (check_operator) 'a+b+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'a+b+c':
    (check_vname) check_vname ret1 '+b+c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+b+c'

    (check_literal) check_literal:lit='(' idx=5 '+b+c'
    (check_literal) check_literal:After drop space:'(' idx=5 '+b+c'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=4 'a+b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=4 'a+b+c'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=4 'a+b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=4 'a+b+c'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'a+b+c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'a+b+c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'a+b+c'
   (check_textlabel) 'a' is a text label chstr:'a'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
  (check_proc_call) 'a' is text label

   (check_literal) check_literal:lit=':' idx=5 '+b+c'
   (check_literal) check_literal:After drop space:':' idx=5 '+b+c'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'a+b+c'

   (check_operator) 'a+b+c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'a+b+c':
   (check_vname) check_vname ret1 '+b+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+b+c'

   (check_literal) check_literal:lit='(' idx=5 '+b+c'
   (check_literal) check_literal:After drop space:'(' idx=5 '+b+c'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'a+b+c' ref_ndeclare:1

  (scan_vname) scan_vname: 'a+b+c'
  (scan_vname) scan_vname: ret1 'a'
 (scan_variable) scan_variable: '+b+c' vname='A'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'A' is not other keyword
 (scan_variable) Array test '+b+c'

  (check_literal) check_literal:lit='(' idx=5 '+b+c'
  (check_literal) check_literal:After drop space:'(' idx=5 '+b+c'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='A' Float
(process_token)    Frst:0 T:'A' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'A'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f A
(add_var_info) Name:A Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 A'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+b+c' Before while igncomma:0

 (check_operator) '+b+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '+b+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+b+c'

  (check_literal) check_literal:lit=' ,' idx=5 '+b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=5 '+b+c'
  (check_literal)   ',' != '+'
  (check_literal) check_literal: ret0
 (scan_operator) scan_operator: ret1 'b+c' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name::=
(process_token) 
opr1:3 opr2:1
(operator_precedence) 
:= is operator
(operator_precedence) 
:= is operator
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (2)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) 001: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'b+c' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) 'b+c' Before scan_eitem igncomma:0

 (scan_eitem) scan_eitem:

  (check_function)  'b+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=6 'b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'b+c'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=6 'b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'b+c'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b+c'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=7 '+c'
    (check_literal) check_literal:After drop space:':' idx=7 '+c'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b+c'

    (check_operator) 'b+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b+c':
    (check_vname) check_vname ret1 '+c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c'

    (check_literal) check_literal:lit='(' idx=7 '+c'
    (check_literal) check_literal:After drop space:'(' idx=7 '+c'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=6 'b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=6 'b+c'
  (check_literal)   '%' != 'b'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=6 'b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=6 'b+c'
  (check_literal)   '"' != 'b'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'b+c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'b+c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'b+c'
   (check_textlabel) 'b' is a text label chstr:'b'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
  (check_proc_call) 'b' is text label

   (check_literal) check_literal:lit=':' idx=7 '+c'
   (check_literal) check_literal:After drop space:':' idx=7 '+c'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'b+c'

   (check_operator) 'b+c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'b+c':
   (check_vname) check_vname ret1 '+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c'

   (check_literal) check_literal:lit='(' idx=7 '+c'
   (check_literal) check_literal:After drop space:'(' idx=7 '+c'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'b+c' ref_ndeclare:1

  (scan_vname) scan_vname: 'b+c'
  (scan_vname) scan_vname: ret1 'b'
 (scan_variable) scan_variable: '+c' vname='B'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'B' is not other keyword
 (scan_variable) Array test '+c'

  (check_literal) check_literal:lit='(' idx=7 '+c'
  (check_literal) check_literal:After drop space:'(' idx=7 '+c'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='B' Float
(process_token)    Frst:0 T:'B' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'B'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f B
(add_var_info) Name:B Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 B'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=7 '+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=7 '+c'
 (check_literal)   '%' != '+'
 (check_literal) check_literal: ret0

 (check_operator) '+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '+b+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c'

  (check_literal) check_literal:lit=' ,' idx=7 '+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=7 '+c'
  (check_literal)   ',' != '+'
  (check_literal) check_literal: ret0
 (scan_operator) scan_operator: ret1 'c' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:+
(process_token) 
opr1:3 opr2:3
(operator_precedence) 
+ is operator
(operator_precedence) 
+ is operator
(operator_left_assoc) 
+ is operator
Pop 1
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------

(operator_precedence) 
+ is operator
(operator_precedence) 
+ is operator
(output_operator) [f,()] f +
(operator_precedence) 
:= is operator
(operator_precedence) 
:= is operator
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (2)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) 001: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) 'c' Before scan_eitem igncomma:0

 (scan_eitem) scan_eitem:

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=8 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=8 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=9 ''
    (check_literal) check_literal:After drop space:':' idx=9 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=9 ''
    (check_literal) check_literal:After drop space:'(' idx=9 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=8 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=8 'c'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=8 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=8 'c'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c'
   (check_textlabel) 'c' is a text label chstr:'c'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
  (check_proc_call) 'c' is text label

   (check_literal) check_literal:lit=':' idx=9 ''
   (check_literal) check_literal:After drop space:':' idx=9 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c'

   (check_operator) 'c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=9 ''
   (check_literal) check_literal:After drop space:'(' idx=9 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c' ref_ndeclare:1

  (scan_vname) scan_vname: 'c'
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '' vname='C'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=9 ''
  (check_literal) check_literal:After drop space:'(' idx=9 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C' Float
(process_token)    Frst:0 T:'C' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
token_is_variable: tok:'C'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C
(add_var_info) Name:C Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 C'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=9 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=9 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(add_var_info) Name:T Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_assignment) scan_assignment: ret1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=9 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=9 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:5 buf2 i:3
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop '+' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (op_stack_finalise) Popped:+ f
 (output_operator) [f,()] f +
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'T' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N006       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N007       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 6 1  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing :T   *************
 (type_check_stack_push)  type_check_stack_push: 'T'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (process_syntax_tree) *********Processing :A   *************
 (type_check_stack_push)  type_check_stack_push: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (process_syntax_tree) *********Processing :B   *************
 (type_check_stack_push)  type_check_stack_push: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (type_check_stack_display) 002: 'B' type:f (1), %:0
 (process_syntax_tree) *********Processing :+   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator + %conv:1
 (type_check_stack_pop)   type_check_stack_pop: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:1
 (process_syntax_tree) Percent convertible operator op1 (N003) percent:0
 (process_syntax_tree) Mutable type (B) f f
 (process_syntax_tree) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (process_syntax_tree) *********Processing :C   *************
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print)  N005: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (type_check_stack_display) 002: 'C' type:f (1), %:0
 (process_syntax_tree) *********Processing :+   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator + %conv:1
 (type_check_stack_pop)   type_check_stack_pop: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:1
 (process_syntax_tree) Percent convertible operator op1 (N005) percent:0
 (process_syntax_tree) Mutable type (C) f f
 (process_syntax_tree) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N006: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'T'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (000) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE:T    **********
 (type_check_stack_push)  type_check_stack_push: 'T'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (typecheck_expression)  *** BE:A    **********
 (type_check_stack_push)  type_check_stack_push: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (typecheck_expression)  *** BE:B    **********
 (type_check_stack_push)  type_check_stack_push: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (type_check_stack_display) 002: 'B' type:f (1), %:0
 (typecheck_expression)  *** BE:+    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator +
 (type_check_stack_pop)   type_check_stack_pop: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (+) f f
 (typecheck_expression) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (typecheck_expression)  *** BE:C    **********
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print)  N005: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (type_check_stack_display) 002: 'C' type:f (1), %:0
 (typecheck_expression)  *** BE:+    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator +
 (type_check_stack_pop)   type_check_stack_pop: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (+) f f
 (typecheck_expression) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print)  N006: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'T' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'T' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'T'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'T' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N006       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 5 4  nb 0:()
N007       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 6 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'T' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N006       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 5 4  nb 0:()
N007       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 6 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (T)
Var: T Float NumIdx:0
infix_stack_push: 'T'
 (infix_from_rpn) (A)
Var: A Float NumIdx:0
infix_stack_push: 'A'
 (infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
 (infix_from_rpn) (+)
infix_stack_pop: 'B'
infix_stack_pop: 'A'
infix_stack_push: '(A + B)'
 (infix_from_rpn) (C)
Var: C Float NumIdx:0
infix_stack_push: 'C'
 (infix_from_rpn) (+)
infix_stack_pop: 'C'
infix_stack_pop: '(A + B)'
infix_stack_push: '((A + B) + C)'
 (infix_from_rpn) (:=)
infix_stack_pop: '((A + B) + C)'
infix_stack_pop: 'T'
infix_stack_push: '(T := ((A + B) + C))'
Done

infix_stack_pop: '(T := ((A + B) + C))'
Infix stack result (T := ((A + B) + C))
 (infix_from_rpn) exit  'T := ((A + B) + C)'
 (process_expression_types) ==T := ((A + B) + C)==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:7 qcode_idx:0079
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (add_simple_qcode) 'T'
 (add_simple_qcode) Op type:f op access:Write qcode_type:U
 (qcode_check_trapped) T: Trapped:0
 (set_qcode_header_byte_at) idx:0079 len:1 val:0E
 (set_qcode_header_byte_at) idx:007A len:1 val:FF
 (set_qcode_header_byte_at) idx:007B len:1 val:D6
 (output_qcode_for_line) QC: i:1
 (add_simple_qcode) 'A'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) A: Trapped:0
 (set_qcode_header_byte_at) idx:007C len:1 val:01
 (set_qcode_header_byte_at) idx:007D len:1 val:FF
 (set_qcode_header_byte_at) idx:007E len:1 val:EE
 (output_qcode_for_line) QC: i:2
 (add_simple_qcode) 'B'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) B: Trapped:0
 (set_qcode_header_byte_at) idx:007F len:1 val:01
 (set_qcode_header_byte_at) idx:0080 len:1 val:FF
 (set_qcode_header_byte_at) idx:0081 len:1 val:E6
 (output_qcode_for_line) QC: i:3
 (add_simple_qcode) '+'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) +: Trapped:0
 (set_qcode_header_byte_at) idx:0082 len:1 val:3C
 (output_qcode_for_line) QC: i:4
 (add_simple_qcode) 'C'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) C: Trapped:0
 (set_qcode_header_byte_at) idx:0083 len:1 val:01
 (set_qcode_header_byte_at) idx:0084 len:1 val:FF
 (set_qcode_header_byte_at) idx:0085 len:1 val:DE
 (output_qcode_for_line) QC: i:5
 (add_simple_qcode) '+'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) +: Trapped:0
 (set_qcode_header_byte_at) idx:0086 len:1 val:3C
 (output_qcode_for_line) QC: i:6
 (add_simple_qcode) ':='
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) :=: Trapped:0
 (set_qcode_header_byte_at) idx:0087 len:1 val:80
 (finalise_expression) Finalise expression done.
t = a+b+c
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=9 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=9 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=9 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = 'a' (97)
 (is_all_spaces) cline[7] = ',' (44)
 (is_all_spaces) cline[8] = 'b' (98)
 (is_all_spaces) cline[9] = ',' (44)
 (is_all_spaces) cline[10] = 'c' (99)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print a,b,c'
***************
**print a,b,c**
***************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print a,b,c'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print a,b,c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print a,b,c'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print a,b,c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print a,b,c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print a,b,c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print a,b,c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print a,b,c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print a,b,c'

   (check_operator) 'print a,b,c' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print a,b,c':
   (check_vname) check_vname ret1 ' a,b,c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' a,b,c'

   (check_literal) check_literal:lit='(' idx=5 ' a,b,c'
   (check_literal) check_literal:After drop space:'(' idx=5 ' a,b,c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' a,b,c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 'a,b,c'
 (check_literal)   '=' != 'a'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print a,b,c'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print a,b,c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print a,b,c'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print a,b,c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print a,b,c'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print a,b,c'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' a,b,c'
   (check_literal) check_literal:After drop space:'::' idx=5 ' a,b,c'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print a,b,c'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' a,b,c'
   (check_literal) check_literal:After drop space:':' idx=5 ' a,b,c'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print a,b,c'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print a,b,c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print a,b,c'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print a,b,c'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print a,b,c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print a,b,c'
   (check_literal) check_literal:After while(): a,b,c
   (check_literal) ret1 Match. ' PRINT' == 'print a,b,c'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print a,b,c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print a,b,c'
   (check_literal) check_literal:After while(): a,b,c
   (check_literal) ret1 Match. ' PRINT' == 'print a,b,c'

   (check_expression) ' a,b,c'

    (check_eitem) check_eitem: 'a,b,c'

     (check_function)  'a,b,c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 'a,b,c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 'a,b,c'
      (check_literal)   '%' != 'a'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 'a,b,c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 'a,b,c'
      (check_literal)   '"' != 'a'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'' float:0.000000e+00
       (check_float) check_float: ret0

       (check_integer) check_integer: 'a,b,c'
       (check_integer) check_integer:ret0

       (check_hex) check_hex: 'a,b,c'
       (check_hex) check_hex:ret0 not '$'
      (check_number) check_number: ret0

      (check_proc_call) check_proc_call:

       (check_textlabel) 'a,b,c'
       (check_textlabel) 'a' is a text label chstr:'a'
       (check_textlabel) Exit char:,
       (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
      (check_proc_call) 'a' is text label

       (check_literal) check_literal:lit=':' idx=7 ',b,c'
       (check_literal) check_literal:After drop space:':' idx=7 ',b,c'
       (check_literal)   ':' != ','
       (check_literal) check_literal: ret0
      (check_proc_call) check_proc_call:ret0

      (check_variable) 'a,b,c'

       (check_operator) 'a,b,c' igncomma:1
       (check_operator) ret0:is comma: 32767

       (check_vname) check_vname 'a,b,c':
       (check_vname) check_vname ret1 ',b,c':
      (check_variable) Name: ''
      (check_variable) check_variable: Ary test ',b,c'

       (check_literal) check_literal:lit='(' idx=7 ',b,c'
       (check_literal) check_literal:After drop space:'(' idx=7 ',b,c'
       (check_literal)   '(' != ','
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) ret1
   (check_eitem) ret1

   (check_operator) ',b,c' igncomma:1
   (check_operator) ret0:is comma: 0
  (check_expression) ret1 ',b,c' commas:0

  (check_literal) check_literal:lit=' PRINT' idx=0 'print a,b,c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'PRINT' idx=0 'print a,b,c'
  (check_literal) check_literal:After while(): a,b,c
  (check_literal) ret1 Match. ' PRINT' == 'print a,b,c'
 (scan_print) Before while

  (check_expression) ' a,b,c'

   (check_eitem) check_eitem: 'a,b,c'

    (check_function)  'a,b,c'
    (check_function) ret0

    (check_atom) check_atom:
    (check_atom) check_atom:Checking for character constant

     (check_literal) check_literal:lit=' %' idx=6 'a,b,c'
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'a,b,c'
     (check_literal)   '%' != 'a'
     (check_literal) check_literal: ret0
    (check_atom) check_atom:Checking for string

     (check_literal) check_literal:lit=' "' idx=6 'a,b,c'
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'a,b,c'
     (check_literal)   '"' != 'a'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) Fltval:'' float:0.000000e+00
      (check_float) check_float: ret0

      (check_integer) check_integer: 'a,b,c'
      (check_integer) check_integer:ret0

      (check_hex) check_hex: 'a,b,c'
      (check_hex) check_hex:ret0 not '$'
     (check_number) check_number: ret0

     (check_proc_call) check_proc_call:

      (check_textlabel) 'a,b,c'
      (check_textlabel) 'a' is a text label chstr:'a'
      (check_textlabel) Exit char:,
      (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
     (check_proc_call) 'a' is text label

      (check_literal) check_literal:lit=':' idx=7 ',b,c'
      (check_literal) check_literal:After drop space:':' idx=7 ',b,c'
      (check_literal)   ':' != ','
      (check_literal) check_literal: ret0
     (check_proc_call) check_proc_call:ret0

     (check_variable) 'a,b,c'

      (check_operator) 'a,b,c' igncomma:1
      (check_operator) ret0:is comma: 32767

      (check_vname) check_vname 'a,b,c':
      (check_vname) check_vname ret1 ',b,c':
     (check_variable) Name: ''
     (check_variable) check_variable: Ary test ',b,c'

      (check_literal) check_literal:lit='(' idx=7 ',b,c'
      (check_literal) check_literal:After drop space:'(' idx=7 ',b,c'
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) ret1
  (check_eitem) ret1

  (check_operator) ',b,c' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret1 ',b,c' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' a,b,c' igncomma:1

  (check_eitem) check_eitem: 'a,b,c'

   (check_function)  'a,b,c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=6 'a,b,c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=6 'a,b,c'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=6 'a,b,c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=6 'a,b,c'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a,b,c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a,b,c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a,b,c'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:,
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=7 ',b,c'
     (check_literal) check_literal:After drop space:':' idx=7 ',b,c'
     (check_literal)   ':' != ','
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a,b,c'

     (check_operator) 'a,b,c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a,b,c':
     (check_vname) check_vname ret1 ',b,c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ',b,c'

     (check_literal) check_literal:lit='(' idx=7 ',b,c'
     (check_literal) check_literal:After drop space:'(' idx=7 ',b,c'
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'a,b,c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=6 'a,b,c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'a,b,c'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=6 'a,b,c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'a,b,c'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a,b,c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'a,b,c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'a,b,c'
    (check_textlabel) 'a' is a text label chstr:'a'
    (check_textlabel) Exit char:,
    (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
   (check_proc_call) 'a' is text label

    (check_literal) check_literal:lit=':' idx=7 ',b,c'
    (check_literal) check_literal:After drop space:':' idx=7 ',b,c'
    (check_literal)   ':' != ','
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'a,b,c'

    (check_operator) 'a,b,c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'a,b,c':
    (check_vname) check_vname ret1 ',b,c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ',b,c'

    (check_literal) check_literal:lit='(' idx=7 ',b,c'
    (check_literal) check_literal:After drop space:'(' idx=7 ',b,c'
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=6 'a,b,c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=6 'a,b,c'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=6 'a,b,c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=6 'a,b,c'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'a,b,c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'a,b,c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'a,b,c'
   (check_textlabel) 'a' is a text label chstr:'a'
   (check_textlabel) Exit char:,
   (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
  (check_proc_call) 'a' is text label

   (check_literal) check_literal:lit=':' idx=7 ',b,c'
   (check_literal) check_literal:After drop space:':' idx=7 ',b,c'
   (check_literal)   ':' != ','
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'a,b,c'

   (check_operator) 'a,b,c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'a,b,c':
   (check_vname) check_vname ret1 ',b,c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ',b,c'

   (check_literal) check_literal:lit='(' idx=7 ',b,c'
   (check_literal) check_literal:After drop space:'(' idx=7 ',b,c'
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'a,b,c' ref_ndeclare:1

  (scan_vname) scan_vname: 'a,b,c'
  (scan_vname) scan_vname: ret1 'a'
 (scan_variable) scan_variable: ',b,c' vname='A'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'A' is not other keyword
 (scan_variable) Array test ',b,c'

  (check_literal) check_literal:lit='(' idx=7 ',b,c'
  (check_literal) check_literal:After drop space:'(' idx=7 ',b,c'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='A' Float
(process_token)    Frst:1 T:'A' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'A'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f A
(add_var_info) Name:A Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 A'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) ',b,c' Before while igncomma:1

 (check_operator) ',b,c' igncomma:1
 (check_operator) ret0:is comma: 32767
(scan_expression) ret1 ',b,c' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=7 ',b,c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=7 ',b,c'
 (check_literal) check_literal:After while():b,c
 (check_literal) ret1 Match. ' ,' == ',b,c'

 (scan_literal_core) scan_literal_core:lit=' ,' ',b,c'
 (scan_literal_core) scan_literal_core:After drop space:',b,c'
 (scan_literal_core) scan_literal_core:while loop:,b,c
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=8 'b,c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=8 'b,c'
 (check_literal)   ';' != 'b'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:7
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :A   *************
(type_check_stack_push)  type_check_stack_push: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:A    **********
(type_check_stack_push)  type_check_stack_push: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (A)
Var: A Float NumIdx:0
infix_stack_push: 'A'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: 'A'
infix_stack_push: 'PRINT(A)'
Done

infix_stack_pop: 'PRINT(A)'
Infix stack result PRINT(A)
(infix_from_rpn) exit  'PRINT(A)'
(process_expression_types) ==RINT(A)==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:0088
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(add_simple_qcode) 'A'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) A: Trapped:0
(set_qcode_header_byte_at) idx:0088 len:1 val:01
(set_qcode_header_byte_at) idx:0089 len:1 val:FF
(set_qcode_header_byte_at) idx:008A len:1 val:EE
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:008B len:1 val:70
(finalise_expression) Finalise expression done.
b,c
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:008C
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:008C len:1 val:72
(finalise_expression) Finalise expression done.
b,c
========================================================
(output_expression_start)

 (check_expression) 'b,c'

  (check_eitem) check_eitem: 'b,c'

   (check_function)  'b,c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=8 'b,c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'b,c'
    (check_literal)   '%' != 'b'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=8 'b,c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'b,c'
    (check_literal)   '"' != 'b'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'b,c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'b,c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'b,c'
     (check_textlabel) 'b' is a text label chstr:'b'
     (check_textlabel) Exit char:,
     (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
    (check_proc_call) 'b' is text label

     (check_literal) check_literal:lit=':' idx=9 ',c'
     (check_literal) check_literal:After drop space:':' idx=9 ',c'
     (check_literal)   ':' != ','
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'b,c'

     (check_operator) 'b,c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'b,c':
     (check_vname) check_vname ret1 ',c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ',c'

     (check_literal) check_literal:lit='(' idx=9 ',c'
     (check_literal) check_literal:After drop space:'(' idx=9 ',c'
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) ',c' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 ',c' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) 'b,c' igncomma:1

  (check_eitem) check_eitem: 'b,c'

   (check_function)  'b,c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=8 'b,c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'b,c'
    (check_literal)   '%' != 'b'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=8 'b,c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'b,c'
    (check_literal)   '"' != 'b'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'b,c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'b,c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'b,c'
     (check_textlabel) 'b' is a text label chstr:'b'
     (check_textlabel) Exit char:,
     (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
    (check_proc_call) 'b' is text label

     (check_literal) check_literal:lit=':' idx=9 ',c'
     (check_literal) check_literal:After drop space:':' idx=9 ',c'
     (check_literal)   ':' != ','
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'b,c'

     (check_operator) 'b,c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'b,c':
     (check_vname) check_vname ret1 ',c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ',c'

     (check_literal) check_literal:lit='(' idx=9 ',c'
     (check_literal) check_literal:After drop space:'(' idx=9 ',c'
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'b,c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=8 'b,c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'b,c'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=8 'b,c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'b,c'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b,c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b,c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b,c'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:,
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=9 ',c'
    (check_literal) check_literal:After drop space:':' idx=9 ',c'
    (check_literal)   ':' != ','
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b,c'

    (check_operator) 'b,c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b,c':
    (check_vname) check_vname ret1 ',c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ',c'

    (check_literal) check_literal:lit='(' idx=9 ',c'
    (check_literal) check_literal:After drop space:'(' idx=9 ',c'
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=8 'b,c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=8 'b,c'
  (check_literal)   '%' != 'b'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=8 'b,c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=8 'b,c'
  (check_literal)   '"' != 'b'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'b,c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'b,c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'b,c'
   (check_textlabel) 'b' is a text label chstr:'b'
   (check_textlabel) Exit char:,
   (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
  (check_proc_call) 'b' is text label

   (check_literal) check_literal:lit=':' idx=9 ',c'
   (check_literal) check_literal:After drop space:':' idx=9 ',c'
   (check_literal)   ':' != ','
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'b,c'

   (check_operator) 'b,c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'b,c':
   (check_vname) check_vname ret1 ',c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ',c'

   (check_literal) check_literal:lit='(' idx=9 ',c'
   (check_literal) check_literal:After drop space:'(' idx=9 ',c'
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'b,c' ref_ndeclare:1

  (scan_vname) scan_vname: 'b,c'
  (scan_vname) scan_vname: ret1 'b'
 (scan_variable) scan_variable: ',c' vname='B'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'B' is not other keyword
 (scan_variable) Array test ',c'

  (check_literal) check_literal:lit='(' idx=9 ',c'
  (check_literal) check_literal:After drop space:'(' idx=9 ',c'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='B' Float
(process_token)    Frst:1 T:'B' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'B'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f B
(add_var_info) Name:B Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 B'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) ',c' Before while igncomma:1

 (check_operator) ',c' igncomma:1
 (check_operator) ret0:is comma: 32767
(scan_expression) ret1 ',c' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=9 ',c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=9 ',c'
 (check_literal) check_literal:After while():c
 (check_literal) ret1 Match. ' ,' == ',c'

 (scan_literal_core) scan_literal_core:lit=' ,' ',c'
 (scan_literal_core) scan_literal_core:After drop space:',c'
 (scan_literal_core) scan_literal_core:while loop:,c
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=10 'c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=10 'c'
 (check_literal)   ';' != 'c'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :B   *************
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'B' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:B    **********
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'B' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: 'B'
infix_stack_push: 'PRINT(B)'
Done

infix_stack_pop: 'PRINT(B)'
Infix stack result PRINT(B)
(infix_from_rpn) exit  'PRINT(B)'
(process_expression_types) ==RINT(B)==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:008D
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(add_simple_qcode) 'B'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) B: Trapped:0
(set_qcode_header_byte_at) idx:008D len:1 val:01
(set_qcode_header_byte_at) idx:008E len:1 val:FF
(set_qcode_header_byte_at) idx:008F len:1 val:E6
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0090 len:1 val:70
(finalise_expression) Finalise expression done.
c
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:0091
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0091 len:1 val:72
(finalise_expression) Finalise expression done.
c
========================================================
(output_expression_start)

 (check_expression) 'c'

  (check_eitem) check_eitem: 'c'

   (check_function)  'c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=10 'c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 'c'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=10 'c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 'c'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c'
     (check_textlabel) 'c' is a text label chstr:'c'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
    (check_proc_call) 'c' is text label

     (check_literal) check_literal:lit=':' idx=11 ''
     (check_literal) check_literal:After drop space:':' idx=11 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c'

     (check_operator) 'c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=11 ''
     (check_literal) check_literal:After drop space:'(' idx=11 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) 'c' igncomma:1

  (check_eitem) check_eitem: 'c'

   (check_function)  'c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=10 'c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 'c'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=10 'c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 'c'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c'
     (check_textlabel) 'c' is a text label chstr:'c'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
    (check_proc_call) 'c' is text label

     (check_literal) check_literal:lit=':' idx=11 ''
     (check_literal) check_literal:After drop space:':' idx=11 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c'

     (check_operator) 'c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=11 ''
     (check_literal) check_literal:After drop space:'(' idx=11 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=10 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=10 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=10 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=10 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=11 ''
    (check_literal) check_literal:After drop space:':' idx=11 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=11 ''
    (check_literal) check_literal:After drop space:'(' idx=11 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=10 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=10 'c'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=10 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=10 'c'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c'
   (check_textlabel) 'c' is a text label chstr:'c'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
  (check_proc_call) 'c' is text label

   (check_literal) check_literal:lit=':' idx=11 ''
   (check_literal) check_literal:After drop space:':' idx=11 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c'

   (check_operator) 'c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=11 ''
   (check_literal) check_literal:After drop space:'(' idx=11 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c' ref_ndeclare:1

  (scan_vname) scan_vname: 'c'
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '' vname='C'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=11 ''
  (check_literal) check_literal:After drop space:'(' idx=11 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C' Float
(process_token)    Frst:1 T:'C' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
token_is_variable: tok:'C'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C
(add_var_info) Name:C Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 C'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '' Before while igncomma:1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 32767
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=11 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=11 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=11 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=11 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:2 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :C   *************
(type_check_stack_push)  type_check_stack_push: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:C    **********
(type_check_stack_push)  type_check_stack_push: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (C)
Var: C Float NumIdx:0
infix_stack_push: 'C'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: 'C'
infix_stack_push: 'PRINT(C)'
Done

infix_stack_pop: 'PRINT(C)'
Infix stack result PRINT(C)
(infix_from_rpn) exit  'PRINT(C)'
(process_expression_types) ==RINT(C)==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:0092
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(add_simple_qcode) 'C'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) C: Trapped:0
(set_qcode_header_byte_at) idx:0092 len:1 val:01
(set_qcode_header_byte_at) idx:0093 len:1 val:FF
(set_qcode_header_byte_at) idx:0094 len:1 val:DE
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0095 len:1 val:70
(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:0096
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0096 len:1 val:73
(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=11 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=11 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=11 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=11 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=11 ''
     (check_literal) check_literal:After drop space:':' idx=11 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=11 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=11 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=11 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=11 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=11 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=11 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=11 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=11 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:0097
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print a,b,c
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=11 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=11 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=11 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'T' (84)
 (is_all_spaces) cline[8] = '=' (61)
 (is_all_spaces) cline[9] = '"' (34)
 (is_all_spaces) cline[10] = ',' (44)
 (is_all_spaces) cline[11] = ' ' (32)
 (is_all_spaces) cline[12] = 't' (116)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "T=", t'
*****************
**print "T=", t**
*****************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "T=", t'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "T=", t'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "T=", t'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "T=", t'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "T=", t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "T=", t'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "T=", t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "T=", t'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "T=", t'

   (check_operator) 'print "T=", t' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "T=", t':
   (check_vname) check_vname ret1 ' "T=", t':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "T=", t'

   (check_literal) check_literal:lit='(' idx=5 ' "T=", t'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "T=", t'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "T=", t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"T=", t'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "T=", t'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "T=", t'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "T=", t'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "T=", t'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "T=", t'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "T=", t'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "T=", t'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "T=", t'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "T=", t'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "T=", t'
   (check_literal) check_literal:After drop space:':' idx=5 ' "T=", t'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "T=", t'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "T=", t'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "T=", t'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "T=", t'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "T=", t'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "T=", t'
   (check_literal) check_literal:After while(): "T=", t
   (check_literal) ret1 Match. ' PRINT' == 'print "T=", t'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "T=", t'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "T=", t'
   (check_literal) check_literal:After while(): "T=", t
   (check_literal) ret1 Match. ' PRINT' == 'print "T=", t'

   (check_expression) ' "T=", t'

    (check_eitem) check_eitem: '"T=", t'

     (check_function)  '"T=", t'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"T=", t'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"T=", t'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"T=", t'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"T=", t'
      (check_literal) check_literal:After while():T=", t
      (check_literal) ret1 Match. ' "' == '"T=", t'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', t' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', t' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "T=", t'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "T=", t'
   (check_literal) check_literal:After while(): "T=", t
   (check_literal) ret1 Match. ' PRINT' == 'print "T=", t'
  (scan_print) Before while

   (check_expression) ' "T=", t'

    (check_eitem) check_eitem: '"T=", t'

     (check_function)  '"T=", t'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"T=", t'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"T=", t'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"T=", t'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"T=", t'
      (check_literal) check_literal:After while():T=", t
      (check_literal) ret1 Match. ' "' == '"T=", t'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', t' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', t' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "T=", t' igncomma:1

    (check_eitem) check_eitem: '"T=", t'

     (check_function)  '"T=", t'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"T=", t'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"T=", t'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"T=", t'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"T=", t'
      (check_literal) check_literal:After while():T=", t
      (check_literal) ret1 Match. ' "' == '"T=", t'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"T=", t'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"T=", t'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"T=", t'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"T=", t'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"T=", t'
      (check_literal) check_literal:After while():T=", t
      (check_literal) ret1 Match. ' "' == '"T=", t'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"T=", t'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"T=", t'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"T=", t'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"T=", t'
      (check_literal) check_literal:After while():T=", t
      (check_literal) ret1 Match. ' "' == '"T=", t'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"T=", t'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"T=", t'
       (check_literal) check_literal:After while():T=", t
       (check_literal) ret1 Match. ' "' == '"T=", t'
      (scan_string)   (in if) 'T=", t'
      (scan_string)   (in wh) 'T=", t'
      (scan_string)   (in wh) '=", t'
      (scan_string)   (in wh) '=", t'
      (scan_string)   (in wh) '", t'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"T="' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"T="'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"T=" is not function
token_is_variable: tok:'"T="'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"T=" is not function
(   output_string) [U,()] s "T="
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', t' Before while igncomma:1

    (check_operator) ', t' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', t' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=10 ', t'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=10 ', t'
   (check_literal) check_literal:After while(): t
   (check_literal) ret1 Match. ' ,' == ', t'

   (scan_literal_core) scan_literal_core:lit=' ,' ', t'
   (scan_literal_core) scan_literal_core:After drop space:', t'
   (scan_literal_core) scan_literal_core:while loop:, t
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=11 ' t'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=12 't'
 (check_literal)   ';' != 't'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"T="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :"T="   *************
(type_check_stack_push)  type_check_stack_push: '"T="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"T="' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"T="' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"T="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:"T="    **********
(type_check_stack_push)  type_check_stack_push: '"T="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"T="' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"T="' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"T="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"T="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"T="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("T=")
infix_stack_push: '"T="'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"T="'
infix_stack_push: 'PRINT("T=")'
Done

infix_stack_pop: 'PRINT("T=")'
Infix stack result PRINT("T=")
(infix_from_rpn) exit  'PRINT("T=")'
(process_expression_types) ==RINT("T=")==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:0097
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:0 String Literal '"T="' EXP_BUFF_ID_STR
(set_qcode_header_byte_at) idx:0097 len:1 val:24
(set_qcode_header_byte_at) idx:0098 len:1 val:02
(set_qcode_header_byte_at) idx:0099 len:1 val:54
(set_qcode_header_byte_at) idx:009A len:1 val:3D
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:009B len:1 val:71
(finalise_expression) Finalise expression done.
 t
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:009C
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:009C len:1 val:72
(finalise_expression) Finalise expression done.
 t
========================================================
(output_expression_start)

 (check_expression) ' t'

  (check_eitem) check_eitem: 't'

   (check_function)  't'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=12 't'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=12 't'
    (check_literal)   '%' != 't'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=12 't'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=12 't'
    (check_literal)   '"' != 't'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 't'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 't'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 't'
     (check_textlabel) 't' is a text label chstr:'t'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'t' Type:f
    (check_proc_call) 't' is text label

     (check_literal) check_literal:lit=':' idx=13 ''
     (check_literal) check_literal:After drop space:':' idx=13 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 't'

     (check_operator) 't' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 't':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=13 ''
     (check_literal) check_literal:After drop space:'(' idx=13 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' t' igncomma:1

  (check_eitem) check_eitem: 't'

   (check_function)  't'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=12 't'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=12 't'
    (check_literal)   '%' != 't'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=12 't'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=12 't'
    (check_literal)   '"' != 't'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 't'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 't'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 't'
     (check_textlabel) 't' is a text label chstr:'t'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'t' Type:f
    (check_proc_call) 't' is text label

     (check_literal) check_literal:lit=':' idx=13 ''
     (check_literal) check_literal:After drop space:':' idx=13 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 't'

     (check_operator) 't' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 't':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=13 ''
     (check_literal) check_literal:After drop space:'(' idx=13 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  't'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=12 't'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=12 't'
   (check_literal)   '%' != 't'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=12 't'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=12 't'
   (check_literal)   '"' != 't'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 't'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 't'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 't'
    (check_textlabel) 't' is a text label chstr:'t'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'t' Type:f
   (check_proc_call) 't' is text label

    (check_literal) check_literal:lit=':' idx=13 ''
    (check_literal) check_literal:After drop space:':' idx=13 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 't'

    (check_operator) 't' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 't':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=13 ''
    (check_literal) check_literal:After drop space:'(' idx=13 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=12 't'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=12 't'
  (check_literal)   '%' != 't'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=12 't'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=12 't'
  (check_literal)   '"' != 't'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 't'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 't'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 't'
   (check_textlabel) 't' is a text label chstr:'t'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'t' Type:f
  (check_proc_call) 't' is text label

   (check_literal) check_literal:lit=':' idx=13 ''
   (check_literal) check_literal:After drop space:':' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 't'

   (check_operator) 't' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 't':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=13 ''
   (check_literal) check_literal:After drop space:'(' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 't' ref_ndeclare:1

  (scan_vname) scan_vname: 't'
  (scan_vname) scan_vname: ret1 't'
 (scan_variable) scan_variable: '' vname='T'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'T' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=13 ''
  (check_literal) check_literal:After drop space:'(' idx=13 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='T' Float
(process_token)    Frst:1 T:'T' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'T'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:T is not function
token_is_variable: tok:'T'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:T is not function
(init_get_name) 
init_get_name:'T'
(init_get_name) 
init_get_name:'T'
(get_name) 
get_name:gn:'T'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f T
(add_var_info) Name:T Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 T'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '' Before while igncomma:1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 32767
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=13 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=13 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=13 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=13 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:2 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'T' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :T   *************
(type_check_stack_push)  type_check_stack_push: 'T'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'T' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'T' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'T'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:T    **********
(type_check_stack_push)  type_check_stack_push: 'T'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'T' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'T' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'T'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'T' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'T' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (T)
Var: T Float NumIdx:0
infix_stack_push: 'T'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: 'T'
infix_stack_push: 'PRINT(T)'
Done

infix_stack_pop: 'PRINT(T)'
Infix stack result PRINT(T)
(infix_from_rpn) exit  'PRINT(T)'
(process_expression_types) ==RINT(T)==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:009D
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(add_simple_qcode) 'T'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) T: Trapped:0
(set_qcode_header_byte_at) idx:009D len:1 val:01
(set_qcode_header_byte_at) idx:009E len:1 val:FF
(set_qcode_header_byte_at) idx:009F len:1 val:D6
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:00A0 len:1 val:70
(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:00A1
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:00A1 len:1 val:73
(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=13 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=13 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=13 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=13 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=13 ''
     (check_literal) check_literal:After drop space:':' idx=13 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=13 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=13 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=13 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=13 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=13 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=13 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=13 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=13 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:00A2
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print "T=", t
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=13 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=13 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=13 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'a' (97)
 (is_all_spaces) cline[8] = '+' (43)
 (is_all_spaces) cline[9] = 'b' (98)
 (is_all_spaces) cline[10] = '"' (34)
 (is_all_spaces) cline[11] = ',' (44)
 (is_all_spaces) cline[12] = ' ' (32)
 (is_all_spaces) cline[13] = 'a' (97)
 (is_all_spaces) cline[14] = '+' (43)
 (is_all_spaces) cline[15] = 'b' (98)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "a+b", a+b'
********************
**print "a+b", a+b**
********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "a+b", a+b'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "a+b", a+b'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "a+b", a+b'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "a+b", a+b'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "a+b", a+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "a+b", a+b'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "a+b", a+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "a+b", a+b'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "a+b", a+b'

   (check_operator) 'print "a+b", a+b' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "a+b", a+b':
   (check_vname) check_vname ret1 ' "a+b", a+b':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "a+b", a+b'

   (check_literal) check_literal:lit='(' idx=5 ' "a+b", a+b'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "a+b", a+b'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "a+b", a+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"a+b", a+b'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "a+b", a+b'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "a+b", a+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "a+b", a+b'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "a+b", a+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "a+b", a+b'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "a+b", a+b'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "a+b", a+b'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "a+b", a+b'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "a+b", a+b'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "a+b", a+b'
   (check_literal) check_literal:After drop space:':' idx=5 ' "a+b", a+b'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "a+b", a+b'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "a+b", a+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "a+b", a+b'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "a+b", a+b'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "a+b", a+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "a+b", a+b'
   (check_literal) check_literal:After while(): "a+b", a+b
   (check_literal) ret1 Match. ' PRINT' == 'print "a+b", a+b'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "a+b", a+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "a+b", a+b'
   (check_literal) check_literal:After while(): "a+b", a+b
   (check_literal) ret1 Match. ' PRINT' == 'print "a+b", a+b'

   (check_expression) ' "a+b", a+b'

    (check_eitem) check_eitem: '"a+b", a+b'

     (check_function)  '"a+b", a+b'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+b", a+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+b", a+b'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+b", a+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+b", a+b'
      (check_literal) check_literal:After while():a+b", a+b
      (check_literal) ret1 Match. ' "' == '"a+b", a+b'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', a+b' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', a+b' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "a+b", a+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "a+b", a+b'
   (check_literal) check_literal:After while(): "a+b", a+b
   (check_literal) ret1 Match. ' PRINT' == 'print "a+b", a+b'
  (scan_print) Before while

   (check_expression) ' "a+b", a+b'

    (check_eitem) check_eitem: '"a+b", a+b'

     (check_function)  '"a+b", a+b'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+b", a+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+b", a+b'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+b", a+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+b", a+b'
      (check_literal) check_literal:After while():a+b", a+b
      (check_literal) ret1 Match. ' "' == '"a+b", a+b'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', a+b' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', a+b' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "a+b", a+b' igncomma:1

    (check_eitem) check_eitem: '"a+b", a+b'

     (check_function)  '"a+b", a+b'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+b", a+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+b", a+b'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+b", a+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+b", a+b'
      (check_literal) check_literal:After while():a+b", a+b
      (check_literal) ret1 Match. ' "' == '"a+b", a+b'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"a+b", a+b'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+b", a+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+b", a+b'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+b", a+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+b", a+b'
      (check_literal) check_literal:After while():a+b", a+b
      (check_literal) ret1 Match. ' "' == '"a+b", a+b'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"a+b", a+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+b", a+b'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"a+b", a+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+b", a+b'
      (check_literal) check_literal:After while():a+b", a+b
      (check_literal) ret1 Match. ' "' == '"a+b", a+b'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"a+b", a+b'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"a+b", a+b'
       (check_literal) check_literal:After while():a+b", a+b
       (check_literal) ret1 Match. ' "' == '"a+b", a+b'
      (scan_string)   (in if) 'a+b", a+b'
      (scan_string)   (in wh) 'a+b", a+b'
      (scan_string)   (in wh) '+b", a+b'
      (scan_string)   (in wh) '+b", a+b'
      (scan_string)   (in wh) 'b", a+b'
      (scan_string)   (in wh) 'b", a+b'
      (scan_string)   (in wh) '", a+b'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"a+b"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"a+b"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"a+b" is not function
token_is_variable: tok:'"a+b"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"a+b" is not function
(   output_string) [U,()] s "a+b"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', a+b' Before while igncomma:1

    (check_operator) ', a+b' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', a+b' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=11 ', a+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=11 ', a+b'
   (check_literal) check_literal:After while(): a+b
   (check_literal) ret1 Match. ' ,' == ', a+b'

   (scan_literal_core) scan_literal_core:lit=' ,' ', a+b'
   (scan_literal_core) scan_literal_core:After drop space:', a+b'
   (scan_literal_core) scan_literal_core:while loop:, a+b
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=12 ' a+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=13 'a+b'
 (check_literal)   ';' != 'a'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"a+b"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :"a+b"   *************
(type_check_stack_push)  type_check_stack_push: '"a+b"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"a+b"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"a+b"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"a+b"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:"a+b"    **********
(type_check_stack_push)  type_check_stack_push: '"a+b"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"a+b"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"a+b"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"a+b"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"a+b"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"a+b"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("a+b")
infix_stack_push: '"a+b"'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"a+b"'
infix_stack_push: 'PRINT("a+b")'
Done

infix_stack_pop: 'PRINT("a+b")'
Infix stack result PRINT("a+b")
(infix_from_rpn) exit  'PRINT("a+b")'
(process_expression_types) ==RINT("a+b")==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:00A2
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:0 String Literal '"a+b"' EXP_BUFF_ID_STR
(set_qcode_header_byte_at) idx:00A2 len:1 val:24
(set_qcode_header_byte_at) idx:00A3 len:1 val:03
(set_qcode_header_byte_at) idx:00A4 len:1 val:61
(set_qcode_header_byte_at) idx:00A5 len:1 val:2B
(set_qcode_header_byte_at) idx:00A6 len:1 val:62
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:00A7 len:1 val:71
(finalise_expression) Finalise expression done.
 a+b
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:00A8
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:00A8 len:1 val:72
(finalise_expression) Finalise expression done.
 a+b
========================================================
(output_expression_start)

 (check_expression) ' a+b'

  (check_eitem) check_eitem: 'a+b'

   (check_function)  'a+b'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=13 'a+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=13 'a+b'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=13 'a+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=13 'a+b'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+b'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+b'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+b'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=14 '+b'
     (check_literal) check_literal:After drop space:':' idx=14 '+b'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+b'

     (check_operator) 'a+b' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+b':
     (check_vname) check_vname ret1 '+b':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+b'

     (check_literal) check_literal:lit='(' idx=14 '+b'
     (check_literal) check_literal:After drop space:'(' idx=14 '+b'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+b' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) 'b' igncomma:1
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'b'

  (check_function)  'b'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=15 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=15 'b'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=15 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=15 'b'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=16 ''
    (check_literal) check_literal:After drop space:':' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b'

    (check_operator) 'b' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=16 ''
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' a+b' igncomma:1

  (check_eitem) check_eitem: 'a+b'

   (check_function)  'a+b'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=13 'a+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=13 'a+b'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=13 'a+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=13 'a+b'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+b'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+b'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+b'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=14 '+b'
     (check_literal) check_literal:After drop space:':' idx=14 '+b'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+b'

     (check_operator) 'a+b' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+b':
     (check_vname) check_vname ret1 '+b':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+b'

     (check_literal) check_literal:lit='(' idx=14 '+b'
     (check_literal) check_literal:After drop space:'(' idx=14 '+b'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'a+b'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=13 'a+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=13 'a+b'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=13 'a+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=13 'a+b'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a+b'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'a+b'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'a+b'
    (check_textlabel) 'a' is a text label chstr:'a'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
   (check_proc_call) 'a' is text label

    (check_literal) check_literal:lit=':' idx=14 '+b'
    (check_literal) check_literal:After drop space:':' idx=14 '+b'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'a+b'

    (check_operator) 'a+b' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'a+b':
    (check_vname) check_vname ret1 '+b':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+b'

    (check_literal) check_literal:lit='(' idx=14 '+b'
    (check_literal) check_literal:After drop space:'(' idx=14 '+b'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=13 'a+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=13 'a+b'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=13 'a+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=13 'a+b'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'a+b'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'a+b'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'a+b'
   (check_textlabel) 'a' is a text label chstr:'a'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
  (check_proc_call) 'a' is text label

   (check_literal) check_literal:lit=':' idx=14 '+b'
   (check_literal) check_literal:After drop space:':' idx=14 '+b'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'a+b'

   (check_operator) 'a+b' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'a+b':
   (check_vname) check_vname ret1 '+b':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+b'

   (check_literal) check_literal:lit='(' idx=14 '+b'
   (check_literal) check_literal:After drop space:'(' idx=14 '+b'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'a+b' ref_ndeclare:1

  (scan_vname) scan_vname: 'a+b'
  (scan_vname) scan_vname: ret1 'a'
 (scan_variable) scan_variable: '+b' vname='A'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'A' is not other keyword
 (scan_variable) Array test '+b'

  (check_literal) check_literal:lit='(' idx=14 '+b'
  (check_literal) check_literal:After drop space:'(' idx=14 '+b'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='A' Float
(process_token)    Frst:1 T:'A' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'A'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f A
(add_var_info) Name:A Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 A'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+b' Before while igncomma:1

 (check_operator) '+b' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+b' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+b'
 (scan_operator) scan_operator: ret1 'b' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'b' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'b' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'b'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=15 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=15 'b'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=15 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=15 'b'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=16 ''
    (check_literal) check_literal:After drop space:':' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b'

    (check_operator) 'b' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=16 ''
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=15 'b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=15 'b'
  (check_literal)   '%' != 'b'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=15 'b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=15 'b'
  (check_literal)   '"' != 'b'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'b'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'b'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'b'
   (check_textlabel) 'b' is a text label chstr:'b'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
  (check_proc_call) 'b' is text label

   (check_literal) check_literal:lit=':' idx=16 ''
   (check_literal) check_literal:After drop space:':' idx=16 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'b'

   (check_operator) 'b' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'b':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=16 ''
   (check_literal) check_literal:After drop space:'(' idx=16 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'b' ref_ndeclare:1

  (scan_vname) scan_vname: 'b'
  (scan_vname) scan_vname: ret1 'b'
 (scan_variable) scan_variable: '' vname='B'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'B' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=16 ''
  (check_literal) check_literal:After drop space:'(' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='B' Float
(process_token)    Frst:0 T:'B' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'B'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f B
(add_var_info) Name:B Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 B'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ f
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:4 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :A   *************
(type_check_stack_push)  type_check_stack_push: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(process_syntax_tree) *********Processing :B   *************
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print)  N002: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(type_check_stack_display) 001: 'B' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N002) percent:0
(process_syntax_tree) Mutable type (B) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:A    **********
(type_check_stack_push)  type_check_stack_push: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(typecheck_expression)  *** BE:B    **********
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print)  N002: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(type_check_stack_display) 001: 'B' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (A)
Var: A Float NumIdx:0
infix_stack_push: 'A'
(infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
(infix_from_rpn) (+)
infix_stack_pop: 'B'
infix_stack_pop: 'A'
infix_stack_push: '(A + B)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(A + B)'
infix_stack_push: 'PRINT((A + B))'
Done

infix_stack_pop: 'PRINT((A + B))'
Infix stack result PRINT((A + B))
(infix_from_rpn) exit  'PRINT((A + B))'
(process_expression_types) ==RINT((A + B))==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:4 qcode_idx:00A9
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(add_simple_qcode) 'A'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) A: Trapped:0
(set_qcode_header_byte_at) idx:00A9 len:1 val:01
(set_qcode_header_byte_at) idx:00AA len:1 val:FF
(set_qcode_header_byte_at) idx:00AB len:1 val:EE
(output_qcode_for_line) QC: i:1
(add_simple_qcode) 'B'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) B: Trapped:0
(set_qcode_header_byte_at) idx:00AC len:1 val:01
(set_qcode_header_byte_at) idx:00AD len:1 val:FF
(set_qcode_header_byte_at) idx:00AE len:1 val:E6
(output_qcode_for_line) QC: i:2
(add_simple_qcode) '+'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) +: Trapped:0
(set_qcode_header_byte_at) idx:00AF len:1 val:3C
(output_qcode_for_line) QC: i:3
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:00B0 len:1 val:70
(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:4
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:00B1
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:00B1 len:1 val:73
(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=16 ''
     (check_literal) check_literal:After drop space:':' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:00B2
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print "a+b", a+b
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=16 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=16 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'b' (98)
 (is_all_spaces) cline[8] = '+' (43)
 (is_all_spaces) cline[9] = 'c' (99)
 (is_all_spaces) cline[10] = '"' (34)
 (is_all_spaces) cline[11] = ',' (44)
 (is_all_spaces) cline[12] = ' ' (32)
 (is_all_spaces) cline[13] = 'b' (98)
 (is_all_spaces) cline[14] = '+' (43)
 (is_all_spaces) cline[15] = 'c' (99)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "b+c", b+c'
********************
**print "b+c", b+c**
********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "b+c", b+c'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "b+c", b+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "b+c", b+c'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "b+c", b+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "b+c", b+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "b+c", b+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "b+c", b+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "b+c", b+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "b+c", b+c'

   (check_operator) 'print "b+c", b+c' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "b+c", b+c':
   (check_vname) check_vname ret1 ' "b+c", b+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "b+c", b+c'

   (check_literal) check_literal:lit='(' idx=5 ' "b+c", b+c'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "b+c", b+c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "b+c", b+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"b+c", b+c'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "b+c", b+c'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "b+c", b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "b+c", b+c'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "b+c", b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "b+c", b+c'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "b+c", b+c'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "b+c", b+c'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "b+c", b+c'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "b+c", b+c'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "b+c", b+c'
   (check_literal) check_literal:After drop space:':' idx=5 ' "b+c", b+c'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "b+c", b+c'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "b+c", b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "b+c", b+c'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "b+c", b+c'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "b+c", b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "b+c", b+c'
   (check_literal) check_literal:After while(): "b+c", b+c
   (check_literal) ret1 Match. ' PRINT' == 'print "b+c", b+c'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "b+c", b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "b+c", b+c'
   (check_literal) check_literal:After while(): "b+c", b+c
   (check_literal) ret1 Match. ' PRINT' == 'print "b+c", b+c'

   (check_expression) ' "b+c", b+c'

    (check_eitem) check_eitem: '"b+c", b+c'

     (check_function)  '"b+c", b+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"b+c", b+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"b+c", b+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"b+c", b+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"b+c", b+c'
      (check_literal) check_literal:After while():b+c", b+c
      (check_literal) ret1 Match. ' "' == '"b+c", b+c'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', b+c' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', b+c' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "b+c", b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "b+c", b+c'
   (check_literal) check_literal:After while(): "b+c", b+c
   (check_literal) ret1 Match. ' PRINT' == 'print "b+c", b+c'
  (scan_print) Before while

   (check_expression) ' "b+c", b+c'

    (check_eitem) check_eitem: '"b+c", b+c'

     (check_function)  '"b+c", b+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"b+c", b+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"b+c", b+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"b+c", b+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"b+c", b+c'
      (check_literal) check_literal:After while():b+c", b+c
      (check_literal) ret1 Match. ' "' == '"b+c", b+c'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', b+c' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', b+c' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "b+c", b+c' igncomma:1

    (check_eitem) check_eitem: '"b+c", b+c'

     (check_function)  '"b+c", b+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"b+c", b+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"b+c", b+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"b+c", b+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"b+c", b+c'
      (check_literal) check_literal:After while():b+c", b+c
      (check_literal) ret1 Match. ' "' == '"b+c", b+c'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"b+c", b+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"b+c", b+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"b+c", b+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"b+c", b+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"b+c", b+c'
      (check_literal) check_literal:After while():b+c", b+c
      (check_literal) ret1 Match. ' "' == '"b+c", b+c'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"b+c", b+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"b+c", b+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"b+c", b+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"b+c", b+c'
      (check_literal) check_literal:After while():b+c", b+c
      (check_literal) ret1 Match. ' "' == '"b+c", b+c'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"b+c", b+c'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"b+c", b+c'
       (check_literal) check_literal:After while():b+c", b+c
       (check_literal) ret1 Match. ' "' == '"b+c", b+c'
      (scan_string)   (in if) 'b+c", b+c'
      (scan_string)   (in wh) 'b+c", b+c'
      (scan_string)   (in wh) '+c", b+c'
      (scan_string)   (in wh) '+c", b+c'
      (scan_string)   (in wh) 'c", b+c'
      (scan_string)   (in wh) 'c", b+c'
      (scan_string)   (in wh) '", b+c'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"b+c"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"b+c"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"b+c" is not function
token_is_variable: tok:'"b+c"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"b+c" is not function
(   output_string) [U,()] s "b+c"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', b+c' Before while igncomma:1

    (check_operator) ', b+c' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', b+c' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=11 ', b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=11 ', b+c'
   (check_literal) check_literal:After while(): b+c
   (check_literal) ret1 Match. ' ,' == ', b+c'

   (scan_literal_core) scan_literal_core:lit=' ,' ', b+c'
   (scan_literal_core) scan_literal_core:After drop space:', b+c'
   (scan_literal_core) scan_literal_core:while loop:, b+c
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=12 ' b+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=13 'b+c'
 (check_literal)   ';' != 'b'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"b+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :"b+c"   *************
(type_check_stack_push)  type_check_stack_push: '"b+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"b+c"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"b+c"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"b+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:"b+c"    **********
(type_check_stack_push)  type_check_stack_push: '"b+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"b+c"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"b+c"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"b+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"b+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"b+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("b+c")
infix_stack_push: '"b+c"'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"b+c"'
infix_stack_push: 'PRINT("b+c")'
Done

infix_stack_pop: 'PRINT("b+c")'
Infix stack result PRINT("b+c")
(infix_from_rpn) exit  'PRINT("b+c")'
(process_expression_types) ==RINT("b+c")==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:00B2
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:0 String Literal '"b+c"' EXP_BUFF_ID_STR
(set_qcode_header_byte_at) idx:00B2 len:1 val:24
(set_qcode_header_byte_at) idx:00B3 len:1 val:03
(set_qcode_header_byte_at) idx:00B4 len:1 val:62
(set_qcode_header_byte_at) idx:00B5 len:1 val:2B
(set_qcode_header_byte_at) idx:00B6 len:1 val:63
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:00B7 len:1 val:71
(finalise_expression) Finalise expression done.
 b+c
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:00B8
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:00B8 len:1 val:72
(finalise_expression) Finalise expression done.
 b+c
========================================================
(output_expression_start)

 (check_expression) ' b+c'

  (check_eitem) check_eitem: 'b+c'

   (check_function)  'b+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=13 'b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=13 'b+c'
    (check_literal)   '%' != 'b'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=13 'b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=13 'b+c'
    (check_literal)   '"' != 'b'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'b+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'b+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'b+c'
     (check_textlabel) 'b' is a text label chstr:'b'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
    (check_proc_call) 'b' is text label

     (check_literal) check_literal:lit=':' idx=14 '+c'
     (check_literal) check_literal:After drop space:':' idx=14 '+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'b+c'

     (check_operator) 'b+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'b+c':
     (check_vname) check_vname ret1 '+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c'

     (check_literal) check_literal:lit='(' idx=14 '+c'
     (check_literal) check_literal:After drop space:'(' idx=14 '+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) 'c' igncomma:1
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c'

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=15 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=15 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=15 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=15 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=16 ''
    (check_literal) check_literal:After drop space:':' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=16 ''
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' b+c' igncomma:1

  (check_eitem) check_eitem: 'b+c'

   (check_function)  'b+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=13 'b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=13 'b+c'
    (check_literal)   '%' != 'b'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=13 'b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=13 'b+c'
    (check_literal)   '"' != 'b'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'b+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'b+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'b+c'
     (check_textlabel) 'b' is a text label chstr:'b'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
    (check_proc_call) 'b' is text label

     (check_literal) check_literal:lit=':' idx=14 '+c'
     (check_literal) check_literal:After drop space:':' idx=14 '+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'b+c'

     (check_operator) 'b+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'b+c':
     (check_vname) check_vname ret1 '+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c'

     (check_literal) check_literal:lit='(' idx=14 '+c'
     (check_literal) check_literal:After drop space:'(' idx=14 '+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'b+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=13 'b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=13 'b+c'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=13 'b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=13 'b+c'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b+c'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=14 '+c'
    (check_literal) check_literal:After drop space:':' idx=14 '+c'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b+c'

    (check_operator) 'b+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b+c':
    (check_vname) check_vname ret1 '+c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c'

    (check_literal) check_literal:lit='(' idx=14 '+c'
    (check_literal) check_literal:After drop space:'(' idx=14 '+c'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=13 'b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=13 'b+c'
  (check_literal)   '%' != 'b'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=13 'b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=13 'b+c'
  (check_literal)   '"' != 'b'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'b+c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'b+c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'b+c'
   (check_textlabel) 'b' is a text label chstr:'b'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
  (check_proc_call) 'b' is text label

   (check_literal) check_literal:lit=':' idx=14 '+c'
   (check_literal) check_literal:After drop space:':' idx=14 '+c'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'b+c'

   (check_operator) 'b+c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'b+c':
   (check_vname) check_vname ret1 '+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c'

   (check_literal) check_literal:lit='(' idx=14 '+c'
   (check_literal) check_literal:After drop space:'(' idx=14 '+c'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'b+c' ref_ndeclare:1

  (scan_vname) scan_vname: 'b+c'
  (scan_vname) scan_vname: ret1 'b'
 (scan_variable) scan_variable: '+c' vname='B'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'B' is not other keyword
 (scan_variable) Array test '+c'

  (check_literal) check_literal:lit='(' idx=14 '+c'
  (check_literal) check_literal:After drop space:'(' idx=14 '+c'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='B' Float
(process_token)    Frst:1 T:'B' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'B'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f B
(add_var_info) Name:B Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 B'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+c' Before while igncomma:1

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c'
 (scan_operator) scan_operator: ret1 'c' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'c' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=15 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=15 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=15 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=15 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=16 ''
    (check_literal) check_literal:After drop space:':' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=16 ''
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=15 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=15 'c'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=15 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=15 'c'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c'
   (check_textlabel) 'c' is a text label chstr:'c'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
  (check_proc_call) 'c' is text label

   (check_literal) check_literal:lit=':' idx=16 ''
   (check_literal) check_literal:After drop space:':' idx=16 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c'

   (check_operator) 'c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=16 ''
   (check_literal) check_literal:After drop space:'(' idx=16 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c' ref_ndeclare:1

  (scan_vname) scan_vname: 'c'
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '' vname='C'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=16 ''
  (check_literal) check_literal:After drop space:'(' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C' Float
(process_token)    Frst:0 T:'C' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
token_is_variable: tok:'C'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C
(add_var_info) Name:C Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 C'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ f
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:4 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :B   *************
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'B' type:f (1), %:0
(process_syntax_tree) *********Processing :C   *************
(type_check_stack_push)  type_check_stack_push: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print)  N002: 'C' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'B' type:f (1), %:0
(type_check_stack_display) 001: 'C' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N002) percent:0
(process_syntax_tree) Mutable type (C) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:B    **********
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'B' type:f (1), %:0
(typecheck_expression)  *** BE:C    **********
(type_check_stack_push)  type_check_stack_push: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print)  N002: 'C' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'B' type:f (1), %:0
(type_check_stack_display) 001: 'C' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
(infix_from_rpn) (C)
Var: C Float NumIdx:0
infix_stack_push: 'C'
(infix_from_rpn) (+)
infix_stack_pop: 'C'
infix_stack_pop: 'B'
infix_stack_push: '(B + C)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(B + C)'
infix_stack_push: 'PRINT((B + C))'
Done

infix_stack_pop: 'PRINT((B + C))'
Infix stack result PRINT((B + C))
(infix_from_rpn) exit  'PRINT((B + C))'
(process_expression_types) ==RINT((B + C))==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:4 qcode_idx:00B9
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(add_simple_qcode) 'B'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) B: Trapped:0
(set_qcode_header_byte_at) idx:00B9 len:1 val:01
(set_qcode_header_byte_at) idx:00BA len:1 val:FF
(set_qcode_header_byte_at) idx:00BB len:1 val:E6
(output_qcode_for_line) QC: i:1
(add_simple_qcode) 'C'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) C: Trapped:0
(set_qcode_header_byte_at) idx:00BC len:1 val:01
(set_qcode_header_byte_at) idx:00BD len:1 val:FF
(set_qcode_header_byte_at) idx:00BE len:1 val:DE
(output_qcode_for_line) QC: i:2
(add_simple_qcode) '+'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) +: Trapped:0
(set_qcode_header_byte_at) idx:00BF len:1 val:3C
(output_qcode_for_line) QC: i:3
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:00C0 len:1 val:70
(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:4
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:00C1
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:00C1 len:1 val:73
(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=16 ''
     (check_literal) check_literal:After drop space:':' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:00C2
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print "b+c", b+c
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=16 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=16 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'a' (97)
 (is_all_spaces) cline[8] = '+' (43)
 (is_all_spaces) cline[9] = 'c' (99)
 (is_all_spaces) cline[10] = '"' (34)
 (is_all_spaces) cline[11] = ',' (44)
 (is_all_spaces) cline[12] = ' ' (32)
 (is_all_spaces) cline[13] = 'a' (97)
 (is_all_spaces) cline[14] = '+' (43)
 (is_all_spaces) cline[15] = 'c' (99)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "a+c", a+c'
********************
**print "a+c", a+c**
********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "a+c", a+c'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "a+c", a+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "a+c", a+c'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "a+c", a+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "a+c", a+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "a+c", a+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "a+c", a+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "a+c", a+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "a+c", a+c'

   (check_operator) 'print "a+c", a+c' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "a+c", a+c':
   (check_vname) check_vname ret1 ' "a+c", a+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "a+c", a+c'

   (check_literal) check_literal:lit='(' idx=5 ' "a+c", a+c'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "a+c", a+c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "a+c", a+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"a+c", a+c'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "a+c", a+c'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "a+c", a+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "a+c", a+c'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "a+c", a+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "a+c", a+c'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "a+c", a+c'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "a+c", a+c'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "a+c", a+c'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "a+c", a+c'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "a+c", a+c'
   (check_literal) check_literal:After drop space:':' idx=5 ' "a+c", a+c'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "a+c", a+c'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "a+c", a+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "a+c", a+c'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "a+c", a+c'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "a+c", a+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "a+c", a+c'
   (check_literal) check_literal:After while(): "a+c", a+c
   (check_literal) ret1 Match. ' PRINT' == 'print "a+c", a+c'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "a+c", a+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "a+c", a+c'
   (check_literal) check_literal:After while(): "a+c", a+c
   (check_literal) ret1 Match. ' PRINT' == 'print "a+c", a+c'

   (check_expression) ' "a+c", a+c'

    (check_eitem) check_eitem: '"a+c", a+c'

     (check_function)  '"a+c", a+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+c", a+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+c", a+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+c", a+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+c", a+c'
      (check_literal) check_literal:After while():a+c", a+c
      (check_literal) ret1 Match. ' "' == '"a+c", a+c'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', a+c' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', a+c' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "a+c", a+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "a+c", a+c'
   (check_literal) check_literal:After while(): "a+c", a+c
   (check_literal) ret1 Match. ' PRINT' == 'print "a+c", a+c'
  (scan_print) Before while

   (check_expression) ' "a+c", a+c'

    (check_eitem) check_eitem: '"a+c", a+c'

     (check_function)  '"a+c", a+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+c", a+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+c", a+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+c", a+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+c", a+c'
      (check_literal) check_literal:After while():a+c", a+c
      (check_literal) ret1 Match. ' "' == '"a+c", a+c'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', a+c' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', a+c' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "a+c", a+c' igncomma:1

    (check_eitem) check_eitem: '"a+c", a+c'

     (check_function)  '"a+c", a+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+c", a+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+c", a+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+c", a+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+c", a+c'
      (check_literal) check_literal:After while():a+c", a+c
      (check_literal) ret1 Match. ' "' == '"a+c", a+c'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"a+c", a+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+c", a+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+c", a+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+c", a+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+c", a+c'
      (check_literal) check_literal:After while():a+c", a+c
      (check_literal) ret1 Match. ' "' == '"a+c", a+c'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"a+c", a+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+c", a+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"a+c", a+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+c", a+c'
      (check_literal) check_literal:After while():a+c", a+c
      (check_literal) ret1 Match. ' "' == '"a+c", a+c'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"a+c", a+c'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"a+c", a+c'
       (check_literal) check_literal:After while():a+c", a+c
       (check_literal) ret1 Match. ' "' == '"a+c", a+c'
      (scan_string)   (in if) 'a+c", a+c'
      (scan_string)   (in wh) 'a+c", a+c'
      (scan_string)   (in wh) '+c", a+c'
      (scan_string)   (in wh) '+c", a+c'
      (scan_string)   (in wh) 'c", a+c'
      (scan_string)   (in wh) 'c", a+c'
      (scan_string)   (in wh) '", a+c'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"a+c"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"a+c"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"a+c" is not function
token_is_variable: tok:'"a+c"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"a+c" is not function
(   output_string) [U,()] s "a+c"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', a+c' Before while igncomma:1

    (check_operator) ', a+c' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', a+c' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=11 ', a+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=11 ', a+c'
   (check_literal) check_literal:After while(): a+c
   (check_literal) ret1 Match. ' ,' == ', a+c'

   (scan_literal_core) scan_literal_core:lit=' ,' ', a+c'
   (scan_literal_core) scan_literal_core:After drop space:', a+c'
   (scan_literal_core) scan_literal_core:while loop:, a+c
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=12 ' a+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=13 'a+c'
 (check_literal)   ';' != 'a'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"a+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :"a+c"   *************
(type_check_stack_push)  type_check_stack_push: '"a+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"a+c"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"a+c"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"a+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:"a+c"    **********
(type_check_stack_push)  type_check_stack_push: '"a+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"a+c"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"a+c"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"a+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"a+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"a+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("a+c")
infix_stack_push: '"a+c"'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"a+c"'
infix_stack_push: 'PRINT("a+c")'
Done

infix_stack_pop: 'PRINT("a+c")'
Infix stack result PRINT("a+c")
(infix_from_rpn) exit  'PRINT("a+c")'
(process_expression_types) ==RINT("a+c")==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:00C2
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:0 String Literal '"a+c"' EXP_BUFF_ID_STR
(set_qcode_header_byte_at) idx:00C2 len:1 val:24
(set_qcode_header_byte_at) idx:00C3 len:1 val:03
(set_qcode_header_byte_at) idx:00C4 len:1 val:61
(set_qcode_header_byte_at) idx:00C5 len:1 val:2B
(set_qcode_header_byte_at) idx:00C6 len:1 val:63
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:00C7 len:1 val:71
(finalise_expression) Finalise expression done.
 a+c
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:00C8
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:00C8 len:1 val:72
(finalise_expression) Finalise expression done.
 a+c
========================================================
(output_expression_start)

 (check_expression) ' a+c'

  (check_eitem) check_eitem: 'a+c'

   (check_function)  'a+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=13 'a+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=13 'a+c'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=13 'a+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=13 'a+c'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+c'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=14 '+c'
     (check_literal) check_literal:After drop space:':' idx=14 '+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+c'

     (check_operator) 'a+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+c':
     (check_vname) check_vname ret1 '+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c'

     (check_literal) check_literal:lit='(' idx=14 '+c'
     (check_literal) check_literal:After drop space:'(' idx=14 '+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) 'c' igncomma:1
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c'

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=15 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=15 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=15 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=15 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=16 ''
    (check_literal) check_literal:After drop space:':' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=16 ''
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' a+c' igncomma:1

  (check_eitem) check_eitem: 'a+c'

   (check_function)  'a+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=13 'a+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=13 'a+c'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=13 'a+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=13 'a+c'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+c'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=14 '+c'
     (check_literal) check_literal:After drop space:':' idx=14 '+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+c'

     (check_operator) 'a+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+c':
     (check_vname) check_vname ret1 '+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c'

     (check_literal) check_literal:lit='(' idx=14 '+c'
     (check_literal) check_literal:After drop space:'(' idx=14 '+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'a+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=13 'a+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=13 'a+c'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=13 'a+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=13 'a+c'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'a+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'a+c'
    (check_textlabel) 'a' is a text label chstr:'a'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
   (check_proc_call) 'a' is text label

    (check_literal) check_literal:lit=':' idx=14 '+c'
    (check_literal) check_literal:After drop space:':' idx=14 '+c'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'a+c'

    (check_operator) 'a+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'a+c':
    (check_vname) check_vname ret1 '+c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c'

    (check_literal) check_literal:lit='(' idx=14 '+c'
    (check_literal) check_literal:After drop space:'(' idx=14 '+c'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=13 'a+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=13 'a+c'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=13 'a+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=13 'a+c'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'a+c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'a+c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'a+c'
   (check_textlabel) 'a' is a text label chstr:'a'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
  (check_proc_call) 'a' is text label

   (check_literal) check_literal:lit=':' idx=14 '+c'
   (check_literal) check_literal:After drop space:':' idx=14 '+c'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'a+c'

   (check_operator) 'a+c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'a+c':
   (check_vname) check_vname ret1 '+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c'

   (check_literal) check_literal:lit='(' idx=14 '+c'
   (check_literal) check_literal:After drop space:'(' idx=14 '+c'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'a+c' ref_ndeclare:1

  (scan_vname) scan_vname: 'a+c'
  (scan_vname) scan_vname: ret1 'a'
 (scan_variable) scan_variable: '+c' vname='A'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'A' is not other keyword
 (scan_variable) Array test '+c'

  (check_literal) check_literal:lit='(' idx=14 '+c'
  (check_literal) check_literal:After drop space:'(' idx=14 '+c'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='A' Float
(process_token)    Frst:1 T:'A' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'A'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f A
(add_var_info) Name:A Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 A'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+c' Before while igncomma:1

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c'
 (scan_operator) scan_operator: ret1 'c' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'c' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=15 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=15 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=15 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=15 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=16 ''
    (check_literal) check_literal:After drop space:':' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=16 ''
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=15 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=15 'c'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=15 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=15 'c'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c'
   (check_textlabel) 'c' is a text label chstr:'c'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
  (check_proc_call) 'c' is text label

   (check_literal) check_literal:lit=':' idx=16 ''
   (check_literal) check_literal:After drop space:':' idx=16 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c'

   (check_operator) 'c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=16 ''
   (check_literal) check_literal:After drop space:'(' idx=16 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c' ref_ndeclare:1

  (scan_vname) scan_vname: 'c'
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '' vname='C'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=16 ''
  (check_literal) check_literal:After drop space:'(' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C' Float
(process_token)    Frst:0 T:'C' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
token_is_variable: tok:'C'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C
(add_var_info) Name:C Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 C'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ f
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:4 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :A   *************
(type_check_stack_push)  type_check_stack_push: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(process_syntax_tree) *********Processing :C   *************
(type_check_stack_push)  type_check_stack_push: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print)  N002: 'C' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(type_check_stack_display) 001: 'C' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N002) percent:0
(process_syntax_tree) Mutable type (C) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:A    **********
(type_check_stack_push)  type_check_stack_push: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(typecheck_expression)  *** BE:C    **********
(type_check_stack_push)  type_check_stack_push: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print)  N002: 'C' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(type_check_stack_display) 001: 'C' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (A)
Var: A Float NumIdx:0
infix_stack_push: 'A'
(infix_from_rpn) (C)
Var: C Float NumIdx:0
infix_stack_push: 'C'
(infix_from_rpn) (+)
infix_stack_pop: 'C'
infix_stack_pop: 'A'
infix_stack_push: '(A + C)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(A + C)'
infix_stack_push: 'PRINT((A + C))'
Done

infix_stack_pop: 'PRINT((A + C))'
Infix stack result PRINT((A + C))
(infix_from_rpn) exit  'PRINT((A + C))'
(process_expression_types) ==RINT((A + C))==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:4 qcode_idx:00C9
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(add_simple_qcode) 'A'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) A: Trapped:0
(set_qcode_header_byte_at) idx:00C9 len:1 val:01
(set_qcode_header_byte_at) idx:00CA len:1 val:FF
(set_qcode_header_byte_at) idx:00CB len:1 val:EE
(output_qcode_for_line) QC: i:1
(add_simple_qcode) 'C'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) C: Trapped:0
(set_qcode_header_byte_at) idx:00CC len:1 val:01
(set_qcode_header_byte_at) idx:00CD len:1 val:FF
(set_qcode_header_byte_at) idx:00CE len:1 val:DE
(output_qcode_for_line) QC: i:2
(add_simple_qcode) '+'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) +: Trapped:0
(set_qcode_header_byte_at) idx:00CF len:1 val:3C
(output_qcode_for_line) QC: i:3
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:00D0 len:1 val:70
(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:4
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:00D1
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:00D1 len:1 val:73
(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=16 ''
     (check_literal) check_literal:After drop space:':' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:00D2
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print "a+c", a+c
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=16 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=16 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = '(' (40)
 (is_all_spaces) cline[8] = 'a' (97)
 (is_all_spaces) cline[9] = '+' (43)
 (is_all_spaces) cline[10] = 'b' (98)
 (is_all_spaces) cline[11] = ')' (41)
 (is_all_spaces) cline[12] = '+' (43)
 (is_all_spaces) cline[13] = 'c' (99)
 (is_all_spaces) cline[14] = '"' (34)
 (is_all_spaces) cline[15] = ' ' (32)
 (is_all_spaces) cline[16] = '(' (40)
 (is_all_spaces) cline[17] = 'a' (97)
 (is_all_spaces) cline[18] = '+' (43)
 (is_all_spaces) cline[19] = 'b' (98)
 (is_all_spaces) cline[20] = ')' (41)
 (is_all_spaces) cline[21] = '+' (43)
 (is_all_spaces) cline[22] = 'c' (99)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "(a+b)+c" (a+b)+c'
***************************
**print "(a+b)+c" (a+b)+c**
***************************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "(a+b)+c" (a+b)+c'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "(a+b)+c" (a+b)+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "(a+b)+c" (a+b)+c'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "(a+b)+c" (a+b)+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "(a+b)+c" (a+b)+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "(a+b)+c" (a+b)+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "(a+b)+c" (a+b)+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "(a+b)+c" (a+b)+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "(a+b)+c" (a+b)+c'

   (check_operator) 'print "(a+b)+c" (a+b)+c' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "(a+b)+c" (a+b)+c':
   (check_vname) check_vname ret1 ' "(a+b)+c" (a+b)+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "(a+b)+c" (a+b)+c'

   (check_literal) check_literal:lit='(' idx=5 ' "(a+b)+c" (a+b)+c'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "(a+b)+c" (a+b)+c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "(a+b)+c" (a+b)+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"(a+b)+c" (a+b)+c'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "(a+b)+c" (a+b)+c'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "(a+b)+c" (a+b)+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "(a+b)+c" (a+b)+c'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "(a+b)+c" (a+b)+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "(a+b)+c" (a+b)+c'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "(a+b)+c" (a+b)+c'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "(a+b)+c" (a+b)+c'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "(a+b)+c" (a+b)+c'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "(a+b)+c" (a+b)+c'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "(a+b)+c" (a+b)+c'
   (check_literal) check_literal:After drop space:':' idx=5 ' "(a+b)+c" (a+b)+c'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "(a+b)+c" (a+b)+c'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "(a+b)+c" (a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "(a+b)+c" (a+b)+c'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "(a+b)+c" (a+b)+c'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "(a+b)+c" (a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "(a+b)+c" (a+b)+c'
   (check_literal) check_literal:After while(): "(a+b)+c" (a+b)+c
   (check_literal) ret1 Match. ' PRINT' == 'print "(a+b)+c" (a+b)+c'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "(a+b)+c" (a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "(a+b)+c" (a+b)+c'
   (check_literal) check_literal:After while(): "(a+b)+c" (a+b)+c
   (check_literal) ret1 Match. ' PRINT' == 'print "(a+b)+c" (a+b)+c'

   (check_expression) ' "(a+b)+c" (a+b)+c'

    (check_eitem) check_eitem: '"(a+b)+c" (a+b)+c'

     (check_function)  '"(a+b)+c" (a+b)+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) check_literal:After while():(a+b)+c" (a+b)+c
      (check_literal) ret1 Match. ' "' == '"(a+b)+c" (a+b)+c'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '(a+b)+c' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 '(a+b)+c' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "(a+b)+c" (a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "(a+b)+c" (a+b)+c'
   (check_literal) check_literal:After while(): "(a+b)+c" (a+b)+c
   (check_literal) ret1 Match. ' PRINT' == 'print "(a+b)+c" (a+b)+c'
  (scan_print) Before while

   (check_expression) ' "(a+b)+c" (a+b)+c'

    (check_eitem) check_eitem: '"(a+b)+c" (a+b)+c'

     (check_function)  '"(a+b)+c" (a+b)+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) check_literal:After while():(a+b)+c" (a+b)+c
      (check_literal) ret1 Match. ' "' == '"(a+b)+c" (a+b)+c'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '(a+b)+c' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 '(a+b)+c' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "(a+b)+c" (a+b)+c' igncomma:1

    (check_eitem) check_eitem: '"(a+b)+c" (a+b)+c'

     (check_function)  '"(a+b)+c" (a+b)+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) check_literal:After while():(a+b)+c" (a+b)+c
      (check_literal) ret1 Match. ' "' == '"(a+b)+c" (a+b)+c'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"(a+b)+c" (a+b)+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) check_literal:After while():(a+b)+c" (a+b)+c
      (check_literal) ret1 Match. ' "' == '"(a+b)+c" (a+b)+c'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"(a+b)+c" (a+b)+c'
      (check_literal) check_literal:After while():(a+b)+c" (a+b)+c
      (check_literal) ret1 Match. ' "' == '"(a+b)+c" (a+b)+c'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"(a+b)+c" (a+b)+c'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"(a+b)+c" (a+b)+c'
       (check_literal) check_literal:After while():(a+b)+c" (a+b)+c
       (check_literal) ret1 Match. ' "' == '"(a+b)+c" (a+b)+c'
      (scan_string)   (in if) '(a+b)+c" (a+b)+c'
      (scan_string)   (in wh) '(a+b)+c" (a+b)+c'
      (scan_string)   (in wh) 'a+b)+c" (a+b)+c'
      (scan_string)   (in wh) 'a+b)+c" (a+b)+c'
      (scan_string)   (in wh) '+b)+c" (a+b)+c'
      (scan_string)   (in wh) '+b)+c" (a+b)+c'
      (scan_string)   (in wh) 'b)+c" (a+b)+c'
      (scan_string)   (in wh) 'b)+c" (a+b)+c'
      (scan_string)   (in wh) ')+c" (a+b)+c'
      (scan_string)   (in wh) ')+c" (a+b)+c'
      (scan_string)   (in wh) '+c" (a+b)+c'
      (scan_string)   (in wh) '+c" (a+b)+c'
      (scan_string)   (in wh) 'c" (a+b)+c'
      (scan_string)   (in wh) 'c" (a+b)+c'
      (scan_string)   (in wh) '" (a+b)+c'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"(a+b)+c"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"(a+b)+c"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"(a+b)+c" is not function
token_is_variable: tok:'"(a+b)+c"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"(a+b)+c" is not function
(   output_string) [U,()] s "(a+b)+c"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ' (a+b)+c' Before while igncomma:1

    (check_operator) '(a+b)+c' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ' (a+b)+c' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=15 ' (a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=16 '(a+b)+c'
   (check_literal)   ',' != '('
   (check_literal) check_literal: ret0
  (scan_print) After scan expression II

   (check_literal) check_literal:lit=' ;' idx=16 '(a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=16 '(a+b)+c'
   (check_literal)   ';' != '('
   (check_literal) check_literal: ret0
  (scan_print) Checking if delimiter was present
  (scan_print) No delimiter present
  (finalise_expression) Finalise expression Buf i:2 buf2 i:0
  (op_stack_finalise) Finalise stack
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"(a+b)+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_syntax_tree) Pass:2
  (process_syntax_tree) *********Processing :"(a+b)+c"   *************
  (type_check_stack_push)  type_check_stack_push: '"(a+b)+c"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: '"(a+b)+c"' type:2 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '"(a+b)+c"' type:s (2), %:0
  (process_syntax_tree) *********Processing :PRINT   *************
  (process_syntax_tree) PRINT type adjust
  (type_check_stack_pop)   type_check_stack_pop: '"(a+b)+c"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:2
  (typecheck_expression)  *** BE:"(a+b)+c"    **********
  (type_check_stack_push)  type_check_stack_push: '"(a+b)+c"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: '"(a+b)+c"' type:2 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '"(a+b)+c"' type:s (2), %:0
  (typecheck_expression)  *** BE:PRINT    **********
  (typecheck_expression) PRINT type adjust
  (type_check_stack_pop)   type_check_stack_pop: '"(a+b)+c"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"(a+b)+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"(a+b)+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_expression_types) 
==INFIX==

  (infix_from_rpn) ("(a+b)+c")
infix_stack_push: '"(a+b)+c"'
  (infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"(a+b)+c"'
infix_stack_push: 'PRINT("(a+b)+c")'
Done

infix_stack_pop: 'PRINT("(a+b)+c")'
Infix stack result PRINT("(a+b)+c")
  (infix_from_rpn) exit  'PRINT("(a+b)+c")'
  (process_expression_types) ==RINT("(a+b)+c")==
  (process_expression_types) 


  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:00D2
  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) QC: i:0
  (output_qcode_for_line) QC:0 String Literal '"(a+b)+c"' EXP_BUFF_ID_STR
  (set_qcode_header_byte_at) idx:00D2 len:1 val:24
  (set_qcode_header_byte_at) idx:00D3 len:1 val:07
  (set_qcode_header_byte_at) idx:00D4 len:1 val:28
  (set_qcode_header_byte_at) idx:00D5 len:1 val:61
  (set_qcode_header_byte_at) idx:00D6 len:1 val:2B
  (set_qcode_header_byte_at) idx:00D7 len:1 val:62
  (set_qcode_header_byte_at) idx:00D8 len:1 val:29
  (set_qcode_header_byte_at) idx:00D9 len:1 val:2B
  (set_qcode_header_byte_at) idx:00DA len:1 val:63
  (output_qcode_for_line) QC: i:1
  (output_qcode_for_line) QC:PRINT
  (set_qcode_header_byte_at) idx:00DB len:1 val:71
  (finalise_expression) Finalise expression done.
 (a+b)+c
========================================================
(output_expression_start)
  (process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (1)

  (op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
  (op_stack_print) ------------------

  (finalise_expression) Finalise expression Buf i:0 buf2 i:2
  (op_stack_finalise) Finalise stack
  (op_stack_pop) Pop 'PRINT' type:U 
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (0)

  (op_stack_print) ------------------

  (op_stack_finalise) Popped:PRINT U
  (output_operator) [U,()] U PRINT
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_syntax_tree) Pass:2
  (process_syntax_tree) *********Processing :PRINT   *************
default buf_id
  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:2
  (typecheck_expression)  *** BE:PRINT    **********
default buf_id
  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_expression_types) 
==INFIX==

  (infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
  (infix_from_rpn) exit  '<nl>'
  (process_expression_types) ==nl>==
  (process_expression_types) 


  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:00DC
  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) QC: i:0
  (output_qcode_for_line) QC:PRINT
  (set_qcode_header_byte_at) idx:00DC len:1 val:73
  (finalise_expression) Finalise expression done.
 (a+b)+c
========================================================
(output_expression_start)

   (check_expression) ' (a+b)+c'

    (check_eitem) check_eitem: '(a+b)+c'

     (check_function)  '(a+b)+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=16 '(a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=16 '(a+b)+c'
      (check_literal)   '%' != '('
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=16 '(a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=16 '(a+b)+c'
      (check_literal)   '"' != '('
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'' float:0.000000e+00
       (check_float) check_float: ret0

       (check_integer) check_integer: '(a+b)+c'
       (check_integer) check_integer:ret0

       (check_hex) check_hex: '(a+b)+c'
       (check_hex) check_hex:ret0 not '$'
      (check_number) check_number: ret0

      (check_proc_call) check_proc_call:

       (check_textlabel) '(a+b)+c'
       (check_textlabel) '' is a text label chstr:'@'
       (check_textlabel) Exit char:(
       (check_textlabel) check_textlabel:ret1 Name:'' Type:f
      (check_proc_call) '' is text label

       (check_literal) check_literal:lit=':' idx=16 '(a+b)+c'
       (check_literal) check_literal:After drop space:':' idx=16 '(a+b)+c'
       (check_literal)   ':' != '('
       (check_literal) check_literal: ret0
      (check_proc_call) check_proc_call:ret0

      (check_variable) '(a+b)+c'

       (check_operator) '(a+b)+c' igncomma:1
       (check_operator) ret0:is comma: 32767

       (check_vname) check_vname '(a+b)+c':
       (check_vname) check_vname ret0 '(a+b)+c':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret0

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=16 '(a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=16 '(a+b)+c'
      (check_literal) check_literal:After while():a+b)+c
      (check_literal) ret1 Match. ' (' == '(a+b)+c'

      (check_expression) 'a+b)+c'

       (check_eitem) check_eitem: 'a+b)+c'

        (check_function)  'a+b)+c'
        (check_function) ret0

        (check_atom) check_atom:
        (check_atom) check_atom:Checking for character constant

         (check_literal) check_literal:lit=' %' idx=17 'a+b)+c'
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=17 'a+b)+c'
         (check_literal)   '%' != 'a'
         (check_literal) check_literal: ret0
        (check_atom) check_atom:Checking for string

         (check_literal) check_literal:lit=' "' idx=17 'a+b)+c'
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=17 'a+b)+c'
         (check_literal)   '"' != 'a'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) Fltval:'' float:0.000000e+00
          (check_float) check_float: ret0

          (check_integer) check_integer: 'a+b)+c'
          (check_integer) check_integer:ret0

          (check_hex) check_hex: 'a+b)+c'
          (check_hex) check_hex:ret0 not '$'
         (check_number) check_number: ret0

         (check_proc_call) check_proc_call:

          (check_textlabel) 'a+b)+c'
          (check_textlabel) 'a' is a text label chstr:'a'
          (check_textlabel) Exit char:+
          (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
         (check_proc_call) 'a' is text label

          (check_literal) check_literal:lit=':' idx=18 '+b)+c'
          (check_literal) check_literal:After drop space:':' idx=18 '+b)+c'
          (check_literal)   ':' != '+'
          (check_literal) check_literal: ret0
         (check_proc_call) check_proc_call:ret0

         (check_variable) 'a+b)+c'

          (check_operator) 'a+b)+c' igncomma:1
          (check_operator) ret0:is comma: 32767

          (check_vname) check_vname 'a+b)+c':
          (check_vname) check_vname ret1 '+b)+c':
         (check_variable) Name: ''
         (check_variable) check_variable: Ary test '+b)+c'

          (check_literal) check_literal:lit='(' idx=18 '+b)+c'
          (check_literal) check_literal:After drop space:'(' idx=18 '+b)+c'
          (check_literal)   '(' != '+'
          (check_literal) check_literal: ret0
         (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
        (check_variable) check_variable:ret1 
       (check_atom) ret1
      (check_eitem) ret1

      (check_operator) '+b)+c' igncomma:1
      (check_operator) ret1:is comma: 0

      (check_operator) 'b)+c' igncomma:1
      (check_operator) ret0:is comma: 0

      (check_eitem) check_eitem: 'b)+c'

       (check_function)  'b)+c'
       (check_function) ret0

       (check_atom) check_atom:
       (check_atom) check_atom:Checking for character constant

        (check_literal) check_literal:lit=' %' idx=19 'b)+c'
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=19 'b)+c'
        (check_literal)   '%' != 'b'
        (check_literal) check_literal: ret0
       (check_atom) check_atom:Checking for string

        (check_literal) check_literal:lit=' "' idx=19 'b)+c'
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=19 'b)+c'
        (check_literal)   '"' != 'b'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) Fltval:'' float:0.000000e+00
         (check_float) check_float: ret0

         (check_integer) check_integer: 'b)+c'
         (check_integer) check_integer:ret0

         (check_hex) check_hex: 'b)+c'
         (check_hex) check_hex:ret0 not '$'
        (check_number) check_number: ret0

        (check_proc_call) check_proc_call:

         (check_textlabel) 'b)+c'
         (check_textlabel) 'b' is a text label chstr:'b'
         (check_textlabel) Exit char:)
         (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
        (check_proc_call) 'b' is text label

         (check_literal) check_literal:lit=':' idx=20 ')+c'
         (check_literal) check_literal:After drop space:':' idx=20 ')+c'
         (check_literal)   ':' != ')'
         (check_literal) check_literal: ret0
        (check_proc_call) check_proc_call:ret0

        (check_variable) 'b)+c'

         (check_operator) 'b)+c' igncomma:1
         (check_operator) ret0:is comma: 32767

         (check_vname) check_vname 'b)+c':
         (check_vname) check_vname ret1 ')+c':
        (check_variable) Name: ''
        (check_variable) check_variable: Ary test ')+c'

         (check_literal) check_literal:lit='(' idx=20 ')+c'
         (check_literal) check_literal:After drop space:'(' idx=20 ')+c'
         (check_literal)   '(' != ')'
         (check_literal) check_literal: ret0
        (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
       (check_variable) check_variable:ret1 
      (check_atom) ret1
     (check_eitem) ret1
    (check_expression) n commas now:0

     (check_literal) check_literal:lit=' %' idx=20 ')+c'
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=20 ')+c'
     (check_literal)   '%' != ')'
     (check_literal) check_literal: ret0

     (check_operator) ')+c' igncomma:1
     (check_operator) ret0:is comma: 0
    (check_expression) ret1 ')+c' commas:0

    (check_literal) check_literal:lit=' )' idx=20 ')+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:')' idx=20 ')+c'
    (check_literal) check_literal:After while():+c
    (check_literal) ret1 Match. ' )' == ')+c'
   (check_sub_expr) check_sub_expr: ret1
  (check_eitem) ret1

  (check_operator) '+c' igncomma:1
  (check_operator) ret1:is comma: 0

  (check_operator) 'c' igncomma:1
  (check_operator) ret0:is comma: 0

  (check_eitem) check_eitem: 'c'

   (check_function)  'c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=22 'c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 'c'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=22 'c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 'c'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c'
     (check_textlabel) 'c' is a text label chstr:'c'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
    (check_proc_call) 'c' is text label

     (check_literal) check_literal:lit=':' idx=23 ''
     (check_literal) check_literal:After drop space:':' idx=23 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c'

     (check_operator) 'c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=23 ''
     (check_literal) check_literal:After drop space:'(' idx=23 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=23 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=23 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' (a+b)+c' igncomma:1

  (check_eitem) check_eitem: '(a+b)+c'

   (check_function)  '(a+b)+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=16 '(a+b)+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=16 '(a+b)+c'
    (check_literal)   '%' != '('
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=16 '(a+b)+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=16 '(a+b)+c'
    (check_literal)   '"' != '('
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: '(a+b)+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: '(a+b)+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) '(a+b)+c'
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:(
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=16 '(a+b)+c'
     (check_literal) check_literal:After drop space:':' idx=16 '(a+b)+c'
     (check_literal)   ':' != '('
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) '(a+b)+c'

     (check_operator) '(a+b)+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '(a+b)+c':
     (check_vname) check_vname ret0 '(a+b)+c':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=16 '(a+b)+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=16 '(a+b)+c'
    (check_literal) check_literal:After while():a+b)+c
    (check_literal) ret1 Match. ' (' == '(a+b)+c'

    (check_expression) 'a+b)+c'

     (check_eitem) check_eitem: 'a+b)+c'

      (check_function)  'a+b)+c'
      (check_function) ret0

      (check_atom) check_atom:
      (check_atom) check_atom:Checking for character constant

       (check_literal) check_literal:lit=' %' idx=17 'a+b)+c'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=17 'a+b)+c'
       (check_literal)   '%' != 'a'
       (check_literal) check_literal: ret0
      (check_atom) check_atom:Checking for string

       (check_literal) check_literal:lit=' "' idx=17 'a+b)+c'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=17 'a+b)+c'
       (check_literal)   '"' != 'a'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) Fltval:'' float:0.000000e+00
        (check_float) check_float: ret0

        (check_integer) check_integer: 'a+b)+c'
        (check_integer) check_integer:ret0

        (check_hex) check_hex: 'a+b)+c'
        (check_hex) check_hex:ret0 not '$'
       (check_number) check_number: ret0

       (check_proc_call) check_proc_call:

        (check_textlabel) 'a+b)+c'
        (check_textlabel) 'a' is a text label chstr:'a'
        (check_textlabel) Exit char:+
        (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
       (check_proc_call) 'a' is text label

        (check_literal) check_literal:lit=':' idx=18 '+b)+c'
        (check_literal) check_literal:After drop space:':' idx=18 '+b)+c'
        (check_literal)   ':' != '+'
        (check_literal) check_literal: ret0
       (check_proc_call) check_proc_call:ret0

       (check_variable) 'a+b)+c'

        (check_operator) 'a+b)+c' igncomma:1
        (check_operator) ret0:is comma: 32767

        (check_vname) check_vname 'a+b)+c':
        (check_vname) check_vname ret1 '+b)+c':
       (check_variable) Name: ''
       (check_variable) check_variable: Ary test '+b)+c'

        (check_literal) check_literal:lit='(' idx=18 '+b)+c'
        (check_literal) check_literal:After drop space:'(' idx=18 '+b)+c'
        (check_literal)   '(' != '+'
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
      (check_variable) check_variable:ret1 
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '+b)+c' igncomma:1
    (check_operator) ret1:is comma: 0

    (check_operator) 'b)+c' igncomma:1
    (check_operator) ret0:is comma: 0

    (check_eitem) check_eitem: 'b)+c'

     (check_function)  'b)+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=19 'b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=19 'b)+c'
      (check_literal)   '%' != 'b'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=19 'b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=19 'b)+c'
      (check_literal)   '"' != 'b'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'' float:0.000000e+00
       (check_float) check_float: ret0

       (check_integer) check_integer: 'b)+c'
       (check_integer) check_integer:ret0

       (check_hex) check_hex: 'b)+c'
       (check_hex) check_hex:ret0 not '$'
      (check_number) check_number: ret0

      (check_proc_call) check_proc_call:

       (check_textlabel) 'b)+c'
       (check_textlabel) 'b' is a text label chstr:'b'
       (check_textlabel) Exit char:)
       (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
      (check_proc_call) 'b' is text label

       (check_literal) check_literal:lit=':' idx=20 ')+c'
       (check_literal) check_literal:After drop space:':' idx=20 ')+c'
       (check_literal)   ':' != ')'
       (check_literal) check_literal: ret0
      (check_proc_call) check_proc_call:ret0

      (check_variable) 'b)+c'

       (check_operator) 'b)+c' igncomma:1
       (check_operator) ret0:is comma: 32767

       (check_vname) check_vname 'b)+c':
       (check_vname) check_vname ret1 ')+c':
      (check_variable) Name: ''
      (check_variable) check_variable: Ary test ')+c'

       (check_literal) check_literal:lit='(' idx=20 ')+c'
       (check_literal) check_literal:After drop space:'(' idx=20 ')+c'
       (check_literal)   '(' != ')'
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) ret1
   (check_eitem) ret1
  (check_expression) n commas now:0

   (check_literal) check_literal:lit=' %' idx=20 ')+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=20 ')+c'
   (check_literal)   '%' != ')'
   (check_literal) check_literal: ret0

   (check_operator) ')+c' igncomma:1
   (check_operator) ret0:is comma: 0
  (check_expression) ret1 ')+c' commas:0

  (check_literal) check_literal:lit=' )' idx=20 ')+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:')' idx=20 ')+c'
  (check_literal) check_literal:After while():+c
  (check_literal) ret1 Match. ' )' == ')+c'
 (check_sub_expr) check_sub_expr: ret1
(check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  '(a+b)+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=16 '(a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=16 '(a+b)+c'
   (check_literal)   '%' != '('
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=16 '(a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=16 '(a+b)+c'
   (check_literal)   '"' != '('
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: '(a+b)+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: '(a+b)+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) '(a+b)+c'
    (check_textlabel) '' is a text label chstr:'@'
    (check_textlabel) Exit char:(
    (check_textlabel) check_textlabel:ret1 Name:'' Type:f
   (check_proc_call) '' is text label

    (check_literal) check_literal:lit=':' idx=16 '(a+b)+c'
    (check_literal) check_literal:After drop space:':' idx=16 '(a+b)+c'
    (check_literal)   ':' != '('
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) '(a+b)+c'

    (check_operator) '(a+b)+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname '(a+b)+c':
    (check_vname) check_vname ret0 '(a+b)+c':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret0

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=16 '(a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=16 '(a+b)+c'
   (check_literal) check_literal:After while():a+b)+c
   (check_literal) ret1 Match. ' (' == '(a+b)+c'

   (check_expression) 'a+b)+c'

    (check_eitem) check_eitem: 'a+b)+c'

     (check_function)  'a+b)+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=17 'a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=17 'a+b)+c'
      (check_literal)   '%' != 'a'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=17 'a+b)+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=17 'a+b)+c'
      (check_literal)   '"' != 'a'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'' float:0.000000e+00
       (check_float) check_float: ret0

       (check_integer) check_integer: 'a+b)+c'
       (check_integer) check_integer:ret0

       (check_hex) check_hex: 'a+b)+c'
       (check_hex) check_hex:ret0 not '$'
      (check_number) check_number: ret0

      (check_proc_call) check_proc_call:

       (check_textlabel) 'a+b)+c'
       (check_textlabel) 'a' is a text label chstr:'a'
       (check_textlabel) Exit char:+
       (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
      (check_proc_call) 'a' is text label

       (check_literal) check_literal:lit=':' idx=18 '+b)+c'
       (check_literal) check_literal:After drop space:':' idx=18 '+b)+c'
       (check_literal)   ':' != '+'
       (check_literal) check_literal: ret0
      (check_proc_call) check_proc_call:ret0

      (check_variable) 'a+b)+c'

       (check_operator) 'a+b)+c' igncomma:1
       (check_operator) ret0:is comma: 32767

       (check_vname) check_vname 'a+b)+c':
       (check_vname) check_vname ret1 '+b)+c':
      (check_variable) Name: ''
      (check_variable) check_variable: Ary test '+b)+c'

       (check_literal) check_literal:lit='(' idx=18 '+b)+c'
       (check_literal) check_literal:After drop space:'(' idx=18 '+b)+c'
       (check_literal)   '(' != '+'
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) ret1
   (check_eitem) ret1

   (check_operator) '+b)+c' igncomma:1
   (check_operator) ret1:is comma: 0

   (check_operator) 'b)+c' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_eitem) check_eitem: 'b)+c'

    (check_function)  'b)+c'
    (check_function) ret0

    (check_atom) check_atom:
    (check_atom) check_atom:Checking for character constant

     (check_literal) check_literal:lit=' %' idx=19 'b)+c'
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=19 'b)+c'
     (check_literal)   '%' != 'b'
     (check_literal) check_literal: ret0
    (check_atom) check_atom:Checking for string

     (check_literal) check_literal:lit=' "' idx=19 'b)+c'
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=19 'b)+c'
     (check_literal)   '"' != 'b'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) Fltval:'' float:0.000000e+00
      (check_float) check_float: ret0

      (check_integer) check_integer: 'b)+c'
      (check_integer) check_integer:ret0

      (check_hex) check_hex: 'b)+c'
      (check_hex) check_hex:ret0 not '$'
     (check_number) check_number: ret0

     (check_proc_call) check_proc_call:

      (check_textlabel) 'b)+c'
      (check_textlabel) 'b' is a text label chstr:'b'
      (check_textlabel) Exit char:)
      (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
     (check_proc_call) 'b' is text label

      (check_literal) check_literal:lit=':' idx=20 ')+c'
      (check_literal) check_literal:After drop space:':' idx=20 ')+c'
      (check_literal)   ':' != ')'
      (check_literal) check_literal: ret0
     (check_proc_call) check_proc_call:ret0

     (check_variable) 'b)+c'

      (check_operator) 'b)+c' igncomma:1
      (check_operator) ret0:is comma: 32767

      (check_vname) check_vname 'b)+c':
      (check_vname) check_vname ret1 ')+c':
     (check_variable) Name: ''
     (check_variable) check_variable: Ary test ')+c'

      (check_literal) check_literal:lit='(' idx=20 ')+c'
      (check_literal) check_literal:After drop space:'(' idx=20 ')+c'
      (check_literal)   '(' != ')'
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) ret1
  (check_eitem) ret1
 (check_expression) n commas now:0

  (check_literal) check_literal:lit=' %' idx=20 ')+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=20 ')+c'
  (check_literal)   '%' != ')'
  (check_literal) check_literal: ret0

  (check_operator) ')+c' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret1 ')+c' commas:0

 (check_literal) check_literal:lit=' )' idx=20 ')+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:')' idx=20 ')+c'
 (check_literal) check_literal:After while():+c
 (check_literal) ret1 Match. ' )' == ')+c'
(check_sub_expr) check_sub_expr: ret1

 (scan_sub_expr) scan_sub_expr:

  (scan_literal_core) scan_literal_core:lit=' (' '(a+b)+c'
  (scan_literal_core) scan_literal_core:After drop space:'(a+b)+c'
  (scan_literal_core) scan_literal_core:while loop:(a+b)+c
  (scan_literal_core) ret1
 (process_token)    Frst:1 T:'(' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
(output_sub_start)
 Push:'('
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: ( type:U id:EXP_BUFF_ID_SUB_START
 (op_stack_print) ------------------

 (scan_literal) ret1
(scan_sub_expr) Before scan expression

 (scan_expression) 'a+b)+c' igncomma:0

  (check_eitem) check_eitem: 'a+b)+c'

   (check_function)  'a+b)+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=17 'a+b)+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=17 'a+b)+c'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=17 'a+b)+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=17 'a+b)+c'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+b)+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+b)+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+b)+c'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=18 '+b)+c'
     (check_literal) check_literal:After drop space:':' idx=18 '+b)+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+b)+c'

     (check_operator) 'a+b)+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+b)+c':
     (check_vname) check_vname ret1 '+b)+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+b)+c'

     (check_literal) check_literal:lit='(' idx=18 '+b)+c'
     (check_literal) check_literal:After drop space:'(' idx=18 '+b)+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'a+b)+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=17 'a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=17 'a+b)+c'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=17 'a+b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=17 'a+b)+c'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a+b)+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'a+b)+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'a+b)+c'
    (check_textlabel) 'a' is a text label chstr:'a'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
   (check_proc_call) 'a' is text label

    (check_literal) check_literal:lit=':' idx=18 '+b)+c'
    (check_literal) check_literal:After drop space:':' idx=18 '+b)+c'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'a+b)+c'

    (check_operator) 'a+b)+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'a+b)+c':
    (check_vname) check_vname ret1 '+b)+c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+b)+c'

    (check_literal) check_literal:lit='(' idx=18 '+b)+c'
    (check_literal) check_literal:After drop space:'(' idx=18 '+b)+c'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=17 'a+b)+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=17 'a+b)+c'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=17 'a+b)+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=17 'a+b)+c'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'a+b)+c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'a+b)+c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'a+b)+c'
   (check_textlabel) 'a' is a text label chstr:'a'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
  (check_proc_call) 'a' is text label

   (check_literal) check_literal:lit=':' idx=18 '+b)+c'
   (check_literal) check_literal:After drop space:':' idx=18 '+b)+c'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'a+b)+c'

   (check_operator) 'a+b)+c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'a+b)+c':
   (check_vname) check_vname ret1 '+b)+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+b)+c'

   (check_literal) check_literal:lit='(' idx=18 '+b)+c'
   (check_literal) check_literal:After drop space:'(' idx=18 '+b)+c'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'a+b)+c' ref_ndeclare:1

  (scan_vname) scan_vname: 'a+b)+c'
  (scan_vname) scan_vname: ret1 'a'
 (scan_variable) scan_variable: '+b)+c' vname='A'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'A' is not other keyword
 (scan_variable) Array test '+b)+c'

  (check_literal) check_literal:lit='(' idx=18 '+b)+c'
  (check_literal) check_literal:After drop space:'(' idx=18 '+b)+c'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='A' Float
(process_token)    Frst:0 T:'A' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'A'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
process_token:type:f
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,(U)] f A
(add_var_info) Name:A Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 A'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+b)+c' Before while igncomma:0

 (check_operator) '+b)+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '+b)+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+b)+c'

  (check_literal) check_literal:lit=' ,' idx=18 '+b)+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=18 '+b)+c'
  (check_literal)   ',' != '+'
  (check_literal) check_literal: ret0
 (scan_operator) scan_operator: ret1 'b)+c' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:(
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (2)

(op_stack_print) 000: ( type:U id:EXP_BUFF_ID_SUB_START
(op_stack_print) 001: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'b)+c' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) 'b)+c' Before scan_eitem igncomma:0

 (scan_eitem) scan_eitem:

  (check_function)  'b)+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=19 'b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=19 'b)+c'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=19 'b)+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=19 'b)+c'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b)+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b)+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b)+c'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:)
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=20 ')+c'
    (check_literal) check_literal:After drop space:':' idx=20 ')+c'
    (check_literal)   ':' != ')'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b)+c'

    (check_operator) 'b)+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b)+c':
    (check_vname) check_vname ret1 ')+c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ')+c'

    (check_literal) check_literal:lit='(' idx=20 ')+c'
    (check_literal) check_literal:After drop space:'(' idx=20 ')+c'
    (check_literal)   '(' != ')'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=19 'b)+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=19 'b)+c'
  (check_literal)   '%' != 'b'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=19 'b)+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=19 'b)+c'
  (check_literal)   '"' != 'b'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'b)+c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'b)+c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'b)+c'
   (check_textlabel) 'b' is a text label chstr:'b'
   (check_textlabel) Exit char:)
   (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
  (check_proc_call) 'b' is text label

   (check_literal) check_literal:lit=':' idx=20 ')+c'
   (check_literal) check_literal:After drop space:':' idx=20 ')+c'
   (check_literal)   ':' != ')'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'b)+c'

   (check_operator) 'b)+c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'b)+c':
   (check_vname) check_vname ret1 ')+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ')+c'

   (check_literal) check_literal:lit='(' idx=20 ')+c'
   (check_literal) check_literal:After drop space:'(' idx=20 ')+c'
   (check_literal)   '(' != ')'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'b)+c' ref_ndeclare:1

  (scan_vname) scan_vname: 'b)+c'
  (scan_vname) scan_vname: ret1 'b'
 (scan_variable) scan_variable: ')+c' vname='B'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'B' is not other keyword
 (scan_variable) Array test ')+c'

  (check_literal) check_literal:lit='(' idx=20 ')+c'
  (check_literal) check_literal:After drop space:'(' idx=20 ')+c'
  (check_literal)   '(' != ')'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='B' Float
(process_token)    Frst:0 T:'B' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'B'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,(U)] f B
(add_var_info) Name:B Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 B'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=20 ')+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=20 ')+c'
 (check_literal)   '%' != ')'
 (check_literal) check_literal: ret0

 (check_operator) ')+c' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 ')+c' commas:0
(scan_sub_expr) scan expr ok, scanning for )

 (scan_literal_core) scan_literal_core:lit=' )' ')+c'
 (scan_literal_core) scan_literal_core:After drop space:')+c'
 (scan_literal_core) scan_literal_core:while loop:)+c
 (scan_literal_core) ret1
(process_token)    Frst:0 T:')' toktype:i exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) 
Pop 3
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: ( type:U id:EXP_BUFF_ID_SUB_START
(op_stack_print) ------------------

(output_operator) [f,(U)] f +
Pop 4
(op_stack_pop) Pop '(' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(  output_sub_end)
(  output_sub_end)
(scan_literal) ret1
(scan_sub_expr) ret1
(scan_expression) '+c' Before while igncomma:1

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c'
 (scan_operator) scan_operator: ret1 'c' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:U bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:U id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'c' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=22 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=22 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=22 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=22 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=23 ''
    (check_literal) check_literal:After drop space:':' idx=23 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=23 ''
    (check_literal) check_literal:After drop space:'(' idx=23 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=22 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=22 'c'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=22 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=22 'c'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c'
   (check_textlabel) 'c' is a text label chstr:'c'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
  (check_proc_call) 'c' is text label

   (check_literal) check_literal:lit=':' idx=23 ''
   (check_literal) check_literal:After drop space:':' idx=23 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c'

   (check_operator) 'c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=23 ''
   (check_literal) check_literal:After drop space:'(' idx=23 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c' ref_ndeclare:1

  (scan_vname) scan_vname: 'c'
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '' vname='C'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=23 ''
  (check_literal) check_literal:After drop space:'(' idx=23 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C' Float
(process_token)    Frst:0 T:'C' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
token_is_variable: tok:'C'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
process_token:type:f
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,()] f C
(add_var_info) Name:C Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 C'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=23 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=23 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ U
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=23 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=23 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=23 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=23 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:9 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_SUB_START                  ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N006       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  2: 5 4  nb 0:()
N007       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  2: 6 1  nb 0:()
N008       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 7 4  nb 0:()
N009       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :   *************
(type_check_stack_display) Type Check Stack (0)
(process_syntax_tree) *********Processing :A   *************
(type_check_stack_push)  type_check_stack_push: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N002: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(process_syntax_tree) *********Processing :B   *************
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N002: 'A' type:1 %:0
(type_check_stack_print)  N003: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(type_check_stack_display) 001: 'B' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N002: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N003) percent:0
(process_syntax_tree) Mutable type (B) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N004: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :   *************
(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :   *************
(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :C   *************
(type_check_stack_push)  type_check_stack_push: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N004: '000' type:1 %:0
(type_check_stack_print)  N007: 'C' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: '000' type:f (1), %:0
(type_check_stack_display) 001: 'C' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N004: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N007) percent:0
(process_syntax_tree) Mutable type (C) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N008: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:    **********
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression)  *** BE:A    **********
(type_check_stack_push)  type_check_stack_push: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N002: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(typecheck_expression)  *** BE:B    **********
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N002: 'A' type:1 %:0
(type_check_stack_print)  N003: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(type_check_stack_display) 001: 'B' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N002: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N004: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:    **********
(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:    **********
(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:C    **********
(type_check_stack_push)  type_check_stack_push: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N004: '000' type:1 %:0
(type_check_stack_print)  N007: 'C' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: '000' type:f (1), %:0
(type_check_stack_display) 001: 'C' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N004: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N008: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_SUB_START                  ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N006       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  2: 5 4  nb 0:()
N007       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N008       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 7 4  nb 0:()
N009       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_SUB_START                  ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N006       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  2: 5 4  nb 0:()
N007       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N008       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 7 4  nb 0:()
N009       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ()
(infix_from_rpn) (A)
Var: A Float NumIdx:0
infix_stack_push: 'A'
(infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
(infix_from_rpn) (+)
infix_stack_pop: 'B'
infix_stack_pop: 'A'
infix_stack_push: '(A + B)'
(infix_from_rpn) ()
(infix_from_rpn) ()
(infix_from_rpn) (C)
Var: C Float NumIdx:0
infix_stack_push: 'C'
(infix_from_rpn) (+)
infix_stack_pop: 'C'
infix_stack_pop: '(A + B)'
infix_stack_push: '((A + B) + C)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '((A + B) + C)'
infix_stack_push: 'PRINT(((A + B) + C))'
Done

infix_stack_pop: 'PRINT(((A + B) + C))'
Infix stack result PRINT(((A + B) + C))
(infix_from_rpn) exit  'PRINT(((A + B) + C))'
(process_expression_types) ==RINT(((A + B) + C))==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:9 qcode_idx:00DD
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(add_simple_qcode) ''
(add_simple_qcode) Op type:U op access:Read qcode_type:U
(add_simple_qcode) NULL vi
(add_simple_qcode) Not found
(output_qcode_for_line) QC: i:1
(add_simple_qcode) 'A'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) A: Trapped:0
(set_qcode_header_byte_at) idx:00DD len:1 val:01
(set_qcode_header_byte_at) idx:00DE len:1 val:FF
(set_qcode_header_byte_at) idx:00DF len:1 val:EE
(output_qcode_for_line) QC: i:2
(add_simple_qcode) 'B'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) B: Trapped:0
(set_qcode_header_byte_at) idx:00E0 len:1 val:01
(set_qcode_header_byte_at) idx:00E1 len:1 val:FF
(set_qcode_header_byte_at) idx:00E2 len:1 val:E6
(output_qcode_for_line) QC: i:3
(add_simple_qcode) '+'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) +: Trapped:0
(set_qcode_header_byte_at) idx:00E3 len:1 val:3C
(output_qcode_for_line) QC: i:4
(add_simple_qcode) ''
(add_simple_qcode) Op type:U op access:Read qcode_type:U
(add_simple_qcode) Not found
(output_qcode_for_line) QC: i:5
(add_simple_qcode) ''
(add_simple_qcode) Op type:U op access:Read qcode_type:U
(add_simple_qcode) Not found
(output_qcode_for_line) QC: i:6
(add_simple_qcode) 'C'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) C: Trapped:0
(set_qcode_header_byte_at) idx:00E4 len:1 val:01
(set_qcode_header_byte_at) idx:00E5 len:1 val:FF
(set_qcode_header_byte_at) idx:00E6 len:1 val:DE
(output_qcode_for_line) QC: i:7
(add_simple_qcode) '+'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) +: Trapped:0
(set_qcode_header_byte_at) idx:00E7 len:1 val:3C
(output_qcode_for_line) QC: i:8
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:00E8 len:1 val:70
(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:9
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:00E9
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:00E9 len:1 val:73
(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=23 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=23 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=23 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=23 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=23 ''
     (check_literal) check_literal:After drop space:':' idx=23 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=23 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=23 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=23 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=23 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=23 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=23 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=23 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=23 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:00EA
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print "(a+b)+c" (a+b)+c
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=23 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=23 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=23 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'a' (97)
 (is_all_spaces) cline[1] = 'b' (98)
 (is_all_spaces) cline[2] = ' ' (32)
 (is_all_spaces) cline[3] = '=' (61)
 (is_all_spaces) cline[4] = ' ' (32)
 (is_all_spaces) cline[5] = 'a' (97)
 (is_all_spaces) cline[6] = '+' (43)
 (is_all_spaces) cline[7] = 'b' (98)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'ab = a+b'
************
**ab = a+b**
************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'ab = a+b'
 (check_literal) check_literal:After drop space:'REM' idx=0 'ab = a+b'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'ab = a+b'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'ab = a+b'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'ab = a+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'ab = a+b'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'ab = a+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'ab = a+b'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'ab = a+b'

   (check_operator) 'ab = a+b' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'ab = a+b':
   (check_vname) check_vname ret1 ' = a+b':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' = a+b'

   (check_literal) check_literal:lit='(' idx=2 ' = a+b'
   (check_literal) check_literal:After drop space:'(' idx=2 ' = a+b'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=2 ' = a+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=3 '= a+b'
 (check_literal) check_literal:After while(): a+b
 (check_literal) ret1 Match. ' =' == ' = a+b'

 (check_expression) ' a+b'

  (check_eitem) check_eitem: 'a+b'

   (check_function)  'a+b'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=5 'a+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a+b'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=5 'a+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a+b'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+b'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+b'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+b'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=6 '+b'
     (check_literal) check_literal:After drop space:':' idx=6 '+b'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+b'

     (check_operator) 'a+b' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+b':
     (check_vname) check_vname ret1 '+b':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+b'

     (check_literal) check_literal:lit='(' idx=6 '+b'
     (check_literal) check_literal:After drop space:'(' idx=6 '+b'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+b' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) 'b' igncomma:0
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'b'

  (check_function)  'b'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=7 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=7 'b'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=7 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=7 'b'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=8 ''
    (check_literal) check_literal:After drop space:':' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b'

    (check_operator) 'b' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=8 ''
    (check_literal) check_literal:After drop space:'(' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'ab = a+b' ref_ndeclare:1

   (scan_vname) scan_vname: 'ab = a+b'
   (scan_vname) scan_vname: ret1 'ab'
  (scan_variable) scan_variable: ' = a+b' vname='AB'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'AB' is not other keyword
  (scan_variable) Array test ' = a+b'

   (check_literal) check_literal:lit='(' idx=2 ' = a+b'
   (check_literal) check_literal:After drop space:'(' idx=2 ' = a+b'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='AB' Float
 (process_token)    Frst:1 T:'AB' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'AB'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AB is not function
token_is_variable: tok:'AB'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AB is not function
(init_get_name) 
init_get_name:'AB'
(init_get_name) 
init_get_name:'AB'
(get_name) 
get_name:gn:'AB'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f AB
(add_var_info) Name:AB Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                AB'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' ' = a+b'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= a+b'
 (scan_assignment_equals) scan_assignment_equals:while loop:= a+b
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' a+b' igncomma:0

  (check_eitem) check_eitem: 'a+b'

   (check_function)  'a+b'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=5 'a+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a+b'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=5 'a+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a+b'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+b'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+b'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+b'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=6 '+b'
     (check_literal) check_literal:After drop space:':' idx=6 '+b'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+b'

     (check_operator) 'a+b' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+b':
     (check_vname) check_vname ret1 '+b':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+b'

     (check_literal) check_literal:lit='(' idx=6 '+b'
     (check_literal) check_literal:After drop space:'(' idx=6 '+b'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'a+b'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=5 'a+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'a+b'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=5 'a+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'a+b'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a+b'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'a+b'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'a+b'
    (check_textlabel) 'a' is a text label chstr:'a'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
   (check_proc_call) 'a' is text label

    (check_literal) check_literal:lit=':' idx=6 '+b'
    (check_literal) check_literal:After drop space:':' idx=6 '+b'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'a+b'

    (check_operator) 'a+b' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'a+b':
    (check_vname) check_vname ret1 '+b':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+b'

    (check_literal) check_literal:lit='(' idx=6 '+b'
    (check_literal) check_literal:After drop space:'(' idx=6 '+b'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=5 'a+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=5 'a+b'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=5 'a+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=5 'a+b'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'a+b'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'a+b'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'a+b'
   (check_textlabel) 'a' is a text label chstr:'a'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
  (check_proc_call) 'a' is text label

   (check_literal) check_literal:lit=':' idx=6 '+b'
   (check_literal) check_literal:After drop space:':' idx=6 '+b'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'a+b'

   (check_operator) 'a+b' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'a+b':
   (check_vname) check_vname ret1 '+b':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+b'

   (check_literal) check_literal:lit='(' idx=6 '+b'
   (check_literal) check_literal:After drop space:'(' idx=6 '+b'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'a+b' ref_ndeclare:1

  (scan_vname) scan_vname: 'a+b'
  (scan_vname) scan_vname: ret1 'a'
 (scan_variable) scan_variable: '+b' vname='A'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'A' is not other keyword
 (scan_variable) Array test '+b'

  (check_literal) check_literal:lit='(' idx=6 '+b'
  (check_literal) check_literal:After drop space:'(' idx=6 '+b'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='A' Float
(process_token)    Frst:0 T:'A' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'A'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f A
(add_var_info) Name:A Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 A'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+b' Before while igncomma:0

 (check_operator) '+b' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '+b' igncomma:0
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+b'

  (check_literal) check_literal:lit=' ,' idx=6 '+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=6 '+b'
  (check_literal)   ',' != '+'
  (check_literal) check_literal: ret0
 (scan_operator) scan_operator: ret1 'b' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name::=
(process_token) 
opr1:3 opr2:1
(operator_precedence) 
:= is operator
(operator_precedence) 
:= is operator
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (2)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) 001: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'b' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) 'b' Before scan_eitem igncomma:0

 (scan_eitem) scan_eitem:

  (check_function)  'b'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=7 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=7 'b'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=7 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=7 'b'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=8 ''
    (check_literal) check_literal:After drop space:':' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b'

    (check_operator) 'b' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=8 ''
    (check_literal) check_literal:After drop space:'(' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=7 'b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=7 'b'
  (check_literal)   '%' != 'b'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=7 'b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=7 'b'
  (check_literal)   '"' != 'b'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'b'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'b'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'b'
   (check_textlabel) 'b' is a text label chstr:'b'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
  (check_proc_call) 'b' is text label

   (check_literal) check_literal:lit=':' idx=8 ''
   (check_literal) check_literal:After drop space:':' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'b'

   (check_operator) 'b' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'b':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=8 ''
   (check_literal) check_literal:After drop space:'(' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'b' ref_ndeclare:1

  (scan_vname) scan_vname: 'b'
  (scan_vname) scan_vname: ret1 'b'
 (scan_variable) scan_variable: '' vname='B'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'B' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=8 ''
  (check_literal) check_literal:After drop space:'(' idx=8 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='B' Float
(process_token)    Frst:0 T:'B' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'B'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f B
(add_var_info) Name:B Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 B'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(add_var_info) Name:AB Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_assignment) scan_assignment: ret1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:3 buf2 i:0
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop '+' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (op_stack_finalise) Popped:+ f
 (output_operator) [f,()] f +
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AB' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing :AB   *************
 (type_check_stack_push)  type_check_stack_push: 'AB'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (process_syntax_tree) *********Processing :A   *************
 (type_check_stack_push)  type_check_stack_push: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (process_syntax_tree) *********Processing :B   *************
 (type_check_stack_push)  type_check_stack_push: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (type_check_stack_display) 002: 'B' type:f (1), %:0
 (process_syntax_tree) *********Processing :+   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator + %conv:1
 (type_check_stack_pop)   type_check_stack_pop: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:1
 (process_syntax_tree) Percent convertible operator op1 (N003) percent:0
 (process_syntax_tree) Mutable type (B) f f
 (process_syntax_tree) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'AB'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (000) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE:AB    **********
 (type_check_stack_push)  type_check_stack_push: 'AB'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (typecheck_expression)  *** BE:A    **********
 (type_check_stack_push)  type_check_stack_push: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (typecheck_expression)  *** BE:B    **********
 (type_check_stack_push)  type_check_stack_push: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (type_check_stack_display) 002: 'B' type:f (1), %:0
 (typecheck_expression)  *** BE:+    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator +
 (type_check_stack_pop)   type_check_stack_pop: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (+) f f
 (typecheck_expression) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'AB' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AB' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'AB'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AB' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AB' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (AB)
Var: AB Float NumIdx:0
infix_stack_push: 'AB'
 (infix_from_rpn) (A)
Var: A Float NumIdx:0
infix_stack_push: 'A'
 (infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
 (infix_from_rpn) (+)
infix_stack_pop: 'B'
infix_stack_pop: 'A'
infix_stack_push: '(A + B)'
 (infix_from_rpn) (:=)
infix_stack_pop: '(A + B)'
infix_stack_pop: 'AB'
infix_stack_push: '(AB := (A + B))'
Done

infix_stack_pop: '(AB := (A + B))'
Infix stack result (AB := (A + B))
 (infix_from_rpn) exit  'AB := (A + B)'
 (process_expression_types) ==AB := (A + B)==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:5 qcode_idx:00EA
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (add_simple_qcode) 'AB'
 (add_simple_qcode) Op type:f op access:Write qcode_type:U
 (qcode_check_trapped) AB: Trapped:0
 (set_qcode_header_byte_at) idx:00EA len:1 val:0E
 (set_qcode_header_byte_at) idx:00EB len:1 val:FF
 (set_qcode_header_byte_at) idx:00EC len:1 val:CE
 (output_qcode_for_line) QC: i:1
 (add_simple_qcode) 'A'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) A: Trapped:0
 (set_qcode_header_byte_at) idx:00ED len:1 val:01
 (set_qcode_header_byte_at) idx:00EE len:1 val:FF
 (set_qcode_header_byte_at) idx:00EF len:1 val:EE
 (output_qcode_for_line) QC: i:2
 (add_simple_qcode) 'B'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) B: Trapped:0
 (set_qcode_header_byte_at) idx:00F0 len:1 val:01
 (set_qcode_header_byte_at) idx:00F1 len:1 val:FF
 (set_qcode_header_byte_at) idx:00F2 len:1 val:E6
 (output_qcode_for_line) QC: i:3
 (add_simple_qcode) '+'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) +: Trapped:0
 (set_qcode_header_byte_at) idx:00F3 len:1 val:3C
 (output_qcode_for_line) QC: i:4
 (add_simple_qcode) ':='
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) :=: Trapped:0
 (set_qcode_header_byte_at) idx:00F4 len:1 val:80
 (finalise_expression) Finalise expression done.
ab = a+b
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=8 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=8 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=8 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'b' (98)
 (is_all_spaces) cline[1] = 'c' (99)
 (is_all_spaces) cline[2] = ' ' (32)
 (is_all_spaces) cline[3] = '=' (61)
 (is_all_spaces) cline[4] = ' ' (32)
 (is_all_spaces) cline[5] = 'b' (98)
 (is_all_spaces) cline[6] = '+' (43)
 (is_all_spaces) cline[7] = 'c' (99)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'bc = b+c'
************
**bc = b+c**
************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'bc = b+c'
 (check_literal) check_literal:After drop space:'REM' idx=0 'bc = b+c'
 (check_literal)   'R' != 'b'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'bc = b+c'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'bc = b+c'
 (check_literal)   'R' != 'b'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'bc = b+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'bc = b+c'
 (check_literal)   'R' != 'b'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'bc = b+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'bc = b+c'
 (check_literal)   'R' != 'b'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'bc = b+c'

   (check_operator) 'bc = b+c' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'bc = b+c':
   (check_vname) check_vname ret1 ' = b+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' = b+c'

   (check_literal) check_literal:lit='(' idx=2 ' = b+c'
   (check_literal) check_literal:After drop space:'(' idx=2 ' = b+c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=2 ' = b+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=3 '= b+c'
 (check_literal) check_literal:After while(): b+c
 (check_literal) ret1 Match. ' =' == ' = b+c'

 (check_expression) ' b+c'

  (check_eitem) check_eitem: 'b+c'

   (check_function)  'b+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=5 'b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'b+c'
    (check_literal)   '%' != 'b'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=5 'b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'b+c'
    (check_literal)   '"' != 'b'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'b+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'b+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'b+c'
     (check_textlabel) 'b' is a text label chstr:'b'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
    (check_proc_call) 'b' is text label

     (check_literal) check_literal:lit=':' idx=6 '+c'
     (check_literal) check_literal:After drop space:':' idx=6 '+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'b+c'

     (check_operator) 'b+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'b+c':
     (check_vname) check_vname ret1 '+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c'

     (check_literal) check_literal:lit='(' idx=6 '+c'
     (check_literal) check_literal:After drop space:'(' idx=6 '+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) 'c' igncomma:0
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c'

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=7 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=7 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=7 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=7 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=8 ''
    (check_literal) check_literal:After drop space:':' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=8 ''
    (check_literal) check_literal:After drop space:'(' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'bc = b+c' ref_ndeclare:1

   (scan_vname) scan_vname: 'bc = b+c'
   (scan_vname) scan_vname: ret1 'bc'
  (scan_variable) scan_variable: ' = b+c' vname='BC'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'BC' is not other keyword
  (scan_variable) Array test ' = b+c'

   (check_literal) check_literal:lit='(' idx=2 ' = b+c'
   (check_literal) check_literal:After drop space:'(' idx=2 ' = b+c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='BC' Float
 (process_token)    Frst:1 T:'BC' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'BC'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:BC is not function
token_is_variable: tok:'BC'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:BC is not function
(init_get_name) 
init_get_name:'BC'
(init_get_name) 
init_get_name:'BC'
(get_name) 
get_name:gn:'BC'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f BC
(add_var_info) Name:BC Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                BC'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' ' = b+c'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= b+c'
 (scan_assignment_equals) scan_assignment_equals:while loop:= b+c
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' b+c' igncomma:0

  (check_eitem) check_eitem: 'b+c'

   (check_function)  'b+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=5 'b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'b+c'
    (check_literal)   '%' != 'b'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=5 'b+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'b+c'
    (check_literal)   '"' != 'b'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'b+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'b+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'b+c'
     (check_textlabel) 'b' is a text label chstr:'b'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
    (check_proc_call) 'b' is text label

     (check_literal) check_literal:lit=':' idx=6 '+c'
     (check_literal) check_literal:After drop space:':' idx=6 '+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'b+c'

     (check_operator) 'b+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'b+c':
     (check_vname) check_vname ret1 '+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c'

     (check_literal) check_literal:lit='(' idx=6 '+c'
     (check_literal) check_literal:After drop space:'(' idx=6 '+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'b+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=5 'b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'b+c'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=5 'b+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'b+c'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b+c'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=6 '+c'
    (check_literal) check_literal:After drop space:':' idx=6 '+c'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b+c'

    (check_operator) 'b+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b+c':
    (check_vname) check_vname ret1 '+c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c'

    (check_literal) check_literal:lit='(' idx=6 '+c'
    (check_literal) check_literal:After drop space:'(' idx=6 '+c'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=5 'b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=5 'b+c'
  (check_literal)   '%' != 'b'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=5 'b+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=5 'b+c'
  (check_literal)   '"' != 'b'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'b+c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'b+c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'b+c'
   (check_textlabel) 'b' is a text label chstr:'b'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
  (check_proc_call) 'b' is text label

   (check_literal) check_literal:lit=':' idx=6 '+c'
   (check_literal) check_literal:After drop space:':' idx=6 '+c'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'b+c'

   (check_operator) 'b+c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'b+c':
   (check_vname) check_vname ret1 '+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c'

   (check_literal) check_literal:lit='(' idx=6 '+c'
   (check_literal) check_literal:After drop space:'(' idx=6 '+c'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'b+c' ref_ndeclare:1

  (scan_vname) scan_vname: 'b+c'
  (scan_vname) scan_vname: ret1 'b'
 (scan_variable) scan_variable: '+c' vname='B'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'B' is not other keyword
 (scan_variable) Array test '+c'

  (check_literal) check_literal:lit='(' idx=6 '+c'
  (check_literal) check_literal:After drop space:'(' idx=6 '+c'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='B' Float
(process_token)    Frst:0 T:'B' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'B'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f B
(add_var_info) Name:B Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 B'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+c' Before while igncomma:0

 (check_operator) '+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c'

  (check_literal) check_literal:lit=' ,' idx=6 '+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=6 '+c'
  (check_literal)   ',' != '+'
  (check_literal) check_literal: ret0
 (scan_operator) scan_operator: ret1 'c' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name::=
(process_token) 
opr1:3 opr2:1
(operator_precedence) 
:= is operator
(operator_precedence) 
:= is operator
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (2)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) 001: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) 'c' Before scan_eitem igncomma:0

 (scan_eitem) scan_eitem:

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=7 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=7 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=7 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=7 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=8 ''
    (check_literal) check_literal:After drop space:':' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=8 ''
    (check_literal) check_literal:After drop space:'(' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=7 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=7 'c'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=7 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=7 'c'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c'
   (check_textlabel) 'c' is a text label chstr:'c'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
  (check_proc_call) 'c' is text label

   (check_literal) check_literal:lit=':' idx=8 ''
   (check_literal) check_literal:After drop space:':' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c'

   (check_operator) 'c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=8 ''
   (check_literal) check_literal:After drop space:'(' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c' ref_ndeclare:1

  (scan_vname) scan_vname: 'c'
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '' vname='C'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=8 ''
  (check_literal) check_literal:After drop space:'(' idx=8 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C' Float
(process_token)    Frst:0 T:'C' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
token_is_variable: tok:'C'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C
(add_var_info) Name:C Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 C'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(add_var_info) Name:BC Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_assignment) scan_assignment: ret1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:3 buf2 i:5
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop '+' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (op_stack_finalise) Popped:+ f
 (output_operator) [f,()] f +
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'BC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing :BC   *************
 (type_check_stack_push)  type_check_stack_push: 'BC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'BC' type:f (1), %:0
 (process_syntax_tree) *********Processing :B   *************
 (type_check_stack_push)  type_check_stack_push: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print)  N002: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'BC' type:f (1), %:0
 (type_check_stack_display) 001: 'B' type:f (1), %:0
 (process_syntax_tree) *********Processing :C   *************
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print)  N002: 'B' type:1 %:0
 (type_check_stack_print)  N003: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'BC' type:f (1), %:0
 (type_check_stack_display) 001: 'B' type:f (1), %:0
 (type_check_stack_display) 002: 'C' type:f (1), %:0
 (process_syntax_tree) *********Processing :+   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator + %conv:1
 (type_check_stack_pop)   type_check_stack_pop: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print)  N002: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:1
 (process_syntax_tree) Percent convertible operator op1 (N003) percent:0
 (process_syntax_tree) Mutable type (C) f f
 (process_syntax_tree) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'BC' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'BC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (000) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE:BC    **********
 (type_check_stack_push)  type_check_stack_push: 'BC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'BC' type:f (1), %:0
 (typecheck_expression)  *** BE:B    **********
 (type_check_stack_push)  type_check_stack_push: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print)  N002: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'BC' type:f (1), %:0
 (type_check_stack_display) 001: 'B' type:f (1), %:0
 (typecheck_expression)  *** BE:C    **********
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print)  N002: 'B' type:1 %:0
 (type_check_stack_print)  N003: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'BC' type:f (1), %:0
 (type_check_stack_display) 001: 'B' type:f (1), %:0
 (type_check_stack_display) 002: 'C' type:f (1), %:0
 (typecheck_expression)  *** BE:+    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator +
 (type_check_stack_pop)   type_check_stack_pop: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print)  N002: 'B' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'B'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (+) f f
 (typecheck_expression) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'BC' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'BC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'BC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'BC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'BC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (BC)
Var: BC Float NumIdx:0
infix_stack_push: 'BC'
 (infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
 (infix_from_rpn) (C)
Var: C Float NumIdx:0
infix_stack_push: 'C'
 (infix_from_rpn) (+)
infix_stack_pop: 'C'
infix_stack_pop: 'B'
infix_stack_push: '(B + C)'
 (infix_from_rpn) (:=)
infix_stack_pop: '(B + C)'
infix_stack_pop: 'BC'
infix_stack_push: '(BC := (B + C))'
Done

infix_stack_pop: '(BC := (B + C))'
Infix stack result (BC := (B + C))
 (infix_from_rpn) exit  'BC := (B + C)'
 (process_expression_types) ==BC := (B + C)==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:5 qcode_idx:00F5
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (add_simple_qcode) 'BC'
 (add_simple_qcode) Op type:f op access:Write qcode_type:U
 (qcode_check_trapped) BC: Trapped:0
 (set_qcode_header_byte_at) idx:00F5 len:1 val:0E
 (set_qcode_header_byte_at) idx:00F6 len:1 val:FF
 (set_qcode_header_byte_at) idx:00F7 len:1 val:C6
 (output_qcode_for_line) QC: i:1
 (add_simple_qcode) 'B'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) B: Trapped:0
 (set_qcode_header_byte_at) idx:00F8 len:1 val:01
 (set_qcode_header_byte_at) idx:00F9 len:1 val:FF
 (set_qcode_header_byte_at) idx:00FA len:1 val:E6
 (output_qcode_for_line) QC: i:2
 (add_simple_qcode) 'C'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) C: Trapped:0
 (set_qcode_header_byte_at) idx:00FB len:1 val:01
 (set_qcode_header_byte_at) idx:00FC len:1 val:FF
 (set_qcode_header_byte_at) idx:00FD len:1 val:DE
 (output_qcode_for_line) QC: i:3
 (add_simple_qcode) '+'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) +: Trapped:0
 (set_qcode_header_byte_at) idx:00FE len:1 val:3C
 (output_qcode_for_line) QC: i:4
 (add_simple_qcode) ':='
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) :=: Trapped:0
 (set_qcode_header_byte_at) idx:00FF len:1 val:80
 (finalise_expression) Finalise expression done.
bc = b+c
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=8 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=8 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=8 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'a' (97)
 (is_all_spaces) cline[1] = 'c' (99)
 (is_all_spaces) cline[2] = ' ' (32)
 (is_all_spaces) cline[3] = '=' (61)
 (is_all_spaces) cline[4] = ' ' (32)
 (is_all_spaces) cline[5] = 'a' (97)
 (is_all_spaces) cline[6] = '+' (43)
 (is_all_spaces) cline[7] = 'c' (99)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'ac = a+c'
************
**ac = a+c**
************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'ac = a+c'
 (check_literal) check_literal:After drop space:'REM' idx=0 'ac = a+c'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'ac = a+c'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'ac = a+c'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'ac = a+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'ac = a+c'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'ac = a+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'ac = a+c'
 (check_literal)   'R' != 'a'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'ac = a+c'

   (check_operator) 'ac = a+c' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'ac = a+c':
   (check_vname) check_vname ret1 ' = a+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' = a+c'

   (check_literal) check_literal:lit='(' idx=2 ' = a+c'
   (check_literal) check_literal:After drop space:'(' idx=2 ' = a+c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=2 ' = a+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=3 '= a+c'
 (check_literal) check_literal:After while(): a+c
 (check_literal) ret1 Match. ' =' == ' = a+c'

 (check_expression) ' a+c'

  (check_eitem) check_eitem: 'a+c'

   (check_function)  'a+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=5 'a+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a+c'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=5 'a+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a+c'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+c'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=6 '+c'
     (check_literal) check_literal:After drop space:':' idx=6 '+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+c'

     (check_operator) 'a+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+c':
     (check_vname) check_vname ret1 '+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c'

     (check_literal) check_literal:lit='(' idx=6 '+c'
     (check_literal) check_literal:After drop space:'(' idx=6 '+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) 'c' igncomma:0
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c'

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=7 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=7 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=7 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=7 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=8 ''
    (check_literal) check_literal:After drop space:':' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=8 ''
    (check_literal) check_literal:After drop space:'(' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'ac = a+c' ref_ndeclare:1

   (scan_vname) scan_vname: 'ac = a+c'
   (scan_vname) scan_vname: ret1 'ac'
  (scan_variable) scan_variable: ' = a+c' vname='AC'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'AC' is not other keyword
  (scan_variable) Array test ' = a+c'

   (check_literal) check_literal:lit='(' idx=2 ' = a+c'
   (check_literal) check_literal:After drop space:'(' idx=2 ' = a+c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='AC' Float
 (process_token)    Frst:1 T:'AC' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'AC'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AC is not function
token_is_variable: tok:'AC'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AC is not function
(init_get_name) 
init_get_name:'AC'
(init_get_name) 
init_get_name:'AC'
(get_name) 
get_name:gn:'AC'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f AC
(add_var_info) Name:AC Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                AC'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' ' = a+c'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= a+c'
 (scan_assignment_equals) scan_assignment_equals:while loop:= a+c
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' a+c' igncomma:0

  (check_eitem) check_eitem: 'a+c'

   (check_function)  'a+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=5 'a+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a+c'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=5 'a+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a+c'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+c'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=6 '+c'
     (check_literal) check_literal:After drop space:':' idx=6 '+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+c'

     (check_operator) 'a+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+c':
     (check_vname) check_vname ret1 '+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c'

     (check_literal) check_literal:lit='(' idx=6 '+c'
     (check_literal) check_literal:After drop space:'(' idx=6 '+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'a+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=5 'a+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'a+c'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=5 'a+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'a+c'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'a+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'a+c'
    (check_textlabel) 'a' is a text label chstr:'a'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
   (check_proc_call) 'a' is text label

    (check_literal) check_literal:lit=':' idx=6 '+c'
    (check_literal) check_literal:After drop space:':' idx=6 '+c'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'a+c'

    (check_operator) 'a+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'a+c':
    (check_vname) check_vname ret1 '+c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c'

    (check_literal) check_literal:lit='(' idx=6 '+c'
    (check_literal) check_literal:After drop space:'(' idx=6 '+c'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=5 'a+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=5 'a+c'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=5 'a+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=5 'a+c'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'a+c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'a+c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'a+c'
   (check_textlabel) 'a' is a text label chstr:'a'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
  (check_proc_call) 'a' is text label

   (check_literal) check_literal:lit=':' idx=6 '+c'
   (check_literal) check_literal:After drop space:':' idx=6 '+c'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'a+c'

   (check_operator) 'a+c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'a+c':
   (check_vname) check_vname ret1 '+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c'

   (check_literal) check_literal:lit='(' idx=6 '+c'
   (check_literal) check_literal:After drop space:'(' idx=6 '+c'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'a+c' ref_ndeclare:1

  (scan_vname) scan_vname: 'a+c'
  (scan_vname) scan_vname: ret1 'a'
 (scan_variable) scan_variable: '+c' vname='A'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'A' is not other keyword
 (scan_variable) Array test '+c'

  (check_literal) check_literal:lit='(' idx=6 '+c'
  (check_literal) check_literal:After drop space:'(' idx=6 '+c'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='A' Float
(process_token)    Frst:0 T:'A' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'A'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f A
(add_var_info) Name:A Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 A'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+c' Before while igncomma:0

 (check_operator) '+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '+c' igncomma:0
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c'

  (check_literal) check_literal:lit=' ,' idx=6 '+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=6 '+c'
  (check_literal)   ',' != '+'
  (check_literal) check_literal: ret0
 (scan_operator) scan_operator: ret1 'c' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name::=
(process_token) 
opr1:3 opr2:1
(operator_precedence) 
:= is operator
(operator_precedence) 
:= is operator
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (2)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) 001: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) 'c' Before scan_eitem igncomma:0

 (scan_eitem) scan_eitem:

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=7 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=7 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=7 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=7 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=8 ''
    (check_literal) check_literal:After drop space:':' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=8 ''
    (check_literal) check_literal:After drop space:'(' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=7 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=7 'c'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=7 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=7 'c'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c'
   (check_textlabel) 'c' is a text label chstr:'c'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
  (check_proc_call) 'c' is text label

   (check_literal) check_literal:lit=':' idx=8 ''
   (check_literal) check_literal:After drop space:':' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c'

   (check_operator) 'c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=8 ''
   (check_literal) check_literal:After drop space:'(' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c' ref_ndeclare:1

  (scan_vname) scan_vname: 'c'
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '' vname='C'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=8 ''
  (check_literal) check_literal:After drop space:'(' idx=8 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C' Float
(process_token)    Frst:0 T:'C' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
token_is_variable: tok:'C'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C
(add_var_info) Name:C Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 C'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(add_var_info) Name:AC Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_assignment) scan_assignment: ret1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:3 buf2 i:5
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop '+' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (op_stack_finalise) Popped:+ f
 (output_operator) [f,()] f +
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing :AC   *************
 (type_check_stack_push)  type_check_stack_push: 'AC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'AC' type:f (1), %:0
 (process_syntax_tree) *********Processing :A   *************
 (type_check_stack_push)  type_check_stack_push: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'AC' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (process_syntax_tree) *********Processing :C   *************
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'AC' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (type_check_stack_display) 002: 'C' type:f (1), %:0
 (process_syntax_tree) *********Processing :+   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator + %conv:1
 (type_check_stack_pop)   type_check_stack_pop: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:1
 (process_syntax_tree) Percent convertible operator op1 (N003) percent:0
 (process_syntax_tree) Mutable type (C) f f
 (process_syntax_tree) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'AC' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'AC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (000) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE:AC    **********
 (type_check_stack_push)  type_check_stack_push: 'AC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'AC' type:f (1), %:0
 (typecheck_expression)  *** BE:A    **********
 (type_check_stack_push)  type_check_stack_push: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'AC' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (typecheck_expression)  *** BE:C    **********
 (type_check_stack_push)  type_check_stack_push: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print)  N003: 'C' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'AC' type:f (1), %:0
 (type_check_stack_display) 001: 'A' type:f (1), %:0
 (type_check_stack_display) 002: 'C' type:f (1), %:0
 (typecheck_expression)  *** BE:+    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator +
 (type_check_stack_pop)   type_check_stack_pop: 'C'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print)  N002: 'A' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'A'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (+) f f
 (typecheck_expression) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'AC' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'AC' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'AC'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (AC)
Var: AC Float NumIdx:0
infix_stack_push: 'AC'
 (infix_from_rpn) (A)
Var: A Float NumIdx:0
infix_stack_push: 'A'
 (infix_from_rpn) (C)
Var: C Float NumIdx:0
infix_stack_push: 'C'
 (infix_from_rpn) (+)
infix_stack_pop: 'C'
infix_stack_pop: 'A'
infix_stack_push: '(A + C)'
 (infix_from_rpn) (:=)
infix_stack_pop: '(A + C)'
infix_stack_pop: 'AC'
infix_stack_push: '(AC := (A + C))'
Done

infix_stack_pop: '(AC := (A + C))'
Infix stack result (AC := (A + C))
 (infix_from_rpn) exit  'AC := (A + C)'
 (process_expression_types) ==AC := (A + C)==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:5 qcode_idx:0100
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (add_simple_qcode) 'AC'
 (add_simple_qcode) Op type:f op access:Write qcode_type:U
 (qcode_check_trapped) AC: Trapped:0
 (set_qcode_header_byte_at) idx:0100 len:1 val:0E
 (set_qcode_header_byte_at) idx:0101 len:1 val:FF
 (set_qcode_header_byte_at) idx:0102 len:1 val:BE
 (output_qcode_for_line) QC: i:1
 (add_simple_qcode) 'A'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) A: Trapped:0
 (set_qcode_header_byte_at) idx:0103 len:1 val:01
 (set_qcode_header_byte_at) idx:0104 len:1 val:FF
 (set_qcode_header_byte_at) idx:0105 len:1 val:EE
 (output_qcode_for_line) QC: i:2
 (add_simple_qcode) 'C'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) C: Trapped:0
 (set_qcode_header_byte_at) idx:0106 len:1 val:01
 (set_qcode_header_byte_at) idx:0107 len:1 val:FF
 (set_qcode_header_byte_at) idx:0108 len:1 val:DE
 (output_qcode_for_line) QC: i:3
 (add_simple_qcode) '+'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) +: Trapped:0
 (set_qcode_header_byte_at) idx:0109 len:1 val:3C
 (output_qcode_for_line) QC: i:4
 (add_simple_qcode) ':='
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) :=: Trapped:0
 (set_qcode_header_byte_at) idx:010A len:1 val:80
 (finalise_expression) Finalise expression done.
ac = a+c
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=8 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=8 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=8 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'a' (97)
 (is_all_spaces) cline[8] = 'b' (98)
 (is_all_spaces) cline[9] = '+' (43)
 (is_all_spaces) cline[10] = 'c' (99)
 (is_all_spaces) cline[11] = '"' (34)
 (is_all_spaces) cline[12] = ',' (44)
 (is_all_spaces) cline[13] = ' ' (32)
 (is_all_spaces) cline[14] = 'a' (97)
 (is_all_spaces) cline[15] = 'b' (98)
 (is_all_spaces) cline[16] = '+' (43)
 (is_all_spaces) cline[17] = 'c' (99)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "ab+c", ab+c'
**********************
**print "ab+c", ab+c**
**********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "ab+c", ab+c'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "ab+c", ab+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "ab+c", ab+c'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "ab+c", ab+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "ab+c", ab+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "ab+c", ab+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "ab+c", ab+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "ab+c", ab+c'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "ab+c", ab+c'

   (check_operator) 'print "ab+c", ab+c' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "ab+c", ab+c':
   (check_vname) check_vname ret1 ' "ab+c", ab+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "ab+c", ab+c'

   (check_literal) check_literal:lit='(' idx=5 ' "ab+c", ab+c'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "ab+c", ab+c'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "ab+c", ab+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"ab+c", ab+c'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "ab+c", ab+c'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "ab+c", ab+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "ab+c", ab+c'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "ab+c", ab+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "ab+c", ab+c'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "ab+c", ab+c'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "ab+c", ab+c'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "ab+c", ab+c'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "ab+c", ab+c'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "ab+c", ab+c'
   (check_literal) check_literal:After drop space:':' idx=5 ' "ab+c", ab+c'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "ab+c", ab+c'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "ab+c", ab+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "ab+c", ab+c'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "ab+c", ab+c'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "ab+c", ab+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "ab+c", ab+c'
   (check_literal) check_literal:After while(): "ab+c", ab+c
   (check_literal) ret1 Match. ' PRINT' == 'print "ab+c", ab+c'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "ab+c", ab+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "ab+c", ab+c'
   (check_literal) check_literal:After while(): "ab+c", ab+c
   (check_literal) ret1 Match. ' PRINT' == 'print "ab+c", ab+c'

   (check_expression) ' "ab+c", ab+c'

    (check_eitem) check_eitem: '"ab+c", ab+c'

     (check_function)  '"ab+c", ab+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"ab+c", ab+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"ab+c", ab+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"ab+c", ab+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"ab+c", ab+c'
      (check_literal) check_literal:After while():ab+c", ab+c
      (check_literal) ret1 Match. ' "' == '"ab+c", ab+c'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', ab+c' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', ab+c' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "ab+c", ab+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "ab+c", ab+c'
   (check_literal) check_literal:After while(): "ab+c", ab+c
   (check_literal) ret1 Match. ' PRINT' == 'print "ab+c", ab+c'
  (scan_print) Before while

   (check_expression) ' "ab+c", ab+c'

    (check_eitem) check_eitem: '"ab+c", ab+c'

     (check_function)  '"ab+c", ab+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"ab+c", ab+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"ab+c", ab+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"ab+c", ab+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"ab+c", ab+c'
      (check_literal) check_literal:After while():ab+c", ab+c
      (check_literal) ret1 Match. ' "' == '"ab+c", ab+c'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', ab+c' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', ab+c' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "ab+c", ab+c' igncomma:1

    (check_eitem) check_eitem: '"ab+c", ab+c'

     (check_function)  '"ab+c", ab+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"ab+c", ab+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"ab+c", ab+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"ab+c", ab+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"ab+c", ab+c'
      (check_literal) check_literal:After while():ab+c", ab+c
      (check_literal) ret1 Match. ' "' == '"ab+c", ab+c'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"ab+c", ab+c'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"ab+c", ab+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"ab+c", ab+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"ab+c", ab+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"ab+c", ab+c'
      (check_literal) check_literal:After while():ab+c", ab+c
      (check_literal) ret1 Match. ' "' == '"ab+c", ab+c'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"ab+c", ab+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"ab+c", ab+c'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"ab+c", ab+c'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"ab+c", ab+c'
      (check_literal) check_literal:After while():ab+c", ab+c
      (check_literal) ret1 Match. ' "' == '"ab+c", ab+c'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"ab+c", ab+c'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"ab+c", ab+c'
       (check_literal) check_literal:After while():ab+c", ab+c
       (check_literal) ret1 Match. ' "' == '"ab+c", ab+c'
      (scan_string)   (in if) 'ab+c", ab+c'
      (scan_string)   (in wh) 'ab+c", ab+c'
      (scan_string)   (in wh) 'b+c", ab+c'
      (scan_string)   (in wh) 'b+c", ab+c'
      (scan_string)   (in wh) '+c", ab+c'
      (scan_string)   (in wh) '+c", ab+c'
      (scan_string)   (in wh) 'c", ab+c'
      (scan_string)   (in wh) 'c", ab+c'
      (scan_string)   (in wh) '", ab+c'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"ab+c"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"ab+c"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"ab+c" is not function
token_is_variable: tok:'"ab+c"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"ab+c" is not function
(   output_string) [U,()] s "ab+c"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', ab+c' Before while igncomma:1

    (check_operator) ', ab+c' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', ab+c' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=12 ', ab+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ', ab+c'
   (check_literal) check_literal:After while(): ab+c
   (check_literal) ret1 Match. ' ,' == ', ab+c'

   (scan_literal_core) scan_literal_core:lit=' ,' ', ab+c'
   (scan_literal_core) scan_literal_core:After drop space:', ab+c'
   (scan_literal_core) scan_literal_core:while loop:, ab+c
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=13 ' ab+c'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=14 'ab+c'
 (check_literal)   ';' != 'a'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:5
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"ab+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :"ab+c"   *************
(type_check_stack_push)  type_check_stack_push: '"ab+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"ab+c"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"ab+c"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"ab+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:"ab+c"    **********
(type_check_stack_push)  type_check_stack_push: '"ab+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"ab+c"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"ab+c"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"ab+c"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"ab+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"ab+c"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("ab+c")
infix_stack_push: '"ab+c"'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"ab+c"'
infix_stack_push: 'PRINT("ab+c")'
Done

infix_stack_pop: 'PRINT("ab+c")'
Infix stack result PRINT("ab+c")
(infix_from_rpn) exit  'PRINT("ab+c")'
(process_expression_types) ==RINT("ab+c")==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:010B
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:0 String Literal '"ab+c"' EXP_BUFF_ID_STR
(set_qcode_header_byte_at) idx:010B len:1 val:24
(set_qcode_header_byte_at) idx:010C len:1 val:04
(set_qcode_header_byte_at) idx:010D len:1 val:61
(set_qcode_header_byte_at) idx:010E len:1 val:62
(set_qcode_header_byte_at) idx:010F len:1 val:2B
(set_qcode_header_byte_at) idx:0110 len:1 val:63
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0111 len:1 val:71
(finalise_expression) Finalise expression done.
 ab+c
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:0112
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0112 len:1 val:72
(finalise_expression) Finalise expression done.
 ab+c
========================================================
(output_expression_start)

 (check_expression) ' ab+c'

  (check_eitem) check_eitem: 'ab+c'

   (check_function)  'ab+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'ab+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'ab+c'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'ab+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'ab+c'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'ab+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'ab+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'ab+c'
     (check_textlabel) 'ab' is a text label chstr:'b'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'ab' Type:f
    (check_proc_call) 'ab' is text label

     (check_literal) check_literal:lit=':' idx=16 '+c'
     (check_literal) check_literal:After drop space:':' idx=16 '+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'ab+c'

     (check_operator) 'ab+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'ab+c':
     (check_vname) check_vname ret1 '+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c'

     (check_literal) check_literal:lit='(' idx=16 '+c'
     (check_literal) check_literal:After drop space:'(' idx=16 '+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) 'c' igncomma:1
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c'

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=17 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=17 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=17 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=17 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=18 ''
    (check_literal) check_literal:After drop space:':' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=18 ''
    (check_literal) check_literal:After drop space:'(' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' ab+c' igncomma:1

  (check_eitem) check_eitem: 'ab+c'

   (check_function)  'ab+c'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'ab+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'ab+c'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'ab+c'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'ab+c'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'ab+c'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'ab+c'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'ab+c'
     (check_textlabel) 'ab' is a text label chstr:'b'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'ab' Type:f
    (check_proc_call) 'ab' is text label

     (check_literal) check_literal:lit=':' idx=16 '+c'
     (check_literal) check_literal:After drop space:':' idx=16 '+c'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'ab+c'

     (check_operator) 'ab+c' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'ab+c':
     (check_vname) check_vname ret1 '+c':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c'

     (check_literal) check_literal:lit='(' idx=16 '+c'
     (check_literal) check_literal:After drop space:'(' idx=16 '+c'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'ab+c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=14 'ab+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=14 'ab+c'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=14 'ab+c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=14 'ab+c'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'ab+c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'ab+c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'ab+c'
    (check_textlabel) 'ab' is a text label chstr:'b'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'ab' Type:f
   (check_proc_call) 'ab' is text label

    (check_literal) check_literal:lit=':' idx=16 '+c'
    (check_literal) check_literal:After drop space:':' idx=16 '+c'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'ab+c'

    (check_operator) 'ab+c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'ab+c':
    (check_vname) check_vname ret1 '+c':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c'

    (check_literal) check_literal:lit='(' idx=16 '+c'
    (check_literal) check_literal:After drop space:'(' idx=16 '+c'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=14 'ab+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=14 'ab+c'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=14 'ab+c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=14 'ab+c'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'ab+c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'ab+c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'ab+c'
   (check_textlabel) 'ab' is a text label chstr:'b'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'ab' Type:f
  (check_proc_call) 'ab' is text label

   (check_literal) check_literal:lit=':' idx=16 '+c'
   (check_literal) check_literal:After drop space:':' idx=16 '+c'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'ab+c'

   (check_operator) 'ab+c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'ab+c':
   (check_vname) check_vname ret1 '+c':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c'

   (check_literal) check_literal:lit='(' idx=16 '+c'
   (check_literal) check_literal:After drop space:'(' idx=16 '+c'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'ab+c' ref_ndeclare:1

  (scan_vname) scan_vname: 'ab+c'
  (scan_vname) scan_vname: ret1 'ab'
 (scan_variable) scan_variable: '+c' vname='AB'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'AB' is not other keyword
 (scan_variable) Array test '+c'

  (check_literal) check_literal:lit='(' idx=16 '+c'
  (check_literal) check_literal:After drop space:'(' idx=16 '+c'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='AB' Float
(process_token)    Frst:1 T:'AB' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'AB'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AB is not function
token_is_variable: tok:'AB'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AB is not function
(init_get_name) 
init_get_name:'AB'
(init_get_name) 
init_get_name:'AB'
(get_name) 
get_name:gn:'AB'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f AB
(add_var_info) Name:AB Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                AB'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+c' Before while igncomma:1

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+c' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c'
 (scan_operator) scan_operator: ret1 'c' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'c' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'c'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=17 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=17 'c'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=17 'c'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=17 'c'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c'
    (check_textlabel) 'c' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
   (check_proc_call) 'c' is text label

    (check_literal) check_literal:lit=':' idx=18 ''
    (check_literal) check_literal:After drop space:':' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c'

    (check_operator) 'c' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=18 ''
    (check_literal) check_literal:After drop space:'(' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=17 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=17 'c'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=17 'c'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=17 'c'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c'
   (check_textlabel) 'c' is a text label chstr:'c'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c' Type:f
  (check_proc_call) 'c' is text label

   (check_literal) check_literal:lit=':' idx=18 ''
   (check_literal) check_literal:After drop space:':' idx=18 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c'

   (check_operator) 'c' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=18 ''
   (check_literal) check_literal:After drop space:'(' idx=18 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c' ref_ndeclare:1

  (scan_vname) scan_vname: 'c'
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '' vname='C'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=18 ''
  (check_literal) check_literal:After drop space:'(' idx=18 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C' Float
(process_token)    Frst:0 T:'C' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
token_is_variable: tok:'C'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C
(add_var_info) Name:C Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 C'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ f
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:4 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AB' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :AB   *************
(type_check_stack_push)  type_check_stack_push: 'AB'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'AB' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'AB' type:f (1), %:0
(process_syntax_tree) *********Processing :C   *************
(type_check_stack_push)  type_check_stack_push: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'AB' type:1 %:0
(type_check_stack_print)  N002: 'C' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'AB' type:f (1), %:0
(type_check_stack_display) 001: 'C' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'AB' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'AB'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N002) percent:0
(process_syntax_tree) Mutable type (C) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:AB    **********
(type_check_stack_push)  type_check_stack_push: 'AB'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'AB' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'AB' type:f (1), %:0
(typecheck_expression)  *** BE:C    **********
(type_check_stack_push)  type_check_stack_push: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'AB' type:1 %:0
(type_check_stack_print)  N002: 'C' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'AB' type:f (1), %:0
(type_check_stack_display) 001: 'C' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'C'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'AB' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'AB'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AB' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AB' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (AB)
Var: AB Float NumIdx:0
infix_stack_push: 'AB'
(infix_from_rpn) (C)
Var: C Float NumIdx:0
infix_stack_push: 'C'
(infix_from_rpn) (+)
infix_stack_pop: 'C'
infix_stack_pop: 'AB'
infix_stack_push: '(AB + C)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(AB + C)'
infix_stack_push: 'PRINT((AB + C))'
Done

infix_stack_pop: 'PRINT((AB + C))'
Infix stack result PRINT((AB + C))
(infix_from_rpn) exit  'PRINT((AB + C))'
(process_expression_types) ==RINT((AB + C))==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:4 qcode_idx:0113
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(add_simple_qcode) 'AB'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) AB: Trapped:0
(set_qcode_header_byte_at) idx:0113 len:1 val:01
(set_qcode_header_byte_at) idx:0114 len:1 val:FF
(set_qcode_header_byte_at) idx:0115 len:1 val:CE
(output_qcode_for_line) QC: i:1
(add_simple_qcode) 'C'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) C: Trapped:0
(set_qcode_header_byte_at) idx:0116 len:1 val:01
(set_qcode_header_byte_at) idx:0117 len:1 val:FF
(set_qcode_header_byte_at) idx:0118 len:1 val:DE
(output_qcode_for_line) QC: i:2
(add_simple_qcode) '+'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) +: Trapped:0
(set_qcode_header_byte_at) idx:0119 len:1 val:3C
(output_qcode_for_line) QC: i:3
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:011A len:1 val:70
(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:4
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:011B
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:011B len:1 val:73
(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=18 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=18 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=18 ''
     (check_literal) check_literal:After drop space:':' idx=18 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=18 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:011C
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print "ab+c", ab+c
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=18 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=18 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=18 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'a' (97)
 (is_all_spaces) cline[8] = '+' (43)
 (is_all_spaces) cline[9] = 'b' (98)
 (is_all_spaces) cline[10] = 'c' (99)
 (is_all_spaces) cline[11] = '"' (34)
 (is_all_spaces) cline[12] = ',' (44)
 (is_all_spaces) cline[13] = ' ' (32)
 (is_all_spaces) cline[14] = 'a' (97)
 (is_all_spaces) cline[15] = '+' (43)
 (is_all_spaces) cline[16] = 'b' (98)
 (is_all_spaces) cline[17] = 'c' (99)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "a+bc", a+bc'
**********************
**print "a+bc", a+bc**
**********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "a+bc", a+bc'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "a+bc", a+bc'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "a+bc", a+bc'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "a+bc", a+bc'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "a+bc", a+bc'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "a+bc", a+bc'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "a+bc", a+bc'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "a+bc", a+bc'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "a+bc", a+bc'

   (check_operator) 'print "a+bc", a+bc' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "a+bc", a+bc':
   (check_vname) check_vname ret1 ' "a+bc", a+bc':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "a+bc", a+bc'

   (check_literal) check_literal:lit='(' idx=5 ' "a+bc", a+bc'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "a+bc", a+bc'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "a+bc", a+bc'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"a+bc", a+bc'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "a+bc", a+bc'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "a+bc", a+bc'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "a+bc", a+bc'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "a+bc", a+bc'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "a+bc", a+bc'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "a+bc", a+bc'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "a+bc", a+bc'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "a+bc", a+bc'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "a+bc", a+bc'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "a+bc", a+bc'
   (check_literal) check_literal:After drop space:':' idx=5 ' "a+bc", a+bc'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "a+bc", a+bc'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "a+bc", a+bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "a+bc", a+bc'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "a+bc", a+bc'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "a+bc", a+bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "a+bc", a+bc'
   (check_literal) check_literal:After while(): "a+bc", a+bc
   (check_literal) ret1 Match. ' PRINT' == 'print "a+bc", a+bc'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "a+bc", a+bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "a+bc", a+bc'
   (check_literal) check_literal:After while(): "a+bc", a+bc
   (check_literal) ret1 Match. ' PRINT' == 'print "a+bc", a+bc'

   (check_expression) ' "a+bc", a+bc'

    (check_eitem) check_eitem: '"a+bc", a+bc'

     (check_function)  '"a+bc", a+bc'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+bc", a+bc'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+bc", a+bc'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+bc", a+bc'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+bc", a+bc'
      (check_literal) check_literal:After while():a+bc", a+bc
      (check_literal) ret1 Match. ' "' == '"a+bc", a+bc'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', a+bc' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', a+bc' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "a+bc", a+bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "a+bc", a+bc'
   (check_literal) check_literal:After while(): "a+bc", a+bc
   (check_literal) ret1 Match. ' PRINT' == 'print "a+bc", a+bc'
  (scan_print) Before while

   (check_expression) ' "a+bc", a+bc'

    (check_eitem) check_eitem: '"a+bc", a+bc'

     (check_function)  '"a+bc", a+bc'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+bc", a+bc'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+bc", a+bc'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+bc", a+bc'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+bc", a+bc'
      (check_literal) check_literal:After while():a+bc", a+bc
      (check_literal) ret1 Match. ' "' == '"a+bc", a+bc'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', a+bc' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', a+bc' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "a+bc", a+bc' igncomma:1

    (check_eitem) check_eitem: '"a+bc", a+bc'

     (check_function)  '"a+bc", a+bc'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+bc", a+bc'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+bc", a+bc'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+bc", a+bc'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+bc", a+bc'
      (check_literal) check_literal:After while():a+bc", a+bc
      (check_literal) ret1 Match. ' "' == '"a+bc", a+bc'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"a+bc", a+bc'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"a+bc", a+bc'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+bc", a+bc'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"a+bc", a+bc'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+bc", a+bc'
      (check_literal) check_literal:After while():a+bc", a+bc
      (check_literal) ret1 Match. ' "' == '"a+bc", a+bc'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"a+bc", a+bc'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"a+bc", a+bc'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"a+bc", a+bc'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"a+bc", a+bc'
      (check_literal) check_literal:After while():a+bc", a+bc
      (check_literal) ret1 Match. ' "' == '"a+bc", a+bc'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"a+bc", a+bc'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"a+bc", a+bc'
       (check_literal) check_literal:After while():a+bc", a+bc
       (check_literal) ret1 Match. ' "' == '"a+bc", a+bc'
      (scan_string)   (in if) 'a+bc", a+bc'
      (scan_string)   (in wh) 'a+bc", a+bc'
      (scan_string)   (in wh) '+bc", a+bc'
      (scan_string)   (in wh) '+bc", a+bc'
      (scan_string)   (in wh) 'bc", a+bc'
      (scan_string)   (in wh) 'bc", a+bc'
      (scan_string)   (in wh) 'c", a+bc'
      (scan_string)   (in wh) 'c", a+bc'
      (scan_string)   (in wh) '", a+bc'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"a+bc"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"a+bc"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"a+bc" is not function
token_is_variable: tok:'"a+bc"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"a+bc" is not function
(   output_string) [U,()] s "a+bc"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', a+bc' Before while igncomma:1

    (check_operator) ', a+bc' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', a+bc' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=12 ', a+bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ', a+bc'
   (check_literal) check_literal:After while(): a+bc
   (check_literal) ret1 Match. ' ,' == ', a+bc'

   (scan_literal_core) scan_literal_core:lit=' ,' ', a+bc'
   (scan_literal_core) scan_literal_core:After drop space:', a+bc'
   (scan_literal_core) scan_literal_core:while loop:, a+bc
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=13 ' a+bc'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=14 'a+bc'
 (check_literal)   ';' != 'a'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"a+bc"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :"a+bc"   *************
(type_check_stack_push)  type_check_stack_push: '"a+bc"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"a+bc"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"a+bc"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"a+bc"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:"a+bc"    **********
(type_check_stack_push)  type_check_stack_push: '"a+bc"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"a+bc"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"a+bc"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"a+bc"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"a+bc"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"a+bc"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("a+bc")
infix_stack_push: '"a+bc"'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"a+bc"'
infix_stack_push: 'PRINT("a+bc")'
Done

infix_stack_pop: 'PRINT("a+bc")'
Infix stack result PRINT("a+bc")
(infix_from_rpn) exit  'PRINT("a+bc")'
(process_expression_types) ==RINT("a+bc")==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:011C
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:0 String Literal '"a+bc"' EXP_BUFF_ID_STR
(set_qcode_header_byte_at) idx:011C len:1 val:24
(set_qcode_header_byte_at) idx:011D len:1 val:04
(set_qcode_header_byte_at) idx:011E len:1 val:61
(set_qcode_header_byte_at) idx:011F len:1 val:2B
(set_qcode_header_byte_at) idx:0120 len:1 val:62
(set_qcode_header_byte_at) idx:0121 len:1 val:63
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0122 len:1 val:71
(finalise_expression) Finalise expression done.
 a+bc
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:0123
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0123 len:1 val:72
(finalise_expression) Finalise expression done.
 a+bc
========================================================
(output_expression_start)

 (check_expression) ' a+bc'

  (check_eitem) check_eitem: 'a+bc'

   (check_function)  'a+bc'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'a+bc'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'a+bc'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'a+bc'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'a+bc'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+bc'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+bc'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+bc'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=15 '+bc'
     (check_literal) check_literal:After drop space:':' idx=15 '+bc'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+bc'

     (check_operator) 'a+bc' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+bc':
     (check_vname) check_vname ret1 '+bc':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+bc'

     (check_literal) check_literal:lit='(' idx=15 '+bc'
     (check_literal) check_literal:After drop space:'(' idx=15 '+bc'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+bc' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) 'bc' igncomma:1
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'bc'

  (check_function)  'bc'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=16 'bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=16 'bc'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=16 'bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=16 'bc'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'bc'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'bc'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'bc'
    (check_textlabel) 'bc' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'bc' Type:f
   (check_proc_call) 'bc' is text label

    (check_literal) check_literal:lit=':' idx=18 ''
    (check_literal) check_literal:After drop space:':' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'bc'

    (check_operator) 'bc' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'bc':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=18 ''
    (check_literal) check_literal:After drop space:'(' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' a+bc' igncomma:1

  (check_eitem) check_eitem: 'a+bc'

   (check_function)  'a+bc'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'a+bc'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'a+bc'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'a+bc'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'a+bc'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a+bc'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'a+bc'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'a+bc'
     (check_textlabel) 'a' is a text label chstr:'a'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
    (check_proc_call) 'a' is text label

     (check_literal) check_literal:lit=':' idx=15 '+bc'
     (check_literal) check_literal:After drop space:':' idx=15 '+bc'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'a+bc'

     (check_operator) 'a+bc' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'a+bc':
     (check_vname) check_vname ret1 '+bc':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+bc'

     (check_literal) check_literal:lit='(' idx=15 '+bc'
     (check_literal) check_literal:After drop space:'(' idx=15 '+bc'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'a+bc'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=14 'a+bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=14 'a+bc'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=14 'a+bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=14 'a+bc'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a+bc'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'a+bc'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'a+bc'
    (check_textlabel) 'a' is a text label chstr:'a'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
   (check_proc_call) 'a' is text label

    (check_literal) check_literal:lit=':' idx=15 '+bc'
    (check_literal) check_literal:After drop space:':' idx=15 '+bc'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'a+bc'

    (check_operator) 'a+bc' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'a+bc':
    (check_vname) check_vname ret1 '+bc':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+bc'

    (check_literal) check_literal:lit='(' idx=15 '+bc'
    (check_literal) check_literal:After drop space:'(' idx=15 '+bc'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=14 'a+bc'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=14 'a+bc'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=14 'a+bc'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=14 'a+bc'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'a+bc'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'a+bc'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'a+bc'
   (check_textlabel) 'a' is a text label chstr:'a'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'a' Type:f
  (check_proc_call) 'a' is text label

   (check_literal) check_literal:lit=':' idx=15 '+bc'
   (check_literal) check_literal:After drop space:':' idx=15 '+bc'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'a+bc'

   (check_operator) 'a+bc' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'a+bc':
   (check_vname) check_vname ret1 '+bc':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+bc'

   (check_literal) check_literal:lit='(' idx=15 '+bc'
   (check_literal) check_literal:After drop space:'(' idx=15 '+bc'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'a+bc' ref_ndeclare:1

  (scan_vname) scan_vname: 'a+bc'
  (scan_vname) scan_vname: ret1 'a'
 (scan_variable) scan_variable: '+bc' vname='A'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'A' is not other keyword
 (scan_variable) Array test '+bc'

  (check_literal) check_literal:lit='(' idx=15 '+bc'
  (check_literal) check_literal:After drop space:'(' idx=15 '+bc'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='A' Float
(process_token)    Frst:1 T:'A' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'A'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f A
(add_var_info) Name:A Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 A'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+bc' Before while igncomma:1

 (check_operator) '+bc' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+bc' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+bc'
 (scan_operator) scan_operator: ret1 'bc' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'bc' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'bc' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'bc'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=16 'bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=16 'bc'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=16 'bc'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=16 'bc'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'bc'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'bc'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'bc'
    (check_textlabel) 'bc' is a text label chstr:'c'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'bc' Type:f
   (check_proc_call) 'bc' is text label

    (check_literal) check_literal:lit=':' idx=18 ''
    (check_literal) check_literal:After drop space:':' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'bc'

    (check_operator) 'bc' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'bc':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=18 ''
    (check_literal) check_literal:After drop space:'(' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=16 'bc'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=16 'bc'
  (check_literal)   '%' != 'b'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=16 'bc'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=16 'bc'
  (check_literal)   '"' != 'b'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'bc'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'bc'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'bc'
   (check_textlabel) 'bc' is a text label chstr:'c'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'bc' Type:f
  (check_proc_call) 'bc' is text label

   (check_literal) check_literal:lit=':' idx=18 ''
   (check_literal) check_literal:After drop space:':' idx=18 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'bc'

   (check_operator) 'bc' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'bc':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=18 ''
   (check_literal) check_literal:After drop space:'(' idx=18 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'bc' ref_ndeclare:1

  (scan_vname) scan_vname: 'bc'
  (scan_vname) scan_vname: ret1 'bc'
 (scan_variable) scan_variable: '' vname='BC'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'BC' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=18 ''
  (check_literal) check_literal:After drop space:'(' idx=18 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='BC' Float
(process_token)    Frst:0 T:'BC' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'BC'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:BC is not function
token_is_variable: tok:'BC'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:BC is not function
(init_get_name) 
init_get_name:'BC'
(init_get_name) 
init_get_name:'BC'
(get_name) 
get_name:gn:'BC'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f BC
(add_var_info) Name:BC Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                BC'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ f
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:4 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'BC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :A   *************
(type_check_stack_push)  type_check_stack_push: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(process_syntax_tree) *********Processing :BC   *************
(type_check_stack_push)  type_check_stack_push: 'BC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print)  N002: 'BC' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(type_check_stack_display) 001: 'BC' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'BC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N002) percent:0
(process_syntax_tree) Mutable type (BC) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:A    **********
(type_check_stack_push)  type_check_stack_push: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(typecheck_expression)  *** BE:BC    **********
(type_check_stack_push)  type_check_stack_push: 'BC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print)  N002: 'BC' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'A' type:f (1), %:0
(type_check_stack_display) 001: 'BC' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'BC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'A' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'A'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'BC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'A' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'BC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (A)
Var: A Float NumIdx:0
infix_stack_push: 'A'
(infix_from_rpn) (BC)
Var: BC Float NumIdx:0
infix_stack_push: 'BC'
(infix_from_rpn) (+)
infix_stack_pop: 'BC'
infix_stack_pop: 'A'
infix_stack_push: '(A + BC)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(A + BC)'
infix_stack_push: 'PRINT((A + BC))'
Done

infix_stack_pop: 'PRINT((A + BC))'
Infix stack result PRINT((A + BC))
(infix_from_rpn) exit  'PRINT((A + BC))'
(process_expression_types) ==RINT((A + BC))==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:4 qcode_idx:0124
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(add_simple_qcode) 'A'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) A: Trapped:0
(set_qcode_header_byte_at) idx:0124 len:1 val:01
(set_qcode_header_byte_at) idx:0125 len:1 val:FF
(set_qcode_header_byte_at) idx:0126 len:1 val:EE
(output_qcode_for_line) QC: i:1
(add_simple_qcode) 'BC'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) BC: Trapped:0
(set_qcode_header_byte_at) idx:0127 len:1 val:01
(set_qcode_header_byte_at) idx:0128 len:1 val:FF
(set_qcode_header_byte_at) idx:0129 len:1 val:C6
(output_qcode_for_line) QC: i:2
(add_simple_qcode) '+'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) +: Trapped:0
(set_qcode_header_byte_at) idx:012A len:1 val:3C
(output_qcode_for_line) QC: i:3
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:012B len:1 val:70
(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:4
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:012C
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:012C len:1 val:73
(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=18 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=18 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=18 ''
     (check_literal) check_literal:After drop space:':' idx=18 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=18 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:012D
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print "a+bc", a+bc
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=18 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=18 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=18 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'a' (97)
 (is_all_spaces) cline[8] = 'c' (99)
 (is_all_spaces) cline[9] = '+' (43)
 (is_all_spaces) cline[10] = 'b' (98)
 (is_all_spaces) cline[11] = '"' (34)
 (is_all_spaces) cline[12] = ',' (44)
 (is_all_spaces) cline[13] = ' ' (32)
 (is_all_spaces) cline[14] = 'a' (97)
 (is_all_spaces) cline[15] = 'c' (99)
 (is_all_spaces) cline[16] = '+' (43)
 (is_all_spaces) cline[17] = 'b' (98)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "ac+b", ac+b'
**********************
**print "ac+b", ac+b**
**********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "ac+b", ac+b'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "ac+b", ac+b'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "ac+b", ac+b'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "ac+b", ac+b'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "ac+b", ac+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "ac+b", ac+b'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "ac+b", ac+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "ac+b", ac+b'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "ac+b", ac+b'

   (check_operator) 'print "ac+b", ac+b' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "ac+b", ac+b':
   (check_vname) check_vname ret1 ' "ac+b", ac+b':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "ac+b", ac+b'

   (check_literal) check_literal:lit='(' idx=5 ' "ac+b", ac+b'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "ac+b", ac+b'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "ac+b", ac+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"ac+b", ac+b'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "ac+b", ac+b'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "ac+b", ac+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "ac+b", ac+b'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "ac+b", ac+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "ac+b", ac+b'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "ac+b", ac+b'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "ac+b", ac+b'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "ac+b", ac+b'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "ac+b", ac+b'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "ac+b", ac+b'
   (check_literal) check_literal:After drop space:':' idx=5 ' "ac+b", ac+b'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "ac+b", ac+b'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "ac+b", ac+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "ac+b", ac+b'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "ac+b", ac+b'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "ac+b", ac+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "ac+b", ac+b'
   (check_literal) check_literal:After while(): "ac+b", ac+b
   (check_literal) ret1 Match. ' PRINT' == 'print "ac+b", ac+b'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "ac+b", ac+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "ac+b", ac+b'
   (check_literal) check_literal:After while(): "ac+b", ac+b
   (check_literal) ret1 Match. ' PRINT' == 'print "ac+b", ac+b'

   (check_expression) ' "ac+b", ac+b'

    (check_eitem) check_eitem: '"ac+b", ac+b'

     (check_function)  '"ac+b", ac+b'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"ac+b", ac+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"ac+b", ac+b'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"ac+b", ac+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"ac+b", ac+b'
      (check_literal) check_literal:After while():ac+b", ac+b
      (check_literal) ret1 Match. ' "' == '"ac+b", ac+b'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', ac+b' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', ac+b' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "ac+b", ac+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "ac+b", ac+b'
   (check_literal) check_literal:After while(): "ac+b", ac+b
   (check_literal) ret1 Match. ' PRINT' == 'print "ac+b", ac+b'
  (scan_print) Before while

   (check_expression) ' "ac+b", ac+b'

    (check_eitem) check_eitem: '"ac+b", ac+b'

     (check_function)  '"ac+b", ac+b'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"ac+b", ac+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"ac+b", ac+b'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"ac+b", ac+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"ac+b", ac+b'
      (check_literal) check_literal:After while():ac+b", ac+b
      (check_literal) ret1 Match. ' "' == '"ac+b", ac+b'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', ac+b' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', ac+b' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "ac+b", ac+b' igncomma:1

    (check_eitem) check_eitem: '"ac+b", ac+b'

     (check_function)  '"ac+b", ac+b'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"ac+b", ac+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"ac+b", ac+b'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"ac+b", ac+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"ac+b", ac+b'
      (check_literal) check_literal:After while():ac+b", ac+b
      (check_literal) ret1 Match. ' "' == '"ac+b", ac+b'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"ac+b", ac+b'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"ac+b", ac+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"ac+b", ac+b'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"ac+b", ac+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"ac+b", ac+b'
      (check_literal) check_literal:After while():ac+b", ac+b
      (check_literal) ret1 Match. ' "' == '"ac+b", ac+b'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"ac+b", ac+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"ac+b", ac+b'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"ac+b", ac+b'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"ac+b", ac+b'
      (check_literal) check_literal:After while():ac+b", ac+b
      (check_literal) ret1 Match. ' "' == '"ac+b", ac+b'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"ac+b", ac+b'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"ac+b", ac+b'
       (check_literal) check_literal:After while():ac+b", ac+b
       (check_literal) ret1 Match. ' "' == '"ac+b", ac+b'
      (scan_string)   (in if) 'ac+b", ac+b'
      (scan_string)   (in wh) 'ac+b", ac+b'
      (scan_string)   (in wh) 'c+b", ac+b'
      (scan_string)   (in wh) 'c+b", ac+b'
      (scan_string)   (in wh) '+b", ac+b'
      (scan_string)   (in wh) '+b", ac+b'
      (scan_string)   (in wh) 'b", ac+b'
      (scan_string)   (in wh) 'b", ac+b'
      (scan_string)   (in wh) '", ac+b'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"ac+b"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"ac+b"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"ac+b" is not function
token_is_variable: tok:'"ac+b"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"ac+b" is not function
(   output_string) [U,()] s "ac+b"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', ac+b' Before while igncomma:1

    (check_operator) ', ac+b' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', ac+b' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=12 ', ac+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ', ac+b'
   (check_literal) check_literal:After while(): ac+b
   (check_literal) ret1 Match. ' ,' == ', ac+b'

   (scan_literal_core) scan_literal_core:lit=' ,' ', ac+b'
   (scan_literal_core) scan_literal_core:After drop space:', ac+b'
   (scan_literal_core) scan_literal_core:while loop:, ac+b
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=13 ' ac+b'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=14 'ac+b'
 (check_literal)   ';' != 'a'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"ac+b"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :"ac+b"   *************
(type_check_stack_push)  type_check_stack_push: '"ac+b"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"ac+b"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"ac+b"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"ac+b"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:"ac+b"    **********
(type_check_stack_push)  type_check_stack_push: '"ac+b"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"ac+b"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"ac+b"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"ac+b"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"ac+b"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"ac+b"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("ac+b")
infix_stack_push: '"ac+b"'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"ac+b"'
infix_stack_push: 'PRINT("ac+b")'
Done

infix_stack_pop: 'PRINT("ac+b")'
Infix stack result PRINT("ac+b")
(infix_from_rpn) exit  'PRINT("ac+b")'
(process_expression_types) ==RINT("ac+b")==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:012D
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:0 String Literal '"ac+b"' EXP_BUFF_ID_STR
(set_qcode_header_byte_at) idx:012D len:1 val:24
(set_qcode_header_byte_at) idx:012E len:1 val:04
(set_qcode_header_byte_at) idx:012F len:1 val:61
(set_qcode_header_byte_at) idx:0130 len:1 val:63
(set_qcode_header_byte_at) idx:0131 len:1 val:2B
(set_qcode_header_byte_at) idx:0132 len:1 val:62
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0133 len:1 val:71
(finalise_expression) Finalise expression done.
 ac+b
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:0134
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0134 len:1 val:72
(finalise_expression) Finalise expression done.
 ac+b
========================================================
(output_expression_start)

 (check_expression) ' ac+b'

  (check_eitem) check_eitem: 'ac+b'

   (check_function)  'ac+b'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'ac+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'ac+b'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'ac+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'ac+b'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'ac+b'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'ac+b'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'ac+b'
     (check_textlabel) 'ac' is a text label chstr:'c'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'ac' Type:f
    (check_proc_call) 'ac' is text label

     (check_literal) check_literal:lit=':' idx=16 '+b'
     (check_literal) check_literal:After drop space:':' idx=16 '+b'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'ac+b'

     (check_operator) 'ac+b' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'ac+b':
     (check_vname) check_vname ret1 '+b':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+b'

     (check_literal) check_literal:lit='(' idx=16 '+b'
     (check_literal) check_literal:After drop space:'(' idx=16 '+b'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+b' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) 'b' igncomma:1
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'b'

  (check_function)  'b'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=17 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=17 'b'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=17 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=17 'b'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=18 ''
    (check_literal) check_literal:After drop space:':' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b'

    (check_operator) 'b' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=18 ''
    (check_literal) check_literal:After drop space:'(' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' ac+b' igncomma:1

  (check_eitem) check_eitem: 'ac+b'

   (check_function)  'ac+b'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'ac+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'ac+b'
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'ac+b'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'ac+b'
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'ac+b'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'ac+b'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'ac+b'
     (check_textlabel) 'ac' is a text label chstr:'c'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'ac' Type:f
    (check_proc_call) 'ac' is text label

     (check_literal) check_literal:lit=':' idx=16 '+b'
     (check_literal) check_literal:After drop space:':' idx=16 '+b'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'ac+b'

     (check_operator) 'ac+b' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'ac+b':
     (check_vname) check_vname ret1 '+b':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+b'

     (check_literal) check_literal:lit='(' idx=16 '+b'
     (check_literal) check_literal:After drop space:'(' idx=16 '+b'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'ac+b'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=14 'ac+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=14 'ac+b'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=14 'ac+b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=14 'ac+b'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'ac+b'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'ac+b'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'ac+b'
    (check_textlabel) 'ac' is a text label chstr:'c'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'ac' Type:f
   (check_proc_call) 'ac' is text label

    (check_literal) check_literal:lit=':' idx=16 '+b'
    (check_literal) check_literal:After drop space:':' idx=16 '+b'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'ac+b'

    (check_operator) 'ac+b' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'ac+b':
    (check_vname) check_vname ret1 '+b':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+b'

    (check_literal) check_literal:lit='(' idx=16 '+b'
    (check_literal) check_literal:After drop space:'(' idx=16 '+b'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=14 'ac+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=14 'ac+b'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=14 'ac+b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=14 'ac+b'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'ac+b'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'ac+b'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'ac+b'
   (check_textlabel) 'ac' is a text label chstr:'c'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'ac' Type:f
  (check_proc_call) 'ac' is text label

   (check_literal) check_literal:lit=':' idx=16 '+b'
   (check_literal) check_literal:After drop space:':' idx=16 '+b'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'ac+b'

   (check_operator) 'ac+b' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'ac+b':
   (check_vname) check_vname ret1 '+b':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+b'

   (check_literal) check_literal:lit='(' idx=16 '+b'
   (check_literal) check_literal:After drop space:'(' idx=16 '+b'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'ac+b' ref_ndeclare:1

  (scan_vname) scan_vname: 'ac+b'
  (scan_vname) scan_vname: ret1 'ac'
 (scan_variable) scan_variable: '+b' vname='AC'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'AC' is not other keyword
 (scan_variable) Array test '+b'

  (check_literal) check_literal:lit='(' idx=16 '+b'
  (check_literal) check_literal:After drop space:'(' idx=16 '+b'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='AC' Float
(process_token)    Frst:1 T:'AC' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'AC'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AC is not function
token_is_variable: tok:'AC'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AC is not function
(init_get_name) 
init_get_name:'AC'
(init_get_name) 
init_get_name:'AC'
(get_name) 
get_name:gn:'AC'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f AC
(add_var_info) Name:AC Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                AC'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+b' Before while igncomma:1

 (check_operator) '+b' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+b' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+b'
 (scan_operator) scan_operator: ret1 'b' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'b' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'b' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'b'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=17 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=17 'b'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=17 'b'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=17 'b'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=18 ''
    (check_literal) check_literal:After drop space:':' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b'

    (check_operator) 'b' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=18 ''
    (check_literal) check_literal:After drop space:'(' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=17 'b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=17 'b'
  (check_literal)   '%' != 'b'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=17 'b'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=17 'b'
  (check_literal)   '"' != 'b'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'b'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'b'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'b'
   (check_textlabel) 'b' is a text label chstr:'b'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
  (check_proc_call) 'b' is text label

   (check_literal) check_literal:lit=':' idx=18 ''
   (check_literal) check_literal:After drop space:':' idx=18 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'b'

   (check_operator) 'b' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'b':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=18 ''
   (check_literal) check_literal:After drop space:'(' idx=18 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'b' ref_ndeclare:1

  (scan_vname) scan_vname: 'b'
  (scan_vname) scan_vname: ret1 'b'
 (scan_variable) scan_variable: '' vname='B'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'B' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=18 ''
  (check_literal) check_literal:After drop space:'(' idx=18 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='B' Float
(process_token)    Frst:0 T:'B' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'B'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f B
(add_var_info) Name:B Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 B'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ f
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:4 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :AC   *************
(type_check_stack_push)  type_check_stack_push: 'AC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'AC' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'AC' type:f (1), %:0
(process_syntax_tree) *********Processing :B   *************
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'AC' type:1 %:0
(type_check_stack_print)  N002: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'AC' type:f (1), %:0
(type_check_stack_display) 001: 'B' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'AC' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'AC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N002) percent:0
(process_syntax_tree) Mutable type (B) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:AC    **********
(type_check_stack_push)  type_check_stack_push: 'AC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'AC' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'AC' type:f (1), %:0
(typecheck_expression)  *** BE:B    **********
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'AC' type:1 %:0
(type_check_stack_print)  N002: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'AC' type:f (1), %:0
(type_check_stack_display) 001: 'B' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'AC' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'AC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (AC)
Var: AC Float NumIdx:0
infix_stack_push: 'AC'
(infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
(infix_from_rpn) (+)
infix_stack_pop: 'B'
infix_stack_pop: 'AC'
infix_stack_push: '(AC + B)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(AC + B)'
infix_stack_push: 'PRINT((AC + B))'
Done

infix_stack_pop: 'PRINT((AC + B))'
Infix stack result PRINT((AC + B))
(infix_from_rpn) exit  'PRINT((AC + B))'
(process_expression_types) ==RINT((AC + B))==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:4 qcode_idx:0135
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(add_simple_qcode) 'AC'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) AC: Trapped:0
(set_qcode_header_byte_at) idx:0135 len:1 val:01
(set_qcode_header_byte_at) idx:0136 len:1 val:FF
(set_qcode_header_byte_at) idx:0137 len:1 val:BE
(output_qcode_for_line) QC: i:1
(add_simple_qcode) 'B'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) B: Trapped:0
(set_qcode_header_byte_at) idx:0138 len:1 val:01
(set_qcode_header_byte_at) idx:0139 len:1 val:FF
(set_qcode_header_byte_at) idx:013A len:1 val:E6
(output_qcode_for_line) QC: i:2
(add_simple_qcode) '+'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) +: Trapped:0
(set_qcode_header_byte_at) idx:013B len:1 val:3C
(output_qcode_for_line) QC: i:3
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:013C len:1 val:70
(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:4
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:013D
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:013D len:1 val:73
(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=18 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=18 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=18 ''
     (check_literal) check_literal:After drop space:':' idx=18 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=18 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=18 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=18 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=18 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:013E
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print "ac+b", ac+b
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=18 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=18 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=18 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'b' (98)
 (is_all_spaces) cline[8] = '+' (43)
 (is_all_spaces) cline[9] = 'a' (97)
 (is_all_spaces) cline[10] = 'c' (99)
 (is_all_spaces) cline[11] = '"' (34)
 (is_all_spaces) cline[12] = ',' (44)
 (is_all_spaces) cline[13] = ' ' (32)
 (is_all_spaces) cline[14] = 'b' (98)
 (is_all_spaces) cline[15] = '+' (43)
 (is_all_spaces) cline[16] = 'a' (97)
 (is_all_spaces) cline[17] = 'c' (99)
 (is_all_spaces) cline[18] = '	' (9)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "b+ac", b+ac	'
***********************
**print "b+ac", b+ac	**
***********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "b+ac", b+ac	'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "b+ac", b+ac	'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "b+ac", b+ac	'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "b+ac", b+ac	'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "b+ac", b+ac	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "b+ac", b+ac	'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "b+ac", b+ac	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "b+ac", b+ac	'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "b+ac", b+ac	'

   (check_operator) 'print "b+ac", b+ac	' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "b+ac", b+ac	':
   (check_vname) check_vname ret1 ' "b+ac", b+ac	':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "b+ac", b+ac	'

   (check_literal) check_literal:lit='(' idx=5 ' "b+ac", b+ac	'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "b+ac", b+ac	'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "b+ac", b+ac	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"b+ac", b+ac	'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "b+ac", b+ac	'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "b+ac", b+ac	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "b+ac", b+ac	'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "b+ac", b+ac	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "b+ac", b+ac	'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "b+ac", b+ac	'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "b+ac", b+ac	'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "b+ac", b+ac	'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "b+ac", b+ac	'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "b+ac", b+ac	'
   (check_literal) check_literal:After drop space:':' idx=5 ' "b+ac", b+ac	'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "b+ac", b+ac	'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "b+ac", b+ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "b+ac", b+ac	'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "b+ac", b+ac	'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "b+ac", b+ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "b+ac", b+ac	'
   (check_literal) check_literal:After while(): "b+ac", b+ac	
   (check_literal) ret1 Match. ' PRINT' == 'print "b+ac", b+ac	'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "b+ac", b+ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "b+ac", b+ac	'
   (check_literal) check_literal:After while(): "b+ac", b+ac	
   (check_literal) ret1 Match. ' PRINT' == 'print "b+ac", b+ac	'

   (check_expression) ' "b+ac", b+ac	'

    (check_eitem) check_eitem: '"b+ac", b+ac	'

     (check_function)  '"b+ac", b+ac	'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"b+ac", b+ac	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"b+ac", b+ac	'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"b+ac", b+ac	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"b+ac", b+ac	'
      (check_literal) check_literal:After while():b+ac", b+ac	
      (check_literal) ret1 Match. ' "' == '"b+ac", b+ac	'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', b+ac	' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', b+ac	' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "b+ac", b+ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "b+ac", b+ac	'
   (check_literal) check_literal:After while(): "b+ac", b+ac	
   (check_literal) ret1 Match. ' PRINT' == 'print "b+ac", b+ac	'
  (scan_print) Before while

   (check_expression) ' "b+ac", b+ac	'

    (check_eitem) check_eitem: '"b+ac", b+ac	'

     (check_function)  '"b+ac", b+ac	'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"b+ac", b+ac	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"b+ac", b+ac	'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"b+ac", b+ac	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"b+ac", b+ac	'
      (check_literal) check_literal:After while():b+ac", b+ac	
      (check_literal) ret1 Match. ' "' == '"b+ac", b+ac	'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', b+ac	' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', b+ac	' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "b+ac", b+ac	' igncomma:1

    (check_eitem) check_eitem: '"b+ac", b+ac	'

     (check_function)  '"b+ac", b+ac	'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"b+ac", b+ac	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"b+ac", b+ac	'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"b+ac", b+ac	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"b+ac", b+ac	'
      (check_literal) check_literal:After while():b+ac", b+ac	
      (check_literal) ret1 Match. ' "' == '"b+ac", b+ac	'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"b+ac", b+ac	'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"b+ac", b+ac	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"b+ac", b+ac	'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"b+ac", b+ac	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"b+ac", b+ac	'
      (check_literal) check_literal:After while():b+ac", b+ac	
      (check_literal) ret1 Match. ' "' == '"b+ac", b+ac	'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"b+ac", b+ac	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"b+ac", b+ac	'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"b+ac", b+ac	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"b+ac", b+ac	'
      (check_literal) check_literal:After while():b+ac", b+ac	
      (check_literal) ret1 Match. ' "' == '"b+ac", b+ac	'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"b+ac", b+ac	'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"b+ac", b+ac	'
       (check_literal) check_literal:After while():b+ac", b+ac	
       (check_literal) ret1 Match. ' "' == '"b+ac", b+ac	'
      (scan_string)   (in if) 'b+ac", b+ac	'
      (scan_string)   (in wh) 'b+ac", b+ac	'
      (scan_string)   (in wh) '+ac", b+ac	'
      (scan_string)   (in wh) '+ac", b+ac	'
      (scan_string)   (in wh) 'ac", b+ac	'
      (scan_string)   (in wh) 'ac", b+ac	'
      (scan_string)   (in wh) 'c", b+ac	'
      (scan_string)   (in wh) 'c", b+ac	'
      (scan_string)   (in wh) '", b+ac	'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"b+ac"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"b+ac"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"b+ac" is not function
token_is_variable: tok:'"b+ac"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"b+ac" is not function
(   output_string) [U,()] s "b+ac"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', b+ac	' Before while igncomma:1

    (check_operator) ', b+ac	' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', b+ac	' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=12 ', b+ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ', b+ac	'
   (check_literal) check_literal:After while(): b+ac	
   (check_literal) ret1 Match. ' ,' == ', b+ac	'

   (scan_literal_core) scan_literal_core:lit=' ,' ', b+ac	'
   (scan_literal_core) scan_literal_core:After drop space:', b+ac	'
   (scan_literal_core) scan_literal_core:while loop:, b+ac	
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=13 ' b+ac	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=14 'b+ac	'
 (check_literal)   ';' != 'b'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"b+ac"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :"b+ac"   *************
(type_check_stack_push)  type_check_stack_push: '"b+ac"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"b+ac"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"b+ac"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"b+ac"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:"b+ac"    **********
(type_check_stack_push)  type_check_stack_push: '"b+ac"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"b+ac"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"b+ac"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"b+ac"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"b+ac"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"b+ac"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("b+ac")
infix_stack_push: '"b+ac"'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"b+ac"'
infix_stack_push: 'PRINT("b+ac")'
Done

infix_stack_pop: 'PRINT("b+ac")'
Infix stack result PRINT("b+ac")
(infix_from_rpn) exit  'PRINT("b+ac")'
(process_expression_types) ==RINT("b+ac")==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:013E
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:0 String Literal '"b+ac"' EXP_BUFF_ID_STR
(set_qcode_header_byte_at) idx:013E len:1 val:24
(set_qcode_header_byte_at) idx:013F len:1 val:04
(set_qcode_header_byte_at) idx:0140 len:1 val:62
(set_qcode_header_byte_at) idx:0141 len:1 val:2B
(set_qcode_header_byte_at) idx:0142 len:1 val:61
(set_qcode_header_byte_at) idx:0143 len:1 val:63
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0144 len:1 val:71
(finalise_expression) Finalise expression done.
 b+ac	
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:0145
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0145 len:1 val:72
(finalise_expression) Finalise expression done.
 b+ac	
========================================================
(output_expression_start)

 (check_expression) ' b+ac	'

  (check_eitem) check_eitem: 'b+ac	'

   (check_function)  'b+ac	'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'b+ac	'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'b+ac	'
    (check_literal)   '%' != 'b'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'b+ac	'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'b+ac	'
    (check_literal)   '"' != 'b'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'b+ac	'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'b+ac	'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'b+ac	'
     (check_textlabel) 'b' is a text label chstr:'b'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
    (check_proc_call) 'b' is text label

     (check_literal) check_literal:lit=':' idx=15 '+ac	'
     (check_literal) check_literal:After drop space:':' idx=15 '+ac	'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'b+ac	'

     (check_operator) 'b+ac	' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'b+ac	':
     (check_vname) check_vname ret1 '+ac	':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+ac	'

     (check_literal) check_literal:lit='(' idx=15 '+ac	'
     (check_literal) check_literal:After drop space:'(' idx=15 '+ac	'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+ac	' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) 'ac	' igncomma:1
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'ac	'

  (check_function)  'ac	'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=16 'ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=16 'ac	'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=16 'ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=16 'ac	'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'ac	'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'ac	'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'ac	'
    (check_textlabel) 'ac' is a text label chstr:'c'
    (check_textlabel) Exit char:	
    (check_textlabel) check_textlabel:ret1 Name:'ac' Type:f
   (check_proc_call) 'ac' is text label

    (check_literal) check_literal:lit=':' idx=18 '	'
    (check_literal) check_literal:After drop space:':' idx=18 '	'
    (check_literal)   ':' != '	'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'ac	'

    (check_operator) 'ac	' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'ac	':
    (check_vname) check_vname ret1 '	':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '	'

    (check_literal) check_literal:lit='(' idx=18 '	'
    (check_literal) check_literal:After drop space:'(' idx=18 '	'
    (check_literal)   '(' != '	'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=18 '	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=19 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' b+ac	' igncomma:1

  (check_eitem) check_eitem: 'b+ac	'

   (check_function)  'b+ac	'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'b+ac	'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'b+ac	'
    (check_literal)   '%' != 'b'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'b+ac	'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'b+ac	'
    (check_literal)   '"' != 'b'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'b+ac	'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'b+ac	'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'b+ac	'
     (check_textlabel) 'b' is a text label chstr:'b'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
    (check_proc_call) 'b' is text label

     (check_literal) check_literal:lit=':' idx=15 '+ac	'
     (check_literal) check_literal:After drop space:':' idx=15 '+ac	'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'b+ac	'

     (check_operator) 'b+ac	' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'b+ac	':
     (check_vname) check_vname ret1 '+ac	':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+ac	'

     (check_literal) check_literal:lit='(' idx=15 '+ac	'
     (check_literal) check_literal:After drop space:'(' idx=15 '+ac	'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'b+ac	'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=14 'b+ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=14 'b+ac	'
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=14 'b+ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=14 'b+ac	'
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b+ac	'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'b+ac	'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'b+ac	'
    (check_textlabel) 'b' is a text label chstr:'b'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
   (check_proc_call) 'b' is text label

    (check_literal) check_literal:lit=':' idx=15 '+ac	'
    (check_literal) check_literal:After drop space:':' idx=15 '+ac	'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'b+ac	'

    (check_operator) 'b+ac	' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'b+ac	':
    (check_vname) check_vname ret1 '+ac	':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+ac	'

    (check_literal) check_literal:lit='(' idx=15 '+ac	'
    (check_literal) check_literal:After drop space:'(' idx=15 '+ac	'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=14 'b+ac	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=14 'b+ac	'
  (check_literal)   '%' != 'b'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=14 'b+ac	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=14 'b+ac	'
  (check_literal)   '"' != 'b'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'b+ac	'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'b+ac	'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'b+ac	'
   (check_textlabel) 'b' is a text label chstr:'b'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'b' Type:f
  (check_proc_call) 'b' is text label

   (check_literal) check_literal:lit=':' idx=15 '+ac	'
   (check_literal) check_literal:After drop space:':' idx=15 '+ac	'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'b+ac	'

   (check_operator) 'b+ac	' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'b+ac	':
   (check_vname) check_vname ret1 '+ac	':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+ac	'

   (check_literal) check_literal:lit='(' idx=15 '+ac	'
   (check_literal) check_literal:After drop space:'(' idx=15 '+ac	'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'b+ac	' ref_ndeclare:1

  (scan_vname) scan_vname: 'b+ac	'
  (scan_vname) scan_vname: ret1 'b'
 (scan_variable) scan_variable: '+ac	' vname='B'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'B' is not other keyword
 (scan_variable) Array test '+ac	'

  (check_literal) check_literal:lit='(' idx=15 '+ac	'
  (check_literal) check_literal:After drop space:'(' idx=15 '+ac	'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='B' Float
(process_token)    Frst:1 T:'B' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'B'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f B
(add_var_info) Name:B Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 B'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+ac	' Before while igncomma:1

 (check_operator) '+ac	' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+ac	' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+ac	'
 (scan_operator) scan_operator: ret1 'ac	' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'ac	' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'ac	' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'ac	'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=16 'ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=16 'ac	'
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=16 'ac	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=16 'ac	'
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'ac	'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'ac	'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'ac	'
    (check_textlabel) 'ac' is a text label chstr:'c'
    (check_textlabel) Exit char:	
    (check_textlabel) check_textlabel:ret1 Name:'ac' Type:f
   (check_proc_call) 'ac' is text label

    (check_literal) check_literal:lit=':' idx=18 '	'
    (check_literal) check_literal:After drop space:':' idx=18 '	'
    (check_literal)   ':' != '	'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'ac	'

    (check_operator) 'ac	' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'ac	':
    (check_vname) check_vname ret1 '	':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '	'

    (check_literal) check_literal:lit='(' idx=18 '	'
    (check_literal) check_literal:After drop space:'(' idx=18 '	'
    (check_literal)   '(' != '	'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=16 'ac	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=16 'ac	'
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=16 'ac	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=16 'ac	'
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'ac	'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'ac	'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'ac	'
   (check_textlabel) 'ac' is a text label chstr:'c'
   (check_textlabel) Exit char:	
   (check_textlabel) check_textlabel:ret1 Name:'ac' Type:f
  (check_proc_call) 'ac' is text label

   (check_literal) check_literal:lit=':' idx=18 '	'
   (check_literal) check_literal:After drop space:':' idx=18 '	'
   (check_literal)   ':' != '	'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'ac	'

   (check_operator) 'ac	' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'ac	':
   (check_vname) check_vname ret1 '	':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '	'

   (check_literal) check_literal:lit='(' idx=18 '	'
   (check_literal) check_literal:After drop space:'(' idx=18 '	'
   (check_literal)   '(' != '	'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'ac	' ref_ndeclare:1

  (scan_vname) scan_vname: 'ac	'
  (scan_vname) scan_vname: ret1 'ac'
 (scan_variable) scan_variable: '	' vname='AC'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'AC' is not other keyword
 (scan_variable) Array test '	'

  (check_literal) check_literal:lit='(' idx=18 '	'
  (check_literal) check_literal:After drop space:'(' idx=18 '	'
  (check_literal)   '(' != '	'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='AC' Float
(process_token)    Frst:0 T:'AC' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'AC'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AC is not function
token_is_variable: tok:'AC'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AC is not function
(init_get_name) 
init_get_name:'AC'
(init_get_name) 
init_get_name:'AC'
(get_name) 
get_name:gn:'AC'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f AC
(add_var_info) Name:AC Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                AC'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=18 '	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=19 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '	' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ f
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=18 '	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=19 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=19 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=19 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:4 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :B   *************
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'B' type:f (1), %:0
(process_syntax_tree) *********Processing :AC   *************
(type_check_stack_push)  type_check_stack_push: 'AC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print)  N002: 'AC' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'B' type:f (1), %:0
(type_check_stack_display) 001: 'AC' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'AC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N002) percent:0
(process_syntax_tree) Mutable type (AC) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:B    **********
(type_check_stack_push)  type_check_stack_push: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'B' type:f (1), %:0
(typecheck_expression)  *** BE:AC    **********
(type_check_stack_push)  type_check_stack_push: 'AC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print)  N002: 'AC' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'B' type:f (1), %:0
(type_check_stack_display) 001: 'AC' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'AC'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'B' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'B'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'B' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'AC' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (B)
Var: B Float NumIdx:0
infix_stack_push: 'B'
(infix_from_rpn) (AC)
Var: AC Float NumIdx:0
infix_stack_push: 'AC'
(infix_from_rpn) (+)
infix_stack_pop: 'AC'
infix_stack_pop: 'B'
infix_stack_push: '(B + AC)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(B + AC)'
infix_stack_push: 'PRINT((B + AC))'
Done

infix_stack_pop: 'PRINT((B + AC))'
Infix stack result PRINT((B + AC))
(infix_from_rpn) exit  'PRINT((B + AC))'
(process_expression_types) ==RINT((B + AC))==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:4 qcode_idx:0146
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(add_simple_qcode) 'B'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) B: Trapped:0
(set_qcode_header_byte_at) idx:0146 len:1 val:01
(set_qcode_header_byte_at) idx:0147 len:1 val:FF
(set_qcode_header_byte_at) idx:0148 len:1 val:E6
(output_qcode_for_line) QC: i:1
(add_simple_qcode) 'AC'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) AC: Trapped:0
(set_qcode_header_byte_at) idx:0149 len:1 val:01
(set_qcode_header_byte_at) idx:014A len:1 val:FF
(set_qcode_header_byte_at) idx:014B len:1 val:BE
(output_qcode_for_line) QC: i:2
(add_simple_qcode) '+'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) +: Trapped:0
(set_qcode_header_byte_at) idx:014C len:1 val:3C
(output_qcode_for_line) QC: i:3
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:014D len:1 val:70
(finalise_expression) Finalise expression done.
	
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:4
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:014E
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:014E len:1 val:73
(finalise_expression) Finalise expression done.
	
========================================================
(output_expression_start)

 (check_expression) '	'

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=19 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=19 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=19 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=19 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=19 ''
     (check_literal) check_literal:After drop space:':' idx=19 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=19 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=19 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=18 '	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=19 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=19 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=19 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=18 '	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=19 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:014F
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print "b+ac", b+ac	
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=19 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=19 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=19 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = '1' (49)
 (is_all_spaces) cline[8] = '2' (50)
 (is_all_spaces) cline[9] = '6' (54)
 (is_all_spaces) cline[10] = '8' (56)
 (is_all_spaces) cline[11] = '.' (46)
 (is_all_spaces) cline[12] = '7' (55)
 (is_all_spaces) cline[13] = '+' (43)
 (is_all_spaces) cline[14] = '1' (49)
 (is_all_spaces) cline[15] = '.' (46)
 (is_all_spaces) cline[16] = '3' (51)
 (is_all_spaces) cline[17] = '3' (51)
 (is_all_spaces) cline[18] = '3' (51)
 (is_all_spaces) cline[19] = '"' (34)
 (is_all_spaces) cline[20] = ',' (44)
 (is_all_spaces) cline[21] = ' ' (32)
 (is_all_spaces) cline[22] = '1' (49)
 (is_all_spaces) cline[23] = '2' (50)
 (is_all_spaces) cline[24] = '6' (54)
 (is_all_spaces) cline[25] = '8' (56)
 (is_all_spaces) cline[26] = '.' (46)
 (is_all_spaces) cline[27] = '7' (55)
 (is_all_spaces) cline[28] = '+' (43)
 (is_all_spaces) cline[29] = '1' (49)
 (is_all_spaces) cline[30] = '.' (46)
 (is_all_spaces) cline[31] = '3' (51)
 (is_all_spaces) cline[32] = '3' (51)
 (is_all_spaces) cline[33] = '3' (51)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "1268.7+1.333", 1268.7+1.333'
**************************************
**print "1268.7+1.333", 1268.7+1.333**
**************************************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "1268.7+1.333", 1268.7+1.333'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "1268.7+1.333", 1268.7+1.333'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "1268.7+1.333", 1268.7+1.333'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "1268.7+1.333", 1268.7+1.333'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "1268.7+1.333", 1268.7+1.333'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "1268.7+1.333", 1268.7+1.333'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "1268.7+1.333", 1268.7+1.333'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "1268.7+1.333", 1268.7+1.333'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "1268.7+1.333", 1268.7+1.333'

   (check_operator) 'print "1268.7+1.333", 1268.7+1.333' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "1268.7+1.333", 1268.7+1.333':
   (check_vname) check_vname ret1 ' "1268.7+1.333", 1268.7+1.333':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "1268.7+1.333", 1268.7+1.333'

   (check_literal) check_literal:lit='(' idx=5 ' "1268.7+1.333", 1268.7+1.333'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "1268.7+1.333", 1268.7+1.333'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "1268.7+1.333", 1268.7+1.333'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"1268.7+1.333", 1268.7+1.333'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "1268.7+1.333", 1268.7+1.333'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "1268.7+1.333", 1268.7+1.333'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "1268.7+1.333", 1268.7+1.333'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "1268.7+1.333", 1268.7+1.333'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "1268.7+1.333", 1268.7+1.333'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "1268.7+1.333", 1268.7+1.333'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "1268.7+1.333", 1268.7+1.333'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "1268.7+1.333", 1268.7+1.333'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "1268.7+1.333", 1268.7+1.333'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "1268.7+1.333", 1268.7+1.333'
   (check_literal) check_literal:After drop space:':' idx=5 ' "1268.7+1.333", 1268.7+1.333'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "1268.7+1.333", 1268.7+1.333'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "1268.7+1.333", 1268.7+1.333'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "1268.7+1.333", 1268.7+1.333'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "1268.7+1.333", 1268.7+1.333'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "1268.7+1.333", 1268.7+1.333'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "1268.7+1.333", 1268.7+1.333'
   (check_literal) check_literal:After while(): "1268.7+1.333", 1268.7+1.333
   (check_literal) ret1 Match. ' PRINT' == 'print "1268.7+1.333", 1268.7+1.333'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "1268.7+1.333", 1268.7+1.333'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "1268.7+1.333", 1268.7+1.333'
   (check_literal) check_literal:After while(): "1268.7+1.333", 1268.7+1.333
   (check_literal) ret1 Match. ' PRINT' == 'print "1268.7+1.333", 1268.7+1.333'

   (check_expression) ' "1268.7+1.333", 1268.7+1.333'

    (check_eitem) check_eitem: '"1268.7+1.333", 1268.7+1.333'

     (check_function)  '"1268.7+1.333", 1268.7+1.333'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) check_literal:After while():1268.7+1.333", 1268.7+1.333
      (check_literal) ret1 Match. ' "' == '"1268.7+1.333", 1268.7+1.333'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', 1268.7+1.333' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', 1268.7+1.333' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "1268.7+1.333", 1268.7+1.333'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "1268.7+1.333", 1268.7+1.333'
   (check_literal) check_literal:After while(): "1268.7+1.333", 1268.7+1.333
   (check_literal) ret1 Match. ' PRINT' == 'print "1268.7+1.333", 1268.7+1.333'
  (scan_print) Before while

   (check_expression) ' "1268.7+1.333", 1268.7+1.333'

    (check_eitem) check_eitem: '"1268.7+1.333", 1268.7+1.333'

     (check_function)  '"1268.7+1.333", 1268.7+1.333'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) check_literal:After while():1268.7+1.333", 1268.7+1.333
      (check_literal) ret1 Match. ' "' == '"1268.7+1.333", 1268.7+1.333'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', 1268.7+1.333' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', 1268.7+1.333' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "1268.7+1.333", 1268.7+1.333' igncomma:1

    (check_eitem) check_eitem: '"1268.7+1.333", 1268.7+1.333'

     (check_function)  '"1268.7+1.333", 1268.7+1.333'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) check_literal:After while():1268.7+1.333", 1268.7+1.333
      (check_literal) ret1 Match. ' "' == '"1268.7+1.333", 1268.7+1.333'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"1268.7+1.333", 1268.7+1.333'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) check_literal:After while():1268.7+1.333", 1268.7+1.333
      (check_literal) ret1 Match. ' "' == '"1268.7+1.333", 1268.7+1.333'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"1268.7+1.333", 1268.7+1.333'
      (check_literal) check_literal:After while():1268.7+1.333", 1268.7+1.333
      (check_literal) ret1 Match. ' "' == '"1268.7+1.333", 1268.7+1.333'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"1268.7+1.333", 1268.7+1.333'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"1268.7+1.333", 1268.7+1.333'
       (check_literal) check_literal:After while():1268.7+1.333", 1268.7+1.333
       (check_literal) ret1 Match. ' "' == '"1268.7+1.333", 1268.7+1.333'
      (scan_string)   (in if) '1268.7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '1268.7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '268.7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '268.7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '68.7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '68.7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '8.7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '8.7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '.7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '.7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '7+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '+1.333", 1268.7+1.333'
      (scan_string)   (in wh) '1.333", 1268.7+1.333'
      (scan_string)   (in wh) '1.333", 1268.7+1.333'
      (scan_string)   (in wh) '.333", 1268.7+1.333'
      (scan_string)   (in wh) '.333", 1268.7+1.333'
      (scan_string)   (in wh) '333", 1268.7+1.333'
      (scan_string)   (in wh) '333", 1268.7+1.333'
      (scan_string)   (in wh) '33", 1268.7+1.333'
      (scan_string)   (in wh) '33", 1268.7+1.333'
      (scan_string)   (in wh) '3", 1268.7+1.333'
      (scan_string)   (in wh) '3", 1268.7+1.333'
      (scan_string)   (in wh) '", 1268.7+1.333'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"1268.7+1.333"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"1268.7+1.333"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"1268.7+1.333" is not function
token_is_variable: tok:'"1268.7+1.333"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"1268.7+1.333" is not function
(   output_string) [U,()] s "1268.7+1.333"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', 1268.7+1.333' Before while igncomma:1

    (check_operator) ', 1268.7+1.333' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', 1268.7+1.333' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=20 ', 1268.7+1.333'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=20 ', 1268.7+1.333'
   (check_literal) check_literal:After while(): 1268.7+1.333
   (check_literal) ret1 Match. ' ,' == ', 1268.7+1.333'

   (scan_literal_core) scan_literal_core:lit=' ,' ', 1268.7+1.333'
   (scan_literal_core) scan_literal_core:After drop space:', 1268.7+1.333'
   (scan_literal_core) scan_literal_core:while loop:, 1268.7+1.333
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=21 ' 1268.7+1.333'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=22 '1268.7+1.333'
 (check_literal)   ';' != '1'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"1268.7+1.333"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :"1268.7+1.333"   *************
(type_check_stack_push)  type_check_stack_push: '"1268.7+1.333"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"1268.7+1.333"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"1268.7+1.333"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"1268.7+1.333"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:"1268.7+1.333"    **********
(type_check_stack_push)  type_check_stack_push: '"1268.7+1.333"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"1268.7+1.333"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"1268.7+1.333"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"1268.7+1.333"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"1268.7+1.333"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"1268.7+1.333"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("1268.7+1.333")
infix_stack_push: '"1268.7+1.333"'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"1268.7+1.333"'
infix_stack_push: 'PRINT("1268.7+1.333")'
Done

infix_stack_pop: 'PRINT("1268.7+1.333")'
Infix stack result PRINT("1268.7+1.333")
(infix_from_rpn) exit  'PRINT("1268.7+1.333")'
(process_expression_types) ==RINT("1268.7+1.333")==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:014F
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:0 String Literal '"1268.7+1.333"' EXP_BUFF_ID_STR
(set_qcode_header_byte_at) idx:014F len:1 val:24
(set_qcode_header_byte_at) idx:0150 len:1 val:0C
(set_qcode_header_byte_at) idx:0151 len:1 val:31
(set_qcode_header_byte_at) idx:0152 len:1 val:32
(set_qcode_header_byte_at) idx:0153 len:1 val:36
(set_qcode_header_byte_at) idx:0154 len:1 val:38
(set_qcode_header_byte_at) idx:0155 len:1 val:2E
(set_qcode_header_byte_at) idx:0156 len:1 val:37
(set_qcode_header_byte_at) idx:0157 len:1 val:2B
(set_qcode_header_byte_at) idx:0158 len:1 val:31
(set_qcode_header_byte_at) idx:0159 len:1 val:2E
(set_qcode_header_byte_at) idx:015A len:1 val:33
(set_qcode_header_byte_at) idx:015B len:1 val:33
(set_qcode_header_byte_at) idx:015C len:1 val:33
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:015D len:1 val:71
(finalise_expression) Finalise expression done.
 1268.7+1.333
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:015E
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:015E len:1 val:72
(finalise_expression) Finalise expression done.
 1268.7+1.333
========================================================
(output_expression_start)

 (check_expression) ' 1268.7+1.333'

  (check_eitem) check_eitem: '1268.7+1.333'

   (check_function)  '1268.7+1.333'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=22 '1268.7+1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 '1268.7+1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=22 '1268.7+1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 '1268.7+1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1268.7' float:1.268700e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (check_operator) '+1.333' igncomma:1
  (check_operator) ret1:is comma: 0

  (check_operator) '1.333' igncomma:1
  (check_operator) ret0:is comma: 0

  (check_eitem) check_eitem: '1.333'

   (check_function)  '1.333'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=29 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=29 '1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=29 '1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=29 '1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1.333' float:1.333000e+00
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1
 (check_expression) n commas now:0

  (check_literal) check_literal:lit=' %' idx=34 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=34 ''
  (check_literal) check_literal  ret0 Empty test string

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' 1268.7+1.333' igncomma:1

  (check_eitem) check_eitem: '1268.7+1.333'

   (check_function)  '1268.7+1.333'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=22 '1268.7+1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 '1268.7+1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=22 '1268.7+1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 '1268.7+1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1268.7' float:1.268700e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1
  (check_eitem) ret1

  (scan_eitem) scan_eitem:

   (check_function)  '1268.7+1.333'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=22 '1268.7+1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 '1268.7+1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=22 '1268.7+1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 '1268.7+1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1268.7' float:1.268700e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1
   (check_atom) ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=22 '1268.7+1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 '1268.7+1.333'
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=22 '1268.7+1.333'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 '1268.7+1.333'
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1268.7' float:1.268700e+03
     (check_float) check_float: ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'1268.7' float:1.268700e+03
     (check_float) check_float: ret1

     (scan_float) scan_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (scan_float) Fltval:'1268.7' float:1.268700e+03
     (scan_float) scan_float: ret1
    (process_token)    Frst:1 T:'1268.7' toktype:i exptype:U bufid:'EXP_BUFF_ID_FLT'
    (process_token) Before switch, bufid:'EXP_BUFF_ID_FLT'
modify_expression_type:Inittype:U Intype:f Outtype:f
(    output_float) [f,()] f 1268.7
    (scan_atom) ret1
   (scan_expression) '+1.333' Before while igncomma:1

    (check_operator) '+1.333' igncomma:1
    (check_operator) ret1:is comma: 0

    (check_operator) '+1.333' igncomma:1
    (check_operator) ret1:is comma: 0

    (scan_operator) scan_operator: '+1.333'
    (scan_operator) scan_operator: ret1 '1.333' nb:0
   (process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
   (operator_precedence) 
+ is operator
   (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
   (process_token) 
Token is operator o1 name:+ o2 name:
   (process_token) 
opr1:3 opr2:100
   (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
   (op_stack_print) ------------------
   (op_stack_print) Operator Stack     (1)

   (op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
   (op_stack_print) ------------------


    (check_operator) '1.333' igncomma:1
    (check_operator) ret0:is comma: 0
   (scan_expression) '1.333' Before scan_eitem igncomma:1

    (scan_eitem) scan_eitem:

     (check_function)  '1.333'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=29 '1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=29 '1.333'
      (check_literal)   '%' != '1'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=29 '1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=29 '1.333'
      (check_literal)   '"' != '1'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'1.333' float:1.333000e+00
       (check_float) check_float: ret1
      (check_number) check_number: ret1
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=29 '1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=29 '1.333'
      (check_literal)   '%' != '1'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=29 '1.333'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=29 '1.333'
      (check_literal)   '"' != '1'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'1.333' float:1.333000e+00
       (check_float) check_float: ret1
      (check_number) check_number: ret1

      (scan_number) scan_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'1.333' float:1.333000e+00
       (check_float) check_float: ret1

       (scan_float) scan_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (scan_float) Fltval:'1.333' float:1.333000e+00
       (scan_float) scan_float: ret1
      (process_token)    Frst:0 T:'1.333' toktype:i exptype:f bufid:'EXP_BUFF_ID_FLT'
      (operator_precedence) 
+ is operator
      (process_token) Before switch, bufid:'EXP_BUFF_ID_FLT'
modify_expression_type:Inittype:f Intype:f Outtype:f
(    output_float) [f,()] f 1.333
      (scan_atom) ret1
     (scan_expression) n commas now:0

      (check_literal) check_literal:lit=' %' idx=34 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=34 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_operator) '' igncomma:1
      (check_operator) ret0:is comma: 0
     (scan_expression) ret1 '' commas:0
    (op_stack_finalise) Finalise stack
    (op_stack_pop) Pop '+' type:f 
    (op_stack_print) ------------------
    (op_stack_print) Operator Stack     (0)

    (op_stack_print) ------------------

    (op_stack_finalise) Popped:+ f
    (output_operator) [f,()] f +
    (output_generic) [f,()] f PRINT exp_type:f
    (scan_print) After scan expression I

     (check_literal) check_literal:lit=' ,' idx=34 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=34 ''
     (check_literal) check_literal  ret0 Empty test string
    (scan_print) After scan expression II

     (check_literal) check_literal:lit=' ;' idx=34 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:';' idx=34 ''
     (check_literal) check_literal  ret0 Empty test string
    (scan_print) Checking if delimiter was present
    (scan_print) No delimiter present
    (finalise_expression) Finalise expression Buf i:4 buf2 i:1
    (op_stack_finalise) Finalise stack
    (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1268.7' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1.333' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

    (process_syntax_tree) Pass:2
    (process_syntax_tree) *********Processing :1268.7   *************
    (type_check_stack_push)  type_check_stack_push: '1268.7'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (1)

    (type_check_stack_print)  N001: '1268.7' type:1 %:0
    (type_check_stack_print) ------------------

    (type_check_stack_display) Type Check Stack (1)
    (type_check_stack_display) 000: '1268.7' type:f (1), %:0
    (process_syntax_tree) *********Processing :1.333   *************
    (type_check_stack_push)  type_check_stack_push: '1.333'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (2)

    (type_check_stack_print)  N001: '1268.7' type:1 %:0
    (type_check_stack_print)  N002: '1.333' type:1 %:0
    (type_check_stack_print) ------------------

    (type_check_stack_display) Type Check Stack (2)
    (type_check_stack_display) 000: '1268.7' type:f (1), %:0
    (type_check_stack_display) 001: '1.333' type:f (1), %:0
    (process_syntax_tree) *********Processing :+   *************
    (process_syntax_tree) BUFF_ID_OPERATOR
    (process_syntax_tree) Found operator + %conv:1
    (type_check_stack_pop)   type_check_stack_pop: '1.333'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (1)

    (type_check_stack_print)  N001: '1268.7' type:1 %:0
    (type_check_stack_print) ------------------

    (type_check_stack_pop)   type_check_stack_pop: '1268.7'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (0)

    (type_check_stack_print) ------------------

    (process_syntax_tree) op1 type:f op2 type:f %conv:1
    (process_syntax_tree) Percent convertible operator op1 (N002) percent:0
    (process_syntax_tree) Mutable type (1.333) f f
    (process_syntax_tree) Same type
    (type_check_stack_push)  type_check_stack_push: '000'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (1)

    (type_check_stack_print)  N003: '000' type:1 %:0
    (type_check_stack_print) ------------------

    (type_check_stack_display) Type Check Stack (1)
    (type_check_stack_display) 000: '000' type:f (1), %:0
    (process_syntax_tree) *********Processing :PRINT   *************
    (process_syntax_tree) PRINT type adjust
    (type_check_stack_pop)   type_check_stack_pop: '000'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (0)

    (type_check_stack_print) ------------------

    (type_check_stack_display) Type Check Stack (0)
    (typecheck_expression) Pass:2
    (typecheck_expression)  *** BE:1268.7    **********
    (type_check_stack_push)  type_check_stack_push: '1268.7'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (1)

    (type_check_stack_print)  N001: '1268.7' type:1 %:0
    (type_check_stack_print) ------------------

    (type_check_stack_display) Type Check Stack (1)
    (type_check_stack_display) 000: '1268.7' type:f (1), %:0
    (typecheck_expression)  *** BE:1.333    **********
    (type_check_stack_push)  type_check_stack_push: '1.333'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (2)

    (type_check_stack_print)  N001: '1268.7' type:1 %:0
    (type_check_stack_print)  N002: '1.333' type:1 %:0
    (type_check_stack_print) ------------------

    (type_check_stack_display) Type Check Stack (2)
    (type_check_stack_display) 000: '1268.7' type:f (1), %:0
    (type_check_stack_display) 001: '1.333' type:f (1), %:0
    (typecheck_expression)  *** BE:+    **********
    (typecheck_expression) BUFF_ID_OPERATOR
    (typecheck_expression) Found operator +
    (type_check_stack_pop)   type_check_stack_pop: '1.333'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (1)

    (type_check_stack_print)  N001: '1268.7' type:1 %:0
    (type_check_stack_print) ------------------

    (type_check_stack_pop)   type_check_stack_pop: '1268.7'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (0)

    (type_check_stack_print) ------------------

    (typecheck_expression) op1 type:f op2 type:f
    (typecheck_expression) Mutable type (+) f f
    (typecheck_expression) Same type
    (type_check_stack_push)  type_check_stack_push: '000'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (1)

    (type_check_stack_print)  N003: '000' type:1 %:0
    (type_check_stack_print) ------------------

    (type_check_stack_display) Type Check Stack (1)
    (type_check_stack_display) 000: '000' type:f (1), %:0
    (typecheck_expression)  *** BE:PRINT    **********
    (typecheck_expression) PRINT type adjust
    (type_check_stack_pop)   type_check_stack_pop: '000'
    (type_check_stack_print) ------------------
    (type_check_stack_print) Type Check Stack     (0)

    (type_check_stack_print) ------------------

    (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1268.7' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1.333' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1268.7' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1.333' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

    (process_expression_types) 
==INFIX==

    (infix_from_rpn) (1268.7)
infix_stack_push: '1268.7'
    (infix_from_rpn) (1.333)
infix_stack_push: '1.333'
    (infix_from_rpn) (+)
infix_stack_pop: '1.333'
infix_stack_pop: '1268.7'
infix_stack_push: '(1268.7 + 1.333)'
    (infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(1268.7 + 1.333)'
infix_stack_push: 'PRINT((1268.7 + 1.333))'
Done

infix_stack_pop: 'PRINT((1268.7 + 1.333))'
Infix stack result PRINT((1268.7 + 1.333))
    (infix_from_rpn) exit  'PRINT((1268.7 + 1.333))'
    (process_expression_types) ==RINT((1268.7 + 1.333))==
    (process_expression_types) 


    (output_qcode_for_line) ================================================================================
    (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:4 qcode_idx:015F
    (output_qcode_for_line) ================================================================================
    (output_qcode_for_line) QC: i:0
    (set_qcode_header_byte_at) idx:015F len:1 val:23
    (convert_to_compact_float) INPUT:Idx:352 fltstr:'1268.7'
    (convert_to_compact_float) No 'E' found
    (convert_to_compact_float) No 'E' found
    (convert_to_compact_float) No 'E' found
    (convert_to_compact_float) No 'E' found
    (convert_to_compact_float) No 'E' found
    (convert_to_compact_float) No 'E' found
    (convert_to_compact_float) Exponent:0
    (convert_to_compact_float) Idx:352 fltstr:'1268.7'
    (convert_to_compact_float) Sign:0 start:0
    (convert_to_compact_float) Normalising:'1268.7'
    (convert_to_compact_float) Need to make smaller
    (convert_to_compact_float) normalised='12687'
    (convert_to_compact_float) Drop trailing zeros
    (convert_to_compact_float) normalised='12687'
    (convert_to_compact_float) After adding zero back for odd number of digits: normalised='126870'
    (set_qcode_header_byte_at) idx:0160 len:1 val:04
    (convert_to_compact_float) 70
    (set_qcode_header_byte_at) idx:0161 len:1 val:70
    (convert_to_compact_float) 68
    (set_qcode_header_byte_at) idx:0162 len:1 val:68
    (convert_to_compact_float) 12
    (set_qcode_header_byte_at) idx:0163 len:1 val:12
    (set_qcode_header_byte_at) idx:0164 len:1 val:03
    (convert_to_compact_float) RESULT: Input:'1268.7' Norm mant:'126870' Sign:0 Exponent:3
    (output_qcode_for_line) QC: i:1
    (set_qcode_header_byte_at) idx:0165 len:1 val:23
    (convert_to_compact_float) INPUT:Idx:358 fltstr:'1.333'
    (convert_to_compact_float) No 'E' found
    (convert_to_compact_float) No 'E' found
    (convert_to_compact_float) No 'E' found
    (convert_to_compact_float) No 'E' found
    (convert_to_compact_float) No 'E' found
    (convert_to_compact_float) Exponent:0
    (convert_to_compact_float) Idx:358 fltstr:'1.333'
    (convert_to_compact_float) Sign:0 start:0
    (convert_to_compact_float) Normalising:'1.333'
    (convert_to_compact_float) Need to make smaller
    (convert_to_compact_float) normalised='1333'
    (convert_to_compact_float) Drop trailing zeros
    (convert_to_compact_float) normalised='1333'
    (convert_to_compact_float) After adding zero back for odd number of digits: normalised='1333'
    (set_qcode_header_byte_at) idx:0166 len:1 val:03
    (convert_to_compact_float) 33
    (set_qcode_header_byte_at) idx:0167 len:1 val:33
    (convert_to_compact_float) 13
    (set_qcode_header_byte_at) idx:0168 len:1 val:13
    (set_qcode_header_byte_at) idx:0169 len:1 val:00
    (convert_to_compact_float) RESULT: Input:'1.333' Norm mant:'1333' Sign:0 Exponent:0
    (output_qcode_for_line) QC: i:2
    (add_simple_qcode) '+'
    (add_simple_qcode) Op type:f op access:Read qcode_type:U
    (add_simple_qcode) NULL vi
    (qcode_check_trapped) +: Trapped:0
    (set_qcode_header_byte_at) idx:016A len:1 val:3C
    (output_qcode_for_line) QC: i:3
    (output_qcode_for_line) QC:PRINT
    (set_qcode_header_byte_at) idx:016B len:1 val:70
    (finalise_expression) Finalise expression done.
    (process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
    (process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
    (op_stack_print) ------------------
    (op_stack_print) Operator Stack     (1)

    (op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
    (op_stack_print) ------------------

    (finalise_expression) Finalise expression Buf i:0 buf2 i:4
    (op_stack_finalise) Finalise stack
    (op_stack_pop) Pop 'PRINT' type:U 
    (op_stack_print) ------------------
    (op_stack_print) Operator Stack     (0)

    (op_stack_print) ------------------

    (op_stack_finalise) Popped:PRINT U
    (output_operator) [U,()] U PRINT
    (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

    (process_syntax_tree) Pass:2
    (process_syntax_tree) *********Processing :PRINT   *************
default buf_id
    (type_check_stack_display) Type Check Stack (0)
    (typecheck_expression) Pass:2
    (typecheck_expression)  *** BE:PRINT    **********
default buf_id
    (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

    (process_expression_types) 
==INFIX==

    (infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
    (infix_from_rpn) exit  '<nl>'
    (process_expression_types) ==nl>==
    (process_expression_types) 


    (output_qcode_for_line) ================================================================================
    (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:016C
    (output_qcode_for_line) ================================================================================
    (output_qcode_for_line) QC: i:0
    (output_qcode_for_line) QC:PRINT
    (set_qcode_header_byte_at) idx:016C len:1 val:73
    (finalise_expression) Finalise expression done.

     (check_expression) ''

      (check_eitem) check_eitem: ''

       (check_function)  ''
       (check_function) ret0

       (check_atom) check_atom:
       (check_atom) check_atom:Checking for character constant

        (check_literal) check_literal:lit=' %' idx=34 ''
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=34 ''
        (check_literal) check_literal  ret0 Empty test string
       (check_atom) check_atom:Checking for string

        (check_literal) check_literal:lit=' "' idx=34 ''
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=34 ''
        (check_literal) check_literal  ret0 Empty test string

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) Fltval:'' float:0.000000e+00
         (check_float) check_float: ret0

         (check_integer) check_integer: ''
         (check_integer) check_integer:ret0

         (check_hex) check_hex: ''
         (check_hex) check_hex:ret0 not '$'
        (check_number) check_number: ret0

        (check_proc_call) check_proc_call:

         (check_textlabel) ''
         (check_textlabel) '' is a text label chstr:'@'
         (check_textlabel) Exit char:
         (check_textlabel) check_textlabel:ret1 Name:'' Type:f
        (check_proc_call) '' is text label

         (check_literal) check_literal:lit=':' idx=34 ''
         (check_literal) check_literal:After drop space:':' idx=34 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_proc_call) check_proc_call:ret0

        (check_variable) ''

         (check_operator) '' igncomma:1
         (check_operator) ret0:is comma: 32767

         (check_vname) check_vname '':
         (check_vname) check_vname ret0 '':
        (check_variable) check_variable:ret0 
       (check_atom) check_atom:ret0

       (check_sub_expr) check_sub_expr:

        (check_literal) check_literal:lit=' (' idx=34 ''
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'(' idx=34 ''
        (check_literal) check_literal  ret0 Empty test string
       (check_sub_expr) ret0: No '('

       (check_addr_name) check_addr_name: ''

        (check_vname) check_vname '':
        (check_vname) check_vname ret0 '':
       (check_addr_name) check_addr_name: ret0
      (check_eitem) check_eitem:ret0

      (check_operator) '' igncomma:1
      (check_operator) ret0:is comma: 0
     (check_expression) ret0 ''
    (scan_print) Check for trailing delimiter

     (check_literal) check_literal:lit=' ;' idx=34 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:';' idx=34 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' ,' idx=34 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=34 ''
     (check_literal) check_literal  ret0 Empty test string
    (scan_print) scan_print:ret1 Expression 
   (scan_line) ret1 print
  (translate_file) ********************************************************************************
  (translate_file) ********************************************************************************
  (translate_file) Scan line ok

   (check_literal) check_literal:lit=' :' idx=34 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:':' idx=34 ''
   (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:016D
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print "1268.7+1.333", 1268.7+1.333
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=34 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=34 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=34 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = 'c' (99)
 (is_all_spaces) cline[7] = '.' (46)
 (is_all_spaces) cline[8] = 't' (116)
 (is_all_spaces) cline[9] = 'e' (101)
 (is_all_spaces) cline[10] = 's' (115)
 (is_all_spaces) cline[11] = 't' (116)
 (is_all_spaces) cline[12] = ',' (44)
 (is_all_spaces) cline[13] = ' ' (32)
 (is_all_spaces) cline[14] = 'c' (99)
 (is_all_spaces) cline[15] = '.' (46)
 (is_all_spaces) cline[16] = 's' (115)
 (is_all_spaces) cline[17] = 'e' (101)
 (is_all_spaces) cline[18] = 'c' (99)
 (is_all_spaces) cline[19] = 'o' (111)
 (is_all_spaces) cline[20] = 'n' (110)
 (is_all_spaces) cline[21] = 'd' (100)
 (is_all_spaces) cline[22] = ',' (44)
 (is_all_spaces) cline[23] = ' ' (32)
 (is_all_spaces) cline[24] = 'c' (99)
 (is_all_spaces) cline[25] = '.' (46)
 (is_all_spaces) cline[26] = 't' (116)
 (is_all_spaces) cline[27] = 'h' (104)
 (is_all_spaces) cline[28] = 'i' (105)
 (is_all_spaces) cline[29] = 'r' (114)
 (is_all_spaces) cline[30] = 'd' (100)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print c.test, c.second, c.third'
***********************************
**print c.test, c.second, c.third**
***********************************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print c.test, c.second, c.third'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print c.test, c.second, c.third'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print c.test, c.second, c.third'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print c.test, c.second, c.third'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print c.test, c.second, c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print c.test, c.second, c.third'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print c.test, c.second, c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print c.test, c.second, c.third'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print c.test, c.second, c.third'

   (check_operator) 'print c.test, c.second, c.third' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print c.test, c.second, c.third':
   (check_vname) check_vname ret1 ' c.test, c.second, c.third':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' c.test, c.second, c.third'

   (check_literal) check_literal:lit='(' idx=5 ' c.test, c.second, c.third'
   (check_literal) check_literal:After drop space:'(' idx=5 ' c.test, c.second, c.third'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' c.test, c.second, c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 'c.test, c.second, c.third'
 (check_literal)   '=' != 'c'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print c.test, c.second, c.third'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print c.test, c.second, c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print c.test, c.second, c.third'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print c.test, c.second, c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print c.test, c.second, c.third'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print c.test, c.second, c.third'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' c.test, c.second, c.third'
   (check_literal) check_literal:After drop space:'::' idx=5 ' c.test, c.second, c.third'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print c.test, c.second, c.third'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' c.test, c.second, c.third'
   (check_literal) check_literal:After drop space:':' idx=5 ' c.test, c.second, c.third'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print c.test, c.second, c.third'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print c.test, c.second, c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print c.test, c.second, c.third'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print c.test, c.second, c.third'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print c.test, c.second, c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print c.test, c.second, c.third'
   (check_literal) check_literal:After while(): c.test, c.second, c.third
   (check_literal) ret1 Match. ' PRINT' == 'print c.test, c.second, c.third'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print c.test, c.second, c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print c.test, c.second, c.third'
   (check_literal) check_literal:After while(): c.test, c.second, c.third
   (check_literal) ret1 Match. ' PRINT' == 'print c.test, c.second, c.third'

   (check_expression) ' c.test, c.second, c.third'

    (check_eitem) check_eitem: 'c.test, c.second, c.third'

     (check_function)  'c.test, c.second, c.third'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 'c.test, c.second, c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 'c.test, c.second, c.third'
      (check_literal)   '%' != 'c'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 'c.test, c.second, c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 'c.test, c.second, c.third'
      (check_literal)   '"' != 'c'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'' float:0.000000e+00
       (check_float) check_float: ret0

       (check_integer) check_integer: 'c.test, c.second, c.third'
       (check_integer) check_integer:ret0

       (check_hex) check_hex: 'c.test, c.second, c.third'
       (check_hex) check_hex:ret0 not '$'
      (check_number) check_number: ret0

      (check_proc_call) check_proc_call:

       (check_textlabel) 'c.test, c.second, c.third'
       (check_textlabel) 'c.test' is a text label chstr:'t'
       (check_textlabel) Exit char:,
       (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
      (check_proc_call) 'c.test' is text label

       (check_literal) check_literal:lit=':' idx=12 ', c.second, c.third'
       (check_literal) check_literal:After drop space:':' idx=12 ', c.second, c.third'
       (check_literal)   ':' != ','
       (check_literal) check_literal: ret0
      (check_proc_call) check_proc_call:ret0

      (check_variable) 'c.test, c.second, c.third'

       (check_operator) 'c.test, c.second, c.third' igncomma:1
       (check_operator) ret0:is comma: 32767

       (check_vname) check_vname 'c.test, c.second, c.third':
       (check_vname) check_vname ret1 ', c.second, c.third':
      (check_variable) Name: ''
      (check_variable) check_variable: Ary test ', c.second, c.third'

       (check_literal) check_literal:lit='(' idx=12 ', c.second, c.third'
       (check_literal) check_literal:After drop space:'(' idx=12 ', c.second, c.third'
       (check_literal)   '(' != ','
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) ret1
   (check_eitem) ret1

   (check_operator) ', c.second, c.third' igncomma:1
   (check_operator) ret0:is comma: 0
  (check_expression) ret1 ', c.second, c.third' commas:0

  (check_literal) check_literal:lit=' PRINT' idx=0 'print c.test, c.second, c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'PRINT' idx=0 'print c.test, c.second, c.third'
  (check_literal) check_literal:After while(): c.test, c.second, c.third
  (check_literal) ret1 Match. ' PRINT' == 'print c.test, c.second, c.third'
 (scan_print) Before while

  (check_expression) ' c.test, c.second, c.third'

   (check_eitem) check_eitem: 'c.test, c.second, c.third'

    (check_function)  'c.test, c.second, c.third'
    (check_function) ret0

    (check_atom) check_atom:
    (check_atom) check_atom:Checking for character constant

     (check_literal) check_literal:lit=' %' idx=6 'c.test, c.second, c.third'
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'c.test, c.second, c.third'
     (check_literal)   '%' != 'c'
     (check_literal) check_literal: ret0
    (check_atom) check_atom:Checking for string

     (check_literal) check_literal:lit=' "' idx=6 'c.test, c.second, c.third'
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'c.test, c.second, c.third'
     (check_literal)   '"' != 'c'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) Fltval:'' float:0.000000e+00
      (check_float) check_float: ret0

      (check_integer) check_integer: 'c.test, c.second, c.third'
      (check_integer) check_integer:ret0

      (check_hex) check_hex: 'c.test, c.second, c.third'
      (check_hex) check_hex:ret0 not '$'
     (check_number) check_number: ret0

     (check_proc_call) check_proc_call:

      (check_textlabel) 'c.test, c.second, c.third'
      (check_textlabel) 'c.test' is a text label chstr:'t'
      (check_textlabel) Exit char:,
      (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
     (check_proc_call) 'c.test' is text label

      (check_literal) check_literal:lit=':' idx=12 ', c.second, c.third'
      (check_literal) check_literal:After drop space:':' idx=12 ', c.second, c.third'
      (check_literal)   ':' != ','
      (check_literal) check_literal: ret0
     (check_proc_call) check_proc_call:ret0

     (check_variable) 'c.test, c.second, c.third'

      (check_operator) 'c.test, c.second, c.third' igncomma:1
      (check_operator) ret0:is comma: 32767

      (check_vname) check_vname 'c.test, c.second, c.third':
      (check_vname) check_vname ret1 ', c.second, c.third':
     (check_variable) Name: ''
     (check_variable) check_variable: Ary test ', c.second, c.third'

      (check_literal) check_literal:lit='(' idx=12 ', c.second, c.third'
      (check_literal) check_literal:After drop space:'(' idx=12 ', c.second, c.third'
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) ret1
  (check_eitem) ret1

  (check_operator) ', c.second, c.third' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret1 ', c.second, c.third' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' c.test, c.second, c.third' igncomma:1

  (check_eitem) check_eitem: 'c.test, c.second, c.third'

   (check_function)  'c.test, c.second, c.third'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=6 'c.test, c.second, c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=6 'c.test, c.second, c.third'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=6 'c.test, c.second, c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=6 'c.test, c.second, c.third'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.test, c.second, c.third'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.test, c.second, c.third'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.test, c.second, c.third'
     (check_textlabel) 'c.test' is a text label chstr:'t'
     (check_textlabel) Exit char:,
     (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
    (check_proc_call) 'c.test' is text label

     (check_literal) check_literal:lit=':' idx=12 ', c.second, c.third'
     (check_literal) check_literal:After drop space:':' idx=12 ', c.second, c.third'
     (check_literal)   ':' != ','
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.test, c.second, c.third'

     (check_operator) 'c.test, c.second, c.third' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.test, c.second, c.third':
     (check_vname) check_vname ret1 ', c.second, c.third':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ', c.second, c.third'

     (check_literal) check_literal:lit='(' idx=12 ', c.second, c.third'
     (check_literal) check_literal:After drop space:'(' idx=12 ', c.second, c.third'
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'c.test, c.second, c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=6 'c.test, c.second, c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'c.test, c.second, c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=6 'c.test, c.second, c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'c.test, c.second, c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.test, c.second, c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.test, c.second, c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.test, c.second, c.third'
    (check_textlabel) 'c.test' is a text label chstr:'t'
    (check_textlabel) Exit char:,
    (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
   (check_proc_call) 'c.test' is text label

    (check_literal) check_literal:lit=':' idx=12 ', c.second, c.third'
    (check_literal) check_literal:After drop space:':' idx=12 ', c.second, c.third'
    (check_literal)   ':' != ','
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.test, c.second, c.third'

    (check_operator) 'c.test, c.second, c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.test, c.second, c.third':
    (check_vname) check_vname ret1 ', c.second, c.third':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ', c.second, c.third'

    (check_literal) check_literal:lit='(' idx=12 ', c.second, c.third'
    (check_literal) check_literal:After drop space:'(' idx=12 ', c.second, c.third'
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=6 'c.test, c.second, c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=6 'c.test, c.second, c.third'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=6 'c.test, c.second, c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=6 'c.test, c.second, c.third'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.test, c.second, c.third'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.test, c.second, c.third'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.test, c.second, c.third'
   (check_textlabel) 'c.test' is a text label chstr:'t'
   (check_textlabel) Exit char:,
   (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
  (check_proc_call) 'c.test' is text label

   (check_literal) check_literal:lit=':' idx=12 ', c.second, c.third'
   (check_literal) check_literal:After drop space:':' idx=12 ', c.second, c.third'
   (check_literal)   ':' != ','
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.test, c.second, c.third'

   (check_operator) 'c.test, c.second, c.third' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.test, c.second, c.third':
   (check_vname) check_vname ret1 ', c.second, c.third':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ', c.second, c.third'

   (check_literal) check_literal:lit='(' idx=12 ', c.second, c.third'
   (check_literal) check_literal:After drop space:'(' idx=12 ', c.second, c.third'
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.test, c.second, c.third' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.test, c.second, c.third'
  (scan_vname) scan_vname: ret1 'c.test'
 (scan_variable) scan_variable: ', c.second, c.third' vname='C.TEST'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.TEST' is not other keyword
 (scan_variable) Array test ', c.second, c.third'

  (check_literal) check_literal:lit='(' idx=12 ', c.second, c.third'
  (check_literal) check_literal:After drop space:'(' idx=12 ', c.second, c.third'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C.TEST' Float
(process_token)    Frst:1 T:'C.TEST' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.TEST'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.TEST is not function
token_is_variable: tok:'C.TEST'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.TEST is not function
(init_get_name) 
init_get_name:'C.TEST'
(init_get_name) 
init_get_name:'C.TEST'
(get_name) 
get_name:gn:'C.TEST'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C.TEST
(add_var_info) Name:C.TEST Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '            C.TEST'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) ', c.second, c.third' Before while igncomma:1

 (check_operator) ', c.second, c.third' igncomma:1
 (check_operator) ret0:is comma: 32767
(scan_expression) ret1 ', c.second, c.third' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=12 ', c.second, c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=12 ', c.second, c.third'
 (check_literal) check_literal:After while(): c.second, c.third
 (check_literal) ret1 Match. ' ,' == ', c.second, c.third'

 (scan_literal_core) scan_literal_core:lit=' ,' ', c.second, c.third'
 (scan_literal_core) scan_literal_core:After drop space:', c.second, c.third'
 (scan_literal_core) scan_literal_core:while loop:, c.second, c.third
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=13 ' c.second, c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=14 'c.second, c.third'
 (check_literal)   ';' != 'c'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :C.TEST   *************
(type_check_stack_push)  type_check_stack_push: 'C.TEST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.TEST' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.TEST' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'C.TEST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:C.TEST    **********
(type_check_stack_push)  type_check_stack_push: 'C.TEST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.TEST' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.TEST' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'C.TEST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (C.TEST)
Var: C.TEST Float NumIdx:0
infix_stack_push: 'C.TEST'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: 'C.TEST'
infix_stack_push: 'PRINT(C.TEST)'
Done

infix_stack_pop: 'PRINT(C.TEST)'
Infix stack result PRINT(C.TEST)
(infix_from_rpn) exit  'PRINT(C.TEST)'
(process_expression_types) ==RINT(C.TEST)==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:016D
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(set_qcode_header_byte_at) idx:016D len:1 val:24
(set_qcode_header_byte_at) idx:016E len:1 val:04
(set_qcode_header_byte_at) idx:016F len:1 val:54
(set_qcode_header_byte_at) idx:0170 len:1 val:45
(set_qcode_header_byte_at) idx:0171 len:1 val:53
(set_qcode_header_byte_at) idx:0172 len:1 val:54
(set_qcode_header_byte_at) idx:0173 len:1 val:1B
(set_qcode_header_byte_at) idx:0174 len:1 val:02
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0175 len:1 val:70
(finalise_expression) Finalise expression done.
 c.second, c.third
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:0176
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0176 len:1 val:72
(finalise_expression) Finalise expression done.
 c.second, c.third
========================================================
(output_expression_start)

 (check_expression) ' c.second, c.third'

  (check_eitem) check_eitem: 'c.second, c.third'

   (check_function)  'c.second, c.third'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'c.second, c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'c.second, c.third'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'c.second, c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'c.second, c.third'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.second, c.third'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.second, c.third'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.second, c.third'
     (check_textlabel) 'c.second' is a text label chstr:'d'
     (check_textlabel) Exit char:,
     (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
    (check_proc_call) 'c.second' is text label

     (check_literal) check_literal:lit=':' idx=22 ', c.third'
     (check_literal) check_literal:After drop space:':' idx=22 ', c.third'
     (check_literal)   ':' != ','
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.second, c.third'

     (check_operator) 'c.second, c.third' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.second, c.third':
     (check_vname) check_vname ret1 ', c.third':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ', c.third'

     (check_literal) check_literal:lit='(' idx=22 ', c.third'
     (check_literal) check_literal:After drop space:'(' idx=22 ', c.third'
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) ', c.third' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 ', c.third' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' c.second, c.third' igncomma:1

  (check_eitem) check_eitem: 'c.second, c.third'

   (check_function)  'c.second, c.third'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'c.second, c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'c.second, c.third'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'c.second, c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'c.second, c.third'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.second, c.third'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.second, c.third'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.second, c.third'
     (check_textlabel) 'c.second' is a text label chstr:'d'
     (check_textlabel) Exit char:,
     (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
    (check_proc_call) 'c.second' is text label

     (check_literal) check_literal:lit=':' idx=22 ', c.third'
     (check_literal) check_literal:After drop space:':' idx=22 ', c.third'
     (check_literal)   ':' != ','
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.second, c.third'

     (check_operator) 'c.second, c.third' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.second, c.third':
     (check_vname) check_vname ret1 ', c.third':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ', c.third'

     (check_literal) check_literal:lit='(' idx=22 ', c.third'
     (check_literal) check_literal:After drop space:'(' idx=22 ', c.third'
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'c.second, c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=14 'c.second, c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=14 'c.second, c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=14 'c.second, c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=14 'c.second, c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.second, c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.second, c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.second, c.third'
    (check_textlabel) 'c.second' is a text label chstr:'d'
    (check_textlabel) Exit char:,
    (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
   (check_proc_call) 'c.second' is text label

    (check_literal) check_literal:lit=':' idx=22 ', c.third'
    (check_literal) check_literal:After drop space:':' idx=22 ', c.third'
    (check_literal)   ':' != ','
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.second, c.third'

    (check_operator) 'c.second, c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.second, c.third':
    (check_vname) check_vname ret1 ', c.third':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ', c.third'

    (check_literal) check_literal:lit='(' idx=22 ', c.third'
    (check_literal) check_literal:After drop space:'(' idx=22 ', c.third'
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=14 'c.second, c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=14 'c.second, c.third'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=14 'c.second, c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=14 'c.second, c.third'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.second, c.third'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.second, c.third'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.second, c.third'
   (check_textlabel) 'c.second' is a text label chstr:'d'
   (check_textlabel) Exit char:,
   (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
  (check_proc_call) 'c.second' is text label

   (check_literal) check_literal:lit=':' idx=22 ', c.third'
   (check_literal) check_literal:After drop space:':' idx=22 ', c.third'
   (check_literal)   ':' != ','
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.second, c.third'

   (check_operator) 'c.second, c.third' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.second, c.third':
   (check_vname) check_vname ret1 ', c.third':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ', c.third'

   (check_literal) check_literal:lit='(' idx=22 ', c.third'
   (check_literal) check_literal:After drop space:'(' idx=22 ', c.third'
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.second, c.third' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.second, c.third'
  (scan_vname) scan_vname: ret1 'c.second'
 (scan_variable) scan_variable: ', c.third' vname='C.SECOND'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.SECOND' is not other keyword
 (scan_variable) Array test ', c.third'

  (check_literal) check_literal:lit='(' idx=22 ', c.third'
  (check_literal) check_literal:After drop space:'(' idx=22 ', c.third'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C.SECOND' Float
(process_token)    Frst:1 T:'C.SECOND' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.SECOND'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.SECOND is not function
token_is_variable: tok:'C.SECOND'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.SECOND is not function
(init_get_name) 
init_get_name:'C.SECOND'
(init_get_name) 
init_get_name:'C.SECOND'
(get_name) 
get_name:gn:'C.SECOND'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C.SECOND
(add_var_info) Name:C.SECOND Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '          C.SECOND'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) ', c.third' Before while igncomma:1

 (check_operator) ', c.third' igncomma:1
 (check_operator) ret0:is comma: 32767
(scan_expression) ret1 ', c.third' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=22 ', c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=22 ', c.third'
 (check_literal) check_literal:After while(): c.third
 (check_literal) ret1 Match. ' ,' == ', c.third'

 (scan_literal_core) scan_literal_core:lit=' ,' ', c.third'
 (scan_literal_core) scan_literal_core:After drop space:', c.third'
 (scan_literal_core) scan_literal_core:while loop:, c.third
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:i exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=23 ' c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=24 'c.third'
 (check_literal)   ';' != 'c'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :C.SECOND   *************
(type_check_stack_push)  type_check_stack_push: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.SECOND' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:C.SECOND    **********
(type_check_stack_push)  type_check_stack_push: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.SECOND' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (C.SECOND)
Var: C.SECOND Float NumIdx:0
infix_stack_push: 'C.SECOND'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: 'C.SECOND'
infix_stack_push: 'PRINT(C.SECOND)'
Done

infix_stack_pop: 'PRINT(C.SECOND)'
Infix stack result PRINT(C.SECOND)
(infix_from_rpn) exit  'PRINT(C.SECOND)'
(process_expression_types) ==RINT(C.SECOND)==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:0177
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(set_qcode_header_byte_at) idx:0177 len:1 val:24
(set_qcode_header_byte_at) idx:0178 len:1 val:06
(set_qcode_header_byte_at) idx:0179 len:1 val:53
(set_qcode_header_byte_at) idx:017A len:1 val:45
(set_qcode_header_byte_at) idx:017B len:1 val:43
(set_qcode_header_byte_at) idx:017C len:1 val:4F
(set_qcode_header_byte_at) idx:017D len:1 val:4E
(set_qcode_header_byte_at) idx:017E len:1 val:44
(set_qcode_header_byte_at) idx:017F len:1 val:1B
(set_qcode_header_byte_at) idx:0180 len:1 val:02
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0181 len:1 val:70
(finalise_expression) Finalise expression done.
 c.third
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:0182
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0182 len:1 val:72
(finalise_expression) Finalise expression done.
 c.third
========================================================
(output_expression_start)

 (check_expression) ' c.third'

  (check_eitem) check_eitem: 'c.third'

   (check_function)  'c.third'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=24 'c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=24 'c.third'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=24 'c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=24 'c.third'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.third'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.third'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.third'
     (check_textlabel) 'c.third' is a text label chstr:'d'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
    (check_proc_call) 'c.third' is text label

     (check_literal) check_literal:lit=':' idx=31 ''
     (check_literal) check_literal:After drop space:':' idx=31 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.third'

     (check_operator) 'c.third' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.third':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=31 ''
     (check_literal) check_literal:After drop space:'(' idx=31 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' c.third' igncomma:1

  (check_eitem) check_eitem: 'c.third'

   (check_function)  'c.third'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=24 'c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=24 'c.third'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=24 'c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=24 'c.third'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.third'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.third'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.third'
     (check_textlabel) 'c.third' is a text label chstr:'d'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
    (check_proc_call) 'c.third' is text label

     (check_literal) check_literal:lit=':' idx=31 ''
     (check_literal) check_literal:After drop space:':' idx=31 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.third'

     (check_operator) 'c.third' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.third':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=31 ''
     (check_literal) check_literal:After drop space:'(' idx=31 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=24 'c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=24 'c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=24 'c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=24 'c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.third'
    (check_textlabel) 'c.third' is a text label chstr:'d'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
   (check_proc_call) 'c.third' is text label

    (check_literal) check_literal:lit=':' idx=31 ''
    (check_literal) check_literal:After drop space:':' idx=31 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.third'

    (check_operator) 'c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.third':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=31 ''
    (check_literal) check_literal:After drop space:'(' idx=31 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=24 'c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=24 'c.third'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=24 'c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=24 'c.third'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.third'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.third'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.third'
   (check_textlabel) 'c.third' is a text label chstr:'d'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
  (check_proc_call) 'c.third' is text label

   (check_literal) check_literal:lit=':' idx=31 ''
   (check_literal) check_literal:After drop space:':' idx=31 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.third'

   (check_operator) 'c.third' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.third':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=31 ''
   (check_literal) check_literal:After drop space:'(' idx=31 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.third' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.third'
  (scan_vname) scan_vname: ret1 'c.third'
 (scan_variable) scan_variable: '' vname='C.THIRD'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.THIRD' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=31 ''
  (check_literal) check_literal:After drop space:'(' idx=31 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C.THIRD' Float
(process_token)    Frst:1 T:'C.THIRD' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.THIRD'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.THIRD is not function
token_is_variable: tok:'C.THIRD'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.THIRD is not function
(init_get_name) 
init_get_name:'C.THIRD'
(init_get_name) 
init_get_name:'C.THIRD'
(get_name) 
get_name:gn:'C.THIRD'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C.THIRD
(add_var_info) Name:C.THIRD Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '           C.THIRD'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '' Before while igncomma:1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 32767
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=31 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=31 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=31 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=31 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:2 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :C.THIRD   *************
(type_check_stack_push)  type_check_stack_push: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.THIRD' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.THIRD' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:C.THIRD    **********
(type_check_stack_push)  type_check_stack_push: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.THIRD' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.THIRD' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (C.THIRD)
Var: C.THIRD Float NumIdx:0
infix_stack_push: 'C.THIRD'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: 'C.THIRD'
infix_stack_push: 'PRINT(C.THIRD)'
Done

infix_stack_pop: 'PRINT(C.THIRD)'
Infix stack result PRINT(C.THIRD)
(infix_from_rpn) exit  'PRINT(C.THIRD)'
(process_expression_types) ==RINT(C.THIRD)==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:0183
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(set_qcode_header_byte_at) idx:0183 len:1 val:24
(set_qcode_header_byte_at) idx:0184 len:1 val:05
(set_qcode_header_byte_at) idx:0185 len:1 val:54
(set_qcode_header_byte_at) idx:0186 len:1 val:48
(set_qcode_header_byte_at) idx:0187 len:1 val:49
(set_qcode_header_byte_at) idx:0188 len:1 val:52
(set_qcode_header_byte_at) idx:0189 len:1 val:44
(set_qcode_header_byte_at) idx:018A len:1 val:1B
(set_qcode_header_byte_at) idx:018B len:1 val:02
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:018C len:1 val:70
(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:018D
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:018D len:1 val:73
(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=31 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=31 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=31 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=31 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=31 ''
     (check_literal) check_literal:After drop space:':' idx=31 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=31 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=31 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=31 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=31 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=31 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=31 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=31 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=31 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:018E
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print c.test, c.second, c.third
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=31 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=31 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=31 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 't' (116)
 (is_all_spaces) cline[1] = 'o' (111)
 (is_all_spaces) cline[2] = 't' (116)
 (is_all_spaces) cline[3] = 'a' (97)
 (is_all_spaces) cline[4] = 'l' (108)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '=' (61)
 (is_all_spaces) cline[7] = ' ' (32)
 (is_all_spaces) cline[8] = 'c' (99)
 (is_all_spaces) cline[9] = '.' (46)
 (is_all_spaces) cline[10] = 't' (116)
 (is_all_spaces) cline[11] = 'e' (101)
 (is_all_spaces) cline[12] = 's' (115)
 (is_all_spaces) cline[13] = 't' (116)
 (is_all_spaces) cline[14] = '+' (43)
 (is_all_spaces) cline[15] = 'c' (99)
 (is_all_spaces) cline[16] = '.' (46)
 (is_all_spaces) cline[17] = 's' (115)
 (is_all_spaces) cline[18] = 'e' (101)
 (is_all_spaces) cline[19] = 'c' (99)
 (is_all_spaces) cline[20] = 'o' (111)
 (is_all_spaces) cline[21] = 'n' (110)
 (is_all_spaces) cline[22] = 'd' (100)
 (is_all_spaces) cline[23] = '+' (43)
 (is_all_spaces) cline[24] = 'c' (99)
 (is_all_spaces) cline[25] = '.' (46)
 (is_all_spaces) cline[26] = 't' (116)
 (is_all_spaces) cline[27] = 'h' (104)
 (is_all_spaces) cline[28] = 'i' (105)
 (is_all_spaces) cline[29] = 'r' (114)
 (is_all_spaces) cline[30] = 'd' (100)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'total = c.test+c.second+c.third'
***********************************
**total = c.test+c.second+c.third**
***********************************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'total = c.test+c.second+c.third'
 (check_literal) check_literal:After drop space:'REM' idx=0 'total = c.test+c.second+c.third'
 (check_literal)   'R' != 't'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'total = c.test+c.second+c.third'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'total = c.test+c.second+c.third'
 (check_literal)   'R' != 't'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'total = c.test+c.second+c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'total = c.test+c.second+c.third'
 (check_literal)   'R' != 't'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'total = c.test+c.second+c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'total = c.test+c.second+c.third'
 (check_literal)   'R' != 't'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'total = c.test+c.second+c.third'

   (check_operator) 'total = c.test+c.second+c.third' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'total = c.test+c.second+c.third':
   (check_vname) check_vname ret1 ' = c.test+c.second+c.third':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' = c.test+c.second+c.third'

   (check_literal) check_literal:lit='(' idx=5 ' = c.test+c.second+c.third'
   (check_literal) check_literal:After drop space:'(' idx=5 ' = c.test+c.second+c.third'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' = c.test+c.second+c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '= c.test+c.second+c.third'
 (check_literal) check_literal:After while(): c.test+c.second+c.third
 (check_literal) ret1 Match. ' =' == ' = c.test+c.second+c.third'

 (check_expression) ' c.test+c.second+c.third'

  (check_eitem) check_eitem: 'c.test+c.second+c.third'

   (check_function)  'c.test+c.second+c.third'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=8 'c.test+c.second+c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'c.test+c.second+c.third'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=8 'c.test+c.second+c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'c.test+c.second+c.third'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.test+c.second+c.third'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.test+c.second+c.third'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.test+c.second+c.third'
     (check_textlabel) 'c.test' is a text label chstr:'t'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
    (check_proc_call) 'c.test' is text label

     (check_literal) check_literal:lit=':' idx=14 '+c.second+c.third'
     (check_literal) check_literal:After drop space:':' idx=14 '+c.second+c.third'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.test+c.second+c.third'

     (check_operator) 'c.test+c.second+c.third' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.test+c.second+c.third':
     (check_vname) check_vname ret1 '+c.second+c.third':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c.second+c.third'

     (check_literal) check_literal:lit='(' idx=14 '+c.second+c.third'
     (check_literal) check_literal:After drop space:'(' idx=14 '+c.second+c.third'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+c.second+c.third' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) 'c.second+c.third' igncomma:0
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c.second+c.third'

  (check_function)  'c.second+c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=15 'c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=15 'c.second+c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=15 'c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=15 'c.second+c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.second+c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.second+c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.second+c.third'
    (check_textlabel) 'c.second' is a text label chstr:'d'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
   (check_proc_call) 'c.second' is text label

    (check_literal) check_literal:lit=':' idx=23 '+c.third'
    (check_literal) check_literal:After drop space:':' idx=23 '+c.third'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.second+c.third'

    (check_operator) 'c.second+c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.second+c.third':
    (check_vname) check_vname ret1 '+c.third':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c.third'

    (check_literal) check_literal:lit='(' idx=23 '+c.third'
    (check_literal) check_literal:After drop space:'(' idx=23 '+c.third'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=23 '+c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=23 '+c.third'
 (check_literal)   '%' != '+'
 (check_literal) check_literal: ret0

 (check_operator) '+c.third' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) 'c.third' igncomma:0
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c.third'

  (check_function)  'c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=24 'c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=24 'c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=24 'c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=24 'c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.third'
    (check_textlabel) 'c.third' is a text label chstr:'d'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
   (check_proc_call) 'c.third' is text label

    (check_literal) check_literal:lit=':' idx=31 ''
    (check_literal) check_literal:After drop space:':' idx=31 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.third'

    (check_operator) 'c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.third':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=31 ''
    (check_literal) check_literal:After drop space:'(' idx=31 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=31 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=31 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'total = c.test+c.second+c.third' ref_ndeclare:1

   (scan_vname) scan_vname: 'total = c.test+c.second+c.third'
   (scan_vname) scan_vname: ret1 'total'
  (scan_variable) scan_variable: ' = c.test+c.second+c.third' vname='TOTAL'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'TOTAL' is not other keyword
  (scan_variable) Array test ' = c.test+c.second+c.third'

   (check_literal) check_literal:lit='(' idx=5 ' = c.test+c.second+c.third'
   (check_literal) check_literal:After drop space:'(' idx=5 ' = c.test+c.second+c.third'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='TOTAL' Float
 (process_token)    Frst:1 T:'TOTAL' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'TOTAL'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:TOTAL is not function
token_is_variable: tok:'TOTAL'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:TOTAL is not function
(init_get_name) 
init_get_name:'TOTAL'
(init_get_name) 
init_get_name:'TOTAL'
(get_name) 
get_name:gn:'TOTAL'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f TOTAL
(add_var_info) Name:TOTAL Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '             TOTAL'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

 (scan_assignment_equals) scan_assignment_equals:lit=' =' ' = c.test+c.second+c.third'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'= c.test+c.second+c.third'
 (scan_assignment_equals) scan_assignment_equals:while loop:= c.test+c.second+c.third
 (process_token)    Frst:0 T:':=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) ' c.test+c.second+c.third' igncomma:0

  (check_eitem) check_eitem: 'c.test+c.second+c.third'

   (check_function)  'c.test+c.second+c.third'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=8 'c.test+c.second+c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'c.test+c.second+c.third'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=8 'c.test+c.second+c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'c.test+c.second+c.third'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.test+c.second+c.third'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.test+c.second+c.third'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.test+c.second+c.third'
     (check_textlabel) 'c.test' is a text label chstr:'t'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
    (check_proc_call) 'c.test' is text label

     (check_literal) check_literal:lit=':' idx=14 '+c.second+c.third'
     (check_literal) check_literal:After drop space:':' idx=14 '+c.second+c.third'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.test+c.second+c.third'

     (check_operator) 'c.test+c.second+c.third' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.test+c.second+c.third':
     (check_vname) check_vname ret1 '+c.second+c.third':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c.second+c.third'

     (check_literal) check_literal:lit='(' idx=14 '+c.second+c.third'
     (check_literal) check_literal:After drop space:'(' idx=14 '+c.second+c.third'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'c.test+c.second+c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=8 'c.test+c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'c.test+c.second+c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=8 'c.test+c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'c.test+c.second+c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.test+c.second+c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.test+c.second+c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.test+c.second+c.third'
    (check_textlabel) 'c.test' is a text label chstr:'t'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
   (check_proc_call) 'c.test' is text label

    (check_literal) check_literal:lit=':' idx=14 '+c.second+c.third'
    (check_literal) check_literal:After drop space:':' idx=14 '+c.second+c.third'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.test+c.second+c.third'

    (check_operator) 'c.test+c.second+c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.test+c.second+c.third':
    (check_vname) check_vname ret1 '+c.second+c.third':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c.second+c.third'

    (check_literal) check_literal:lit='(' idx=14 '+c.second+c.third'
    (check_literal) check_literal:After drop space:'(' idx=14 '+c.second+c.third'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=8 'c.test+c.second+c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=8 'c.test+c.second+c.third'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=8 'c.test+c.second+c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=8 'c.test+c.second+c.third'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.test+c.second+c.third'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.test+c.second+c.third'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.test+c.second+c.third'
   (check_textlabel) 'c.test' is a text label chstr:'t'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
  (check_proc_call) 'c.test' is text label

   (check_literal) check_literal:lit=':' idx=14 '+c.second+c.third'
   (check_literal) check_literal:After drop space:':' idx=14 '+c.second+c.third'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.test+c.second+c.third'

   (check_operator) 'c.test+c.second+c.third' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.test+c.second+c.third':
   (check_vname) check_vname ret1 '+c.second+c.third':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c.second+c.third'

   (check_literal) check_literal:lit='(' idx=14 '+c.second+c.third'
   (check_literal) check_literal:After drop space:'(' idx=14 '+c.second+c.third'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.test+c.second+c.third' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.test+c.second+c.third'
  (scan_vname) scan_vname: ret1 'c.test'
 (scan_variable) scan_variable: '+c.second+c.third' vname='C.TEST'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.TEST' is not other keyword
 (scan_variable) Array test '+c.second+c.third'

  (check_literal) check_literal:lit='(' idx=14 '+c.second+c.third'
  (check_literal) check_literal:After drop space:'(' idx=14 '+c.second+c.third'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C.TEST' Float
(process_token)    Frst:0 T:'C.TEST' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.TEST'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.TEST is not function
token_is_variable: tok:'C.TEST'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.TEST is not function
(init_get_name) 
init_get_name:'C.TEST'
(init_get_name) 
init_get_name:'C.TEST'
(get_name) 
get_name:gn:'C.TEST'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C.TEST
(add_var_info) Name:C.TEST Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '            C.TEST'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+c.second+c.third' Before while igncomma:0

 (check_operator) '+c.second+c.third' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '+c.second+c.third' igncomma:0
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c.second+c.third'

  (check_literal) check_literal:lit=' ,' idx=14 '+c.second+c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=14 '+c.second+c.third'
  (check_literal)   ',' != '+'
  (check_literal) check_literal: ret0
 (scan_operator) scan_operator: ret1 'c.second+c.third' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name::=
(process_token) 
opr1:3 opr2:1
(operator_precedence) 
:= is operator
(operator_precedence) 
:= is operator
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (2)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) 001: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c.second+c.third' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) 'c.second+c.third' Before scan_eitem igncomma:0

 (scan_eitem) scan_eitem:

  (check_function)  'c.second+c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=15 'c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=15 'c.second+c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=15 'c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=15 'c.second+c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.second+c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.second+c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.second+c.third'
    (check_textlabel) 'c.second' is a text label chstr:'d'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
   (check_proc_call) 'c.second' is text label

    (check_literal) check_literal:lit=':' idx=23 '+c.third'
    (check_literal) check_literal:After drop space:':' idx=23 '+c.third'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.second+c.third'

    (check_operator) 'c.second+c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.second+c.third':
    (check_vname) check_vname ret1 '+c.third':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c.third'

    (check_literal) check_literal:lit='(' idx=23 '+c.third'
    (check_literal) check_literal:After drop space:'(' idx=23 '+c.third'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=15 'c.second+c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=15 'c.second+c.third'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=15 'c.second+c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=15 'c.second+c.third'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.second+c.third'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.second+c.third'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.second+c.third'
   (check_textlabel) 'c.second' is a text label chstr:'d'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
  (check_proc_call) 'c.second' is text label

   (check_literal) check_literal:lit=':' idx=23 '+c.third'
   (check_literal) check_literal:After drop space:':' idx=23 '+c.third'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.second+c.third'

   (check_operator) 'c.second+c.third' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.second+c.third':
   (check_vname) check_vname ret1 '+c.third':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c.third'

   (check_literal) check_literal:lit='(' idx=23 '+c.third'
   (check_literal) check_literal:After drop space:'(' idx=23 '+c.third'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.second+c.third' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.second+c.third'
  (scan_vname) scan_vname: ret1 'c.second'
 (scan_variable) scan_variable: '+c.third' vname='C.SECOND'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.SECOND' is not other keyword
 (scan_variable) Array test '+c.third'

  (check_literal) check_literal:lit='(' idx=23 '+c.third'
  (check_literal) check_literal:After drop space:'(' idx=23 '+c.third'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C.SECOND' Float
(process_token)    Frst:0 T:'C.SECOND' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.SECOND'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.SECOND is not function
token_is_variable: tok:'C.SECOND'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.SECOND is not function
(init_get_name) 
init_get_name:'C.SECOND'
(init_get_name) 
init_get_name:'C.SECOND'
(get_name) 
get_name:gn:'C.SECOND'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C.SECOND
(add_var_info) Name:C.SECOND Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '          C.SECOND'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=23 '+c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=23 '+c.third'
 (check_literal)   '%' != '+'
 (check_literal) check_literal: ret0

 (check_operator) '+c.third' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '+c.second+c.third' igncomma:0
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c.third'

  (check_literal) check_literal:lit=' ,' idx=23 '+c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=23 '+c.third'
  (check_literal)   ',' != '+'
  (check_literal) check_literal: ret0
 (scan_operator) scan_operator: ret1 'c.third' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:+
(process_token) 
opr1:3 opr2:3
(operator_precedence) 
+ is operator
(operator_precedence) 
+ is operator
(operator_left_assoc) 
+ is operator
Pop 1
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------

(operator_precedence) 
+ is operator
(operator_precedence) 
+ is operator
(output_operator) [f,()] f +
(operator_precedence) 
:= is operator
(operator_precedence) 
:= is operator
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (2)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) 001: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c.third' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) 'c.third' Before scan_eitem igncomma:0

 (scan_eitem) scan_eitem:

  (check_function)  'c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=24 'c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=24 'c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=24 'c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=24 'c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.third'
    (check_textlabel) 'c.third' is a text label chstr:'d'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
   (check_proc_call) 'c.third' is text label

    (check_literal) check_literal:lit=':' idx=31 ''
    (check_literal) check_literal:After drop space:':' idx=31 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.third'

    (check_operator) 'c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.third':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=31 ''
    (check_literal) check_literal:After drop space:'(' idx=31 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=24 'c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=24 'c.third'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=24 'c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=24 'c.third'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.third'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.third'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.third'
   (check_textlabel) 'c.third' is a text label chstr:'d'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
  (check_proc_call) 'c.third' is text label

   (check_literal) check_literal:lit=':' idx=31 ''
   (check_literal) check_literal:After drop space:':' idx=31 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.third'

   (check_operator) 'c.third' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.third':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=31 ''
   (check_literal) check_literal:After drop space:'(' idx=31 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.third' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.third'
  (scan_vname) scan_vname: ret1 'c.third'
 (scan_variable) scan_variable: '' vname='C.THIRD'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.THIRD' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=31 ''
  (check_literal) check_literal:After drop space:'(' idx=31 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C.THIRD' Float
(process_token)    Frst:0 T:'C.THIRD' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.THIRD'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.THIRD is not function
token_is_variable: tok:'C.THIRD'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.THIRD is not function
(init_get_name) 
init_get_name:'C.THIRD'
(init_get_name) 
init_get_name:'C.THIRD'
(get_name) 
get_name:gn:'C.THIRD'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C.THIRD
(add_var_info) Name:C.THIRD Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '           C.THIRD'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=31 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=31 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(add_var_info) Name:TOTAL Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_assignment) scan_assignment: ret1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=31 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=31 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:5 buf2 i:0
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop '+' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (op_stack_finalise) Popped:+ f
 (output_operator) [f,()] f +
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  2: 4 1  nb 0:()
N006       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 5 4  nb 0:()
N007       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing :TOTAL   *************
 (type_check_stack_push)  type_check_stack_push: 'TOTAL'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (process_syntax_tree) *********Processing :C.TEST   *************
 (type_check_stack_push)  type_check_stack_push: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N002: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_display) 001: 'C.TEST' type:f (1), %:0
 (process_syntax_tree) *********Processing :C.SECOND   *************
 (type_check_stack_push)  type_check_stack_push: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N002: 'C.TEST' type:1 %:0
 (type_check_stack_print)  N003: 'C.SECOND' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_display) 001: 'C.TEST' type:f (1), %:0
 (type_check_stack_display) 002: 'C.SECOND' type:f (1), %:0
 (process_syntax_tree) *********Processing :+   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator + %conv:1
 (type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N002: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:1
 (process_syntax_tree) Percent convertible operator op1 (N003) percent:0
 (process_syntax_tree) Mutable type (C.SECOND) f f
 (process_syntax_tree) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (process_syntax_tree) *********Processing :C.THIRD   *************
 (type_check_stack_push)  type_check_stack_push: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print)  N005: 'C.THIRD' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (type_check_stack_display) 002: 'C.THIRD' type:f (1), %:0
 (process_syntax_tree) *********Processing :+   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator + %conv:1
 (type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:1
 (process_syntax_tree) Percent convertible operator op1 (N005) percent:0
 (process_syntax_tree) Mutable type (C.THIRD) f f
 (process_syntax_tree) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N006: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'TOTAL'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (000) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE:TOTAL    **********
 (type_check_stack_push)  type_check_stack_push: 'TOTAL'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (typecheck_expression)  *** BE:C.TEST    **********
 (type_check_stack_push)  type_check_stack_push: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N002: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_display) 001: 'C.TEST' type:f (1), %:0
 (typecheck_expression)  *** BE:C.SECOND    **********
 (type_check_stack_push)  type_check_stack_push: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N002: 'C.TEST' type:1 %:0
 (type_check_stack_print)  N003: 'C.SECOND' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_display) 001: 'C.TEST' type:f (1), %:0
 (type_check_stack_display) 002: 'C.SECOND' type:f (1), %:0
 (typecheck_expression)  *** BE:+    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator +
 (type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N002: 'C.TEST' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'C.TEST'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (+) f f
 (typecheck_expression) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (typecheck_expression)  *** BE:C.THIRD    **********
 (type_check_stack_push)  type_check_stack_push: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print)  N005: 'C.THIRD' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (type_check_stack_display) 002: 'C.THIRD' type:f (1), %:0
 (typecheck_expression)  *** BE:+    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator +
 (type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (+) f f
 (typecheck_expression) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print)  N006: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'TOTAL'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N006       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 5 4  nb 0:()
N007       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 6 1  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N006       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 5 4  nb 0:()
N007       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 6 1  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (TOTAL)
Var: TOTAL Float NumIdx:0
infix_stack_push: 'TOTAL'
 (infix_from_rpn) (C.TEST)
Var: C.TEST Float NumIdx:0
infix_stack_push: 'C.TEST'
 (infix_from_rpn) (C.SECOND)
Var: C.SECOND Float NumIdx:0
infix_stack_push: 'C.SECOND'
 (infix_from_rpn) (+)
infix_stack_pop: 'C.SECOND'
infix_stack_pop: 'C.TEST'
infix_stack_push: '(C.TEST + C.SECOND)'
 (infix_from_rpn) (C.THIRD)
Var: C.THIRD Float NumIdx:0
infix_stack_push: 'C.THIRD'
 (infix_from_rpn) (+)
infix_stack_pop: 'C.THIRD'
infix_stack_pop: '(C.TEST + C.SECOND)'
infix_stack_push: '((C.TEST + C.SECOND) + C.THIRD)'
 (infix_from_rpn) (:=)
infix_stack_pop: '((C.TEST + C.SECOND) + C.THIRD)'
infix_stack_pop: 'TOTAL'
infix_stack_push: '(TOTAL := ((C.TEST + C.SECOND) + C.THIRD))'
Done

infix_stack_pop: '(TOTAL := ((C.TEST + C.SECOND) + C.THIRD))'
Infix stack result (TOTAL := ((C.TEST + C.SECOND) + C.THIRD))
 (infix_from_rpn) exit  'TOTAL := ((C.TEST + C.SECOND) + C.THIRD)'
 (process_expression_types) ==TOTAL := ((C.TEST + C.SECOND) + C.THIRD)==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:7 qcode_idx:018E
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (add_simple_qcode) 'TOTAL'
 (add_simple_qcode) Op type:f op access:Write qcode_type:U
 (qcode_check_trapped) TOTAL: Trapped:0
 (set_qcode_header_byte_at) idx:018E len:1 val:0E
 (set_qcode_header_byte_at) idx:018F len:1 val:FF
 (set_qcode_header_byte_at) idx:0190 len:1 val:F6
 (output_qcode_for_line) QC: i:1
 (set_qcode_header_byte_at) idx:0191 len:1 val:24
 (set_qcode_header_byte_at) idx:0192 len:1 val:04
 (set_qcode_header_byte_at) idx:0193 len:1 val:54
 (set_qcode_header_byte_at) idx:0194 len:1 val:45
 (set_qcode_header_byte_at) idx:0195 len:1 val:53
 (set_qcode_header_byte_at) idx:0196 len:1 val:54
 (set_qcode_header_byte_at) idx:0197 len:1 val:1B
 (set_qcode_header_byte_at) idx:0198 len:1 val:02
 (output_qcode_for_line) QC: i:2
 (set_qcode_header_byte_at) idx:0199 len:1 val:24
 (set_qcode_header_byte_at) idx:019A len:1 val:06
 (set_qcode_header_byte_at) idx:019B len:1 val:53
 (set_qcode_header_byte_at) idx:019C len:1 val:45
 (set_qcode_header_byte_at) idx:019D len:1 val:43
 (set_qcode_header_byte_at) idx:019E len:1 val:4F
 (set_qcode_header_byte_at) idx:019F len:1 val:4E
 (set_qcode_header_byte_at) idx:01A0 len:1 val:44
 (set_qcode_header_byte_at) idx:01A1 len:1 val:1B
 (set_qcode_header_byte_at) idx:01A2 len:1 val:02
 (output_qcode_for_line) QC: i:3
 (add_simple_qcode) '+'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) +: Trapped:0
 (set_qcode_header_byte_at) idx:01A3 len:1 val:3C
 (output_qcode_for_line) QC: i:4
 (set_qcode_header_byte_at) idx:01A4 len:1 val:24
 (set_qcode_header_byte_at) idx:01A5 len:1 val:05
 (set_qcode_header_byte_at) idx:01A6 len:1 val:54
 (set_qcode_header_byte_at) idx:01A7 len:1 val:48
 (set_qcode_header_byte_at) idx:01A8 len:1 val:49
 (set_qcode_header_byte_at) idx:01A9 len:1 val:52
 (set_qcode_header_byte_at) idx:01AA len:1 val:44
 (set_qcode_header_byte_at) idx:01AB len:1 val:1B
 (set_qcode_header_byte_at) idx:01AC len:1 val:02
 (output_qcode_for_line) QC: i:5
 (add_simple_qcode) '+'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) +: Trapped:0
 (set_qcode_header_byte_at) idx:01AD len:1 val:3C
 (output_qcode_for_line) QC: i:6
 (add_simple_qcode) ':='
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) :=: Trapped:0
 (set_qcode_header_byte_at) idx:01AE len:1 val:80
 (finalise_expression) Finalise expression done.
total = c.test+c.second+c.third
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=31 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=31 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=31 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 't' (116)
 (is_all_spaces) cline[8] = 'e' (101)
 (is_all_spaces) cline[9] = 's' (115)
 (is_all_spaces) cline[10] = 't' (116)
 (is_all_spaces) cline[11] = '+' (43)
 (is_all_spaces) cline[12] = 's' (115)
 (is_all_spaces) cline[13] = 'e' (101)
 (is_all_spaces) cline[14] = 'c' (99)
 (is_all_spaces) cline[15] = 'o' (111)
 (is_all_spaces) cline[16] = 'n' (110)
 (is_all_spaces) cline[17] = 'd' (100)
 (is_all_spaces) cline[18] = '=' (61)
 (is_all_spaces) cline[19] = '"' (34)
 (is_all_spaces) cline[20] = ',' (44)
 (is_all_spaces) cline[21] = ' ' (32)
 (is_all_spaces) cline[22] = 'c' (99)
 (is_all_spaces) cline[23] = '.' (46)
 (is_all_spaces) cline[24] = 't' (116)
 (is_all_spaces) cline[25] = 'e' (101)
 (is_all_spaces) cline[26] = 's' (115)
 (is_all_spaces) cline[27] = 't' (116)
 (is_all_spaces) cline[28] = '+' (43)
 (is_all_spaces) cline[29] = 'c' (99)
 (is_all_spaces) cline[30] = '.' (46)
 (is_all_spaces) cline[31] = 's' (115)
 (is_all_spaces) cline[32] = 'e' (101)
 (is_all_spaces) cline[33] = 'c' (99)
 (is_all_spaces) cline[34] = 'o' (111)
 (is_all_spaces) cline[35] = 'n' (110)
 (is_all_spaces) cline[36] = 'd' (100)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "test+second=", c.test+c.second'
*****************************************
**print "test+second=", c.test+c.second**
*****************************************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "test+second=", c.test+c.second'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "test+second=", c.test+c.second'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "test+second=", c.test+c.second'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "test+second=", c.test+c.second'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "test+second=", c.test+c.second'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "test+second=", c.test+c.second'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "test+second=", c.test+c.second'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "test+second=", c.test+c.second'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "test+second=", c.test+c.second'

   (check_operator) 'print "test+second=", c.test+c.second' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "test+second=", c.test+c.second':
   (check_vname) check_vname ret1 ' "test+second=", c.test+c.second':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "test+second=", c.test+c.second'

   (check_literal) check_literal:lit='(' idx=5 ' "test+second=", c.test+c.second'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "test+second=", c.test+c.second'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "test+second=", c.test+c.second'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"test+second=", c.test+c.second'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "test+second=", c.test+c.second'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "test+second=", c.test+c.second'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "test+second=", c.test+c.second'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "test+second=", c.test+c.second'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "test+second=", c.test+c.second'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "test+second=", c.test+c.second'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "test+second=", c.test+c.second'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "test+second=", c.test+c.second'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "test+second=", c.test+c.second'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "test+second=", c.test+c.second'
   (check_literal) check_literal:After drop space:':' idx=5 ' "test+second=", c.test+c.second'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "test+second=", c.test+c.second'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "test+second=", c.test+c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "test+second=", c.test+c.second'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "test+second=", c.test+c.second'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "test+second=", c.test+c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "test+second=", c.test+c.second'
   (check_literal) check_literal:After while(): "test+second=", c.test+c.second
   (check_literal) ret1 Match. ' PRINT' == 'print "test+second=", c.test+c.second'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "test+second=", c.test+c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "test+second=", c.test+c.second'
   (check_literal) check_literal:After while(): "test+second=", c.test+c.second
   (check_literal) ret1 Match. ' PRINT' == 'print "test+second=", c.test+c.second'

   (check_expression) ' "test+second=", c.test+c.second'

    (check_eitem) check_eitem: '"test+second=", c.test+c.second'

     (check_function)  '"test+second=", c.test+c.second'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"test+second=", c.test+c.second'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"test+second=", c.test+c.second'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"test+second=", c.test+c.second'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"test+second=", c.test+c.second'
      (check_literal) check_literal:After while():test+second=", c.test+c.second
      (check_literal) ret1 Match. ' "' == '"test+second=", c.test+c.second'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', c.test+c.second' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', c.test+c.second' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "test+second=", c.test+c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "test+second=", c.test+c.second'
   (check_literal) check_literal:After while(): "test+second=", c.test+c.second
   (check_literal) ret1 Match. ' PRINT' == 'print "test+second=", c.test+c.second'
  (scan_print) Before while

   (check_expression) ' "test+second=", c.test+c.second'

    (check_eitem) check_eitem: '"test+second=", c.test+c.second'

     (check_function)  '"test+second=", c.test+c.second'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"test+second=", c.test+c.second'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"test+second=", c.test+c.second'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"test+second=", c.test+c.second'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"test+second=", c.test+c.second'
      (check_literal) check_literal:After while():test+second=", c.test+c.second
      (check_literal) ret1 Match. ' "' == '"test+second=", c.test+c.second'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', c.test+c.second' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', c.test+c.second' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "test+second=", c.test+c.second' igncomma:1

    (check_eitem) check_eitem: '"test+second=", c.test+c.second'

     (check_function)  '"test+second=", c.test+c.second'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"test+second=", c.test+c.second'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"test+second=", c.test+c.second'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"test+second=", c.test+c.second'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"test+second=", c.test+c.second'
      (check_literal) check_literal:After while():test+second=", c.test+c.second
      (check_literal) ret1 Match. ' "' == '"test+second=", c.test+c.second'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"test+second=", c.test+c.second'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"test+second=", c.test+c.second'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"test+second=", c.test+c.second'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"test+second=", c.test+c.second'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"test+second=", c.test+c.second'
      (check_literal) check_literal:After while():test+second=", c.test+c.second
      (check_literal) ret1 Match. ' "' == '"test+second=", c.test+c.second'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"test+second=", c.test+c.second'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"test+second=", c.test+c.second'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"test+second=", c.test+c.second'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"test+second=", c.test+c.second'
      (check_literal) check_literal:After while():test+second=", c.test+c.second
      (check_literal) ret1 Match. ' "' == '"test+second=", c.test+c.second'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"test+second=", c.test+c.second'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"test+second=", c.test+c.second'
       (check_literal) check_literal:After while():test+second=", c.test+c.second
       (check_literal) ret1 Match. ' "' == '"test+second=", c.test+c.second'
      (scan_string)   (in if) 'test+second=", c.test+c.second'
      (scan_string)   (in wh) 'test+second=", c.test+c.second'
      (scan_string)   (in wh) 'est+second=", c.test+c.second'
      (scan_string)   (in wh) 'est+second=", c.test+c.second'
      (scan_string)   (in wh) 'st+second=", c.test+c.second'
      (scan_string)   (in wh) 'st+second=", c.test+c.second'
      (scan_string)   (in wh) 't+second=", c.test+c.second'
      (scan_string)   (in wh) 't+second=", c.test+c.second'
      (scan_string)   (in wh) '+second=", c.test+c.second'
      (scan_string)   (in wh) '+second=", c.test+c.second'
      (scan_string)   (in wh) 'second=", c.test+c.second'
      (scan_string)   (in wh) 'second=", c.test+c.second'
      (scan_string)   (in wh) 'econd=", c.test+c.second'
      (scan_string)   (in wh) 'econd=", c.test+c.second'
      (scan_string)   (in wh) 'cond=", c.test+c.second'
      (scan_string)   (in wh) 'cond=", c.test+c.second'
      (scan_string)   (in wh) 'ond=", c.test+c.second'
      (scan_string)   (in wh) 'ond=", c.test+c.second'
      (scan_string)   (in wh) 'nd=", c.test+c.second'
      (scan_string)   (in wh) 'nd=", c.test+c.second'
      (scan_string)   (in wh) 'd=", c.test+c.second'
      (scan_string)   (in wh) 'd=", c.test+c.second'
      (scan_string)   (in wh) '=", c.test+c.second'
      (scan_string)   (in wh) '=", c.test+c.second'
      (scan_string)   (in wh) '", c.test+c.second'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"test+second="' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"test+second="'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"test+second=" is not function
token_is_variable: tok:'"test+second="'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"test+second=" is not function
(   output_string) [U,()] s "test+second="
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', c.test+c.second' Before while igncomma:1

    (check_operator) ', c.test+c.second' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', c.test+c.second' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=20 ', c.test+c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=20 ', c.test+c.second'
   (check_literal) check_literal:After while(): c.test+c.second
   (check_literal) ret1 Match. ' ,' == ', c.test+c.second'

   (scan_literal_core) scan_literal_core:lit=' ,' ', c.test+c.second'
   (scan_literal_core) scan_literal_core:After drop space:', c.test+c.second'
   (scan_literal_core) scan_literal_core:while loop:, c.test+c.second
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=21 ' c.test+c.second'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=22 'c.test+c.second'
 (check_literal)   ';' != 'c'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:7
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"test+second="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :"test+second="   *************
(type_check_stack_push)  type_check_stack_push: '"test+second="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"test+second="' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"test+second="' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"test+second="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:"test+second="    **********
(type_check_stack_push)  type_check_stack_push: '"test+second="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"test+second="' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"test+second="' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"test+second="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"test+second="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"test+second="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("test+second=")
infix_stack_push: '"test+second="'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"test+second="'
infix_stack_push: 'PRINT("test+second=")'
Done

infix_stack_pop: 'PRINT("test+second=")'
Infix stack result PRINT("test+second=")
(infix_from_rpn) exit  'PRINT("test+second=")'
(process_expression_types) ==RINT("test+second=")==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:01AF
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:0 String Literal '"test+second="' EXP_BUFF_ID_STR
(set_qcode_header_byte_at) idx:01AF len:1 val:24
(set_qcode_header_byte_at) idx:01B0 len:1 val:0C
(set_qcode_header_byte_at) idx:01B1 len:1 val:74
(set_qcode_header_byte_at) idx:01B2 len:1 val:65
(set_qcode_header_byte_at) idx:01B3 len:1 val:73
(set_qcode_header_byte_at) idx:01B4 len:1 val:74
(set_qcode_header_byte_at) idx:01B5 len:1 val:2B
(set_qcode_header_byte_at) idx:01B6 len:1 val:73
(set_qcode_header_byte_at) idx:01B7 len:1 val:65
(set_qcode_header_byte_at) idx:01B8 len:1 val:63
(set_qcode_header_byte_at) idx:01B9 len:1 val:6F
(set_qcode_header_byte_at) idx:01BA len:1 val:6E
(set_qcode_header_byte_at) idx:01BB len:1 val:64
(set_qcode_header_byte_at) idx:01BC len:1 val:3D
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:01BD len:1 val:71
(finalise_expression) Finalise expression done.
 c.test+c.second
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:01BE
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:01BE len:1 val:72
(finalise_expression) Finalise expression done.
 c.test+c.second
========================================================
(output_expression_start)

 (check_expression) ' c.test+c.second'

  (check_eitem) check_eitem: 'c.test+c.second'

   (check_function)  'c.test+c.second'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=22 'c.test+c.second'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 'c.test+c.second'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=22 'c.test+c.second'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 'c.test+c.second'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.test+c.second'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.test+c.second'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.test+c.second'
     (check_textlabel) 'c.test' is a text label chstr:'t'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
    (check_proc_call) 'c.test' is text label

     (check_literal) check_literal:lit=':' idx=28 '+c.second'
     (check_literal) check_literal:After drop space:':' idx=28 '+c.second'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.test+c.second'

     (check_operator) 'c.test+c.second' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.test+c.second':
     (check_vname) check_vname ret1 '+c.second':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c.second'

     (check_literal) check_literal:lit='(' idx=28 '+c.second'
     (check_literal) check_literal:After drop space:'(' idx=28 '+c.second'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+c.second' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) 'c.second' igncomma:1
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c.second'

  (check_function)  'c.second'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=29 'c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=29 'c.second'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=29 'c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=29 'c.second'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.second'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.second'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.second'
    (check_textlabel) 'c.second' is a text label chstr:'d'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
   (check_proc_call) 'c.second' is text label

    (check_literal) check_literal:lit=':' idx=37 ''
    (check_literal) check_literal:After drop space:':' idx=37 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.second'

    (check_operator) 'c.second' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.second':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=37 ''
    (check_literal) check_literal:After drop space:'(' idx=37 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=37 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=37 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' c.test+c.second' igncomma:1

  (check_eitem) check_eitem: 'c.test+c.second'

   (check_function)  'c.test+c.second'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=22 'c.test+c.second'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 'c.test+c.second'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=22 'c.test+c.second'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 'c.test+c.second'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.test+c.second'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.test+c.second'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.test+c.second'
     (check_textlabel) 'c.test' is a text label chstr:'t'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
    (check_proc_call) 'c.test' is text label

     (check_literal) check_literal:lit=':' idx=28 '+c.second'
     (check_literal) check_literal:After drop space:':' idx=28 '+c.second'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.test+c.second'

     (check_operator) 'c.test+c.second' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.test+c.second':
     (check_vname) check_vname ret1 '+c.second':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c.second'

     (check_literal) check_literal:lit='(' idx=28 '+c.second'
     (check_literal) check_literal:After drop space:'(' idx=28 '+c.second'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'c.test+c.second'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=22 'c.test+c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=22 'c.test+c.second'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=22 'c.test+c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=22 'c.test+c.second'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.test+c.second'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.test+c.second'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.test+c.second'
    (check_textlabel) 'c.test' is a text label chstr:'t'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
   (check_proc_call) 'c.test' is text label

    (check_literal) check_literal:lit=':' idx=28 '+c.second'
    (check_literal) check_literal:After drop space:':' idx=28 '+c.second'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.test+c.second'

    (check_operator) 'c.test+c.second' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.test+c.second':
    (check_vname) check_vname ret1 '+c.second':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c.second'

    (check_literal) check_literal:lit='(' idx=28 '+c.second'
    (check_literal) check_literal:After drop space:'(' idx=28 '+c.second'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=22 'c.test+c.second'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=22 'c.test+c.second'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=22 'c.test+c.second'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=22 'c.test+c.second'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.test+c.second'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.test+c.second'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.test+c.second'
   (check_textlabel) 'c.test' is a text label chstr:'t'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'c.test' Type:f
  (check_proc_call) 'c.test' is text label

   (check_literal) check_literal:lit=':' idx=28 '+c.second'
   (check_literal) check_literal:After drop space:':' idx=28 '+c.second'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.test+c.second'

   (check_operator) 'c.test+c.second' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.test+c.second':
   (check_vname) check_vname ret1 '+c.second':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c.second'

   (check_literal) check_literal:lit='(' idx=28 '+c.second'
   (check_literal) check_literal:After drop space:'(' idx=28 '+c.second'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.test+c.second' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.test+c.second'
  (scan_vname) scan_vname: ret1 'c.test'
 (scan_variable) scan_variable: '+c.second' vname='C.TEST'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.TEST' is not other keyword
 (scan_variable) Array test '+c.second'

  (check_literal) check_literal:lit='(' idx=28 '+c.second'
  (check_literal) check_literal:After drop space:'(' idx=28 '+c.second'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C.TEST' Float
(process_token)    Frst:1 T:'C.TEST' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.TEST'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.TEST is not function
token_is_variable: tok:'C.TEST'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.TEST is not function
(init_get_name) 
init_get_name:'C.TEST'
(init_get_name) 
init_get_name:'C.TEST'
(get_name) 
get_name:gn:'C.TEST'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C.TEST
(add_var_info) Name:C.TEST Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '            C.TEST'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+c.second' Before while igncomma:1

 (check_operator) '+c.second' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+c.second' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c.second'
 (scan_operator) scan_operator: ret1 'c.second' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c.second' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'c.second' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'c.second'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=29 'c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=29 'c.second'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=29 'c.second'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=29 'c.second'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.second'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.second'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.second'
    (check_textlabel) 'c.second' is a text label chstr:'d'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
   (check_proc_call) 'c.second' is text label

    (check_literal) check_literal:lit=':' idx=37 ''
    (check_literal) check_literal:After drop space:':' idx=37 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.second'

    (check_operator) 'c.second' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.second':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=37 ''
    (check_literal) check_literal:After drop space:'(' idx=37 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=29 'c.second'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=29 'c.second'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=29 'c.second'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=29 'c.second'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.second'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.second'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.second'
   (check_textlabel) 'c.second' is a text label chstr:'d'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
  (check_proc_call) 'c.second' is text label

   (check_literal) check_literal:lit=':' idx=37 ''
   (check_literal) check_literal:After drop space:':' idx=37 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.second'

   (check_operator) 'c.second' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.second':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=37 ''
   (check_literal) check_literal:After drop space:'(' idx=37 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.second' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.second'
  (scan_vname) scan_vname: ret1 'c.second'
 (scan_variable) scan_variable: '' vname='C.SECOND'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.SECOND' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=37 ''
  (check_literal) check_literal:After drop space:'(' idx=37 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C.SECOND' Float
(process_token)    Frst:0 T:'C.SECOND' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.SECOND'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.SECOND is not function
token_is_variable: tok:'C.SECOND'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.SECOND is not function
(init_get_name) 
init_get_name:'C.SECOND'
(init_get_name) 
init_get_name:'C.SECOND'
(get_name) 
get_name:gn:'C.SECOND'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C.SECOND
(add_var_info) Name:C.SECOND Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '          C.SECOND'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=37 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=37 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ f
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=37 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=37 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=37 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=37 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:4 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :C.TEST   *************
(type_check_stack_push)  type_check_stack_push: 'C.TEST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.TEST' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.TEST' type:f (1), %:0
(process_syntax_tree) *********Processing :C.SECOND   *************
(type_check_stack_push)  type_check_stack_push: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'C.TEST' type:1 %:0
(type_check_stack_print)  N002: 'C.SECOND' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'C.TEST' type:f (1), %:0
(type_check_stack_display) 001: 'C.SECOND' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.TEST' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'C.TEST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N002) percent:0
(process_syntax_tree) Mutable type (C.SECOND) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:C.TEST    **********
(type_check_stack_push)  type_check_stack_push: 'C.TEST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.TEST' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.TEST' type:f (1), %:0
(typecheck_expression)  *** BE:C.SECOND    **********
(type_check_stack_push)  type_check_stack_push: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'C.TEST' type:1 %:0
(type_check_stack_print)  N002: 'C.SECOND' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'C.TEST' type:f (1), %:0
(type_check_stack_display) 001: 'C.SECOND' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.TEST' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'C.TEST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.TEST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (C.TEST)
Var: C.TEST Float NumIdx:0
infix_stack_push: 'C.TEST'
(infix_from_rpn) (C.SECOND)
Var: C.SECOND Float NumIdx:0
infix_stack_push: 'C.SECOND'
(infix_from_rpn) (+)
infix_stack_pop: 'C.SECOND'
infix_stack_pop: 'C.TEST'
infix_stack_push: '(C.TEST + C.SECOND)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(C.TEST + C.SECOND)'
infix_stack_push: 'PRINT((C.TEST + C.SECOND))'
Done

infix_stack_pop: 'PRINT((C.TEST + C.SECOND))'
Infix stack result PRINT((C.TEST + C.SECOND))
(infix_from_rpn) exit  'PRINT((C.TEST + C.SECOND))'
(process_expression_types) ==RINT((C.TEST + C.SECOND))==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:4 qcode_idx:01BF
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(set_qcode_header_byte_at) idx:01BF len:1 val:24
(set_qcode_header_byte_at) idx:01C0 len:1 val:04
(set_qcode_header_byte_at) idx:01C1 len:1 val:54
(set_qcode_header_byte_at) idx:01C2 len:1 val:45
(set_qcode_header_byte_at) idx:01C3 len:1 val:53
(set_qcode_header_byte_at) idx:01C4 len:1 val:54
(set_qcode_header_byte_at) idx:01C5 len:1 val:1B
(set_qcode_header_byte_at) idx:01C6 len:1 val:02
(output_qcode_for_line) QC: i:1
(set_qcode_header_byte_at) idx:01C7 len:1 val:24
(set_qcode_header_byte_at) idx:01C8 len:1 val:06
(set_qcode_header_byte_at) idx:01C9 len:1 val:53
(set_qcode_header_byte_at) idx:01CA len:1 val:45
(set_qcode_header_byte_at) idx:01CB len:1 val:43
(set_qcode_header_byte_at) idx:01CC len:1 val:4F
(set_qcode_header_byte_at) idx:01CD len:1 val:4E
(set_qcode_header_byte_at) idx:01CE len:1 val:44
(set_qcode_header_byte_at) idx:01CF len:1 val:1B
(set_qcode_header_byte_at) idx:01D0 len:1 val:02
(output_qcode_for_line) QC: i:2
(add_simple_qcode) '+'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(add_simple_qcode) NULL vi
(qcode_check_trapped) +: Trapped:0
(set_qcode_header_byte_at) idx:01D1 len:1 val:3C
(output_qcode_for_line) QC: i:3
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:01D2 len:1 val:70
(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:4
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:01D3
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:01D3 len:1 val:73
(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=37 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=37 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=37 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=37 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=37 ''
     (check_literal) check_literal:After drop space:':' idx=37 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=37 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=37 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=37 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=37 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=37 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=37 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=37 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=37 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:01D4
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print "test+second=", c.test+c.second
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=37 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=37 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=37 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 's' (115)
 (is_all_spaces) cline[8] = 'e' (101)
 (is_all_spaces) cline[9] = 'c' (99)
 (is_all_spaces) cline[10] = 'o' (111)
 (is_all_spaces) cline[11] = 'n' (110)
 (is_all_spaces) cline[12] = 'd' (100)
 (is_all_spaces) cline[13] = '+' (43)
 (is_all_spaces) cline[14] = 't' (116)
 (is_all_spaces) cline[15] = 'h' (104)
 (is_all_spaces) cline[16] = 'i' (105)
 (is_all_spaces) cline[17] = 'r' (114)
 (is_all_spaces) cline[18] = 'd' (100)
 (is_all_spaces) cline[19] = '=' (61)
 (is_all_spaces) cline[20] = '"' (34)
 (is_all_spaces) cline[21] = ',' (44)
 (is_all_spaces) cline[22] = ' ' (32)
 (is_all_spaces) cline[23] = 'c' (99)
 (is_all_spaces) cline[24] = '.' (46)
 (is_all_spaces) cline[25] = 's' (115)
 (is_all_spaces) cline[26] = 'e' (101)
 (is_all_spaces) cline[27] = 'c' (99)
 (is_all_spaces) cline[28] = 'o' (111)
 (is_all_spaces) cline[29] = 'n' (110)
 (is_all_spaces) cline[30] = 'd' (100)
 (is_all_spaces) cline[31] = '+' (43)
 (is_all_spaces) cline[32] = 'c' (99)
 (is_all_spaces) cline[33] = '.' (46)
 (is_all_spaces) cline[34] = 't' (116)
 (is_all_spaces) cline[35] = 'h' (104)
 (is_all_spaces) cline[36] = 'i' (105)
 (is_all_spaces) cline[37] = 'r' (114)
 (is_all_spaces) cline[38] = 'd' (100)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "second+third=", c.second+c.third'
*******************************************
**print "second+third=", c.second+c.third**
*******************************************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "second+third=", c.second+c.third'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "second+third=", c.second+c.third'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "second+third=", c.second+c.third'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "second+third=", c.second+c.third'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "second+third=", c.second+c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "second+third=", c.second+c.third'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "second+third=", c.second+c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "second+third=", c.second+c.third'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "second+third=", c.second+c.third'

   (check_operator) 'print "second+third=", c.second+c.third' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "second+third=", c.second+c.third':
   (check_vname) check_vname ret1 ' "second+third=", c.second+c.third':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "second+third=", c.second+c.third'

   (check_literal) check_literal:lit='(' idx=5 ' "second+third=", c.second+c.third'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "second+third=", c.second+c.third'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "second+third=", c.second+c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"second+third=", c.second+c.third'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "second+third=", c.second+c.third'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "second+third=", c.second+c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "second+third=", c.second+c.third'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "second+third=", c.second+c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "second+third=", c.second+c.third'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "second+third=", c.second+c.third'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "second+third=", c.second+c.third'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "second+third=", c.second+c.third'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "second+third=", c.second+c.third'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "second+third=", c.second+c.third'
   (check_literal) check_literal:After drop space:':' idx=5 ' "second+third=", c.second+c.third'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "second+third=", c.second+c.third'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "second+third=", c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "second+third=", c.second+c.third'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "second+third=", c.second+c.third'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "second+third=", c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "second+third=", c.second+c.third'
   (check_literal) check_literal:After while(): "second+third=", c.second+c.third
   (check_literal) ret1 Match. ' PRINT' == 'print "second+third=", c.second+c.third'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "second+third=", c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "second+third=", c.second+c.third'
   (check_literal) check_literal:After while(): "second+third=", c.second+c.third
   (check_literal) ret1 Match. ' PRINT' == 'print "second+third=", c.second+c.third'

   (check_expression) ' "second+third=", c.second+c.third'

    (check_eitem) check_eitem: '"second+third=", c.second+c.third'

     (check_function)  '"second+third=", c.second+c.third'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"second+third=", c.second+c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"second+third=", c.second+c.third'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"second+third=", c.second+c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"second+third=", c.second+c.third'
      (check_literal) check_literal:After while():second+third=", c.second+c.third
      (check_literal) ret1 Match. ' "' == '"second+third=", c.second+c.third'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', c.second+c.third' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', c.second+c.third' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "second+third=", c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "second+third=", c.second+c.third'
   (check_literal) check_literal:After while(): "second+third=", c.second+c.third
   (check_literal) ret1 Match. ' PRINT' == 'print "second+third=", c.second+c.third'
  (scan_print) Before while

   (check_expression) ' "second+third=", c.second+c.third'

    (check_eitem) check_eitem: '"second+third=", c.second+c.third'

     (check_function)  '"second+third=", c.second+c.third'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"second+third=", c.second+c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"second+third=", c.second+c.third'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"second+third=", c.second+c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"second+third=", c.second+c.third'
      (check_literal) check_literal:After while():second+third=", c.second+c.third
      (check_literal) ret1 Match. ' "' == '"second+third=", c.second+c.third'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', c.second+c.third' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', c.second+c.third' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "second+third=", c.second+c.third' igncomma:1

    (check_eitem) check_eitem: '"second+third=", c.second+c.third'

     (check_function)  '"second+third=", c.second+c.third'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"second+third=", c.second+c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"second+third=", c.second+c.third'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"second+third=", c.second+c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"second+third=", c.second+c.third'
      (check_literal) check_literal:After while():second+third=", c.second+c.third
      (check_literal) ret1 Match. ' "' == '"second+third=", c.second+c.third'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"second+third=", c.second+c.third'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"second+third=", c.second+c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"second+third=", c.second+c.third'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"second+third=", c.second+c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"second+third=", c.second+c.third'
      (check_literal) check_literal:After while():second+third=", c.second+c.third
      (check_literal) ret1 Match. ' "' == '"second+third=", c.second+c.third'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"second+third=", c.second+c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"second+third=", c.second+c.third'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"second+third=", c.second+c.third'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"second+third=", c.second+c.third'
      (check_literal) check_literal:After while():second+third=", c.second+c.third
      (check_literal) ret1 Match. ' "' == '"second+third=", c.second+c.third'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"second+third=", c.second+c.third'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"second+third=", c.second+c.third'
       (check_literal) check_literal:After while():second+third=", c.second+c.third
       (check_literal) ret1 Match. ' "' == '"second+third=", c.second+c.third'
      (scan_string)   (in if) 'second+third=", c.second+c.third'
      (scan_string)   (in wh) 'second+third=", c.second+c.third'
      (scan_string)   (in wh) 'econd+third=", c.second+c.third'
      (scan_string)   (in wh) 'econd+third=", c.second+c.third'
      (scan_string)   (in wh) 'cond+third=", c.second+c.third'
      (scan_string)   (in wh) 'cond+third=", c.second+c.third'
      (scan_string)   (in wh) 'ond+third=", c.second+c.third'
      (scan_string)   (in wh) 'ond+third=", c.second+c.third'
      (scan_string)   (in wh) 'nd+third=", c.second+c.third'
      (scan_string)   (in wh) 'nd+third=", c.second+c.third'
      (scan_string)   (in wh) 'd+third=", c.second+c.third'
      (scan_string)   (in wh) 'd+third=", c.second+c.third'
      (scan_string)   (in wh) '+third=", c.second+c.third'
      (scan_string)   (in wh) '+third=", c.second+c.third'
      (scan_string)   (in wh) 'third=", c.second+c.third'
      (scan_string)   (in wh) 'third=", c.second+c.third'
      (scan_string)   (in wh) 'hird=", c.second+c.third'
      (scan_string)   (in wh) 'hird=", c.second+c.third'
      (scan_string)   (in wh) 'ird=", c.second+c.third'
      (scan_string)   (in wh) 'ird=", c.second+c.third'
      (scan_string)   (in wh) 'rd=", c.second+c.third'
      (scan_string)   (in wh) 'rd=", c.second+c.third'
      (scan_string)   (in wh) 'd=", c.second+c.third'
      (scan_string)   (in wh) 'd=", c.second+c.third'
      (scan_string)   (in wh) '=", c.second+c.third'
      (scan_string)   (in wh) '=", c.second+c.third'
      (scan_string)   (in wh) '", c.second+c.third'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"second+third="' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"second+third="'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"second+third=" is not function
token_is_variable: tok:'"second+third="'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"second+third=" is not function
(   output_string) [U,()] s "second+third="
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', c.second+c.third' Before while igncomma:1

    (check_operator) ', c.second+c.third' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', c.second+c.third' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=21 ', c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=21 ', c.second+c.third'
   (check_literal) check_literal:After while(): c.second+c.third
   (check_literal) ret1 Match. ' ,' == ', c.second+c.third'

   (scan_literal_core) scan_literal_core:lit=' ,' ', c.second+c.third'
   (scan_literal_core) scan_literal_core:After drop space:', c.second+c.third'
   (scan_literal_core) scan_literal_core:while loop:, c.second+c.third
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=22 ' c.second+c.third'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=23 'c.second+c.third'
 (check_literal)   ';' != 'c'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"second+third="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :"second+third="   *************
(type_check_stack_push)  type_check_stack_push: '"second+third="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"second+third="' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"second+third="' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"second+third="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:"second+third="    **********
(type_check_stack_push)  type_check_stack_push: '"second+third="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"second+third="' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"second+third="' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"second+third="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"second+third="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"second+third="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("second+third=")
infix_stack_push: '"second+third="'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"second+third="'
infix_stack_push: 'PRINT("second+third=")'
Done

infix_stack_pop: 'PRINT("second+third=")'
Infix stack result PRINT("second+third=")
(infix_from_rpn) exit  'PRINT("second+third=")'
(process_expression_types) ==RINT("second+third=")==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:01D4
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:0 String Literal '"second+third="' EXP_BUFF_ID_STR
(set_qcode_header_byte_at) idx:01D4 len:1 val:24
(set_qcode_header_byte_at) idx:01D5 len:1 val:0D
(set_qcode_header_byte_at) idx:01D6 len:1 val:73
(set_qcode_header_byte_at) idx:01D7 len:1 val:65
(set_qcode_header_byte_at) idx:01D8 len:1 val:63
(set_qcode_header_byte_at) idx:01D9 len:1 val:6F
(set_qcode_header_byte_at) idx:01DA len:1 val:6E
(set_qcode_header_byte_at) idx:01DB len:1 val:64
(set_qcode_header_byte_at) idx:01DC len:1 val:2B
(set_qcode_header_byte_at) idx:01DD len:1 val:74
(set_qcode_header_byte_at) idx:01DE len:1 val:68
(set_qcode_header_byte_at) idx:01DF len:1 val:69
(set_qcode_header_byte_at) idx:01E0 len:1 val:72
(set_qcode_header_byte_at) idx:01E1 len:1 val:64
(set_qcode_header_byte_at) idx:01E2 len:1 val:3D
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:01E3 len:1 val:71
(finalise_expression) Finalise expression done.
 c.second+c.third
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:01E4
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:01E4 len:1 val:72
(finalise_expression) Finalise expression done.
 c.second+c.third
========================================================
(output_expression_start)

 (check_expression) ' c.second+c.third'

  (check_eitem) check_eitem: 'c.second+c.third'

   (check_function)  'c.second+c.third'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=23 'c.second+c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=23 'c.second+c.third'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=23 'c.second+c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=23 'c.second+c.third'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.second+c.third'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.second+c.third'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.second+c.third'
     (check_textlabel) 'c.second' is a text label chstr:'d'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
    (check_proc_call) 'c.second' is text label

     (check_literal) check_literal:lit=':' idx=31 '+c.third'
     (check_literal) check_literal:After drop space:':' idx=31 '+c.third'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.second+c.third'

     (check_operator) 'c.second+c.third' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.second+c.third':
     (check_vname) check_vname ret1 '+c.third':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c.third'

     (check_literal) check_literal:lit='(' idx=31 '+c.third'
     (check_literal) check_literal:After drop space:'(' idx=31 '+c.third'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+c.third' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) 'c.third' igncomma:1
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c.third'

  (check_function)  'c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=32 'c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=32 'c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=32 'c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=32 'c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.third'
    (check_textlabel) 'c.third' is a text label chstr:'d'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
   (check_proc_call) 'c.third' is text label

    (check_literal) check_literal:lit=':' idx=39 ''
    (check_literal) check_literal:After drop space:':' idx=39 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.third'

    (check_operator) 'c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.third':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=39 ''
    (check_literal) check_literal:After drop space:'(' idx=39 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=39 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=39 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' c.second+c.third' igncomma:1

  (check_eitem) check_eitem: 'c.second+c.third'

   (check_function)  'c.second+c.third'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=23 'c.second+c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=23 'c.second+c.third'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=23 'c.second+c.third'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=23 'c.second+c.third'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.second+c.third'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.second+c.third'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.second+c.third'
     (check_textlabel) 'c.second' is a text label chstr:'d'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
    (check_proc_call) 'c.second' is text label

     (check_literal) check_literal:lit=':' idx=31 '+c.third'
     (check_literal) check_literal:After drop space:':' idx=31 '+c.third'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.second+c.third'

     (check_operator) 'c.second+c.third' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.second+c.third':
     (check_vname) check_vname ret1 '+c.third':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c.third'

     (check_literal) check_literal:lit='(' idx=31 '+c.third'
     (check_literal) check_literal:After drop space:'(' idx=31 '+c.third'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'c.second+c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=23 'c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=23 'c.second+c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=23 'c.second+c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=23 'c.second+c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.second+c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.second+c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.second+c.third'
    (check_textlabel) 'c.second' is a text label chstr:'d'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
   (check_proc_call) 'c.second' is text label

    (check_literal) check_literal:lit=':' idx=31 '+c.third'
    (check_literal) check_literal:After drop space:':' idx=31 '+c.third'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.second+c.third'

    (check_operator) 'c.second+c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.second+c.third':
    (check_vname) check_vname ret1 '+c.third':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c.third'

    (check_literal) check_literal:lit='(' idx=31 '+c.third'
    (check_literal) check_literal:After drop space:'(' idx=31 '+c.third'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=23 'c.second+c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=23 'c.second+c.third'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=23 'c.second+c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=23 'c.second+c.third'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.second+c.third'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.second+c.third'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.second+c.third'
   (check_textlabel) 'c.second' is a text label chstr:'d'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'c.second' Type:f
  (check_proc_call) 'c.second' is text label

   (check_literal) check_literal:lit=':' idx=31 '+c.third'
   (check_literal) check_literal:After drop space:':' idx=31 '+c.third'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.second+c.third'

   (check_operator) 'c.second+c.third' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.second+c.third':
   (check_vname) check_vname ret1 '+c.third':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c.third'

   (check_literal) check_literal:lit='(' idx=31 '+c.third'
   (check_literal) check_literal:After drop space:'(' idx=31 '+c.third'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.second+c.third' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.second+c.third'
  (scan_vname) scan_vname: ret1 'c.second'
 (scan_variable) scan_variable: '+c.third' vname='C.SECOND'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.SECOND' is not other keyword
 (scan_variable) Array test '+c.third'

  (check_literal) check_literal:lit='(' idx=31 '+c.third'
  (check_literal) check_literal:After drop space:'(' idx=31 '+c.third'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C.SECOND' Float
(process_token)    Frst:1 T:'C.SECOND' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.SECOND'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.SECOND is not function
token_is_variable: tok:'C.SECOND'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.SECOND is not function
(init_get_name) 
init_get_name:'C.SECOND'
(init_get_name) 
init_get_name:'C.SECOND'
(get_name) 
get_name:gn:'C.SECOND'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C.SECOND
(add_var_info) Name:C.SECOND Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '          C.SECOND'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+c.third' Before while igncomma:1

 (check_operator) '+c.third' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+c.third' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c.third'
 (scan_operator) scan_operator: ret1 'c.third' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c.third' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'c.third' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'c.third'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=32 'c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=32 'c.third'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=32 'c.third'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=32 'c.third'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.third'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.third'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.third'
    (check_textlabel) 'c.third' is a text label chstr:'d'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
   (check_proc_call) 'c.third' is text label

    (check_literal) check_literal:lit=':' idx=39 ''
    (check_literal) check_literal:After drop space:':' idx=39 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.third'

    (check_operator) 'c.third' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.third':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=39 ''
    (check_literal) check_literal:After drop space:'(' idx=39 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=32 'c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=32 'c.third'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=32 'c.third'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=32 'c.third'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.third'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.third'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.third'
   (check_textlabel) 'c.third' is a text label chstr:'d'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
  (check_proc_call) 'c.third' is text label

   (check_literal) check_literal:lit=':' idx=39 ''
   (check_literal) check_literal:After drop space:':' idx=39 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.third'

   (check_operator) 'c.third' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.third':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=39 ''
   (check_literal) check_literal:After drop space:'(' idx=39 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.third' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.third'
  (scan_vname) scan_vname: ret1 'c.third'
 (scan_variable) scan_variable: '' vname='C.THIRD'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.THIRD' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=39 ''
  (check_literal) check_literal:After drop space:'(' idx=39 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='C.THIRD' Float
(process_token)    Frst:0 T:'C.THIRD' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.THIRD'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.THIRD is not function
token_is_variable: tok:'C.THIRD'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.THIRD is not function
(init_get_name) 
init_get_name:'C.THIRD'
(init_get_name) 
init_get_name:'C.THIRD'
(get_name) 
get_name:gn:'C.THIRD'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C.THIRD
(add_var_info) Name:C.THIRD Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '           C.THIRD'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=39 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=39 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ f
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=39 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=39 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=39 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=39 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:4 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :C.SECOND   *************
(type_check_stack_push)  type_check_stack_push: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.SECOND' type:f (1), %:0
(process_syntax_tree) *********Processing :C.THIRD   *************
(type_check_stack_push)  type_check_stack_push: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
(type_check_stack_print)  N002: 'C.THIRD' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'C.SECOND' type:f (1), %:0
(type_check_stack_display) 001: 'C.THIRD' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N002) percent:0
(process_syntax_tree) Mutable type (C.THIRD) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:C.SECOND    **********
(type_check_stack_push)  type_check_stack_push: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.SECOND' type:f (1), %:0
(typecheck_expression)  *** BE:C.THIRD    **********
(type_check_stack_push)  type_check_stack_push: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
(type_check_stack_print)  N002: 'C.THIRD' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'C.SECOND' type:f (1), %:0
(type_check_stack_display) 001: 'C.THIRD' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.SECOND' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'C.SECOND'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.SECOND' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (C.SECOND)
Var: C.SECOND Float NumIdx:0
infix_stack_push: 'C.SECOND'
(infix_from_rpn) (C.THIRD)
Var: C.THIRD Float NumIdx:0
infix_stack_push: 'C.THIRD'
(infix_from_rpn) (+)
infix_stack_pop: 'C.THIRD'
infix_stack_pop: 'C.SECOND'
infix_stack_push: '(C.SECOND + C.THIRD)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(C.SECOND + C.THIRD)'
infix_stack_push: 'PRINT((C.SECOND + C.THIRD))'
Done

infix_stack_pop: 'PRINT((C.SECOND + C.THIRD))'
Infix stack result PRINT((C.SECOND + C.THIRD))
(infix_from_rpn) exit  'PRINT((C.SECOND + C.THIRD))'
(process_expression_types) ==RINT((C.SECOND + C.THIRD))==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:4 qcode_idx:01E5
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(set_qcode_header_byte_at) idx:01E5 len:1 val:24
(set_qcode_header_byte_at) idx:01E6 len:1 val:06
(set_qcode_header_byte_at) idx:01E7 len:1 val:53
(set_qcode_header_byte_at) idx:01E8 len:1 val:45
(set_qcode_header_byte_at) idx:01E9 len:1 val:43
(set_qcode_header_byte_at) idx:01EA len:1 val:4F
(set_qcode_header_byte_at) idx:01EB len:1 val:4E
(set_qcode_header_byte_at) idx:01EC len:1 val:44
(set_qcode_header_byte_at) idx:01ED len:1 val:1B
(set_qcode_header_byte_at) idx:01EE len:1 val:02
(output_qcode_for_line) QC: i:1
(set_qcode_header_byte_at) idx:01EF len:1 val:24
(set_qcode_header_byte_at) idx:01F0 len:1 val:05
(set_qcode_header_byte_at) idx:01F1 len:1 val:54
(set_qcode_header_byte_at) idx:01F2 len:1 val:48
(set_qcode_header_byte_at) idx:01F3 len:1 val:49
(set_qcode_header_byte_at) idx:01F4 len:1 val:52
(set_qcode_header_byte_at) idx:01F5 len:1 val:44
(set_qcode_header_byte_at) idx:01F6 len:1 val:1B
(set_qcode_header_byte_at) idx:01F7 len:1 val:02
(output_qcode_for_line) QC: i:2
(add_simple_qcode) '+'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(add_simple_qcode) NULL vi
(qcode_check_trapped) +: Trapped:0
(set_qcode_header_byte_at) idx:01F8 len:1 val:3C
(output_qcode_for_line) QC: i:3
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:01F9 len:1 val:70
(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:4
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:01FA
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:01FA len:1 val:73
(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=39 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=39 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=39 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=39 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=39 ''
     (check_literal) check_literal:After drop space:':' idx=39 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=39 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=39 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=39 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=39 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=39 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=39 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=39 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=39 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:01FB
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print "second+third=", c.second+c.third
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=39 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=39 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=39 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'f' (102)
 (is_all_spaces) cline[8] = 'i' (105)
 (is_all_spaces) cline[9] = 'r' (114)
 (is_all_spaces) cline[10] = 's' (115)
 (is_all_spaces) cline[11] = 't' (116)
 (is_all_spaces) cline[12] = '+' (43)
 (is_all_spaces) cline[13] = 't' (116)
 (is_all_spaces) cline[14] = 'h' (104)
 (is_all_spaces) cline[15] = 'i' (105)
 (is_all_spaces) cline[16] = 'r' (114)
 (is_all_spaces) cline[17] = 'd' (100)
 (is_all_spaces) cline[18] = '=' (61)
 (is_all_spaces) cline[19] = '"' (34)
 (is_all_spaces) cline[20] = ',' (44)
 (is_all_spaces) cline[21] = ' ' (32)
 (is_all_spaces) cline[22] = 'c' (99)
 (is_all_spaces) cline[23] = '.' (46)
 (is_all_spaces) cline[24] = 'f' (102)
 (is_all_spaces) cline[25] = 'i' (105)
 (is_all_spaces) cline[26] = 'r' (114)
 (is_all_spaces) cline[27] = 's' (115)
 (is_all_spaces) cline[28] = 't' (116)
 (is_all_spaces) cline[29] = '+' (43)
 (is_all_spaces) cline[30] = 'c' (99)
 (is_all_spaces) cline[31] = '.' (46)
 (is_all_spaces) cline[32] = 't' (116)
 (is_all_spaces) cline[33] = 'h' (104)
 (is_all_spaces) cline[34] = 'i' (105)
 (is_all_spaces) cline[35] = 'r' (114)
 (is_all_spaces) cline[36] = 'd' (100)
 (is_all_spaces) cline[37] = '	' (9)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "first+third=", c.first+c.third	'
******************************************
**print "first+third=", c.first+c.third	**
******************************************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "first+third=", c.first+c.third	'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "first+third=", c.first+c.third	'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "first+third=", c.first+c.third	'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "first+third=", c.first+c.third	'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "first+third=", c.first+c.third	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "first+third=", c.first+c.third	'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "first+third=", c.first+c.third	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "first+third=", c.first+c.third	'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "first+third=", c.first+c.third	'

   (check_operator) 'print "first+third=", c.first+c.third	' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "first+third=", c.first+c.third	':
   (check_vname) check_vname ret1 ' "first+third=", c.first+c.third	':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "first+third=", c.first+c.third	'

   (check_literal) check_literal:lit='(' idx=5 ' "first+third=", c.first+c.third	'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "first+third=", c.first+c.third	'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "first+third=", c.first+c.third	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"first+third=", c.first+c.third	'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "first+third=", c.first+c.third	'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "first+third=", c.first+c.third	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "first+third=", c.first+c.third	'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "first+third=", c.first+c.third	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "first+third=", c.first+c.third	'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "first+third=", c.first+c.third	'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "first+third=", c.first+c.third	'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "first+third=", c.first+c.third	'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "first+third=", c.first+c.third	'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "first+third=", c.first+c.third	'
   (check_literal) check_literal:After drop space:':' idx=5 ' "first+third=", c.first+c.third	'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "first+third=", c.first+c.third	'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "first+third=", c.first+c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "first+third=", c.first+c.third	'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "first+third=", c.first+c.third	'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "first+third=", c.first+c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "first+third=", c.first+c.third	'
   (check_literal) check_literal:After while(): "first+third=", c.first+c.third	
   (check_literal) ret1 Match. ' PRINT' == 'print "first+third=", c.first+c.third	'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "first+third=", c.first+c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "first+third=", c.first+c.third	'
   (check_literal) check_literal:After while(): "first+third=", c.first+c.third	
   (check_literal) ret1 Match. ' PRINT' == 'print "first+third=", c.first+c.third	'

   (check_expression) ' "first+third=", c.first+c.third	'

    (check_eitem) check_eitem: '"first+third=", c.first+c.third	'

     (check_function)  '"first+third=", c.first+c.third	'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"first+third=", c.first+c.third	'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) check_literal:After while():first+third=", c.first+c.third	
      (check_literal) ret1 Match. ' "' == '"first+third=", c.first+c.third	'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', c.first+c.third	' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', c.first+c.third	' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "first+third=", c.first+c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "first+third=", c.first+c.third	'
   (check_literal) check_literal:After while(): "first+third=", c.first+c.third	
   (check_literal) ret1 Match. ' PRINT' == 'print "first+third=", c.first+c.third	'
  (scan_print) Before while

   (check_expression) ' "first+third=", c.first+c.third	'

    (check_eitem) check_eitem: '"first+third=", c.first+c.third	'

     (check_function)  '"first+third=", c.first+c.third	'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"first+third=", c.first+c.third	'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) check_literal:After while():first+third=", c.first+c.third	
      (check_literal) ret1 Match. ' "' == '"first+third=", c.first+c.third	'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ', c.first+c.third	' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ', c.first+c.third	' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "first+third=", c.first+c.third	' igncomma:1

    (check_eitem) check_eitem: '"first+third=", c.first+c.third	'

     (check_function)  '"first+third=", c.first+c.third	'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"first+third=", c.first+c.third	'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) check_literal:After while():first+third=", c.first+c.third	
      (check_literal) ret1 Match. ' "' == '"first+third=", c.first+c.third	'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"first+third=", c.first+c.third	'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"first+third=", c.first+c.third	'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) check_literal:After while():first+third=", c.first+c.third	
      (check_literal) ret1 Match. ' "' == '"first+third=", c.first+c.third	'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"first+third=", c.first+c.third	'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"first+third=", c.first+c.third	'
      (check_literal) check_literal:After while():first+third=", c.first+c.third	
      (check_literal) ret1 Match. ' "' == '"first+third=", c.first+c.third	'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"first+third=", c.first+c.third	'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"first+third=", c.first+c.third	'
       (check_literal) check_literal:After while():first+third=", c.first+c.third	
       (check_literal) ret1 Match. ' "' == '"first+third=", c.first+c.third	'
      (scan_string)   (in if) 'first+third=", c.first+c.third	'
      (scan_string)   (in wh) 'first+third=", c.first+c.third	'
      (scan_string)   (in wh) 'irst+third=", c.first+c.third	'
      (scan_string)   (in wh) 'irst+third=", c.first+c.third	'
      (scan_string)   (in wh) 'rst+third=", c.first+c.third	'
      (scan_string)   (in wh) 'rst+third=", c.first+c.third	'
      (scan_string)   (in wh) 'st+third=", c.first+c.third	'
      (scan_string)   (in wh) 'st+third=", c.first+c.third	'
      (scan_string)   (in wh) 't+third=", c.first+c.third	'
      (scan_string)   (in wh) 't+third=", c.first+c.third	'
      (scan_string)   (in wh) '+third=", c.first+c.third	'
      (scan_string)   (in wh) '+third=", c.first+c.third	'
      (scan_string)   (in wh) 'third=", c.first+c.third	'
      (scan_string)   (in wh) 'third=", c.first+c.third	'
      (scan_string)   (in wh) 'hird=", c.first+c.third	'
      (scan_string)   (in wh) 'hird=", c.first+c.third	'
      (scan_string)   (in wh) 'ird=", c.first+c.third	'
      (scan_string)   (in wh) 'ird=", c.first+c.third	'
      (scan_string)   (in wh) 'rd=", c.first+c.third	'
      (scan_string)   (in wh) 'rd=", c.first+c.third	'
      (scan_string)   (in wh) 'd=", c.first+c.third	'
      (scan_string)   (in wh) 'd=", c.first+c.third	'
      (scan_string)   (in wh) '=", c.first+c.third	'
      (scan_string)   (in wh) '=", c.first+c.third	'
      (scan_string)   (in wh) '", c.first+c.third	'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"first+third="' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"first+third="'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"first+third=" is not function
token_is_variable: tok:'"first+third="'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"first+third=" is not function
(   output_string) [U,()] s "first+third="
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ', c.first+c.third	' Before while igncomma:1

    (check_operator) ', c.first+c.third	' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ', c.first+c.third	' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=20 ', c.first+c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=20 ', c.first+c.third	'
   (check_literal) check_literal:After while(): c.first+c.third	
   (check_literal) ret1 Match. ' ,' == ', c.first+c.third	'

   (scan_literal_core) scan_literal_core:lit=' ,' ', c.first+c.third	'
   (scan_literal_core) scan_literal_core:After drop space:', c.first+c.third	'
   (scan_literal_core) scan_literal_core:while loop:, c.first+c.third	
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=21 ' c.first+c.third	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=22 'c.first+c.third	'
 (check_literal)   ';' != 'c'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"first+third="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :"first+third="   *************
(type_check_stack_push)  type_check_stack_push: '"first+third="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"first+third="' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"first+third="' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"first+third="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:"first+third="    **********
(type_check_stack_push)  type_check_stack_push: '"first+third="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"first+third="' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"first+third="' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"first+third="'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"first+third="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"first+third="' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("first+third=")
infix_stack_push: '"first+third="'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"first+third="'
infix_stack_push: 'PRINT("first+third=")'
Done

infix_stack_pop: 'PRINT("first+third=")'
Infix stack result PRINT("first+third=")
(infix_from_rpn) exit  'PRINT("first+third=")'
(process_expression_types) ==RINT("first+third=")==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:01FB
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:0 String Literal '"first+third="' EXP_BUFF_ID_STR
(set_qcode_header_byte_at) idx:01FB len:1 val:24
(set_qcode_header_byte_at) idx:01FC len:1 val:0C
(set_qcode_header_byte_at) idx:01FD len:1 val:66
(set_qcode_header_byte_at) idx:01FE len:1 val:69
(set_qcode_header_byte_at) idx:01FF len:1 val:72
(set_qcode_header_byte_at) idx:0200 len:1 val:73
(set_qcode_header_byte_at) idx:0201 len:1 val:74
(set_qcode_header_byte_at) idx:0202 len:1 val:2B
(set_qcode_header_byte_at) idx:0203 len:1 val:74
(set_qcode_header_byte_at) idx:0204 len:1 val:68
(set_qcode_header_byte_at) idx:0205 len:1 val:69
(set_qcode_header_byte_at) idx:0206 len:1 val:72
(set_qcode_header_byte_at) idx:0207 len:1 val:64
(set_qcode_header_byte_at) idx:0208 len:1 val:3D
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0209 len:1 val:71
(finalise_expression) Finalise expression done.
 c.first+c.third	
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:020A
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:020A len:1 val:72
(finalise_expression) Finalise expression done.
 c.first+c.third	
========================================================
(output_expression_start)

 (check_expression) ' c.first+c.third	'

  (check_eitem) check_eitem: 'c.first+c.third	'

   (check_function)  'c.first+c.third	'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=22 'c.first+c.third	'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 'c.first+c.third	'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=22 'c.first+c.third	'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 'c.first+c.third	'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.first+c.third	'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.first+c.third	'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.first+c.third	'
     (check_textlabel) 'c.first' is a text label chstr:'t'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'c.first' Type:f
    (check_proc_call) 'c.first' is text label

     (check_literal) check_literal:lit=':' idx=29 '+c.third	'
     (check_literal) check_literal:After drop space:':' idx=29 '+c.third	'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.first+c.third	'

     (check_operator) 'c.first+c.third	' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.first+c.third	':
     (check_vname) check_vname ret1 '+c.third	':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c.third	'

     (check_literal) check_literal:lit='(' idx=29 '+c.third	'
     (check_literal) check_literal:After drop space:'(' idx=29 '+c.third	'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '+c.third	' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) 'c.third	' igncomma:1
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'c.third	'

  (check_function)  'c.third	'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=30 'c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=30 'c.third	'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=30 'c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=30 'c.third	'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.third	'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.third	'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.third	'
    (check_textlabel) 'c.third' is a text label chstr:'d'
    (check_textlabel) Exit char:	
    (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
   (check_proc_call) 'c.third' is text label

    (check_literal) check_literal:lit=':' idx=37 '	'
    (check_literal) check_literal:After drop space:':' idx=37 '	'
    (check_literal)   ':' != '	'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.third	'

    (check_operator) 'c.third	' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.third	':
    (check_vname) check_vname ret1 '	':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '	'

    (check_literal) check_literal:lit='(' idx=37 '	'
    (check_literal) check_literal:After drop space:'(' idx=37 '	'
    (check_literal)   '(' != '	'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=37 '	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=38 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) ' c.first+c.third	' igncomma:1

  (check_eitem) check_eitem: 'c.first+c.third	'

   (check_function)  'c.first+c.third	'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=22 'c.first+c.third	'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 'c.first+c.third	'
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=22 'c.first+c.third	'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 'c.first+c.third	'
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c.first+c.third	'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'c.first+c.third	'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'c.first+c.third	'
     (check_textlabel) 'c.first' is a text label chstr:'t'
     (check_textlabel) Exit char:+
     (check_textlabel) check_textlabel:ret1 Name:'c.first' Type:f
    (check_proc_call) 'c.first' is text label

     (check_literal) check_literal:lit=':' idx=29 '+c.third	'
     (check_literal) check_literal:After drop space:':' idx=29 '+c.third	'
     (check_literal)   ':' != '+'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'c.first+c.third	'

     (check_operator) 'c.first+c.third	' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'c.first+c.third	':
     (check_vname) check_vname ret1 '+c.third	':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '+c.third	'

     (check_literal) check_literal:lit='(' idx=29 '+c.third	'
     (check_literal) check_literal:After drop space:'(' idx=29 '+c.third	'
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'c.first+c.third	'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=22 'c.first+c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=22 'c.first+c.third	'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=22 'c.first+c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=22 'c.first+c.third	'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.first+c.third	'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.first+c.third	'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.first+c.third	'
    (check_textlabel) 'c.first' is a text label chstr:'t'
    (check_textlabel) Exit char:+
    (check_textlabel) check_textlabel:ret1 Name:'c.first' Type:f
   (check_proc_call) 'c.first' is text label

    (check_literal) check_literal:lit=':' idx=29 '+c.third	'
    (check_literal) check_literal:After drop space:':' idx=29 '+c.third	'
    (check_literal)   ':' != '+'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.first+c.third	'

    (check_operator) 'c.first+c.third	' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.first+c.third	':
    (check_vname) check_vname ret1 '+c.third	':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '+c.third	'

    (check_literal) check_literal:lit='(' idx=29 '+c.third	'
    (check_literal) check_literal:After drop space:'(' idx=29 '+c.third	'
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=22 'c.first+c.third	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=22 'c.first+c.third	'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=22 'c.first+c.third	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=22 'c.first+c.third	'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.first+c.third	'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.first+c.third	'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.first+c.third	'
   (check_textlabel) 'c.first' is a text label chstr:'t'
   (check_textlabel) Exit char:+
   (check_textlabel) check_textlabel:ret1 Name:'c.first' Type:f
  (check_proc_call) 'c.first' is text label

   (check_literal) check_literal:lit=':' idx=29 '+c.third	'
   (check_literal) check_literal:After drop space:':' idx=29 '+c.third	'
   (check_literal)   ':' != '+'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.first+c.third	'

   (check_operator) 'c.first+c.third	' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.first+c.third	':
   (check_vname) check_vname ret1 '+c.third	':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '+c.third	'

   (check_literal) check_literal:lit='(' idx=29 '+c.third	'
   (check_literal) check_literal:After drop space:'(' idx=29 '+c.third	'
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.first+c.third	' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.first+c.third	'
  (scan_vname) scan_vname: ret1 'c.first'
 (scan_variable) scan_variable: '+c.third	' vname='C.FIRST'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.FIRST' is not other keyword
 (scan_variable) Array test '+c.third	'

  (check_literal) check_literal:lit='(' idx=29 '+c.third	'
  (check_literal) check_literal:After drop space:'(' idx=29 '+c.third	'
  (check_literal)   '(' != '+'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C.FIRST' Float
(process_token)    Frst:1 T:'C.FIRST' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.FIRST'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.FIRST is not function
token_is_variable: tok:'C.FIRST'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.FIRST is not function
(init_get_name) 
init_get_name:'C.FIRST'
(init_get_name) 
init_get_name:'C.FIRST'
(get_name) 
get_name:gn:'C.FIRST'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f C.FIRST
(add_var_info) Name:C.FIRST Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '           C.FIRST'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '+c.third	' Before while igncomma:1

 (check_operator) '+c.third	' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '+c.third	' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '+c.third	'
 (scan_operator) scan_operator: ret1 'c.third	' nb:0
(process_token)    Frst:0 T:'+' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:
(process_token) 
opr1:3 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'+'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: + type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'c.third	' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) 'c.third	' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  'c.third	'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=30 'c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=30 'c.third	'
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=30 'c.third	'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=30 'c.third	'
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c.third	'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'c.third	'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'c.third	'
    (check_textlabel) 'c.third' is a text label chstr:'d'
    (check_textlabel) Exit char:	
    (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
   (check_proc_call) 'c.third' is text label

    (check_literal) check_literal:lit=':' idx=37 '	'
    (check_literal) check_literal:After drop space:':' idx=37 '	'
    (check_literal)   ':' != '	'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'c.third	'

    (check_operator) 'c.third	' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'c.third	':
    (check_vname) check_vname ret1 '	':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '	'

    (check_literal) check_literal:lit='(' idx=37 '	'
    (check_literal) check_literal:After drop space:'(' idx=37 '	'
    (check_literal)   '(' != '	'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=30 'c.third	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=30 'c.third	'
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=30 'c.third	'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=30 'c.third	'
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c.third	'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'c.third	'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'c.third	'
   (check_textlabel) 'c.third' is a text label chstr:'d'
   (check_textlabel) Exit char:	
   (check_textlabel) check_textlabel:ret1 Name:'c.third' Type:f
  (check_proc_call) 'c.third' is text label

   (check_literal) check_literal:lit=':' idx=37 '	'
   (check_literal) check_literal:After drop space:':' idx=37 '	'
   (check_literal)   ':' != '	'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'c.third	'

   (check_operator) 'c.third	' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'c.third	':
   (check_vname) check_vname ret1 '	':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '	'

   (check_literal) check_literal:lit='(' idx=37 '	'
   (check_literal) check_literal:After drop space:'(' idx=37 '	'
   (check_literal)   '(' != '	'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'c.third	' ref_ndeclare:1

  (scan_vname) scan_vname: 'c.third	'
  (scan_vname) scan_vname: ret1 'c.third'
 (scan_variable) scan_variable: '	' vname='C.THIRD'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'C.THIRD' is not other keyword
 (scan_variable) Array test '	'

  (check_literal) check_literal:lit='(' idx=37 '	'
  (check_literal) check_literal:After drop space:'(' idx=37 '	'
  (check_literal)   '(' != '	'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C.THIRD' Float
(process_token)    Frst:0 T:'C.THIRD' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
+ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'C.THIRD'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.THIRD is not function
token_is_variable: tok:'C.THIRD'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C.THIRD is not function
(init_get_name) 
init_get_name:'C.THIRD'
(init_get_name) 
init_get_name:'C.THIRD'
(get_name) 
get_name:gn:'C.THIRD'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f C.THIRD
(add_var_info) Name:C.THIRD Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '           C.THIRD'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=37 '	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=38 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '	' commas:0
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop '+' type:f 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:+ f
(output_operator) [f,()] f +
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=37 '	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=38 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=38 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=38 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:4 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.FIRST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :C.FIRST   *************
(type_check_stack_push)  type_check_stack_push: 'C.FIRST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.FIRST' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.FIRST' type:f (1), %:0
(process_syntax_tree) *********Processing :C.THIRD   *************
(type_check_stack_push)  type_check_stack_push: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'C.FIRST' type:1 %:0
(type_check_stack_print)  N002: 'C.THIRD' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'C.FIRST' type:f (1), %:0
(type_check_stack_display) 001: 'C.THIRD' type:f (1), %:0
(process_syntax_tree) *********Processing :+   *************
(process_syntax_tree) BUFF_ID_OPERATOR
(process_syntax_tree) Found operator + %conv:1
(type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.FIRST' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'C.FIRST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(process_syntax_tree) op1 type:f op2 type:f %conv:1
(process_syntax_tree) Percent convertible operator op1 (N002) percent:0
(process_syntax_tree) Mutable type (C.THIRD) f f
(process_syntax_tree) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:C.FIRST    **********
(type_check_stack_push)  type_check_stack_push: 'C.FIRST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.FIRST' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'C.FIRST' type:f (1), %:0
(typecheck_expression)  *** BE:C.THIRD    **********
(type_check_stack_push)  type_check_stack_push: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (2)

(type_check_stack_print)  N001: 'C.FIRST' type:1 %:0
(type_check_stack_print)  N002: 'C.THIRD' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (2)
(type_check_stack_display) 000: 'C.FIRST' type:f (1), %:0
(type_check_stack_display) 001: 'C.THIRD' type:f (1), %:0
(typecheck_expression)  *** BE:+    **********
(typecheck_expression) BUFF_ID_OPERATOR
(typecheck_expression) Found operator +
(type_check_stack_pop)   type_check_stack_pop: 'C.THIRD'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'C.FIRST' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_pop)   type_check_stack_pop: 'C.FIRST'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(typecheck_expression) op1 type:f op2 type:f
(typecheck_expression) Mutable type (+) f f
(typecheck_expression) Same type
(type_check_stack_push)  type_check_stack_push: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N003: '000' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '000' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '000'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.FIRST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.FIRST' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'C.THIRD' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '+' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (C.FIRST)
Var: C.FIRST Float NumIdx:0
infix_stack_push: 'C.FIRST'
(infix_from_rpn) (C.THIRD)
Var: C.THIRD Float NumIdx:0
infix_stack_push: 'C.THIRD'
(infix_from_rpn) (+)
infix_stack_pop: 'C.THIRD'
infix_stack_pop: 'C.FIRST'
infix_stack_push: '(C.FIRST + C.THIRD)'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '(C.FIRST + C.THIRD)'
infix_stack_push: 'PRINT((C.FIRST + C.THIRD))'
Done

infix_stack_pop: 'PRINT((C.FIRST + C.THIRD))'
Infix stack result PRINT((C.FIRST + C.THIRD))
(infix_from_rpn) exit  'PRINT((C.FIRST + C.THIRD))'
(process_expression_types) ==RINT((C.FIRST + C.THIRD))==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:4 qcode_idx:020B
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(set_qcode_header_byte_at) idx:020B len:1 val:24
(set_qcode_header_byte_at) idx:020C len:1 val:05
(set_qcode_header_byte_at) idx:020D len:1 val:46
(set_qcode_header_byte_at) idx:020E len:1 val:49
(set_qcode_header_byte_at) idx:020F len:1 val:52
(set_qcode_header_byte_at) idx:0210 len:1 val:53
(set_qcode_header_byte_at) idx:0211 len:1 val:54
(set_qcode_header_byte_at) idx:0212 len:1 val:1B
(set_qcode_header_byte_at) idx:0213 len:1 val:02
(output_qcode_for_line) QC: i:1
(set_qcode_header_byte_at) idx:0214 len:1 val:24
(set_qcode_header_byte_at) idx:0215 len:1 val:05
(set_qcode_header_byte_at) idx:0216 len:1 val:54
(set_qcode_header_byte_at) idx:0217 len:1 val:48
(set_qcode_header_byte_at) idx:0218 len:1 val:49
(set_qcode_header_byte_at) idx:0219 len:1 val:52
(set_qcode_header_byte_at) idx:021A len:1 val:44
(set_qcode_header_byte_at) idx:021B len:1 val:1B
(set_qcode_header_byte_at) idx:021C len:1 val:02
(output_qcode_for_line) QC: i:2
(add_simple_qcode) '+'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(add_simple_qcode) NULL vi
(qcode_check_trapped) +: Trapped:0
(set_qcode_header_byte_at) idx:021D len:1 val:3C
(output_qcode_for_line) QC: i:3
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:021E len:1 val:70
(finalise_expression) Finalise expression done.
	
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:4
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:021F
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:021F len:1 val:73
(finalise_expression) Finalise expression done.
	
========================================================
(output_expression_start)

 (check_expression) '	'

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=38 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=38 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=38 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=38 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=38 ''
     (check_literal) check_literal:After drop space:':' idx=38 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=38 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=38 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=37 '	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=38 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=38 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=38 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=37 '	'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=38 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:0220
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print "first+third=", c.first+c.third	
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=38 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=38 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=38 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'T' (84)
 (is_all_spaces) cline[8] = 'o' (111)
 (is_all_spaces) cline[9] = 't' (116)
 (is_all_spaces) cline[10] = 'a' (97)
 (is_all_spaces) cline[11] = 'l' (108)
 (is_all_spaces) cline[12] = ':' (58)
 (is_all_spaces) cline[13] = '"' (34)
 (is_all_spaces) cline[14] = ',' (44)
 (is_all_spaces) cline[15] = 't' (116)
 (is_all_spaces) cline[16] = 'o' (111)
 (is_all_spaces) cline[17] = 't' (116)
 (is_all_spaces) cline[18] = 'a' (97)
 (is_all_spaces) cline[19] = 'l' (108)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "Total:",total'
************************
**print "Total:",total**
************************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "Total:",total'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "Total:",total'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "Total:",total'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "Total:",total'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "Total:",total'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "Total:",total'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "Total:",total'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "Total:",total'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "Total:",total'

   (check_operator) 'print "Total:",total' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "Total:",total':
   (check_vname) check_vname ret1 ' "Total:",total':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "Total:",total'

   (check_literal) check_literal:lit='(' idx=5 ' "Total:",total'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "Total:",total'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "Total:",total'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"Total:",total'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "Total:",total'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "Total:",total'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "Total:",total'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "Total:",total'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "Total:",total'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "Total:",total'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "Total:",total'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "Total:",total'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "Total:",total'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "Total:",total'
   (check_literal) check_literal:After drop space:':' idx=5 ' "Total:",total'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "Total:",total'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "Total:",total'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "Total:",total'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "Total:",total'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Total:",total'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Total:",total'
   (check_literal) check_literal:After while(): "Total:",total
   (check_literal) ret1 Match. ' PRINT' == 'print "Total:",total'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Total:",total'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Total:",total'
   (check_literal) check_literal:After while(): "Total:",total
   (check_literal) ret1 Match. ' PRINT' == 'print "Total:",total'

   (check_expression) ' "Total:",total'

    (check_eitem) check_eitem: '"Total:",total'

     (check_function)  '"Total:",total'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Total:",total'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Total:",total'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Total:",total'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Total:",total'
      (check_literal) check_literal:After while():Total:",total
      (check_literal) ret1 Match. ' "' == '"Total:",total'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ',total' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ',total' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Total:",total'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Total:",total'
   (check_literal) check_literal:After while(): "Total:",total
   (check_literal) ret1 Match. ' PRINT' == 'print "Total:",total'
  (scan_print) Before while

   (check_expression) ' "Total:",total'

    (check_eitem) check_eitem: '"Total:",total'

     (check_function)  '"Total:",total'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Total:",total'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Total:",total'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Total:",total'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Total:",total'
      (check_literal) check_literal:After while():Total:",total
      (check_literal) ret1 Match. ' "' == '"Total:",total'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ',total' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ',total' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "Total:",total' igncomma:1

    (check_eitem) check_eitem: '"Total:",total'

     (check_function)  '"Total:",total'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Total:",total'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Total:",total'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Total:",total'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Total:",total'
      (check_literal) check_literal:After while():Total:",total
      (check_literal) ret1 Match. ' "' == '"Total:",total'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"Total:",total'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Total:",total'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Total:",total'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Total:",total'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Total:",total'
      (check_literal) check_literal:After while():Total:",total
      (check_literal) ret1 Match. ' "' == '"Total:",total'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"Total:",total'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Total:",total'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"Total:",total'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Total:",total'
      (check_literal) check_literal:After while():Total:",total
      (check_literal) ret1 Match. ' "' == '"Total:",total'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"Total:",total'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"Total:",total'
       (check_literal) check_literal:After while():Total:",total
       (check_literal) ret1 Match. ' "' == '"Total:",total'
      (scan_string)   (in if) 'Total:",total'
      (scan_string)   (in wh) 'Total:",total'
      (scan_string)   (in wh) 'otal:",total'
      (scan_string)   (in wh) 'otal:",total'
      (scan_string)   (in wh) 'tal:",total'
      (scan_string)   (in wh) 'tal:",total'
      (scan_string)   (in wh) 'al:",total'
      (scan_string)   (in wh) 'al:",total'
      (scan_string)   (in wh) 'l:",total'
      (scan_string)   (in wh) 'l:",total'
      (scan_string)   (in wh) ':",total'
      (scan_string)   (in wh) ':",total'
      (scan_string)   (in wh) '",total'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"Total:"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"Total:"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Total:" is not function
token_is_variable: tok:'"Total:"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Total:" is not function
(   output_string) [U,()] s "Total:"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ',total' Before while igncomma:1

    (check_operator) ',total' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 ',total' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=14 ',total'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=14 ',total'
   (check_literal) check_literal:After while():total
   (check_literal) ret1 Match. ' ,' == ',total'

   (scan_literal_core) scan_literal_core:lit=' ,' ',total'
   (scan_literal_core) scan_literal_core:After drop space:',total'
   (scan_literal_core) scan_literal_core:while loop:,total
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:',' toktype:i exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:','
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:, is not function
 (process_token) **Unknown token **      ','
 (scan_literal) ret1
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=15 'total'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=15 'total'
 (check_literal)   ';' != 't'
 (check_literal) check_literal: ret0
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Comma present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Total:"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :"Total:"   *************
(type_check_stack_push)  type_check_stack_push: '"Total:"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"Total:"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"Total:"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"Total:"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:"Total:"    **********
(type_check_stack_push)  type_check_stack_push: '"Total:"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"Total:"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"Total:"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"Total:"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Total:"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Total:"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) ("Total:")
infix_stack_push: '"Total:"'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"Total:"'
infix_stack_push: 'PRINT("Total:")'
Done

infix_stack_pop: 'PRINT("Total:")'
Infix stack result PRINT("Total:")
(infix_from_rpn) exit  'PRINT("Total:")'
(process_expression_types) ==RINT("Total:")==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:0220
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:0 String Literal '"Total:"' EXP_BUFF_ID_STR
(set_qcode_header_byte_at) idx:0220 len:1 val:24
(set_qcode_header_byte_at) idx:0221 len:1 val:06
(set_qcode_header_byte_at) idx:0222 len:1 val:54
(set_qcode_header_byte_at) idx:0223 len:1 val:6F
(set_qcode_header_byte_at) idx:0224 len:1 val:74
(set_qcode_header_byte_at) idx:0225 len:1 val:61
(set_qcode_header_byte_at) idx:0226 len:1 val:6C
(set_qcode_header_byte_at) idx:0227 len:1 val:3A
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0228 len:1 val:71
(finalise_expression) Finalise expression done.
total
========================================================
(output_expression_start)
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_SPACE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_SPACE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_SPACE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_SPACE                ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '< > '
Done

infix_stack_pop: '< > '
Infix stack result < > 
(infix_from_rpn) exit  '< > '
(process_expression_types) == > ==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:0229
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0229 len:1 val:72
(finalise_expression) Finalise expression done.
total
========================================================
(output_expression_start)

 (check_expression) 'total'

  (check_eitem) check_eitem: 'total'

   (check_function)  'total'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=15 'total'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=15 'total'
    (check_literal)   '%' != 't'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=15 'total'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=15 'total'
    (check_literal)   '"' != 't'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'total'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'total'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'total'
     (check_textlabel) 'total' is a text label chstr:'l'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'total' Type:f
    (check_proc_call) 'total' is text label

     (check_literal) check_literal:lit=':' idx=20 ''
     (check_literal) check_literal:After drop space:':' idx=20 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'total'

     (check_operator) 'total' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'total':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=20 ''
     (check_literal) check_literal:After drop space:'(' idx=20 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) 'total' igncomma:1

  (check_eitem) check_eitem: 'total'

   (check_function)  'total'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=15 'total'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=15 'total'
    (check_literal)   '%' != 't'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=15 'total'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=15 'total'
    (check_literal)   '"' != 't'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'total'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'total'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'total'
     (check_textlabel) 'total' is a text label chstr:'l'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'total' Type:f
    (check_proc_call) 'total' is text label

     (check_literal) check_literal:lit=':' idx=20 ''
     (check_literal) check_literal:After drop space:':' idx=20 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'total'

     (check_operator) 'total' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'total':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=20 ''
     (check_literal) check_literal:After drop space:'(' idx=20 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'total'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=15 'total'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=15 'total'
   (check_literal)   '%' != 't'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=15 'total'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=15 'total'
   (check_literal)   '"' != 't'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'total'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'total'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'total'
    (check_textlabel) 'total' is a text label chstr:'l'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'total' Type:f
   (check_proc_call) 'total' is text label

    (check_literal) check_literal:lit=':' idx=20 ''
    (check_literal) check_literal:After drop space:':' idx=20 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'total'

    (check_operator) 'total' igncomma:1
    (check_operator) ret0:is comma: 32767

    (check_vname) check_vname 'total':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=20 ''
    (check_literal) check_literal:After drop space:'(' idx=20 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=15 'total'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=15 'total'
  (check_literal)   '%' != 't'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=15 'total'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=15 'total'
  (check_literal)   '"' != 't'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'total'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'total'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'total'
   (check_textlabel) 'total' is a text label chstr:'l'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'total' Type:f
  (check_proc_call) 'total' is text label

   (check_literal) check_literal:lit=':' idx=20 ''
   (check_literal) check_literal:After drop space:':' idx=20 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'total'

   (check_operator) 'total' igncomma:1
   (check_operator) ret0:is comma: 32767

   (check_vname) check_vname 'total':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=20 ''
   (check_literal) check_literal:After drop space:'(' idx=20 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'total' ref_ndeclare:1

  (scan_vname) scan_vname: 'total'
  (scan_vname) scan_vname: ret1 'total'
 (scan_variable) scan_variable: '' vname='TOTAL'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'TOTAL' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=20 ''
  (check_literal) check_literal:After drop space:'(' idx=20 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='TOTAL' Float
(process_token)    Frst:1 T:'TOTAL' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'TOTAL'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:TOTAL is not function
token_is_variable: tok:'TOTAL'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:TOTAL is not function
(init_get_name) 
init_get_name:'TOTAL'
(init_get_name) 
init_get_name:'TOTAL'
(get_name) 
get_name:gn:'TOTAL'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f TOTAL
(add_var_info) Name:TOTAL Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '             TOTAL'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) '' Before while igncomma:1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 32767
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=20 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=20 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=20 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=20 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:2 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :TOTAL   *************
(type_check_stack_push)  type_check_stack_push: 'TOTAL'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'TOTAL' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'TOTAL'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:TOTAL    **********
(type_check_stack_push)  type_check_stack_push: 'TOTAL'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'TOTAL' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'TOTAL'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (TOTAL)
Var: TOTAL Float NumIdx:0
infix_stack_push: 'TOTAL'
(infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: 'TOTAL'
infix_stack_push: 'PRINT(TOTAL)'
Done

infix_stack_pop: 'PRINT(TOTAL)'
Infix stack result PRINT(TOTAL)
(infix_from_rpn) exit  'PRINT(TOTAL)'
(process_expression_types) ==RINT(TOTAL)==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:022A
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(add_simple_qcode) 'TOTAL'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) TOTAL: Trapped:0
(set_qcode_header_byte_at) idx:022A len:1 val:01
(set_qcode_header_byte_at) idx:022B len:1 val:FF
(set_qcode_header_byte_at) idx:022C len:1 val:F6
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:022D len:1 val:70
(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

(process_expression_types) 
==INFIX==

(infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
(infix_from_rpn) exit  '<nl>'
(process_expression_types) ==nl>==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:022E
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:022E len:1 val:73
(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=20 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=20 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=20 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=20 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'@'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=20 ''
     (check_literal) check_literal:After drop space:':' idx=20 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=20 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=20 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=20 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=20 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=20 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=20 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=20 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=20 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:022F
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print "Total:",total
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=20 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=20 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=20 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'i' (105)
 (is_all_spaces) cline[1] = 'f' (102)
 (is_all_spaces) cline[2] = ' ' (32)
 (is_all_spaces) cline[3] = 't' (116)
 (is_all_spaces) cline[4] = 'o' (111)
 (is_all_spaces) cline[5] = 't' (116)
 (is_all_spaces) cline[6] = 'a' (97)
 (is_all_spaces) cline[7] = 'l' (108)
 (is_all_spaces) cline[8] = ' ' (32)
 (is_all_spaces) cline[9] = '=' (61)
 (is_all_spaces) cline[10] = ' ' (32)
 (is_all_spaces) cline[11] = '1' (49)
 (is_all_spaces) cline[12] = '2' (50)
 (is_all_spaces) cline[13] = '7' (55)
 (is_all_spaces) cline[14] = '0' (48)
 (is_all_spaces) cline[15] = '.' (46)
 (is_all_spaces) cline[16] = '0' (48)
 (is_all_spaces) cline[17] = '3' (51)
 (is_all_spaces) cline[18] = '3' (51)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'if total = 1270.033'
***********************
**if total = 1270.033**
***********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'if total = 1270.033'
 (check_literal) check_literal:After drop space:'REM' idx=0 'if total = 1270.033'
 (check_literal)   'R' != 'i'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'if total = 1270.033'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'if total = 1270.033'
 (check_literal)   'R' != 'i'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'if total = 1270.033'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'if total = 1270.033'
 (check_literal)   'R' != 'i'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'if total = 1270.033'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'if total = 1270.033'
 (check_literal)   'R' != 'i'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'if total = 1270.033'

   (check_operator) 'if total = 1270.033' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'if total = 1270.033':
   (check_vname) check_vname ret1 ' total = 1270.033':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' total = 1270.033'

   (check_literal) check_literal:lit='(' idx=2 ' total = 1270.033'
   (check_literal) check_literal:After drop space:'(' idx=2 ' total = 1270.033'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=2 ' total = 1270.033'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=3 'total = 1270.033'
 (check_literal)   '=' != 't'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'if total = 1270.033'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'if total = 1270.033'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'if total = 1270.033'
  (check_literal)   'L' != 'i'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'if total = 1270.033'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'if total = 1270.033'
  (check_literal)   'G' != 'i'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'if total = 1270.033'
   (check_textlabel) 'if' is a text label chstr:'f'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'if' Type:f

   (check_literal) check_literal:lit='::' idx=2 ' total = 1270.033'
   (check_literal) check_literal:After drop space:'::' idx=2 ' total = 1270.033'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'if total = 1270.033'
   (check_textlabel) 'if' is a text label chstr:'f'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'if' Type:f
  (check_proc_call) 'if' is text label

   (check_literal) check_literal:lit=':' idx=2 ' total = 1270.033'
   (check_literal) check_literal:After drop space:':' idx=2 ' total = 1270.033'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'if total = 1270.033'

   (check_literal) check_literal:lit=' INPUT' idx=0 'if total = 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'if total = 1270.033'
   (check_literal)   'N' != 'f'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'if total = 1270.033'

   (check_literal) check_literal:lit=' PRINT' idx=0 'if total = 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'if total = 1270.033'
   (check_literal)   'P' != 'i'
   (check_literal) check_literal: ret0
  (check_print) check_print:ret0

  (check_print) check_print: 'if total = 1270.033'

   (check_literal) check_literal:lit=' LPRINT' idx=0 'if total = 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LPRINT' idx=0 'if total = 1270.033'
   (check_literal)   'L' != 'i'
   (check_literal) check_literal: ret0
  (check_print) check_print:ret0

  (check_return) check_return: 'if total = 1270.033'

   (check_literal) check_literal:lit=' RETURN' idx=0 'if total = 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'RETURN' idx=0 'if total = 1270.033'
   (check_literal)   'R' != 'i'
   (check_literal) check_literal: ret0
  (check_return) check_return:ret0

  (check_use) 'if total = 1270.033'

   (check_literal) check_literal:lit=' USE' idx=0 'if total = 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'USE' idx=0 'if total = 1270.033'
   (check_literal)   'U' != 'i'
   (check_literal) check_literal: ret0
  (check_use) ret0

  (check_onerr) check_onerr: 'if total = 1270.033'

   (check_literal) check_literal:lit=' ONERR' idx=0 'if total = 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'ONERR' idx=0 'if total = 1270.033'
   (check_literal)   'O' != 'i'
   (check_literal) check_literal: ret0
  (check_onerr) check_onerr:ret0

  (check_if) 'if total = 1270.033'

   (check_literal) check_literal:lit=' IF' idx=0 'if total = 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'IF' idx=0 'if total = 1270.033'
   (check_literal) check_literal:After while(): total = 1270.033
   (check_literal) ret1 Match. ' IF' == 'if total = 1270.033'
  (check_if) ret1
 (scan_line) scan_line:check_if: 

  (scan_if) Entry 'if total = 1270.033'

   (check_literal) check_literal:lit=' IF' idx=0 'if total = 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'IF' idx=0 'if total = 1270.033'
   (check_literal) check_literal:After while(): total = 1270.033
   (check_literal) ret1 Match. ' IF' == 'if total = 1270.033'

   (scan_expression) ' total = 1270.033' igncomma:1

    (check_eitem) check_eitem: 'total = 1270.033'

     (check_function)  'total = 1270.033'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=3 'total = 1270.033'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=3 'total = 1270.033'
      (check_literal)   '%' != 't'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=3 'total = 1270.033'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=3 'total = 1270.033'
      (check_literal)   '"' != 't'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'' float:0.000000e+00
       (check_float) check_float: ret0

       (check_integer) check_integer: 'total = 1270.033'
       (check_integer) check_integer:ret0

       (check_hex) check_hex: 'total = 1270.033'
       (check_hex) check_hex:ret0 not '$'
      (check_number) check_number: ret0

      (check_proc_call) check_proc_call:

       (check_textlabel) 'total = 1270.033'
       (check_textlabel) 'total' is a text label chstr:'l'
       (check_textlabel) Exit char: 
       (check_textlabel) check_textlabel:ret1 Name:'total' Type:f
      (check_proc_call) 'total' is text label

       (check_literal) check_literal:lit=':' idx=8 ' = 1270.033'
       (check_literal) check_literal:After drop space:':' idx=8 ' = 1270.033'
       (check_literal)   ':' != ' '
       (check_literal) check_literal: ret0
      (check_proc_call) check_proc_call:ret0

      (check_variable) 'total = 1270.033'

       (check_operator) 'total = 1270.033' igncomma:1
       (check_operator) ret0:is comma: 32767

       (check_vname) check_vname 'total = 1270.033':
       (check_vname) check_vname ret1 ' = 1270.033':
      (check_variable) Name: ''
      (check_variable) check_variable: Ary test ' = 1270.033'

       (check_literal) check_literal:lit='(' idx=8 ' = 1270.033'
       (check_literal) check_literal:After drop space:'(' idx=8 ' = 1270.033'
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) ret1
   (check_eitem) ret1

   (scan_eitem) scan_eitem:

    (check_function)  'total = 1270.033'
    (check_function) ret0

    (check_atom) check_atom:
    (check_atom) check_atom:Checking for character constant

     (check_literal) check_literal:lit=' %' idx=3 'total = 1270.033'
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=3 'total = 1270.033'
     (check_literal)   '%' != 't'
     (check_literal) check_literal: ret0
    (check_atom) check_atom:Checking for string

     (check_literal) check_literal:lit=' "' idx=3 'total = 1270.033'
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=3 'total = 1270.033'
     (check_literal)   '"' != 't'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) Fltval:'' float:0.000000e+00
      (check_float) check_float: ret0

      (check_integer) check_integer: 'total = 1270.033'
      (check_integer) check_integer:ret0

      (check_hex) check_hex: 'total = 1270.033'
      (check_hex) check_hex:ret0 not '$'
     (check_number) check_number: ret0

     (check_proc_call) check_proc_call:

      (check_textlabel) 'total = 1270.033'
      (check_textlabel) 'total' is a text label chstr:'l'
      (check_textlabel) Exit char: 
      (check_textlabel) check_textlabel:ret1 Name:'total' Type:f
     (check_proc_call) 'total' is text label

      (check_literal) check_literal:lit=':' idx=8 ' = 1270.033'
      (check_literal) check_literal:After drop space:':' idx=8 ' = 1270.033'
      (check_literal)   ':' != ' '
      (check_literal) check_literal: ret0
     (check_proc_call) check_proc_call:ret0

     (check_variable) 'total = 1270.033'

      (check_operator) 'total = 1270.033' igncomma:1
      (check_operator) ret0:is comma: 32767

      (check_vname) check_vname 'total = 1270.033':
      (check_vname) check_vname ret1 ' = 1270.033':
     (check_variable) Name: ''
     (check_variable) check_variable: Ary test ' = 1270.033'

      (check_literal) check_literal:lit='(' idx=8 ' = 1270.033'
      (check_literal) check_literal:After drop space:'(' idx=8 ' = 1270.033'
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=3 'total = 1270.033'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=3 'total = 1270.033'
    (check_literal)   '%' != 't'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=3 'total = 1270.033'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=3 'total = 1270.033'
    (check_literal)   '"' != 't'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'total = 1270.033'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'total = 1270.033'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'total = 1270.033'
     (check_textlabel) 'total' is a text label chstr:'l'
     (check_textlabel) Exit char: 
     (check_textlabel) check_textlabel:ret1 Name:'total' Type:f
    (check_proc_call) 'total' is text label

     (check_literal) check_literal:lit=':' idx=8 ' = 1270.033'
     (check_literal) check_literal:After drop space:':' idx=8 ' = 1270.033'
     (check_literal)   ':' != ' '
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'total = 1270.033'

     (check_operator) 'total = 1270.033' igncomma:1
     (check_operator) ret0:is comma: 32767

     (check_vname) check_vname 'total = 1270.033':
     (check_vname) check_vname ret1 ' = 1270.033':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ' = 1270.033'

     (check_literal) check_literal:lit='(' idx=8 ' = 1270.033'
     (check_literal) check_literal:After drop space:'(' idx=8 ' = 1270.033'
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (scan_variable) 'total = 1270.033' ref_ndeclare:1

    (scan_vname) scan_vname: 'total = 1270.033'
    (scan_vname) scan_vname: ret1 'total'
   (scan_variable) scan_variable: ' = 1270.033' vname='TOTAL'
   (token_is_other_keyword) 
   (token_is_other_keyword) 'TOTAL' is not other keyword
   (scan_variable) Array test ' = 1270.033'

    (check_literal) check_literal:lit='(' idx=8 ' = 1270.033'
    (check_literal) check_literal:After drop space:'(' idx=8 ' = 1270.033'
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (scan_variable) scan_variable:ret1 vname='TOTAL' Float
  (process_token)    Frst:1 T:'TOTAL' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:'TOTAL'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:TOTAL is not function
token_is_variable: tok:'TOTAL'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:TOTAL is not function
 (init_get_name) 
init_get_name:'TOTAL'
 (init_get_name) 
init_get_name:'TOTAL'
 (get_name) 
get_name:gn:'TOTAL'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f TOTAL
 (add_var_info) Name:TOTAL Idx:-1
 (add_var_info) Already present
 (add_var_info)   reference so OK
 (scan_variable) ret1
VAR: '             TOTAL'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:7FFF
(scan_atom) ret1
(scan_expression) ' = 1270.033' Before while igncomma:1

 (check_operator) '= 1270.033' igncomma:1
 (check_operator) ret1:is comma: 0

 (check_operator) '= 1270.033' igncomma:1
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: ' = 1270.033'
 (scan_operator) scan_operator: ret1 ' 1270.033' nb:0
(process_token)    Frst:0 T:'=' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'=' is operator
(process_token) 
Token is operator o1 name:= o2 name:
(process_token) 
opr1:2 opr2:100
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'='
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: = type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) '1270.033' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) '1270.033' Before scan_eitem igncomma:1

 (scan_eitem) scan_eitem:

  (check_function)  '1270.033'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=10 ' 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=11 '1270.033'
   (check_literal)   '%' != '1'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=10 ' 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=11 '1270.033'
   (check_literal)   '"' != '1'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'1270.033' float:1.270033e+03
    (check_float) check_float: ret1
   (check_number) check_number: ret1
  (check_atom) ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=10 ' 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=11 '1270.033'
   (check_literal)   '%' != '1'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=10 ' 1270.033'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=11 '1270.033'
   (check_literal)   '"' != '1'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'1270.033' float:1.270033e+03
    (check_float) check_float: ret1
   (check_number) check_number: ret1

   (scan_number) scan_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'1270.033' float:1.270033e+03
    (check_float) check_float: ret1

    (scan_float) scan_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (scan_float) Fltval:'1270.033' float:1.270033e+03
    (scan_float) scan_float: ret1
   (process_token)    Frst:0 T:'1270.033' toktype:i exptype:f bufid:'EXP_BUFF_ID_FLT'
   (operator_precedence) 
= is operator
   (process_token) Before switch, bufid:'EXP_BUFF_ID_FLT'
modify_expression_type:Inittype:f Intype:f Outtype:f
(    output_float) [f,()] f 1270.033
   (scan_atom) ret1
  (scan_expression) n commas now:0

   (check_literal) check_literal:lit=' %' idx=19 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=19 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_operator) '' igncomma:1
   (check_operator) ret0:is comma: 0
  (scan_expression) ret1 '' commas:0
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop '=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped:= f
 (output_operator) [f,()] f =
(       output_if) [f,()] i IF
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=19 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=19 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit

  (scan_line) cline:''
  (pull_next_line) Processing expression just parsed
  (finalise_expression) Finalise expression Buf i:4 buf2 i:0
  (op_stack_finalise) Finalise stack
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1270.033' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_IF                 L:2     ty:i qcty:U 'IF' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

  (process_syntax_tree) Pass:2
  (process_syntax_tree) *********Processing :TOTAL   *************
  (type_check_stack_push)  type_check_stack_push: 'TOTAL'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
  (process_syntax_tree) *********Processing :1270.033   *************
  (type_check_stack_push)  type_check_stack_push: '1270.033'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (2)

  (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
  (type_check_stack_print)  N002: '1270.033' type:1 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (2)
  (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
  (type_check_stack_display) 001: '1270.033' type:f (1), %:0
  (process_syntax_tree) *********Processing :=   *************
  (process_syntax_tree) BUFF_ID_OPERATOR
  (process_syntax_tree) Found operator = %conv:0
  (type_check_stack_pop)   type_check_stack_pop: '1270.033'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_pop)   type_check_stack_pop: 'TOTAL'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (process_syntax_tree) op1 type:f op2 type:f %conv:0
  (process_syntax_tree) Mutable type (1270.033) f f
  (process_syntax_tree) Same type
  (process_syntax_tree) (A) Forced type to f
  (type_check_stack_push)  type_check_stack_push: '000'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N003: '000' type:0 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '000' type:i (0), %:0
  (process_syntax_tree) *********Processing :IF   *************
  (process_syntax_tree) 0 args
  (type_check_stack_pop)   type_check_stack_pop: '000'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:2
  (typecheck_expression)  *** BE:TOTAL    **********
  (type_check_stack_push)  type_check_stack_push: 'TOTAL'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
  (typecheck_expression)  *** BE:1270.033    **********
  (type_check_stack_push)  type_check_stack_push: '1270.033'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (2)

  (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
  (type_check_stack_print)  N002: '1270.033' type:1 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (2)
  (type_check_stack_display) 000: 'TOTAL' type:f (1), %:0
  (type_check_stack_display) 001: '1270.033' type:f (1), %:0
  (typecheck_expression)  *** BE:=    **********
  (typecheck_expression) BUFF_ID_OPERATOR
  (typecheck_expression) Found operator =
  (type_check_stack_pop)   type_check_stack_pop: '1270.033'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: 'TOTAL' type:1 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_pop)   type_check_stack_pop: 'TOTAL'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (typecheck_expression) op1 type:f op2 type:f
  (typecheck_expression) Mutable type (=) f f
  (typecheck_expression) Same type
  (typecheck_expression) (A) Forced type to f
  (type_check_stack_push)  type_check_stack_push: '000'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N003: '000' type:0 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '000' type:i (0), %:0
  (typecheck_expression)  *** BE:IF    **********
  (typecheck_expression) 0 args
  (type_check_stack_pop)   type_check_stack_pop: '000'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1270.033' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:i qcty:f '=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_IF                 L:2     ty:i qcty:U 'IF' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'TOTAL' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '1270.033' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N003       Read EXP_BUFF_ID_OPERATOR                   ty:i qcty:f '=' npar:0 nidx:0 trapped:0 %:0  2: 2 1  nb 0:()
N004       Read EXP_BUFF_ID_IF                 L:2     ty:i qcty:U 'IF' npar:0 nidx:0 trapped:0 %:0  2: 3 2  nb 0:()

  (process_expression_types) 
==INFIX==

  (infix_from_rpn) (TOTAL)
Var: TOTAL Float NumIdx:0
infix_stack_push: 'TOTAL'
  (infix_from_rpn) (1270.033)
infix_stack_push: '1270.033'
  (infix_from_rpn) (=)
infix_stack_pop: '1270.033'
infix_stack_pop: 'TOTAL'
infix_stack_push: '(TOTAL = 1270.033)'
  (infix_from_rpn) (IF)
infix_stack_pop: '(TOTAL = 1270.033)'
IF
infix_stack_push: 'IF (TOTAL = 1270.033)'
Done

infix_stack_pop: 'IF (TOTAL = 1270.033)'
Infix stack result IF (TOTAL = 1270.033)
  (infix_from_rpn) exit  'IF (TOTAL = 1270.033)'
  (process_expression_types) ==F (TOTAL = 1270.033)==
  (process_expression_types) 


  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:4 qcode_idx:022F
  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) QC: i:0
  (add_simple_qcode) 'TOTAL'
  (add_simple_qcode) Op type:f op access:Read qcode_type:U
  (qcode_check_trapped) TOTAL: Trapped:0
  (set_qcode_header_byte_at) idx:022F len:1 val:01
  (set_qcode_header_byte_at) idx:0230 len:1 val:FF
  (set_qcode_header_byte_at) idx:0231 len:1 val:F6
  (output_qcode_for_line) QC: i:1
  (set_qcode_header_byte_at) idx:0232 len:1 val:23
  (convert_to_compact_float) INPUT:Idx:563 fltstr:'1270.033'
  (convert_to_compact_float) No 'E' found
  (convert_to_compact_float) No 'E' found
  (convert_to_compact_float) No 'E' found
  (convert_to_compact_float) No 'E' found
  (convert_to_compact_float) No 'E' found
  (convert_to_compact_float) No 'E' found
  (convert_to_compact_float) No 'E' found
  (convert_to_compact_float) No 'E' found
  (convert_to_compact_float) Exponent:0
  (convert_to_compact_float) Idx:563 fltstr:'1270.033'
  (convert_to_compact_float) Sign:0 start:0
  (convert_to_compact_float) Normalising:'1270.033'
  (convert_to_compact_float) Need to make smaller
  (convert_to_compact_float) normalised='1270033'
  (convert_to_compact_float) Drop trailing zeros
  (convert_to_compact_float) normalised='1270033'
  (convert_to_compact_float) After adding zero back for odd number of digits: normalised='12700330'
  (set_qcode_header_byte_at) idx:0233 len:1 val:05
  (convert_to_compact_float) 30
  (set_qcode_header_byte_at) idx:0234 len:1 val:30
  (convert_to_compact_float) 03
  (set_qcode_header_byte_at) idx:0235 len:1 val:03
  (convert_to_compact_float) 70
  (set_qcode_header_byte_at) idx:0236 len:1 val:70
  (convert_to_compact_float) 12
  (set_qcode_header_byte_at) idx:0237 len:1 val:12
  (set_qcode_header_byte_at) idx:0238 len:1 val:03
  (convert_to_compact_float) RESULT: Input:'1270.033' Norm mant:'12700330' Sign:0 Exponent:3
  (output_qcode_for_line) QC: i:2
  (add_simple_qcode) '='
  (add_simple_qcode) Op type:i op access:Read qcode_type:f
  (add_simple_qcode) Type forced to qcode_type
  (qcode_check_trapped) =: Trapped:0
  (set_qcode_header_byte_at) idx:0239 len:1 val:3B
  (output_qcode_for_line) QC: i:3
  (set_qcode_header_byte_at) idx:023A len:1 val:7E
  (set_qcode_header_byte_at) idx:023B len:1 val:00
  (set_qcode_header_byte_at) idx:023C len:1 val:00
  (finalise_expression) Finalise expression done.
if total = 1270.033
========================================================
(output_expression_start)
  (drop_colon) Entry

   (check_literal) check_literal:lit=' :' idx=19 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:':' idx=19 ''
   (check_literal) check_literal  ret0 Empty test string
  (drop_colon) Exit
  (pull_next_line) Checking for existing data in cline. cline_i=19 strlen:0 
  (pull_next_line) Reading line
  (pull_next_line) ------------------------------
  (is_all_spaces) cline[0] = 'p' (112)
  (is_all_spaces) cline[1] = 'r' (114)
  (is_all_spaces) cline[2] = 'i' (105)
  (is_all_spaces) cline[3] = 'n' (110)
  (is_all_spaces) cline[4] = 't' (116)
  (is_all_spaces) cline[5] = ' ' (32)
  (is_all_spaces) cline[6] = '"' (34)
  (is_all_spaces) cline[7] = 'P' (80)
  (is_all_spaces) cline[8] = 'A' (65)
  (is_all_spaces) cline[9] = 'S' (83)
  (is_all_spaces) cline[10] = 'S' (83)
  (is_all_spaces) cline[11] = '"' (34)
  (is_all_spaces) Is not all spaces
  (pull_next_line) Got a line: 'print "PASS"'
****************
**print "PASS"**
****************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "PASS"'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "PASS"'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "PASS"'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "PASS"'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "PASS"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "PASS"'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "PASS"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "PASS"'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "PASS"'

   (check_operator) 'print "PASS"' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "PASS"':
   (check_vname) check_vname ret1 ' "PASS"':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "PASS"'

   (check_literal) check_literal:lit='(' idx=5 ' "PASS"'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "PASS"'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "PASS"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"PASS"'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "PASS"'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "PASS"'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "PASS"'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "PASS"'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "PASS"'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "PASS"'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "PASS"'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "PASS"'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "PASS"'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "PASS"'
   (check_literal) check_literal:After drop space:':' idx=5 ' "PASS"'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "PASS"'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "PASS"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "PASS"'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "PASS"'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "PASS"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "PASS"'
   (check_literal) check_literal:After while(): "PASS"
   (check_literal) ret1 Match. ' PRINT' == 'print "PASS"'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "PASS"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "PASS"'
   (check_literal) check_literal:After while(): "PASS"
   (check_literal) ret1 Match. ' PRINT' == 'print "PASS"'

   (check_expression) ' "PASS"'

    (check_eitem) check_eitem: '"PASS"'

     (check_function)  '"PASS"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"PASS"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"PASS"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"PASS"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"PASS"'
      (check_literal) check_literal:After while():PASS"
      (check_literal) ret1 Match. ' "' == '"PASS"'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 '' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "PASS"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "PASS"'
   (check_literal) check_literal:After while(): "PASS"
   (check_literal) ret1 Match. ' PRINT' == 'print "PASS"'
  (scan_print) Before while

   (check_expression) ' "PASS"'

    (check_eitem) check_eitem: '"PASS"'

     (check_function)  '"PASS"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"PASS"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"PASS"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"PASS"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"PASS"'
      (check_literal) check_literal:After while():PASS"
      (check_literal) ret1 Match. ' "' == '"PASS"'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 '' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "PASS"' igncomma:1

    (check_eitem) check_eitem: '"PASS"'

     (check_function)  '"PASS"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"PASS"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"PASS"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"PASS"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"PASS"'
      (check_literal) check_literal:After while():PASS"
      (check_literal) ret1 Match. ' "' == '"PASS"'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"PASS"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"PASS"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"PASS"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"PASS"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"PASS"'
      (check_literal) check_literal:After while():PASS"
      (check_literal) ret1 Match. ' "' == '"PASS"'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"PASS"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"PASS"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"PASS"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"PASS"'
      (check_literal) check_literal:After while():PASS"
      (check_literal) ret1 Match. ' "' == '"PASS"'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"PASS"'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"PASS"'
       (check_literal) check_literal:After while():PASS"
       (check_literal) ret1 Match. ' "' == '"PASS"'
      (scan_string)   (in if) 'PASS"'
      (scan_string)   (in wh) 'PASS"'
      (scan_string)   (in wh) 'ASS"'
      (scan_string)   (in wh) 'ASS"'
      (scan_string)   (in wh) 'SS"'
      (scan_string)   (in wh) 'SS"'
      (scan_string)   (in wh) 'S"'
      (scan_string)   (in wh) 'S"'
      (scan_string)   (in wh) '"'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"PASS"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"PASS"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"PASS" is not function
token_is_variable: tok:'"PASS"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"PASS" is not function
(   output_string) [U,()] s "PASS"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) '' Before while igncomma:1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 '' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=12 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) After scan expression II

   (check_literal) check_literal:lit=' ;' idx=12 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=12 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) Checking if delimiter was present
  (scan_print) No delimiter present
  (finalise_expression) Finalise expression Buf i:2 buf2 i:4
  (op_stack_finalise) Finalise stack
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"PASS"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_syntax_tree) Pass:2
  (process_syntax_tree) *********Processing :"PASS"   *************
  (type_check_stack_push)  type_check_stack_push: '"PASS"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: '"PASS"' type:2 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '"PASS"' type:s (2), %:0
  (process_syntax_tree) *********Processing :PRINT   *************
  (process_syntax_tree) PRINT type adjust
  (type_check_stack_pop)   type_check_stack_pop: '"PASS"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:2
  (typecheck_expression)  *** BE:"PASS"    **********
  (type_check_stack_push)  type_check_stack_push: '"PASS"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: '"PASS"' type:2 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '"PASS"' type:s (2), %:0
  (typecheck_expression)  *** BE:PRINT    **********
  (typecheck_expression) PRINT type adjust
  (type_check_stack_pop)   type_check_stack_pop: '"PASS"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"PASS"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"PASS"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_expression_types) 
==INFIX==

  (infix_from_rpn) ("PASS")
infix_stack_push: '"PASS"'
  (infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"PASS"'
infix_stack_push: 'PRINT("PASS")'
Done

infix_stack_pop: 'PRINT("PASS")'
Infix stack result PRINT("PASS")
  (infix_from_rpn) exit  'PRINT("PASS")'
  (process_expression_types) ==RINT("PASS")==
  (process_expression_types) 


  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:023D
  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) QC: i:0
  (output_qcode_for_line) QC:0 String Literal '"PASS"' EXP_BUFF_ID_STR
  (set_qcode_header_byte_at) idx:023D len:1 val:24
  (set_qcode_header_byte_at) idx:023E len:1 val:04
  (set_qcode_header_byte_at) idx:023F len:1 val:50
  (set_qcode_header_byte_at) idx:0240 len:1 val:41
  (set_qcode_header_byte_at) idx:0241 len:1 val:53
  (set_qcode_header_byte_at) idx:0242 len:1 val:53
  (output_qcode_for_line) QC: i:1
  (output_qcode_for_line) QC:PRINT
  (set_qcode_header_byte_at) idx:0243 len:1 val:71
  (finalise_expression) Finalise expression done.
  (process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (1)

  (op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
  (op_stack_print) ------------------

  (finalise_expression) Finalise expression Buf i:0 buf2 i:2
  (op_stack_finalise) Finalise stack
  (op_stack_pop) Pop 'PRINT' type:U 
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (0)

  (op_stack_print) ------------------

  (op_stack_finalise) Popped:PRINT U
  (output_operator) [U,()] U PRINT
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_syntax_tree) Pass:2
  (process_syntax_tree) *********Processing :PRINT   *************
default buf_id
  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:2
  (typecheck_expression)  *** BE:PRINT    **********
default buf_id
  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_expression_types) 
==INFIX==

  (infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
  (infix_from_rpn) exit  '<nl>'
  (process_expression_types) ==nl>==
  (process_expression_types) 


  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:0244
  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) QC: i:0
  (output_qcode_for_line) QC:PRINT
  (set_qcode_header_byte_at) idx:0244 len:1 val:73
  (finalise_expression) Finalise expression done.

   (check_expression) ''

    (check_eitem) check_eitem: ''

     (check_function)  ''
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=12 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=12 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=12 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=12 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'' float:0.000000e+00
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0

       (check_hex) check_hex: ''
       (check_hex) check_hex:ret0 not '$'
      (check_number) check_number: ret0

      (check_proc_call) check_proc_call:

       (check_textlabel) ''
       (check_textlabel) '' is a text label chstr:'@'
       (check_textlabel) Exit char:
       (check_textlabel) check_textlabel:ret1 Name:'' Type:f
      (check_proc_call) '' is text label

       (check_literal) check_literal:lit=':' idx=12 ''
       (check_literal) check_literal:After drop space:':' idx=12 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_proc_call) check_proc_call:ret0

      (check_variable) ''

       (check_operator) '' igncomma:1
       (check_operator) ret0:is comma: 32767

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret0

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=12 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=12 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) ret0: No '('

     (check_addr_name) check_addr_name: ''

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_addr_name) check_addr_name: ret0
    (check_eitem) check_eitem:ret0

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret0 ''
  (scan_print) Check for trailing delimiter

   (check_literal) check_literal:lit=' ;' idx=12 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=12 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' ,' idx=12 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) scan_print:ret1 Expression 
 (scan_line) ret1 print
(scan_if) Line scanned ok
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=12 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=12 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:0245
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print "PASS"
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=12 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=12 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=12 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'e' (101)
 (is_all_spaces) cline[1] = 'l' (108)
 (is_all_spaces) cline[2] = 's' (115)
 (is_all_spaces) cline[3] = 'e' (101)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'else'
********
**else**
********

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'else'
 (check_literal) check_literal:After drop space:'REM' idx=0 'else'
 (check_literal)   'R' != 'e'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'else'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'else'
 (check_literal)   'R' != 'e'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'else'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'else'
 (check_literal)   'R' != 'e'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'else'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'else'
 (check_literal)   'R' != 'e'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'else'

   (check_operator) 'else' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'else':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=4 ''
   (check_literal) check_literal:After drop space:'(' idx=4 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=4 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=4 ''
 (check_literal) check_literal  ret0 Empty test string
(check_assignment) check_assignment:ret0

 (check_declare) 'else'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'else'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'else'
  (check_literal)   'L' != 'e'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'else'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'else'
  (check_literal)   'G' != 'e'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'else'
   (check_textlabel) 'else' is a text label chstr:'e'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'else' Type:f

   (check_literal) check_literal:lit='::' idx=4 ''
   (check_literal) check_literal:After drop space:'::' idx=4 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'else'
   (check_textlabel) 'else' is a text label chstr:'e'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'else' Type:f
  (check_proc_call) 'else' is text label

   (check_literal) check_literal:lit=':' idx=4 ''
   (check_literal) check_literal:After drop space:':' idx=4 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_input) 'else'

   (check_literal) check_literal:lit=' INPUT' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'else'
   (check_literal)   'I' != 'e'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'else'

   (check_literal) check_literal:lit=' PRINT' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'else'
   (check_literal)   'P' != 'e'
   (check_literal) check_literal: ret0
  (check_print) check_print:ret0

  (check_print) check_print: 'else'

   (check_literal) check_literal:lit=' LPRINT' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LPRINT' idx=0 'else'
   (check_literal)   'L' != 'e'
   (check_literal) check_literal: ret0
  (check_print) check_print:ret0

  (check_return) check_return: 'else'

   (check_literal) check_literal:lit=' RETURN' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'RETURN' idx=0 'else'
   (check_literal)   'R' != 'e'
   (check_literal) check_literal: ret0
  (check_return) check_return:ret0

  (check_use) 'else'

   (check_literal) check_literal:lit=' USE' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'USE' idx=0 'else'
   (check_literal)   'U' != 'e'
   (check_literal) check_literal: ret0
  (check_use) ret0

  (check_onerr) check_onerr: 'else'

   (check_literal) check_literal:lit=' ONERR' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'ONERR' idx=0 'else'
   (check_literal)   'O' != 'e'
   (check_literal) check_literal: ret0
  (check_onerr) check_onerr:ret0

  (check_if) 'else'

   (check_literal) check_literal:lit=' IF' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'IF' idx=0 'else'
   (check_literal)   'I' != 'e'
   (check_literal) check_literal: ret0
  (check_if) ret0

  (check_do) 'else'

   (check_literal) check_literal:lit=' DO' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'DO' idx=0 'else'
   (check_literal)   'D' != 'e'
   (check_literal) check_literal: ret0
  (check_do) ret0

  (check_literal) check_literal:lit=' OFF' idx=0 'else'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'OFF' idx=0 'else'
  (check_literal)   'O' != 'e'
  (check_literal) check_literal: ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function)  'else'
  (check_function) ret0

  (check_literal) check_literal:lit=' DO' idx=0 'else'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'DO' idx=0 'else'
  (check_literal)   'D' != 'e'
  (check_literal) check_literal: ret0

  (check_createopen) Create:1 Open:0

   (check_literal) check_literal:lit=' CREATE' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'CREATE' idx=0 'else'
   (check_literal)   'C' != 'e'
   (check_literal) check_literal: ret0
  (check_createopen) ret0

  (check_createopen) Create:0 Open:1

   (check_literal) check_literal:lit=' OPEN' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'OPEN' idx=0 'else'
   (check_literal)   'O' != 'e'
   (check_literal) check_literal: ret0
  (check_createopen) ret0

  (check_while) 'else'

   (check_literal) check_literal:lit=' WHILE' idx=0 'else'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'WHILE' idx=0 'else'
   (check_literal)   'W' != 'e'
   (check_literal) check_literal: ret0
  (check_while) ret0

  (check_literal) check_literal:lit=' GOTO' idx=0 'else'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GOTO' idx=0 'else'
  (check_literal)   'G' != 'e'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' TRAP' idx=0 'else'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'TRAP' idx=0 'else'
  (check_literal)   'T' != 'e'
  (check_literal) check_literal: ret0
 (scan_line) ret0
(scan_if) Checking for conditionals

 (check_literal) check_literal:lit=' CONTINUE' idx=0 'else'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'CONTINUE' idx=0 'else'
 (check_literal)   'C' != 'e'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' BREAK' idx=0 'else'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'BREAK' idx=0 'else'
 (check_literal)   'B' != 'e'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ENDIF' idx=0 'else'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ENDIF' idx=0 'else'
 (check_literal)   'N' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSEIF' idx=0 'else'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSEIF' idx=0 'else'
 (check_literal) check_literal:After while():
 (check_literal) ret0 Full string not seen

 (check_literal) check_literal:lit=' ELSE' idx=0 'else'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSE' idx=0 'else'
 (check_literal) check_literal:After while():
 (check_literal) ret1 Match. ' ELSE' == 'else'
(scan_if) ELSE found in if
(output_generic) [U,()] U ELSE exp_type:U
(scan_if) Done ELSE
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=4 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=4 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:1 buf2 i:0
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_ELSE               L:2     ty:U qcty:U 'ELSE' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing :ELSE   *************
default buf_id
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE:ELSE    **********
default buf_id
 (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_ELSE               L:2     ty:U qcty:U 'ELSE' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_ELSE               L:2     ty:U qcty:U 'ELSE' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (ELSE)
 (infix_from_rpn) ELSE
infix_stack_push: 'ELSE'
 (infix_from_rpn) endif done
Done

infix_stack_pop: 'ELSE'
Infix stack result ELSE
 (infix_from_rpn) exit  'ELSE'
 (process_expression_types) ==LSE==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:0245
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (set_qcode_header_byte_at) idx:0245 len:1 val:51
 (set_qcode_header_byte_at) idx:0246 len:1 val:00
 (set_qcode_header_byte_at) idx:0247 len:1 val:00
 (finalise_expression) Finalise expression done.
else
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=4 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=4 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=4 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'F' (70)
 (is_all_spaces) cline[8] = 'A' (65)
 (is_all_spaces) cline[9] = 'I' (73)
 (is_all_spaces) cline[10] = 'L' (76)
 (is_all_spaces) cline[11] = '"' (34)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "FAIL"'
****************
**print "FAIL"**
****************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "FAIL"'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "FAIL"'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "FAIL"'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "FAIL"'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "FAIL"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "FAIL"'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "FAIL"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "FAIL"'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "FAIL"'

   (check_operator) 'print "FAIL"' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "FAIL"':
   (check_vname) check_vname ret1 ' "FAIL"':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "FAIL"'

   (check_literal) check_literal:lit='(' idx=5 ' "FAIL"'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "FAIL"'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "FAIL"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"FAIL"'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "FAIL"'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "FAIL"'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "FAIL"'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "FAIL"'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "FAIL"'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "FAIL"'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "FAIL"'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "FAIL"'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "FAIL"'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "FAIL"'
   (check_literal) check_literal:After drop space:':' idx=5 ' "FAIL"'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "FAIL"'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "FAIL"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "FAIL"'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "FAIL"'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "FAIL"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "FAIL"'
   (check_literal) check_literal:After while(): "FAIL"
   (check_literal) ret1 Match. ' PRINT' == 'print "FAIL"'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "FAIL"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "FAIL"'
   (check_literal) check_literal:After while(): "FAIL"
   (check_literal) ret1 Match. ' PRINT' == 'print "FAIL"'

   (check_expression) ' "FAIL"'

    (check_eitem) check_eitem: '"FAIL"'

     (check_function)  '"FAIL"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"FAIL"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"FAIL"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"FAIL"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"FAIL"'
      (check_literal) check_literal:After while():FAIL"
      (check_literal) ret1 Match. ' "' == '"FAIL"'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 '' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "FAIL"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "FAIL"'
   (check_literal) check_literal:After while(): "FAIL"
   (check_literal) ret1 Match. ' PRINT' == 'print "FAIL"'
  (scan_print) Before while

   (check_expression) ' "FAIL"'

    (check_eitem) check_eitem: '"FAIL"'

     (check_function)  '"FAIL"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"FAIL"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"FAIL"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"FAIL"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"FAIL"'
      (check_literal) check_literal:After while():FAIL"
      (check_literal) ret1 Match. ' "' == '"FAIL"'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 '' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "FAIL"' igncomma:1

    (check_eitem) check_eitem: '"FAIL"'

     (check_function)  '"FAIL"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"FAIL"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"FAIL"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"FAIL"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"FAIL"'
      (check_literal) check_literal:After while():FAIL"
      (check_literal) ret1 Match. ' "' == '"FAIL"'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"FAIL"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"FAIL"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"FAIL"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"FAIL"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"FAIL"'
      (check_literal) check_literal:After while():FAIL"
      (check_literal) ret1 Match. ' "' == '"FAIL"'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"FAIL"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"FAIL"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"FAIL"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"FAIL"'
      (check_literal) check_literal:After while():FAIL"
      (check_literal) ret1 Match. ' "' == '"FAIL"'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"FAIL"'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"FAIL"'
       (check_literal) check_literal:After while():FAIL"
       (check_literal) ret1 Match. ' "' == '"FAIL"'
      (scan_string)   (in if) 'FAIL"'
      (scan_string)   (in wh) 'FAIL"'
      (scan_string)   (in wh) 'AIL"'
      (scan_string)   (in wh) 'AIL"'
      (scan_string)   (in wh) 'IL"'
      (scan_string)   (in wh) 'IL"'
      (scan_string)   (in wh) 'L"'
      (scan_string)   (in wh) 'L"'
      (scan_string)   (in wh) '"'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"FAIL"' toktype:i exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"FAIL"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"FAIL" is not function
token_is_variable: tok:'"FAIL"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"FAIL" is not function
(   output_string) [U,()] s "FAIL"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) '' Before while igncomma:1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 32767
   (scan_expression) ret1 '' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=12 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) After scan expression II

   (check_literal) check_literal:lit=' ;' idx=12 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=12 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) Checking if delimiter was present
  (scan_print) No delimiter present
  (finalise_expression) Finalise expression Buf i:2 buf2 i:1
  (op_stack_finalise) Finalise stack
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"FAIL"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_syntax_tree) Pass:2
  (process_syntax_tree) *********Processing :"FAIL"   *************
  (type_check_stack_push)  type_check_stack_push: '"FAIL"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: '"FAIL"' type:2 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '"FAIL"' type:s (2), %:0
  (process_syntax_tree) *********Processing :PRINT   *************
  (process_syntax_tree) PRINT type adjust
  (type_check_stack_pop)   type_check_stack_pop: '"FAIL"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:2
  (typecheck_expression)  *** BE:"FAIL"    **********
  (type_check_stack_push)  type_check_stack_push: '"FAIL"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: '"FAIL"' type:2 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '"FAIL"' type:s (2), %:0
  (typecheck_expression)  *** BE:PRINT    **********
  (typecheck_expression) PRINT type adjust
  (type_check_stack_pop)   type_check_stack_pop: '"FAIL"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"FAIL"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"FAIL"' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_expression_types) 
==INFIX==

  (infix_from_rpn) ("FAIL")
infix_stack_push: '"FAIL"'
  (infix_from_rpn) (PRINT)
PRINT
infix_stack_pop: '"FAIL"'
infix_stack_push: 'PRINT("FAIL")'
Done

infix_stack_pop: 'PRINT("FAIL")'
Infix stack result PRINT("FAIL")
  (infix_from_rpn) exit  'PRINT("FAIL")'
  (process_expression_types) ==RINT("FAIL")==
  (process_expression_types) 


  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:0248
  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) QC: i:0
  (output_qcode_for_line) QC:0 String Literal '"FAIL"' EXP_BUFF_ID_STR
  (set_qcode_header_byte_at) idx:0248 len:1 val:24
  (set_qcode_header_byte_at) idx:0249 len:1 val:04
  (set_qcode_header_byte_at) idx:024A len:1 val:46
  (set_qcode_header_byte_at) idx:024B len:1 val:41
  (set_qcode_header_byte_at) idx:024C len:1 val:49
  (set_qcode_header_byte_at) idx:024D len:1 val:4C
  (output_qcode_for_line) QC: i:1
  (output_qcode_for_line) QC:PRINT
  (set_qcode_header_byte_at) idx:024E len:1 val:71
  (finalise_expression) Finalise expression done.
  (process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>i
 Push:'PRINT'
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (1)

  (op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
  (op_stack_print) ------------------

  (finalise_expression) Finalise expression Buf i:0 buf2 i:2
  (op_stack_finalise) Finalise stack
  (op_stack_pop) Pop 'PRINT' type:U 
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (0)

  (op_stack_print) ------------------

  (op_stack_finalise) Popped:PRINT U
  (output_operator) [U,()] U PRINT
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_syntax_tree) Pass:2
  (process_syntax_tree) *********Processing :PRINT   *************
default buf_id
  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:2
  (typecheck_expression)  *** BE:PRINT    **********
default buf_id
  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

  (process_expression_types) 
==INFIX==

  (infix_from_rpn) (PRINT)
infix_stack_push: '<nl>'
Done

infix_stack_pop: '<nl>'
Infix stack result <nl>
  (infix_from_rpn) exit  '<nl>'
  (process_expression_types) ==nl>==
  (process_expression_types) 


  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:024F
  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) QC: i:0
  (output_qcode_for_line) QC:PRINT
  (set_qcode_header_byte_at) idx:024F len:1 val:73
  (finalise_expression) Finalise expression done.

   (check_expression) ''

    (check_eitem) check_eitem: ''

     (check_function)  ''
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=12 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=12 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=12 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=12 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'' float:0.000000e+00
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0

       (check_hex) check_hex: ''
       (check_hex) check_hex:ret0 not '$'
      (check_number) check_number: ret0

      (check_proc_call) check_proc_call:

       (check_textlabel) ''
       (check_textlabel) '' is a text label chstr:'@'
       (check_textlabel) Exit char:
       (check_textlabel) check_textlabel:ret1 Name:'' Type:f
      (check_proc_call) '' is text label

       (check_literal) check_literal:lit=':' idx=12 ''
       (check_literal) check_literal:After drop space:':' idx=12 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_proc_call) check_proc_call:ret0

      (check_variable) ''

       (check_operator) '' igncomma:1
       (check_operator) ret0:is comma: 32767

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret0

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=12 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=12 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) ret0: No '('

     (check_addr_name) check_addr_name: ''

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_addr_name) check_addr_name: ret0
    (check_eitem) check_eitem:ret0

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret0 ''
  (scan_print) Check for trailing delimiter

   (check_literal) check_literal:lit=' ;' idx=12 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=12 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' ,' idx=12 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) scan_print:ret1 Expression 
 (scan_line) ret1 print
(scan_if) Line scanned ok
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=12 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=12 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 
==INFIX==

Done

Infix stack empty
 (infix_from_rpn) exit  ''
 (process_expression_types) ==nl>==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:0250
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print "FAIL"
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=12 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=12 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=12 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'e' (101)
 (is_all_spaces) cline[1] = 'n' (110)
 (is_all_spaces) cline[2] = 'd' (100)
 (is_all_spaces) cline[3] = 'i' (105)
 (is_all_spaces) cline[4] = 'f' (102)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'endif'
*********
**endif**
*********

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'endif'
 (check_literal) check_literal:After drop space:'REM' idx=0 'endif'
 (check_literal)   'R' != 'e'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'endif'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'endif'
 (check_literal)   'R' != 'e'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'endif'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'endif'
 (check_literal)   'R' != 'e'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'endif'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'endif'
 (check_literal)   'R' != 'e'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'endif'

   (check_operator) 'endif' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'endif':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=5 ''
   (check_literal) check_literal:After drop space:'(' idx=5 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=5 ''
 (check_literal) check_literal  ret0 Empty test string
(check_assignment) check_assignment:ret0

 (check_declare) 'endif'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'endif'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'endif'
  (check_literal)   'L' != 'e'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'endif'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'endif'
  (check_literal)   'G' != 'e'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'endif'
   (check_textlabel) 'endif' is a text label chstr:'f'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'endif' Type:f

   (check_literal) check_literal:lit='::' idx=5 ''
   (check_literal) check_literal:After drop space:'::' idx=5 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'endif'
   (check_textlabel) 'endif' is a text label chstr:'f'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'endif' Type:f
  (check_proc_call) 'endif' is text label

   (check_literal) check_literal:lit=':' idx=5 ''
   (check_literal) check_literal:After drop space:':' idx=5 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_input) 'endif'

   (check_literal) check_literal:lit=' INPUT' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'endif'
   (check_literal)   'I' != 'e'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'endif'

   (check_literal) check_literal:lit=' PRINT' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'endif'
   (check_literal)   'P' != 'e'
   (check_literal) check_literal: ret0
  (check_print) check_print:ret0

  (check_print) check_print: 'endif'

   (check_literal) check_literal:lit=' LPRINT' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LPRINT' idx=0 'endif'
   (check_literal)   'L' != 'e'
   (check_literal) check_literal: ret0
  (check_print) check_print:ret0

  (check_return) check_return: 'endif'

   (check_literal) check_literal:lit=' RETURN' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'RETURN' idx=0 'endif'
   (check_literal)   'R' != 'e'
   (check_literal) check_literal: ret0
  (check_return) check_return:ret0

  (check_use) 'endif'

   (check_literal) check_literal:lit=' USE' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'USE' idx=0 'endif'
   (check_literal)   'U' != 'e'
   (check_literal) check_literal: ret0
  (check_use) ret0

  (check_onerr) check_onerr: 'endif'

   (check_literal) check_literal:lit=' ONERR' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'ONERR' idx=0 'endif'
   (check_literal)   'O' != 'e'
   (check_literal) check_literal: ret0
  (check_onerr) check_onerr:ret0

  (check_if) 'endif'

   (check_literal) check_literal:lit=' IF' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'IF' idx=0 'endif'
   (check_literal)   'I' != 'e'
   (check_literal) check_literal: ret0
  (check_if) ret0

  (check_do) 'endif'

   (check_literal) check_literal:lit=' DO' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'DO' idx=0 'endif'
   (check_literal)   'D' != 'e'
   (check_literal) check_literal: ret0
  (check_do) ret0

  (check_literal) check_literal:lit=' OFF' idx=0 'endif'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'OFF' idx=0 'endif'
  (check_literal)   'O' != 'e'
  (check_literal) check_literal: ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function)  'endif'
  (check_function) ret0

  (check_literal) check_literal:lit=' DO' idx=0 'endif'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'DO' idx=0 'endif'
  (check_literal)   'D' != 'e'
  (check_literal) check_literal: ret0

  (check_createopen) Create:1 Open:0

   (check_literal) check_literal:lit=' CREATE' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'CREATE' idx=0 'endif'
   (check_literal)   'C' != 'e'
   (check_literal) check_literal: ret0
  (check_createopen) ret0

  (check_createopen) Create:0 Open:1

   (check_literal) check_literal:lit=' OPEN' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'OPEN' idx=0 'endif'
   (check_literal)   'O' != 'e'
   (check_literal) check_literal: ret0
  (check_createopen) ret0

  (check_while) 'endif'

   (check_literal) check_literal:lit=' WHILE' idx=0 'endif'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'WHILE' idx=0 'endif'
   (check_literal)   'W' != 'e'
   (check_literal) check_literal: ret0
  (check_while) ret0

  (check_literal) check_literal:lit=' GOTO' idx=0 'endif'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GOTO' idx=0 'endif'
  (check_literal)   'G' != 'e'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' TRAP' idx=0 'endif'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'TRAP' idx=0 'endif'
  (check_literal)   'T' != 'e'
  (check_literal) check_literal: ret0
 (scan_line) ret0
(scan_if) Checking for conditionals

 (check_literal) check_literal:lit=' CONTINUE' idx=0 'endif'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'CONTINUE' idx=0 'endif'
 (check_literal)   'C' != 'e'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' BREAK' idx=0 'endif'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'BREAK' idx=0 'endif'
 (check_literal)   'B' != 'e'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ENDIF' idx=0 'endif'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ENDIF' idx=0 'endif'
 (check_literal) check_literal:After while():
 (check_literal) ret1 Match. ' ENDIF' == 'endif'
(scan_if) ENDIF found in if
(process_token)    Frst:1 T:'ENDIF' toktype:i exptype:U bufid:'EXP_BUFF_ID_ENDIF'
(process_token) Before switch, bufid:'EXP_BUFF_ID_ENDIF'
(process_token) Buff id ENDIF
(output_generic) [U,()] U ENDIF exp_type:U
(scan_if) ret1
(scan_line) ret1 if
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=5 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=5 ''
 (check_literal) check_literal  ret0 Empty test string

 (scan_line) cline:''
 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:1 buf2 i:0
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_ENDIF              L:2     ty:U qcty:U 'ENDIF' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing :ENDIF   *************
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE:ENDIF    **********
 (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_ENDIF              L:2     ty:U qcty:U 'ENDIF' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

N001       Read EXP_BUFF_ID_ENDIF              L:2     ty:U qcty:U 'ENDIF' npar:0 nidx:0 trapped:0 %:0  0:  nb 0:()

 (process_expression_types) 
==INFIX==

 (infix_from_rpn) (ENDIF)
 (infix_from_rpn) ENDIF
infix_stack_push: 'ENDIF'
 (infix_from_rpn) endif done
Done

infix_stack_pop: 'ENDIF'
Infix stack result ENDIF
 (infix_from_rpn) exit  'ENDIF'
 (process_expression_types) ==NDIF==
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:0250
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (finalise_expression) Finalise expression done.
endif
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=5 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=5 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=5 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ret0: End of input file
(scan_line) ret0: pull_next_line=0
(translate_file) Scan line failed
(finalise_expression) Finalise expression Buf i:0 buf2 i:1
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
(process_syntax_tree) Pass:2
(typecheck_expression) Pass:2
(process_expression_types) 
==INFIX==

Done

Infix stack empty
(infix_from_rpn) exit  ''
(process_expression_types) ==NDIF==
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:0250
(output_qcode_for_line) ================================================================================
(finalise_expression) Finalise expression done.
(translate_file) Done
(translate_file) 
(output_qcode_suffix) Has return:0 last line return:0
(set_qcode_header_byte_at) idx:0250 len:1 val:7B
(do_cond_fixup) Conditional fixup
(do_cond_fixup) Fixing 0 EXP_BUFF_ID_IF
(set_qcode_header_byte_at) idx:023B len:1 val:00
(set_qcode_header_byte_at) idx:023C len:1 val:0D
(do_cond_fixup) Fixing 1 EXP_BUFF_ID_ELSE
(set_qcode_header_byte_at) idx:0246 len:1 val:00
(set_qcode_header_byte_at) idx:0247 len:1 val:0A
(do_cond_fixup) Fixing 2 EXP_BUFF_ID_ENDIF
(set_qcode_header_byte_at) idx:0002 len:1 val:02
(set_qcode_header_byte_at) idx:0003 len:1 val:44
(main) 

(main) 
 70 lines scanned OK
(main) 
 0 lines scanned failed
(main) 
 26 lines blank
(main) 
 12 variables
(main) 


Operator Stack
