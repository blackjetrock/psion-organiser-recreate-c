
(parser_check) NUM_BUFF_ID    :47
(parser_check) EXP_BUFF_ID_MAX:46
(parser_check) 
(nopl_trans) ********************************************************************************
(nopl_trans) **                         Pass 1                                             **
(nopl_trans) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) **                                                                            **
(translate_file) **                 TRANSLATE FILE                                             **
(translate_file) **                                                                            **
(translate_file) ********************************************************************************
(pull_next_line) Processing expression just parsed
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=0 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=0 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit
(pull_next_line) Checking for existing data in cline. cline_i=0 strlen:0 
(pull_next_line) Reading line
(pull_next_line) ------------------------------
(is_all_spaces) Is all spaces
(pull_next_line) Line was all spaces
(pull_next_line) Reading line
(pull_next_line) ------------------------------
(is_all_spaces) cline[0] = 'M' (77)
(is_all_spaces) cline[1] = 'P' (80)
(is_all_spaces) cline[2] = 'G' (71)
(is_all_spaces) cline[3] = ':' (58)
(is_all_spaces) Is not all spaces
(pull_next_line) Got a line: 'MPG:'
********
**MPG:**
********

(pull_next_line) ret1
(process_token)    Frst:1 T:'PROCDEF' toktype:s exptype:U bufid:'EXP_BUFF_ID_META'
(process_token) Before switch, bufid:'EXP_BUFF_ID_META'
(process_token) Buff id PROCDEF
(output_generic) [U,()] U PROCDEF exp_type:U

 (scan_procdef) 

  (check_textlabel) 'MPG:'
  (check_textlabel) 'MPG' is a text label chstr:'G'
  (check_textlabel) Exit char::
  (check_textlabel) check_textlabel:ret1 Name:'MPG' Type:f
 (scan_procdef) Text label:'MPG'

  (check_literal) check_literal:lit=':' idx=3 ':'
  (check_literal) check_literal:After drop space:':' idx=3 ':'
  (check_literal) check_literal:After while():
  (check_literal) ret1 Match. ':' == ':'

  (check_literal) check_literal:lit=' (' idx=4 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'(' idx=4 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_param_list) scan_param_list:ret0
(scan_procdef) ret1 Type:f
(translate_file) 
cline scanned OK
(pull_next_line) Processing expression just parsed
(finalise_expression) Finalise expression Buf i:1 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U 'PROCDEF' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PROCDEF   *************
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PROCDEF    **********
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U 'PROCDEF' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

N001       Read EXP_BUFF_ID_META                       ty:U qcty:U 'PROCDEF' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

(process_expression_types) 


(finalise_expression) Finalise expression done.
MPG:
========================================================
(output_expression_start)
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=4 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=4 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit
(pull_next_line) Checking for existing data in cline. cline_i=4 strlen:0 
(pull_next_line) Reading line
(pull_next_line) ------------------------------
(is_all_spaces) Is all spaces
(pull_next_line) Line was all spaces
(pull_next_line) Reading line
(pull_next_line) ------------------------------
(is_all_spaces) cline[0] = 'l' (108)
(is_all_spaces) cline[1] = 'o' (111)
(is_all_spaces) cline[2] = 'c' (99)
(is_all_spaces) cline[3] = 'a' (97)
(is_all_spaces) cline[4] = 'l' (108)
(is_all_spaces) cline[5] = ' ' (32)
(is_all_spaces) cline[6] = 'm' (109)
(is_all_spaces) cline[7] = ',' (44)
(is_all_spaces) cline[8] = 'l' (108)
(is_all_spaces) cline[9] = ',' (44)
(is_all_spaces) cline[10] = 'm' (109)
(is_all_spaces) cline[11] = 'p' (112)
(is_all_spaces) cline[12] = 'g' (103)
(is_all_spaces) cline[13] = ',' (44)
(is_all_spaces) cline[14] = 'g' (103)
(is_all_spaces) Is not all spaces
(pull_next_line) Got a line: 'local m,l,mpg,g'
*******************
**local m,l,mpg,g**
*******************

(pull_next_line) ret1

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
local m,l,mpg,g
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=0 'local m,l,mpg,g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=0 'local m,l,mpg,g'
  (check_literal)   ':' != 'l'
  (check_literal) check_literal: ret0
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=0 strlen:15 
 (pull_next_line) Data still in line buffer, check not all space
 (is_all_spaces) cline[0] = 'l' (108)
 (is_all_spaces) cline[1] = 'o' (111)
 (is_all_spaces) cline[2] = 'c' (99)
 (is_all_spaces) cline[3] = 'a' (97)
 (is_all_spaces) cline[4] = 'l' (108)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = 'm' (109)
 (is_all_spaces) cline[7] = ',' (44)
 (is_all_spaces) cline[8] = 'l' (108)
 (is_all_spaces) cline[9] = ',' (44)
 (is_all_spaces) cline[10] = 'm' (109)
 (is_all_spaces) cline[11] = 'p' (112)
 (is_all_spaces) cline[12] = 'g' (103)
 (is_all_spaces) cline[13] = ',' (44)
 (is_all_spaces) cline[14] = 'g' (103)
 (is_all_spaces) Is not all spaces
 (pull_next_line) ret1  Not all spaces

 (check_literal) check_literal:lit='REM' idx=0 'local m,l,mpg,g'
 (check_literal) check_literal:After drop space:'REM' idx=0 'local m,l,mpg,g'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'local m,l,mpg,g'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'local m,l,mpg,g'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'local m,l,mpg,g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'local m,l,mpg,g'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'local m,l,mpg,g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'local m,l,mpg,g'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'local m,l,mpg,g'

   (check_operator) 'local m,l,mpg,g' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'local m,l,mpg,g':
   (check_vname) check_vname ret1 ' m,l,mpg,g':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' m,l,mpg,g'

   (check_literal) check_literal:lit='(' idx=5 ' m,l,mpg,g'
   (check_literal) check_literal:After drop space:'(' idx=5 ' m,l,mpg,g'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' m,l,mpg,g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 'm,l,mpg,g'
 (check_literal)   '=' != 'm'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'local m,l,mpg,g'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'local m,l,mpg,g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local m,l,mpg,g'
  (check_literal) check_literal:After while(): m,l,mpg,g
  (check_literal) ret1 Match. ' LOCAL' == 'local m,l,mpg,g'
 (check_declare) check_declare:ret 1

  (scan_declare) scan_declare:

   (check_literal) check_literal:lit=' LOCAL' idx=0 'local m,l,mpg,g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local m,l,mpg,g'
   (check_literal) check_literal:After while(): m,l,mpg,g
   (check_literal) ret1 Match. ' LOCAL' == 'local m,l,mpg,g'

   (scan_localglobal) 'local m,l,mpg,g'

    (check_literal) check_literal:lit=' LOCAL' idx=0 'local m,l,mpg,g'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local m,l,mpg,g'
    (check_literal) check_literal:After while(): m,l,mpg,g
    (check_literal) ret1 Match. ' LOCAL' == 'local m,l,mpg,g'
   (process_token)    Frst:1 T:' LOCAL' toktype:? exptype:U bufid:'EXP_BUFF_ID_META'
   (process_token) Before switch, bufid:'EXP_BUFF_ID_META'
   (process_token) Buff id  LOCAL
   (output_generic) [U,()] U  LOCAL exp_type:U

    (check_variable) 'm,l,mpg,g'

     (check_operator) 'm,l,mpg,g' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'm,l,mpg,g':
     (check_vname) check_vname ret1 ',l,mpg,g':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ',l,mpg,g'

     (check_literal) check_literal:lit='(' idx=7 ',l,mpg,g'
     (check_literal) check_literal:After drop space:'(' idx=7 ',l,mpg,g'
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (scan_variable) ' m,l,mpg,g' ref_ndeclare:0

    (scan_vname) scan_vname: ' m,l,mpg,g'
    (scan_vname) scan_vname: ret1 'm'
   (scan_variable) scan_variable: ',l,mpg,g' vname='M'
   (token_is_other_keyword) 
   (token_is_other_keyword) 'M' is not other keyword
   (scan_variable) Array test ',l,mpg,g'

    (check_literal) check_literal:lit='(' idx=7 ',l,mpg,g'
    (check_literal) check_literal:After drop space:'(' idx=7 ',l,mpg,g'
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (scan_variable) scan_variable:ret1 vname='M' Float
  (process_token)    Frst:1 T:'M' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:'M'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:M is not function
token_is_variable: tok:'M'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:M is not function
 (init_get_name) 
init_get_name:'M'
 (init_get_name) 
init_get_name:'M'
 (get_name) 
get_name:gn:'M'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f M
 (add_var_info) Name:M Idx:-1
Variables


 (find_var_info) ******
 (find_var_info) 
Could not find var 'M'
 (find_var_info) ******
 (add_var_info) Not already present
 (scan_variable) ret1
(scan_localglobal)  LOCAL variable:'M'
VAR: '                 M'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=7 ',l,mpg,g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=7 ',l,mpg,g'
 (check_literal)   ':' != ','
 (check_literal) check_literal: ret0
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=7 ',l,mpg,g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=7 ',l,mpg,g'
 (check_literal) check_literal:After while():l,mpg,g
 (check_literal) ret1 Match. ' ,' == ',l,mpg,g'

 (scan_literal_core) scan_literal_core:lit=' ,' ',l,mpg,g'
 (scan_literal_core) scan_literal_core:After drop space:',l,mpg,g'
 (scan_literal_core) scan_literal_core:while loop:,l,mpg,g
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:? exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 'l,mpg,g'

  (check_operator) 'l,mpg,g' igncomma:1
  (check_operator) ret0:is comma: 0

  (check_vname) check_vname 'l,mpg,g':
  (check_vname) check_vname ret1 ',mpg,g':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ',mpg,g'

  (check_literal) check_literal:lit='(' idx=9 ',mpg,g'
  (check_literal) check_literal:After drop space:'(' idx=9 ',mpg,g'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) 'l,mpg,g' ref_ndeclare:0

  (scan_vname) scan_vname: 'l,mpg,g'
  (scan_vname) scan_vname: ret1 'l'
 (scan_variable) scan_variable: ',mpg,g' vname='L'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'L' is not other keyword
 (scan_variable) Array test ',mpg,g'

  (check_literal) check_literal:lit='(' idx=9 ',mpg,g'
  (check_literal) check_literal:After drop space:'(' idx=9 ',mpg,g'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='L' Float
(process_token)    Frst:0 T:'L' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'L'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:L is not function
token_is_variable: tok:'L'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:L is not function
(init_get_name) 
init_get_name:'L'
(init_get_name) 
init_get_name:'L'
(get_name) 
get_name:gn:'L'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f L
(add_var_info) Name:L Idx:-1
Variables

   0:  VAR: '                 M'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

(find_var_info) ******
(find_var_info) 
Could not find var 'L'
(find_var_info) ******
(add_var_info) Not already present
(scan_variable) ret1
(scan_localglobal)  LOCAL variable:'L'
VAR: '                 L'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=9 ',mpg,g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=9 ',mpg,g'
 (check_literal)   ':' != ','
 (check_literal) check_literal: ret0
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=9 ',mpg,g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=9 ',mpg,g'
 (check_literal) check_literal:After while():mpg,g
 (check_literal) ret1 Match. ' ,' == ',mpg,g'

 (scan_literal_core) scan_literal_core:lit=' ,' ',mpg,g'
 (scan_literal_core) scan_literal_core:After drop space:',mpg,g'
 (scan_literal_core) scan_literal_core:while loop:,mpg,g
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:? exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 'mpg,g'

  (check_operator) 'mpg,g' igncomma:1
  (check_operator) ret0:is comma: 0

  (check_vname) check_vname 'mpg,g':
  (check_vname) check_vname ret1 ',g':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ',g'

  (check_literal) check_literal:lit='(' idx=13 ',g'
  (check_literal) check_literal:After drop space:'(' idx=13 ',g'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) 'mpg,g' ref_ndeclare:0

  (scan_vname) scan_vname: 'mpg,g'
  (scan_vname) scan_vname: ret1 'mpg'
 (scan_variable) scan_variable: ',g' vname='MPG'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'MPG' is not other keyword
 (scan_variable) Array test ',g'

  (check_literal) check_literal:lit='(' idx=13 ',g'
  (check_literal) check_literal:After drop space:'(' idx=13 ',g'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='MPG' Float
(process_token)    Frst:0 T:'MPG' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'MPG'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:MPG is not function
token_is_variable: tok:'MPG'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:MPG is not function
(init_get_name) 
init_get_name:'MPG'
(init_get_name) 
init_get_name:'MPG'
(get_name) 
get_name:gn:'MPG'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f MPG
(add_var_info) Name:MPG Idx:-1
Variables

   0:  VAR: '                 M'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   1:  VAR: '                 L'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

(find_var_info) ******
(find_var_info) 
Could not find var 'MPG'
(find_var_info) ******
(add_var_info) Not already present
(scan_variable) ret1
(scan_localglobal)  LOCAL variable:'MPG'
VAR: '               MPG'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=13 ',g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=13 ',g'
 (check_literal)   ':' != ','
 (check_literal) check_literal: ret0
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=13 ',g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=13 ',g'
 (check_literal) check_literal:After while():g
 (check_literal) ret1 Match. ' ,' == ',g'

 (scan_literal_core) scan_literal_core:lit=' ,' ',g'
 (scan_literal_core) scan_literal_core:After drop space:',g'
 (scan_literal_core) scan_literal_core:while loop:,g
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:? exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 'g'

  (check_operator) 'g' igncomma:1
  (check_operator) ret0:is comma: 0

  (check_vname) check_vname 'g':
  (check_vname) check_vname ret1 '':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ''

  (check_literal) check_literal:lit='(' idx=15 ''
  (check_literal) check_literal:After drop space:'(' idx=15 ''
  (check_literal) check_literal  ret0 Empty test string
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) 'g' ref_ndeclare:0

  (scan_vname) scan_vname: 'g'
  (scan_vname) scan_vname: ret1 'g'
 (scan_variable) scan_variable: '' vname='G'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'G' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=15 ''
  (check_literal) check_literal:After drop space:'(' idx=15 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='G' Float
(process_token)    Frst:0 T:'G' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'G'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:G is not function
token_is_variable: tok:'G'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:G is not function
(init_get_name) 
init_get_name:'G'
(init_get_name) 
init_get_name:'G'
(get_name) 
get_name:gn:'G'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f G
(add_var_info) Name:G Idx:-1
Variables

   0:  VAR: '                 M'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   1:  VAR: '                 L'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
   2:  VAR: '               MPG'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000

(find_var_info) ******
(find_var_info) 
Could not find var 'G'
(find_var_info) ******
(add_var_info) Not already present
(scan_variable) ret1
(scan_localglobal)  LOCAL variable:'G'
VAR: '                 G'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:0000
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=15 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=15 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=15 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=15 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_variable) ''

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0

  (check_vname) check_vname '':
  (check_vname) check_vname ret0 '':
 (check_variable) check_variable:ret0 
(scan_localglobal) ret1:End of line
(scan_declare) scan_declare:ret 1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=15 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=15 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:5 buf2 i:0
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'MPG' npar:0 nidx:0 trapped:0 %:0  0: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  2: 4 1 -822624274 781119190 -22285654 -303129682 2130564856 -22106581 1026472951 801037165 -554709254 -1153454290 -1090967126 -68964498 -306194770 -1146130769 -1075119494 -553996305 -1146115082 -1344504177  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing : LOCAL   *************
 (type_check_stack_display) Type Check Stack (0)
 (process_syntax_tree) *********Processing :M   *************
 (type_check_stack_push)  type_check_stack_push: 'M'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'M' type:f (1), %:0
 (process_syntax_tree) *********Processing :L   *************
 (type_check_stack_push)  type_check_stack_push: 'L'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print)  N003: 'L' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'M' type:f (1), %:0
 (type_check_stack_display) 001: 'L' type:f (1), %:0
 (process_syntax_tree) *********Processing :MPG   *************
 (type_check_stack_push)  type_check_stack_push: 'MPG'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print)  N003: 'L' type:1 %:0
 (type_check_stack_print)  N004: 'MPG' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'M' type:f (1), %:0
 (type_check_stack_display) 001: 'L' type:f (1), %:0
 (type_check_stack_display) 002: 'MPG' type:f (1), %:0
 (process_syntax_tree) *********Processing :G   *************
 (type_check_stack_push)  type_check_stack_push: 'G'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (4)

 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print)  N003: 'L' type:1 %:0
 (type_check_stack_print)  N004: 'MPG' type:1 %:0
 (type_check_stack_print)  N005: 'G' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (4)
 (type_check_stack_display) 000: 'M' type:f (1), %:0
 (type_check_stack_display) 001: 'L' type:f (1), %:0
 (type_check_stack_display) 002: 'MPG' type:f (1), %:0
 (type_check_stack_display) 003: 'G' type:f (1), %:0
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE: LOCAL    **********
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression)  *** BE:M    **********
 (type_check_stack_push)  type_check_stack_push: 'M'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'M' type:f (1), %:0
 (typecheck_expression)  *** BE:L    **********
 (type_check_stack_push)  type_check_stack_push: 'L'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print)  N003: 'L' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'M' type:f (1), %:0
 (type_check_stack_display) 001: 'L' type:f (1), %:0
 (typecheck_expression)  *** BE:MPG    **********
 (type_check_stack_push)  type_check_stack_push: 'MPG'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print)  N003: 'L' type:1 %:0
 (type_check_stack_print)  N004: 'MPG' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'M' type:f (1), %:0
 (type_check_stack_display) 001: 'L' type:f (1), %:0
 (type_check_stack_display) 002: 'MPG' type:f (1), %:0
 (typecheck_expression)  *** BE:G    **********
 (type_check_stack_push)  type_check_stack_push: 'G'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (4)

 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print)  N003: 'L' type:1 %:0
 (type_check_stack_print)  N004: 'MPG' type:1 %:0
 (type_check_stack_print)  N005: 'G' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (4)
 (type_check_stack_display) 000: 'M' type:f (1), %:0
 (type_check_stack_display) 001: 'L' type:f (1), %:0
 (type_check_stack_display) 002: 'MPG' type:f (1), %:0
 (type_check_stack_display) 003: 'G' type:f (1), %:0
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'MPG' npar:0 nidx:0 trapped:0 %:0  0: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: 4 1 -822624274 781119190 -22285654 -303129682 2130564856 -22106581 1026472951 801037165 -554709254 -1153454290 -1090967126 -68964498 -306194770 -1146130769 -1075119494 -553996305 -1146115082 -1344504177  nb 0:()

N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'MPG' npar:0 nidx:0 trapped:0 %:0  0: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: 4 1 -822624274 781119190 -22285654 -303129682 2130564856 -22106581 1026472951 801037165 -554709254 -1153454290 -1090967126 -68964498 -306194770 -1146130769 -1075119494 -553996305 -1146115082 -1344504177  nb 0:()

 (process_expression_types) 


 (finalise_expression) Finalise expression done.
local m,l,mpg,g
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=15 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=15 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=15 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'P' (80)
 (is_all_spaces) cline[1] = 'R' (82)
 (is_all_spaces) cline[2] = 'I' (73)
 (is_all_spaces) cline[3] = 'N' (78)
 (is_all_spaces) cline[4] = 'T' (84)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'M' (77)
 (is_all_spaces) cline[8] = 'i' (105)
 (is_all_spaces) cline[9] = 'l' (108)
 (is_all_spaces) cline[10] = 'e' (101)
 (is_all_spaces) cline[11] = 's' (115)
 (is_all_spaces) cline[12] = '"' (34)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'PRINT "Miles"'
*****************
**PRINT "Miles"**
*****************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'PRINT "Miles"'
 (check_literal) check_literal:After drop space:'REM' idx=0 'PRINT "Miles"'
 (check_literal)   'R' != 'P'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'PRINT "Miles"'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'PRINT "Miles"'
 (check_literal)   'R' != 'P'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'PRINT "Miles"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'PRINT "Miles"'
 (check_literal)   'R' != 'P'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'PRINT "Miles"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'PRINT "Miles"'
 (check_literal)   'R' != 'P'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'PRINT "Miles"'

   (check_operator) 'PRINT "Miles"' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'PRINT "Miles"':
   (check_vname) check_vname ret1 ' "Miles"':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "Miles"'

   (check_literal) check_literal:lit='(' idx=5 ' "Miles"'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "Miles"'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "Miles"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"Miles"'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'PRINT "Miles"'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'PRINT "Miles"'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'PRINT "Miles"'
  (check_literal)   'L' != 'P'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'PRINT "Miles"'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'PRINT "Miles"'
  (check_literal)   'G' != 'P'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'PRINT "Miles"'
   (check_textlabel) 'PRINT' is a text label chstr:'T'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'PRINT' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "Miles"'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "Miles"'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'PRINT "Miles"'
   (check_textlabel) 'PRINT' is a text label chstr:'T'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'PRINT' Type:f
  (check_proc_call) 'PRINT' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "Miles"'
   (check_literal) check_literal:After drop space:':' idx=5 ' "Miles"'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'PRINT "Miles"'

   (check_literal) check_literal:lit=' INPUT' idx=0 'PRINT "Miles"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'PRINT "Miles"'
   (check_literal)   'I' != 'P'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'PRINT "Miles"'

   (check_literal) check_literal:lit=' PRINT' idx=0 'PRINT "Miles"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'PRINT "Miles"'
   (check_literal) check_literal:After while(): "Miles"
   (check_literal) ret1 Match. ' PRINT' == 'PRINT "Miles"'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'PRINT "Miles"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'PRINT "Miles"'
   (check_literal) check_literal:After while(): "Miles"
   (check_literal) ret1 Match. ' PRINT' == 'PRINT "Miles"'

   (check_expression) ' "Miles"'

    (check_eitem) check_eitem: '"Miles"'

     (check_function)  '"Miles"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Miles"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Miles"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Miles"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Miles"'
      (check_literal) check_literal:After while():Miles"
      (check_literal) ret1 Match. ' "' == '"Miles"'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 '' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'PRINT "Miles"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'PRINT "Miles"'
   (check_literal) check_literal:After while(): "Miles"
   (check_literal) ret1 Match. ' PRINT' == 'PRINT "Miles"'
  (scan_print) Before while

   (check_expression) ' "Miles"'

    (check_eitem) check_eitem: '"Miles"'

     (check_function)  '"Miles"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Miles"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Miles"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Miles"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Miles"'
      (check_literal) check_literal:After while():Miles"
      (check_literal) ret1 Match. ' "' == '"Miles"'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 '' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "Miles"' igncomma:1

    (check_eitem) check_eitem: '"Miles"'

     (check_function)  '"Miles"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Miles"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Miles"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Miles"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Miles"'
      (check_literal) check_literal:After while():Miles"
      (check_literal) ret1 Match. ' "' == '"Miles"'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"Miles"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Miles"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Miles"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Miles"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Miles"'
      (check_literal) check_literal:After while():Miles"
      (check_literal) ret1 Match. ' "' == '"Miles"'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"Miles"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Miles"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"Miles"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Miles"'
      (check_literal) check_literal:After while():Miles"
      (check_literal) ret1 Match. ' "' == '"Miles"'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"Miles"'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"Miles"'
       (check_literal) check_literal:After while():Miles"
       (check_literal) ret1 Match. ' "' == '"Miles"'
      (scan_string)   (in if) 'Miles"'
      (scan_string)   (in wh) 'Miles"'
      (scan_string)   (in wh) 'iles"'
      (scan_string)   (in wh) 'iles"'
      (scan_string)   (in wh) 'les"'
      (scan_string)   (in wh) 'les"'
      (scan_string)   (in wh) 'es"'
      (scan_string)   (in wh) 'es"'
      (scan_string)   (in wh) 's"'
      (scan_string)   (in wh) 's"'
      (scan_string)   (in wh) '"'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"Miles"' toktype:s exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"Miles"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Miles" is not function
token_is_variable: tok:'"Miles"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Miles" is not function
(   output_string) [U,()] s "Miles"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) '' Before while igncomma:1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 '' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=13 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) After scan expression II

   (check_literal) check_literal:lit=' ;' idx=13 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) Checking if delimiter was present
  (scan_print) No delimiter present
  (finalise_expression) Finalise expression Buf i:2 buf2 i:5
  (op_stack_finalise) Finalise stack
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Miles"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

  (process_syntax_tree) Pass:1
  (process_syntax_tree) *********Processing :"Miles"   *************
  (type_check_stack_push)  type_check_stack_push: '"Miles"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: '"Miles"' type:2 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '"Miles"' type:s (2), %:0
  (process_syntax_tree) *********Processing :PRINT   *************
  (process_syntax_tree) PRINT type adjust
  (type_check_stack_pop)   type_check_stack_pop: '"Miles"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:1
  (typecheck_expression)  *** BE:"Miles"    **********
  (type_check_stack_push)  type_check_stack_push: '"Miles"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: '"Miles"' type:2 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '"Miles"' type:s (2), %:0
  (typecheck_expression)  *** BE:PRINT    **********
  (typecheck_expression) PRINT type adjust
  (type_check_stack_pop)   type_check_stack_pop: '"Miles"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Miles"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Miles"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

  (process_expression_types) 


  (finalise_expression) Finalise expression done.
  (process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>U
 Push:'PRINT'
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (1)

  (op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
  (op_stack_print) ------------------

  (finalise_expression) Finalise expression Buf i:0 buf2 i:2
  (op_stack_finalise) Finalise stack
  (op_stack_pop) Pop 'PRINT' type:U 
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (0)

  (op_stack_print) ------------------

  (op_stack_finalise) Popped:PRINT U
  (output_operator) [U,()] U PRINT
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

  (process_syntax_tree) Pass:1
  (process_syntax_tree) *********Processing :PRINT   *************
default buf_id
  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:1
  (typecheck_expression)  *** BE:PRINT    **********
default buf_id
  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

  (process_expression_types) 


  (finalise_expression) Finalise expression done.

   (check_expression) ''

    (check_eitem) check_eitem: ''

     (check_function)  ''
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=13 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=13 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=13 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=13 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'' float:0.000000e+00
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0

       (check_hex) check_hex: ''
       (check_hex) check_hex:ret0 not '$'
      (check_number) check_number: ret0

      (check_proc_call) check_proc_call:

       (check_textlabel) ''
       (check_textlabel) '' is a text label chstr:'d'
       (check_textlabel) Exit char:
       (check_textlabel) check_textlabel:ret1 Name:'' Type:f
      (check_proc_call) '' is text label

       (check_literal) check_literal:lit=':' idx=13 ''
       (check_literal) check_literal:After drop space:':' idx=13 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_proc_call) check_proc_call:ret0

      (check_variable) ''

       (check_operator) '' igncomma:1
       (check_operator) ret0:is comma: 0

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret0

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=13 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=13 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) ret0: No '('

     (check_addr_name) check_addr_name: ''

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_addr_name) check_addr_name: ret0
    (check_eitem) check_eitem:ret0

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret0 ''
  (scan_print) Check for trailing delimiter

   (check_literal) check_literal:lit=' ;' idx=13 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' ,' idx=13 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) scan_print:ret1 Expression 
 (scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=13 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=13 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
PRINT "Miles"
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=13 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=13 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=13 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'I' (73)
 (is_all_spaces) cline[1] = 'N' (78)
 (is_all_spaces) cline[2] = 'P' (80)
 (is_all_spaces) cline[3] = 'U' (85)
 (is_all_spaces) cline[4] = 'T' (84)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = 'M' (77)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'INPUT M'
***********
**INPUT M**
***********

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'INPUT M'
 (check_literal) check_literal:After drop space:'REM' idx=0 'INPUT M'
 (check_literal)   'R' != 'I'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'INPUT M'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'INPUT M'
 (check_literal)   'R' != 'I'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'INPUT M'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'INPUT M'
 (check_literal)   'R' != 'I'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'INPUT M'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'INPUT M'
 (check_literal)   'R' != 'I'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'INPUT M'

   (check_operator) 'INPUT M' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'INPUT M':
   (check_vname) check_vname ret1 ' M':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' M'

   (check_literal) check_literal:lit='(' idx=5 ' M'
   (check_literal) check_literal:After drop space:'(' idx=5 ' M'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' M'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 'M'
 (check_literal)   '=' != 'M'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'INPUT M'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'INPUT M'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'INPUT M'
  (check_literal)   'L' != 'I'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'INPUT M'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'INPUT M'
  (check_literal)   'G' != 'I'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'INPUT M'
   (check_textlabel) 'INPUT' is a text label chstr:'T'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'INPUT' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' M'
   (check_literal) check_literal:After drop space:'::' idx=5 ' M'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'INPUT M'
   (check_textlabel) 'INPUT' is a text label chstr:'T'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'INPUT' Type:f
  (check_proc_call) 'INPUT' is text label

   (check_literal) check_literal:lit=':' idx=5 ' M'
   (check_literal) check_literal:After drop space:':' idx=5 ' M'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'INPUT M'

   (check_literal) check_literal:lit=' INPUT' idx=0 'INPUT M'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'INPUT M'
   (check_literal) check_literal:After while(): M
   (check_literal) ret1 Match. ' INPUT' == 'INPUT M'
  (check_input) ret1


   (check_literal) check_literal:lit=' INPUT' idx=0 'INPUT M'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'INPUT M'
   (check_literal) check_literal:After while(): M
   (check_literal) ret1 Match. ' INPUT' == 'INPUT M'

   (scan_variable) ' M' ref_ndeclare:1

    (scan_vname) scan_vname: ' M'
    (scan_vname) scan_vname: ret1 'M'
   (scan_variable) scan_variable: '' vname='M'
   (token_is_other_keyword) 
   (token_is_other_keyword) 'M' is not other keyword
   (scan_variable) Array test ''

    (check_literal) check_literal:lit='(' idx=7 ''
    (check_literal) check_literal:After drop space:'(' idx=7 ''
    (check_literal) check_literal  ret0 Empty test string
   (scan_variable) scan_variable:ret1 vname='M' Float
  (process_token)    Frst:1 T:'M' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:'M'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:M is not function
token_is_variable: tok:'M'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:M is not function
 (init_get_name) 
init_get_name:'M'
 (init_get_name) 
init_get_name:'M'
 (get_name) 
get_name:gn:'M'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f M
 (add_var_info) Name:M Idx:-1
 (add_var_info) Already present
 (add_var_info)   reference so OK
 (scan_variable) ret1
(output_generic) [f,()] f INPUT exp_type:f
VAR: '                 M'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:D75C
(scan_input) ret1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=7 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=7 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:2 buf2 i:0
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_INPUT                      ty:f qcty:U 'INPUT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing :M   *************
 (type_check_stack_push)  type_check_stack_push: 'M'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'M' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'M' type:f (1), %:0
 (process_syntax_tree) *********Processing :INPUT   *************
 (type_check_stack_pop)   type_check_stack_pop: 'M'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE:M    **********
 (type_check_stack_push)  type_check_stack_push: 'M'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'M' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'M' type:f (1), %:0
 (typecheck_expression)  *** BE:INPUT    **********
 (type_check_stack_pop)   type_check_stack_pop: 'M'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_INPUT                      ty:f qcty:U 'INPUT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_INPUT                      ty:f qcty:U 'INPUT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

 (process_expression_types) 


 (finalise_expression) Finalise expression done.
INPUT M
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=7 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=7 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=7 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'P' (80)
 (is_all_spaces) cline[1] = 'R' (82)
 (is_all_spaces) cline[2] = 'I' (73)
 (is_all_spaces) cline[3] = 'N' (78)
 (is_all_spaces) cline[4] = 'T' (84)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'L' (76)
 (is_all_spaces) cline[8] = 'i' (105)
 (is_all_spaces) cline[9] = 't' (116)
 (is_all_spaces) cline[10] = 'r' (114)
 (is_all_spaces) cline[11] = 'e' (101)
 (is_all_spaces) cline[12] = 's' (115)
 (is_all_spaces) cline[13] = '"' (34)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'PRINT "Litres"'
******************
**PRINT "Litres"**
******************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'PRINT "Litres"'
 (check_literal) check_literal:After drop space:'REM' idx=0 'PRINT "Litres"'
 (check_literal)   'R' != 'P'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'PRINT "Litres"'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'PRINT "Litres"'
 (check_literal)   'R' != 'P'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'PRINT "Litres"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'PRINT "Litres"'
 (check_literal)   'R' != 'P'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'PRINT "Litres"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'PRINT "Litres"'
 (check_literal)   'R' != 'P'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'PRINT "Litres"'

   (check_operator) 'PRINT "Litres"' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'PRINT "Litres"':
   (check_vname) check_vname ret1 ' "Litres"':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "Litres"'

   (check_literal) check_literal:lit='(' idx=5 ' "Litres"'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "Litres"'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "Litres"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"Litres"'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'PRINT "Litres"'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'PRINT "Litres"'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'PRINT "Litres"'
  (check_literal)   'L' != 'P'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'PRINT "Litres"'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'PRINT "Litres"'
  (check_literal)   'G' != 'P'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'PRINT "Litres"'
   (check_textlabel) 'PRINT' is a text label chstr:'T'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'PRINT' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "Litres"'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "Litres"'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'PRINT "Litres"'
   (check_textlabel) 'PRINT' is a text label chstr:'T'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'PRINT' Type:f
  (check_proc_call) 'PRINT' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "Litres"'
   (check_literal) check_literal:After drop space:':' idx=5 ' "Litres"'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'PRINT "Litres"'

   (check_literal) check_literal:lit=' INPUT' idx=0 'PRINT "Litres"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'PRINT "Litres"'
   (check_literal)   'I' != 'P'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'PRINT "Litres"'

   (check_literal) check_literal:lit=' PRINT' idx=0 'PRINT "Litres"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'PRINT "Litres"'
   (check_literal) check_literal:After while(): "Litres"
   (check_literal) ret1 Match. ' PRINT' == 'PRINT "Litres"'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'PRINT "Litres"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'PRINT "Litres"'
   (check_literal) check_literal:After while(): "Litres"
   (check_literal) ret1 Match. ' PRINT' == 'PRINT "Litres"'

   (check_expression) ' "Litres"'

    (check_eitem) check_eitem: '"Litres"'

     (check_function)  '"Litres"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Litres"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Litres"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Litres"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Litres"'
      (check_literal) check_literal:After while():Litres"
      (check_literal) ret1 Match. ' "' == '"Litres"'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 '' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'PRINT "Litres"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'PRINT "Litres"'
   (check_literal) check_literal:After while(): "Litres"
   (check_literal) ret1 Match. ' PRINT' == 'PRINT "Litres"'
  (scan_print) Before while

   (check_expression) ' "Litres"'

    (check_eitem) check_eitem: '"Litres"'

     (check_function)  '"Litres"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Litres"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Litres"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Litres"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Litres"'
      (check_literal) check_literal:After while():Litres"
      (check_literal) ret1 Match. ' "' == '"Litres"'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 '' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "Litres"' igncomma:1

    (check_eitem) check_eitem: '"Litres"'

     (check_function)  '"Litres"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Litres"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Litres"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Litres"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Litres"'
      (check_literal) check_literal:After while():Litres"
      (check_literal) ret1 Match. ' "' == '"Litres"'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"Litres"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Litres"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Litres"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Litres"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Litres"'
      (check_literal) check_literal:After while():Litres"
      (check_literal) ret1 Match. ' "' == '"Litres"'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"Litres"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Litres"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"Litres"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Litres"'
      (check_literal) check_literal:After while():Litres"
      (check_literal) ret1 Match. ' "' == '"Litres"'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"Litres"'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"Litres"'
       (check_literal) check_literal:After while():Litres"
       (check_literal) ret1 Match. ' "' == '"Litres"'
      (scan_string)   (in if) 'Litres"'
      (scan_string)   (in wh) 'Litres"'
      (scan_string)   (in wh) 'itres"'
      (scan_string)   (in wh) 'itres"'
      (scan_string)   (in wh) 'tres"'
      (scan_string)   (in wh) 'tres"'
      (scan_string)   (in wh) 'res"'
      (scan_string)   (in wh) 'res"'
      (scan_string)   (in wh) 'es"'
      (scan_string)   (in wh) 'es"'
      (scan_string)   (in wh) 's"'
      (scan_string)   (in wh) 's"'
      (scan_string)   (in wh) '"'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"Litres"' toktype:s exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"Litres"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Litres" is not function
token_is_variable: tok:'"Litres"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Litres" is not function
(   output_string) [U,()] s "Litres"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) '' Before while igncomma:1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 '' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=14 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=14 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) After scan expression II

   (check_literal) check_literal:lit=' ;' idx=14 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=14 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) Checking if delimiter was present
  (scan_print) No delimiter present
  (finalise_expression) Finalise expression Buf i:2 buf2 i:2
  (op_stack_finalise) Finalise stack
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Litres"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

  (process_syntax_tree) Pass:1
  (process_syntax_tree) *********Processing :"Litres"   *************
  (type_check_stack_push)  type_check_stack_push: '"Litres"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: '"Litres"' type:2 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '"Litres"' type:s (2), %:0
  (process_syntax_tree) *********Processing :PRINT   *************
  (process_syntax_tree) PRINT type adjust
  (type_check_stack_pop)   type_check_stack_pop: '"Litres"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:1
  (typecheck_expression)  *** BE:"Litres"    **********
  (type_check_stack_push)  type_check_stack_push: '"Litres"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: '"Litres"' type:2 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '"Litres"' type:s (2), %:0
  (typecheck_expression)  *** BE:PRINT    **********
  (typecheck_expression) PRINT type adjust
  (type_check_stack_pop)   type_check_stack_pop: '"Litres"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Litres"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Litres"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

  (process_expression_types) 


  (finalise_expression) Finalise expression done.
  (process_token)    Frst:1 T:'PRINT' toktype:I exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>U
 Push:'PRINT'
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (1)

  (op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
  (op_stack_print) ------------------

  (finalise_expression) Finalise expression Buf i:0 buf2 i:2
  (op_stack_finalise) Finalise stack
  (op_stack_pop) Pop 'PRINT' type:U 
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (0)

  (op_stack_print) ------------------

  (op_stack_finalise) Popped:PRINT U
  (output_operator) [U,()] U PRINT
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

  (process_syntax_tree) Pass:1
  (process_syntax_tree) *********Processing :PRINT   *************
default buf_id
  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:1
  (typecheck_expression)  *** BE:PRINT    **********
default buf_id
  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

  (process_expression_types) 


  (finalise_expression) Finalise expression done.

   (check_expression) ''

    (check_eitem) check_eitem: ''

     (check_function)  ''
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=14 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=14 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=14 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=14 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'' float:0.000000e+00
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0

       (check_hex) check_hex: ''
       (check_hex) check_hex:ret0 not '$'
      (check_number) check_number: ret0

      (check_proc_call) check_proc_call:

       (check_textlabel) ''
       (check_textlabel) '' is a text label chstr:'d'
       (check_textlabel) Exit char:
       (check_textlabel) check_textlabel:ret1 Name:'' Type:f
      (check_proc_call) '' is text label

       (check_literal) check_literal:lit=':' idx=14 ''
       (check_literal) check_literal:After drop space:':' idx=14 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_proc_call) check_proc_call:ret0

      (check_variable) ''

       (check_operator) '' igncomma:1
       (check_operator) ret0:is comma: 0

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret0

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=14 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=14 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) ret0: No '('

     (check_addr_name) check_addr_name: ''

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_addr_name) check_addr_name: ret0
    (check_eitem) check_eitem:ret0

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret0 ''
  (scan_print) Check for trailing delimiter

   (check_literal) check_literal:lit=' ;' idx=14 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=14 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' ,' idx=14 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=14 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) scan_print:ret1 Expression 
 (scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=14 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=14 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
PRINT "Litres"
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=14 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=14 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=14 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'I' (73)
 (is_all_spaces) cline[1] = 'N' (78)
 (is_all_spaces) cline[2] = 'P' (80)
 (is_all_spaces) cline[3] = 'U' (85)
 (is_all_spaces) cline[4] = 'T' (84)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = 'L' (76)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'INPUT L'
***********
**INPUT L**
***********

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'INPUT L'
 (check_literal) check_literal:After drop space:'REM' idx=0 'INPUT L'
 (check_literal)   'R' != 'I'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'INPUT L'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'INPUT L'
 (check_literal)   'R' != 'I'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'INPUT L'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'INPUT L'
 (check_literal)   'R' != 'I'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'INPUT L'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'INPUT L'
 (check_literal)   'R' != 'I'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'INPUT L'

   (check_operator) 'INPUT L' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'INPUT L':
   (check_vname) check_vname ret1 ' L':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' L'

   (check_literal) check_literal:lit='(' idx=5 ' L'
   (check_literal) check_literal:After drop space:'(' idx=5 ' L'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' L'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 'L'
 (check_literal)   '=' != 'L'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'INPUT L'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'INPUT L'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'INPUT L'
  (check_literal)   'L' != 'I'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'INPUT L'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'INPUT L'
  (check_literal)   'G' != 'I'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'INPUT L'
   (check_textlabel) 'INPUT' is a text label chstr:'T'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'INPUT' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' L'
   (check_literal) check_literal:After drop space:'::' idx=5 ' L'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'INPUT L'
   (check_textlabel) 'INPUT' is a text label chstr:'T'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'INPUT' Type:f
  (check_proc_call) 'INPUT' is text label

   (check_literal) check_literal:lit=':' idx=5 ' L'
   (check_literal) check_literal:After drop space:':' idx=5 ' L'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'INPUT L'

   (check_literal) check_literal:lit=' INPUT' idx=0 'INPUT L'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'INPUT L'
   (check_literal) check_literal:After while(): L
   (check_literal) ret1 Match. ' INPUT' == 'INPUT L'
  (check_input) ret1


   (check_literal) check_literal:lit=' INPUT' idx=0 'INPUT L'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'INPUT L'
   (check_literal) check_literal:After while(): L
   (check_literal) ret1 Match. ' INPUT' == 'INPUT L'

   (scan_variable) ' L' ref_ndeclare:1

    (scan_vname) scan_vname: ' L'
    (scan_vname) scan_vname: ret1 'L'
   (scan_variable) scan_variable: '' vname='L'
   (token_is_other_keyword) 
   (token_is_other_keyword) 'L' is not other keyword
   (scan_variable) Array test ''

    (check_literal) check_literal:lit='(' idx=7 ''
    (check_literal) check_literal:After drop space:'(' idx=7 ''
    (check_literal) check_literal  ret0 Empty test string
   (scan_variable) scan_variable:ret1 vname='L' Float
  (process_token)    Frst:1 T:'L' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:'L'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:L is not function
token_is_variable: tok:'L'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:L is not function
 (init_get_name) 
init_get_name:'L'
 (init_get_name) 
init_get_name:'L'
 (get_name) 
get_name:gn:'L'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f L
 (add_var_info) Name:L Idx:-1
 (add_var_info) Already present
 (add_var_info)   reference so OK
 (scan_variable) ret1
(output_generic) [f,()] f INPUT exp_type:f
VAR: '                 L'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:D75C
(scan_input) ret1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=7 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=7 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:2 buf2 i:0
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_INPUT                      ty:f qcty:U 'INPUT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing :L   *************
 (type_check_stack_push)  type_check_stack_push: 'L'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'L' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'L' type:f (1), %:0
 (process_syntax_tree) *********Processing :INPUT   *************
 (type_check_stack_pop)   type_check_stack_pop: 'L'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE:L    **********
 (type_check_stack_push)  type_check_stack_push: 'L'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'L' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'L' type:f (1), %:0
 (typecheck_expression)  *** BE:INPUT    **********
 (type_check_stack_pop)   type_check_stack_pop: 'L'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_INPUT                      ty:f qcty:U 'INPUT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_INPUT                      ty:f qcty:U 'INPUT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

 (process_expression_types) 


 (finalise_expression) Finalise expression done.
INPUT L
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=7 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=7 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=7 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'g' (103)
 (is_all_spaces) cline[1] = '=' (61)
 (is_all_spaces) cline[2] = 'l' (108)
 (is_all_spaces) cline[3] = '/' (47)
 (is_all_spaces) cline[4] = '4' (52)
 (is_all_spaces) cline[5] = '.' (46)
 (is_all_spaces) cline[6] = '5' (53)
 (is_all_spaces) cline[7] = '4' (52)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'g=l/4.54'
************
**g=l/4.54**
************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'g=l/4.54'
 (check_literal) check_literal:After drop space:'REM' idx=0 'g=l/4.54'
 (check_literal)   'R' != 'g'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'g=l/4.54'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'g=l/4.54'
 (check_literal)   'R' != 'g'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'g=l/4.54'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'g=l/4.54'
 (check_literal)   'R' != 'g'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'g=l/4.54'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'g=l/4.54'
 (check_literal)   'R' != 'g'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'g=l/4.54'

   (check_operator) 'g=l/4.54' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'g=l/4.54':
   (check_vname) check_vname ret1 '=l/4.54':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '=l/4.54'

   (check_literal) check_literal:lit='(' idx=1 '=l/4.54'
   (check_literal) check_literal:After drop space:'(' idx=1 '=l/4.54'
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=1 '=l/4.54'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=1 '=l/4.54'
 (check_literal) check_literal:After while():l/4.54
 (check_literal) ret1 Match. ' =' == '=l/4.54'

 (check_expression) 'l/4.54'

  (check_eitem) check_eitem: 'l/4.54'

   (check_function)  'l/4.54'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=2 'l/4.54'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=2 'l/4.54'
    (check_literal)   '%' != 'l'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=2 'l/4.54'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=2 'l/4.54'
    (check_literal)   '"' != 'l'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'l/4.54'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'l/4.54'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'l/4.54'
     (check_textlabel) 'l' is a text label chstr:'l'
     (check_textlabel) Exit char:/
     (check_textlabel) check_textlabel:ret1 Name:'l' Type:f
    (check_proc_call) 'l' is text label

     (check_literal) check_literal:lit=':' idx=3 '/4.54'
     (check_literal) check_literal:After drop space:':' idx=3 '/4.54'
     (check_literal)   ':' != '/'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'l/4.54'

     (check_operator) 'l/4.54' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'l/4.54':
     (check_vname) check_vname ret1 '/4.54':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '/4.54'

     (check_literal) check_literal:lit='(' idx=3 '/4.54'
     (check_literal) check_literal:After drop space:'(' idx=3 '/4.54'
     (check_literal)   '(' != '/'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '/4.54' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '4.54' igncomma:0
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: '4.54'

  (check_function)  '4.54'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=4 '4.54'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=4 '4.54'
   (check_literal)   '%' != '4'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=4 '4.54'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=4 '4.54'
   (check_literal)   '"' != '4'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'4.54' float:4.540000e+00
    (check_float) check_float: ret1
   (check_number) check_number: ret1
  (check_atom) ret1
 (check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'g=l/4.54' ref_ndeclare:1

   (scan_vname) scan_vname: 'g=l/4.54'
   (scan_vname) scan_vname: ret1 'g'
  (scan_variable) scan_variable: '=l/4.54' vname='G'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'G' is not other keyword
  (scan_variable) Array test '=l/4.54'

   (check_literal) check_literal:lit='(' idx=1 '=l/4.54'
   (check_literal) check_literal:After drop space:'(' idx=1 '=l/4.54'
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='G' Float
 (process_token)    Frst:1 T:'G' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'G'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:G is not function
token_is_variable: tok:'G'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:G is not function
(init_get_name) 
init_get_name:'G'
(init_get_name) 
init_get_name:'G'
(get_name) 
get_name:gn:'G'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f G
(add_var_info) Name:G Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 G'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0008

 (scan_assignment_equals) scan_assignment_equals:lit=' =' '=l/4.54'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'=l/4.54'
 (scan_assignment_equals) scan_assignment_equals:while loop:=l/4.54
 (process_token)    Frst:0 T:':=' toktype:? exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) 'l/4.54' igncomma:0

  (check_eitem) check_eitem: 'l/4.54'

   (check_function)  'l/4.54'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=2 'l/4.54'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=2 'l/4.54'
    (check_literal)   '%' != 'l'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=2 'l/4.54'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=2 'l/4.54'
    (check_literal)   '"' != 'l'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'l/4.54'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'l/4.54'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'l/4.54'
     (check_textlabel) 'l' is a text label chstr:'l'
     (check_textlabel) Exit char:/
     (check_textlabel) check_textlabel:ret1 Name:'l' Type:f
    (check_proc_call) 'l' is text label

     (check_literal) check_literal:lit=':' idx=3 '/4.54'
     (check_literal) check_literal:After drop space:':' idx=3 '/4.54'
     (check_literal)   ':' != '/'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'l/4.54'

     (check_operator) 'l/4.54' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'l/4.54':
     (check_vname) check_vname ret1 '/4.54':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '/4.54'

     (check_literal) check_literal:lit='(' idx=3 '/4.54'
     (check_literal) check_literal:After drop space:'(' idx=3 '/4.54'
     (check_literal)   '(' != '/'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'l/4.54'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=2 'l/4.54'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=2 'l/4.54'
   (check_literal)   '%' != 'l'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=2 'l/4.54'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=2 'l/4.54'
   (check_literal)   '"' != 'l'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'l/4.54'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'l/4.54'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'l/4.54'
    (check_textlabel) 'l' is a text label chstr:'l'
    (check_textlabel) Exit char:/
    (check_textlabel) check_textlabel:ret1 Name:'l' Type:f
   (check_proc_call) 'l' is text label

    (check_literal) check_literal:lit=':' idx=3 '/4.54'
    (check_literal) check_literal:After drop space:':' idx=3 '/4.54'
    (check_literal)   ':' != '/'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'l/4.54'

    (check_operator) 'l/4.54' igncomma:1
    (check_operator) ret0:is comma: 0

    (check_vname) check_vname 'l/4.54':
    (check_vname) check_vname ret1 '/4.54':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '/4.54'

    (check_literal) check_literal:lit='(' idx=3 '/4.54'
    (check_literal) check_literal:After drop space:'(' idx=3 '/4.54'
    (check_literal)   '(' != '/'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=2 'l/4.54'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=2 'l/4.54'
  (check_literal)   '%' != 'l'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=2 'l/4.54'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=2 'l/4.54'
  (check_literal)   '"' != 'l'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'l/4.54'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'l/4.54'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'l/4.54'
   (check_textlabel) 'l' is a text label chstr:'l'
   (check_textlabel) Exit char:/
   (check_textlabel) check_textlabel:ret1 Name:'l' Type:f
  (check_proc_call) 'l' is text label

   (check_literal) check_literal:lit=':' idx=3 '/4.54'
   (check_literal) check_literal:After drop space:':' idx=3 '/4.54'
   (check_literal)   ':' != '/'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'l/4.54'

   (check_operator) 'l/4.54' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'l/4.54':
   (check_vname) check_vname ret1 '/4.54':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '/4.54'

   (check_literal) check_literal:lit='(' idx=3 '/4.54'
   (check_literal) check_literal:After drop space:'(' idx=3 '/4.54'
   (check_literal)   '(' != '/'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'l/4.54' ref_ndeclare:1

  (scan_vname) scan_vname: 'l/4.54'
  (scan_vname) scan_vname: ret1 'l'
 (scan_variable) scan_variable: '/4.54' vname='L'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'L' is not other keyword
 (scan_variable) Array test '/4.54'

  (check_literal) check_literal:lit='(' idx=3 '/4.54'
  (check_literal) check_literal:After drop space:'(' idx=3 '/4.54'
  (check_literal)   '(' != '/'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='L' Float
(process_token)    Frst:0 T:'L' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'L'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:L is not function
token_is_variable: tok:'L'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:L is not function
(init_get_name) 
init_get_name:'L'
(init_get_name) 
init_get_name:'L'
(get_name) 
get_name:gn:'L'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f L
(add_var_info) Name:L Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 L'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:1F74
(scan_atom) ret1
(scan_expression) '/4.54' Before while igncomma:0

 (check_operator) '/4.54' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '/4.54' igncomma:0
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '/4.54'

  (check_literal) check_literal:lit=' ,' idx=3 '/4.54'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=3 '/4.54'
  (check_literal)   ',' != '/'
  (check_literal) check_literal: ret0
 (scan_operator) scan_operator: ret1 '4.54' nb:0
(process_token)    Frst:0 T:'/' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
/ is operator
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'/' is operator
(process_token) 
Token is operator o1 name:/ o2 name::=
(process_token) 
opr1:5 opr2:1
(operator_precedence) 
:= is operator
(operator_precedence) 
:= is operator
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'/'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (2)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) 001: / type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) '4.54' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) '4.54' Before scan_eitem igncomma:0

 (scan_eitem) scan_eitem:

  (check_function)  '4.54'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=4 '4.54'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=4 '4.54'
   (check_literal)   '%' != '4'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=4 '4.54'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=4 '4.54'
   (check_literal)   '"' != '4'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'4.54' float:4.540000e+00
    (check_float) check_float: ret1
   (check_number) check_number: ret1
  (check_atom) ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=4 '4.54'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=4 '4.54'
   (check_literal)   '%' != '4'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=4 '4.54'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=4 '4.54'
   (check_literal)   '"' != '4'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'4.54' float:4.540000e+00
    (check_float) check_float: ret1
   (check_number) check_number: ret1

   (scan_number) scan_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'4.54' float:4.540000e+00
    (check_float) check_float: ret1

    (scan_float) scan_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (scan_float) Fltval:'4.54' float:4.540000e+00
    (scan_float) scan_float: ret1
   (process_token)    Frst:0 T:'4.54' toktype:I exptype:f bufid:'EXP_BUFF_ID_FLT'
   (operator_precedence) 
/ is operator
   (process_token) Before switch, bufid:'EXP_BUFF_ID_FLT'
modify_expression_type:Inittype:f Intype:f Outtype:f
(    output_float) [f,()] f 4.54
   (scan_atom) ret1
  (scan_expression) n commas now:0

   (check_literal) check_literal:lit=' %' idx=8 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_operator) '' igncomma:0
   (check_operator) ret0:is comma: 0
  (scan_expression) ret1 '' commas:0
 (add_var_info) Name:G Idx:-1
 (add_var_info) Already present
 (add_var_info)   reference so OK
 (scan_assignment) scan_assignment: ret1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:3 buf2 i:2
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop '/' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (op_stack_finalise) Popped:/ f
 (output_operator) [f,()] f /
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '4.54' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '/' npar:0 nidx:0 trapped:0 %:0  0: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  0: 4 1 -822624274 781119190 -22285654 -303129682 2130564856 -22106581 1026472951 801037165 -554709254 -1153454290 -1090967126 -68964498 -306194770 -1146130769 -1075119494 -553996305 -1146115082 -1344504177  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing :G   *************
 (type_check_stack_push)  type_check_stack_push: 'G'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'G' type:f (1), %:0
 (process_syntax_tree) *********Processing :L   *************
 (type_check_stack_push)  type_check_stack_push: 'L'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print)  N002: 'L' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'G' type:f (1), %:0
 (type_check_stack_display) 001: 'L' type:f (1), %:0
 (process_syntax_tree) *********Processing :4.54   *************
 (type_check_stack_push)  type_check_stack_push: '4.54'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print)  N002: 'L' type:1 %:0
 (type_check_stack_print)  N003: '4.54' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'G' type:f (1), %:0
 (type_check_stack_display) 001: 'L' type:f (1), %:0
 (type_check_stack_display) 002: '4.54' type:f (1), %:0
 (process_syntax_tree) *********Processing :/   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator / %conv:1
 (type_check_stack_pop)   type_check_stack_pop: '4.54'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print)  N002: 'L' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'L'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:1
 (process_syntax_tree) Percent convertible operator op1 (N003) percent:0
 (process_syntax_tree) Mutable type (4.54) f f
 (process_syntax_tree) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'G' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'G'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (000) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE:G    **********
 (type_check_stack_push)  type_check_stack_push: 'G'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'G' type:f (1), %:0
 (typecheck_expression)  *** BE:L    **********
 (type_check_stack_push)  type_check_stack_push: 'L'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print)  N002: 'L' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'G' type:f (1), %:0
 (type_check_stack_display) 001: 'L' type:f (1), %:0
 (typecheck_expression)  *** BE:4.54    **********
 (type_check_stack_push)  type_check_stack_push: '4.54'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print)  N002: 'L' type:1 %:0
 (type_check_stack_print)  N003: '4.54' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'G' type:f (1), %:0
 (type_check_stack_display) 001: 'L' type:f (1), %:0
 (type_check_stack_display) 002: '4.54' type:f (1), %:0
 (typecheck_expression)  *** BE:/    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator /
 (type_check_stack_pop)   type_check_stack_pop: '4.54'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print)  N002: 'L' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'L'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (/) f f
 (typecheck_expression) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'G' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'G'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '4.54' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '/' npar:0 nidx:0 trapped:0 %:0  2: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1 -822624274 781119190 -22285654 -303129682 2130564856 -22106581 1026472951 801037165 -554709254 -1153454290 -1090967126 -68964498 -306194770 -1146130769 -1075119494 -553996305 -1146115082 -1344504177  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '4.54' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '/' npar:0 nidx:0 trapped:0 %:0  2: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1 -822624274 781119190 -22285654 -303129682 2130564856 -22106581 1026472951 801037165 -554709254 -1153454290 -1090967126 -68964498 -306194770 -1146130769 -1075119494 -553996305 -1146115082 -1344504177  nb 0:()

 (process_expression_types) 


 (finalise_expression) Finalise expression done.
g=l/4.54
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=8 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=8 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=8 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'm' (109)
 (is_all_spaces) cline[1] = 'p' (112)
 (is_all_spaces) cline[2] = 'g' (103)
 (is_all_spaces) cline[3] = '=' (61)
 (is_all_spaces) cline[4] = 'm' (109)
 (is_all_spaces) cline[5] = '/' (47)
 (is_all_spaces) cline[6] = 'g' (103)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'mpg=m/g'
***********
**mpg=m/g**
***********

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'mpg=m/g'
 (check_literal) check_literal:After drop space:'REM' idx=0 'mpg=m/g'
 (check_literal)   'R' != 'm'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'mpg=m/g'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'mpg=m/g'
 (check_literal)   'R' != 'm'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'mpg=m/g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'mpg=m/g'
 (check_literal)   'R' != 'm'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'mpg=m/g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'mpg=m/g'
 (check_literal)   'R' != 'm'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'mpg=m/g'

   (check_operator) 'mpg=m/g' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'mpg=m/g':
   (check_vname) check_vname ret1 '=m/g':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '=m/g'

   (check_literal) check_literal:lit='(' idx=3 '=m/g'
   (check_literal) check_literal:After drop space:'(' idx=3 '=m/g'
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=3 '=m/g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=3 '=m/g'
 (check_literal) check_literal:After while():m/g
 (check_literal) ret1 Match. ' =' == '=m/g'

 (check_expression) 'm/g'

  (check_eitem) check_eitem: 'm/g'

   (check_function)  'm/g'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=4 'm/g'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 'm/g'
    (check_literal)   '%' != 'm'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=4 'm/g'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 'm/g'
    (check_literal)   '"' != 'm'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'm/g'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'm/g'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'm/g'
     (check_textlabel) 'm' is a text label chstr:'m'
     (check_textlabel) Exit char:/
     (check_textlabel) check_textlabel:ret1 Name:'m' Type:f
    (check_proc_call) 'm' is text label

     (check_literal) check_literal:lit=':' idx=5 '/g'
     (check_literal) check_literal:After drop space:':' idx=5 '/g'
     (check_literal)   ':' != '/'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'm/g'

     (check_operator) 'm/g' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'm/g':
     (check_vname) check_vname ret1 '/g':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '/g'

     (check_literal) check_literal:lit='(' idx=5 '/g'
     (check_literal) check_literal:After drop space:'(' idx=5 '/g'
     (check_literal)   '(' != '/'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '/g' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) 'g' igncomma:0
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'g'

  (check_function)  'g'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=6 'g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'g'
   (check_literal)   '%' != 'g'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=6 'g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'g'
   (check_literal)   '"' != 'g'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'g'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'g'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'g'
    (check_textlabel) 'g' is a text label chstr:'g'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'g' Type:f
   (check_proc_call) 'g' is text label

    (check_literal) check_literal:lit=':' idx=7 ''
    (check_literal) check_literal:After drop space:':' idx=7 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'g'

    (check_operator) 'g' igncomma:1
    (check_operator) ret0:is comma: 0

    (check_vname) check_vname 'g':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=7 ''
    (check_literal) check_literal:After drop space:'(' idx=7 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=7 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=7 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'mpg=m/g' ref_ndeclare:1

   (scan_vname) scan_vname: 'mpg=m/g'
   (scan_vname) scan_vname: ret1 'mpg'
  (scan_variable) scan_variable: '=m/g' vname='MPG'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'MPG' is not other keyword
  (scan_variable) Array test '=m/g'

   (check_literal) check_literal:lit='(' idx=3 '=m/g'
   (check_literal) check_literal:After drop space:'(' idx=3 '=m/g'
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='MPG' Float
 (process_token)    Frst:1 T:'MPG' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'MPG'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:MPG is not function
token_is_variable: tok:'MPG'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:MPG is not function
(init_get_name) 
init_get_name:'MPG'
(init_get_name) 
init_get_name:'MPG'
(get_name) 
get_name:gn:'MPG'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f MPG
(add_var_info) Name:MPG Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '               MPG'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0007

 (scan_assignment_equals) scan_assignment_equals:lit=' =' '=m/g'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'=m/g'
 (scan_assignment_equals) scan_assignment_equals:while loop:=m/g
 (process_token)    Frst:0 T:':=' toktype:? exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) 'm/g' igncomma:0

  (check_eitem) check_eitem: 'm/g'

   (check_function)  'm/g'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=4 'm/g'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 'm/g'
    (check_literal)   '%' != 'm'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=4 'm/g'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 'm/g'
    (check_literal)   '"' != 'm'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'm/g'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'm/g'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'm/g'
     (check_textlabel) 'm' is a text label chstr:'m'
     (check_textlabel) Exit char:/
     (check_textlabel) check_textlabel:ret1 Name:'m' Type:f
    (check_proc_call) 'm' is text label

     (check_literal) check_literal:lit=':' idx=5 '/g'
     (check_literal) check_literal:After drop space:':' idx=5 '/g'
     (check_literal)   ':' != '/'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'm/g'

     (check_operator) 'm/g' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'm/g':
     (check_vname) check_vname ret1 '/g':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '/g'

     (check_literal) check_literal:lit='(' idx=5 '/g'
     (check_literal) check_literal:After drop space:'(' idx=5 '/g'
     (check_literal)   '(' != '/'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'm/g'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=4 'm/g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=4 'm/g'
   (check_literal)   '%' != 'm'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=4 'm/g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=4 'm/g'
   (check_literal)   '"' != 'm'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'm/g'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'm/g'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'm/g'
    (check_textlabel) 'm' is a text label chstr:'m'
    (check_textlabel) Exit char:/
    (check_textlabel) check_textlabel:ret1 Name:'m' Type:f
   (check_proc_call) 'm' is text label

    (check_literal) check_literal:lit=':' idx=5 '/g'
    (check_literal) check_literal:After drop space:':' idx=5 '/g'
    (check_literal)   ':' != '/'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'm/g'

    (check_operator) 'm/g' igncomma:1
    (check_operator) ret0:is comma: 0

    (check_vname) check_vname 'm/g':
    (check_vname) check_vname ret1 '/g':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '/g'

    (check_literal) check_literal:lit='(' idx=5 '/g'
    (check_literal) check_literal:After drop space:'(' idx=5 '/g'
    (check_literal)   '(' != '/'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=4 'm/g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=4 'm/g'
  (check_literal)   '%' != 'm'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=4 'm/g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=4 'm/g'
  (check_literal)   '"' != 'm'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'm/g'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'm/g'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'm/g'
   (check_textlabel) 'm' is a text label chstr:'m'
   (check_textlabel) Exit char:/
   (check_textlabel) check_textlabel:ret1 Name:'m' Type:f
  (check_proc_call) 'm' is text label

   (check_literal) check_literal:lit=':' idx=5 '/g'
   (check_literal) check_literal:After drop space:':' idx=5 '/g'
   (check_literal)   ':' != '/'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'm/g'

   (check_operator) 'm/g' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'm/g':
   (check_vname) check_vname ret1 '/g':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '/g'

   (check_literal) check_literal:lit='(' idx=5 '/g'
   (check_literal) check_literal:After drop space:'(' idx=5 '/g'
   (check_literal)   '(' != '/'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'm/g' ref_ndeclare:1

  (scan_vname) scan_vname: 'm/g'
  (scan_vname) scan_vname: ret1 'm'
 (scan_variable) scan_variable: '/g' vname='M'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'M' is not other keyword
 (scan_variable) Array test '/g'

  (check_literal) check_literal:lit='(' idx=5 '/g'
  (check_literal) check_literal:After drop space:'(' idx=5 '/g'
  (check_literal)   '(' != '/'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='M' Float
(process_token)    Frst:0 T:'M' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'M'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:M is not function
token_is_variable: tok:'M'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:M is not function
(init_get_name) 
init_get_name:'M'
(init_get_name) 
init_get_name:'M'
(get_name) 
get_name:gn:'M'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f M
(add_var_info) Name:M Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 M'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:1F74
(scan_atom) ret1
(scan_expression) '/g' Before while igncomma:0

 (check_operator) '/g' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '/g' igncomma:0
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '/g'

  (check_literal) check_literal:lit=' ,' idx=5 '/g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=5 '/g'
  (check_literal)   ',' != '/'
  (check_literal) check_literal: ret0
 (scan_operator) scan_operator: ret1 'g' nb:0
(process_token)    Frst:0 T:'/' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
/ is operator
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'/' is operator
(process_token) 
Token is operator o1 name:/ o2 name::=
(process_token) 
opr1:5 opr2:1
(operator_precedence) 
:= is operator
(operator_precedence) 
:= is operator
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'/'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (2)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) 001: / type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'g' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) 'g' Before scan_eitem igncomma:0

 (scan_eitem) scan_eitem:

  (check_function)  'g'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=6 'g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'g'
   (check_literal)   '%' != 'g'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=6 'g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'g'
   (check_literal)   '"' != 'g'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'g'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'g'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'g'
    (check_textlabel) 'g' is a text label chstr:'g'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'g' Type:f
   (check_proc_call) 'g' is text label

    (check_literal) check_literal:lit=':' idx=7 ''
    (check_literal) check_literal:After drop space:':' idx=7 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'g'

    (check_operator) 'g' igncomma:1
    (check_operator) ret0:is comma: 0

    (check_vname) check_vname 'g':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=7 ''
    (check_literal) check_literal:After drop space:'(' idx=7 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=6 'g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=6 'g'
  (check_literal)   '%' != 'g'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=6 'g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=6 'g'
  (check_literal)   '"' != 'g'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'g'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'g'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'g'
   (check_textlabel) 'g' is a text label chstr:'g'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'g' Type:f
  (check_proc_call) 'g' is text label

   (check_literal) check_literal:lit=':' idx=7 ''
   (check_literal) check_literal:After drop space:':' idx=7 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'g'

   (check_operator) 'g' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'g':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=7 ''
   (check_literal) check_literal:After drop space:'(' idx=7 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'g' ref_ndeclare:1

  (scan_vname) scan_vname: 'g'
  (scan_vname) scan_vname: ret1 'g'
 (scan_variable) scan_variable: '' vname='G'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'G' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=7 ''
  (check_literal) check_literal:After drop space:'(' idx=7 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='G' Float
(process_token)    Frst:0 T:'G' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
/ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'G'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:G is not function
token_is_variable: tok:'G'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:G is not function
(init_get_name) 
init_get_name:'G'
(init_get_name) 
init_get_name:'G'
(get_name) 
get_name:gn:'G'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f G
(add_var_info) Name:G Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 G'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0001
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=7 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=7 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(add_var_info) Name:MPG Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_assignment) scan_assignment: ret1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=7 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=7 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:3 buf2 i:5
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop '/' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (op_stack_finalise) Popped:/ f
 (output_operator) [f,()] f /
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'MPG' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '/' npar:0 nidx:0 trapped:0 %:0  2: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1 -822624274 781119190 -22285654 -303129682 2130564856 -22106581 1026472951 801037165 -554709254 -1153454290 -1090967126 -68964498 -306194770 -1146130769 -1075119494 -553996305 -1146115082 -1344504177  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing :MPG   *************
 (type_check_stack_push)  type_check_stack_push: 'MPG'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'MPG' type:f (1), %:0
 (process_syntax_tree) *********Processing :M   *************
 (type_check_stack_push)  type_check_stack_push: 'M'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'MPG' type:f (1), %:0
 (type_check_stack_display) 001: 'M' type:f (1), %:0
 (process_syntax_tree) *********Processing :G   *************
 (type_check_stack_push)  type_check_stack_push: 'G'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print)  N003: 'G' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'MPG' type:f (1), %:0
 (type_check_stack_display) 001: 'M' type:f (1), %:0
 (type_check_stack_display) 002: 'G' type:f (1), %:0
 (process_syntax_tree) *********Processing :/   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator / %conv:1
 (type_check_stack_pop)   type_check_stack_pop: 'G'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'M'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:1
 (process_syntax_tree) Percent convertible operator op1 (N003) percent:0
 (process_syntax_tree) Mutable type (G) f f
 (process_syntax_tree) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'MPG' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'MPG'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (000) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE:MPG    **********
 (type_check_stack_push)  type_check_stack_push: 'MPG'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'MPG' type:f (1), %:0
 (typecheck_expression)  *** BE:M    **********
 (type_check_stack_push)  type_check_stack_push: 'M'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'MPG' type:f (1), %:0
 (type_check_stack_display) 001: 'M' type:f (1), %:0
 (typecheck_expression)  *** BE:G    **********
 (type_check_stack_push)  type_check_stack_push: 'G'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print)  N003: 'G' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'MPG' type:f (1), %:0
 (type_check_stack_display) 001: 'M' type:f (1), %:0
 (type_check_stack_display) 002: 'G' type:f (1), %:0
 (typecheck_expression)  *** BE:/    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator /
 (type_check_stack_pop)   type_check_stack_pop: 'G'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'M'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (/) f f
 (typecheck_expression) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'MPG' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'MPG'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'MPG' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '/' npar:0 nidx:0 trapped:0 %:0  2: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1 -822624274 781119190 -22285654 -303129682 2130564856 -22106581 1026472951 801037165 -554709254 -1153454290 -1090967126 -68964498 -306194770 -1146130769 -1075119494 -553996305 -1146115082 -1344504177  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'MPG' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '/' npar:0 nidx:0 trapped:0 %:0  2: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1 -822624274 781119190 -22285654 -303129682 2130564856 -22106581 1026472951 801037165 -554709254 -1153454290 -1090967126 -68964498 -306194770 -1146130769 -1075119494 -553996305 -1146115082 -1344504177  nb 0:()

 (process_expression_types) 


 (finalise_expression) Finalise expression done.
mpg=m/g
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=7 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=7 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=7 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'M' (77)
 (is_all_spaces) cline[8] = 'P' (80)
 (is_all_spaces) cline[9] = 'G' (71)
 (is_all_spaces) cline[10] = ':' (58)
 (is_all_spaces) cline[11] = '"' (34)
 (is_all_spaces) cline[12] = ';' (59)
 (is_all_spaces) cline[13] = 'm' (109)
 (is_all_spaces) cline[14] = 'p' (112)
 (is_all_spaces) cline[15] = 'g' (103)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "MPG:";mpg'
********************
**print "MPG:";mpg**
********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "MPG:";mpg'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "MPG:";mpg'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "MPG:";mpg'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "MPG:";mpg'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "MPG:";mpg'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "MPG:";mpg'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "MPG:";mpg'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "MPG:";mpg'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "MPG:";mpg'

   (check_operator) 'print "MPG:";mpg' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "MPG:";mpg':
   (check_vname) check_vname ret1 ' "MPG:";mpg':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "MPG:";mpg'

   (check_literal) check_literal:lit='(' idx=5 ' "MPG:";mpg'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "MPG:";mpg'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "MPG:";mpg'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"MPG:";mpg'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "MPG:";mpg'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "MPG:";mpg'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "MPG:";mpg'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "MPG:";mpg'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "MPG:";mpg'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "MPG:";mpg'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "MPG:";mpg'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "MPG:";mpg'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "MPG:";mpg'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "MPG:";mpg'
   (check_literal) check_literal:After drop space:':' idx=5 ' "MPG:";mpg'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "MPG:";mpg'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "MPG:";mpg'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "MPG:";mpg'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "MPG:";mpg'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "MPG:";mpg'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "MPG:";mpg'
   (check_literal) check_literal:After while(): "MPG:";mpg
   (check_literal) ret1 Match. ' PRINT' == 'print "MPG:";mpg'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "MPG:";mpg'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "MPG:";mpg'
   (check_literal) check_literal:After while(): "MPG:";mpg
   (check_literal) ret1 Match. ' PRINT' == 'print "MPG:";mpg'

   (check_expression) ' "MPG:";mpg'

    (check_eitem) check_eitem: '"MPG:";mpg'

     (check_function)  '"MPG:";mpg'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"MPG:";mpg'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"MPG:";mpg'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"MPG:";mpg'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"MPG:";mpg'
      (check_literal) check_literal:After while():MPG:";mpg
      (check_literal) ret1 Match. ' "' == '"MPG:";mpg'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ';mpg' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ';mpg' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "MPG:";mpg'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "MPG:";mpg'
   (check_literal) check_literal:After while(): "MPG:";mpg
   (check_literal) ret1 Match. ' PRINT' == 'print "MPG:";mpg'
  (scan_print) Before while

   (check_expression) ' "MPG:";mpg'

    (check_eitem) check_eitem: '"MPG:";mpg'

     (check_function)  '"MPG:";mpg'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"MPG:";mpg'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"MPG:";mpg'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"MPG:";mpg'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"MPG:";mpg'
      (check_literal) check_literal:After while():MPG:";mpg
      (check_literal) ret1 Match. ' "' == '"MPG:";mpg'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ';mpg' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ';mpg' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "MPG:";mpg' igncomma:1

    (check_eitem) check_eitem: '"MPG:";mpg'

     (check_function)  '"MPG:";mpg'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"MPG:";mpg'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"MPG:";mpg'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"MPG:";mpg'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"MPG:";mpg'
      (check_literal) check_literal:After while():MPG:";mpg
      (check_literal) ret1 Match. ' "' == '"MPG:";mpg'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"MPG:";mpg'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"MPG:";mpg'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"MPG:";mpg'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"MPG:";mpg'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"MPG:";mpg'
      (check_literal) check_literal:After while():MPG:";mpg
      (check_literal) ret1 Match. ' "' == '"MPG:";mpg'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"MPG:";mpg'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"MPG:";mpg'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"MPG:";mpg'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"MPG:";mpg'
      (check_literal) check_literal:After while():MPG:";mpg
      (check_literal) ret1 Match. ' "' == '"MPG:";mpg'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"MPG:";mpg'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"MPG:";mpg'
       (check_literal) check_literal:After while():MPG:";mpg
       (check_literal) ret1 Match. ' "' == '"MPG:";mpg'
      (scan_string)   (in if) 'MPG:";mpg'
      (scan_string)   (in wh) 'MPG:";mpg'
      (scan_string)   (in wh) 'PG:";mpg'
      (scan_string)   (in wh) 'PG:";mpg'
      (scan_string)   (in wh) 'G:";mpg'
      (scan_string)   (in wh) 'G:";mpg'
      (scan_string)   (in wh) ':";mpg'
      (scan_string)   (in wh) ':";mpg'
      (scan_string)   (in wh) '";mpg'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"MPG:"' toktype:s exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"MPG:"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"MPG:" is not function
token_is_variable: tok:'"MPG:"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"MPG:" is not function
(   output_string) [U,()] s "MPG:"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ';mpg' Before while igncomma:1

    (check_operator) ';mpg' igncomma:1
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 ';mpg' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=12 ';mpg'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ';mpg'
   (check_literal)   ',' != ';'
   (check_literal) check_literal: ret0
  (scan_print) After scan expression II

   (check_literal) check_literal:lit=' ;' idx=12 ';mpg'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=12 ';mpg'
   (check_literal) check_literal:After while():mpg
   (check_literal) ret1 Match. ' ;' == ';mpg'

   (scan_literal_core) scan_literal_core:lit=' ;' ';mpg'
   (scan_literal_core) scan_literal_core:After drop space:';mpg'
   (scan_literal_core) scan_literal_core:while loop:;mpg
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:';' toktype:F exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:';'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:; is not function
token_is_variable: tok:';'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:; is not function
 (process_token) **Unknown token **      ';'
 (scan_literal) ret1
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Semi colon present
(finalise_expression) Finalise expression Buf i:2 buf2 i:5
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"MPG:"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :"MPG:"   *************
(type_check_stack_push)  type_check_stack_push: '"MPG:"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"MPG:"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"MPG:"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"MPG:"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:"MPG:"    **********
(type_check_stack_push)  type_check_stack_push: '"MPG:"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"MPG:"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"MPG:"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"MPG:"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"MPG:"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"MPG:"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_expression_types) 


(finalise_expression) Finalise expression done.
mpg
========================================================
(output_expression_start)

 (check_expression) 'mpg'

  (check_eitem) check_eitem: 'mpg'

   (check_function)  'mpg'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=13 'mpg'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=13 'mpg'
    (check_literal)   '%' != 'm'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=13 'mpg'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=13 'mpg'
    (check_literal)   '"' != 'm'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'mpg'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'mpg'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'mpg'
     (check_textlabel) 'mpg' is a text label chstr:'g'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'mpg' Type:f
    (check_proc_call) 'mpg' is text label

     (check_literal) check_literal:lit=':' idx=16 ''
     (check_literal) check_literal:After drop space:':' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'mpg'

     (check_operator) 'mpg' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'mpg':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=16 ''
     (check_literal) check_literal:After drop space:'(' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) 'mpg' igncomma:1

  (check_eitem) check_eitem: 'mpg'

   (check_function)  'mpg'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=13 'mpg'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=13 'mpg'
    (check_literal)   '%' != 'm'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=13 'mpg'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=13 'mpg'
    (check_literal)   '"' != 'm'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'mpg'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'mpg'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'mpg'
     (check_textlabel) 'mpg' is a text label chstr:'g'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'mpg' Type:f
    (check_proc_call) 'mpg' is text label

     (check_literal) check_literal:lit=':' idx=16 ''
     (check_literal) check_literal:After drop space:':' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'mpg'

     (check_operator) 'mpg' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'mpg':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=16 ''
     (check_literal) check_literal:After drop space:'(' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'mpg'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=13 'mpg'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=13 'mpg'
   (check_literal)   '%' != 'm'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=13 'mpg'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=13 'mpg'
   (check_literal)   '"' != 'm'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'mpg'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'mpg'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'mpg'
    (check_textlabel) 'mpg' is a text label chstr:'g'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'mpg' Type:f
   (check_proc_call) 'mpg' is text label

    (check_literal) check_literal:lit=':' idx=16 ''
    (check_literal) check_literal:After drop space:':' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'mpg'

    (check_operator) 'mpg' igncomma:1
    (check_operator) ret0:is comma: 0

    (check_vname) check_vname 'mpg':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=16 ''
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=13 'mpg'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=13 'mpg'
  (check_literal)   '%' != 'm'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=13 'mpg'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=13 'mpg'
  (check_literal)   '"' != 'm'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'mpg'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'mpg'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'mpg'
   (check_textlabel) 'mpg' is a text label chstr:'g'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'mpg' Type:f
  (check_proc_call) 'mpg' is text label

   (check_literal) check_literal:lit=':' idx=16 ''
   (check_literal) check_literal:After drop space:':' idx=16 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'mpg'

   (check_operator) 'mpg' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'mpg':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=16 ''
   (check_literal) check_literal:After drop space:'(' idx=16 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'mpg' ref_ndeclare:1

  (scan_vname) scan_vname: 'mpg'
  (scan_vname) scan_vname: ret1 'mpg'
 (scan_variable) scan_variable: '' vname='MPG'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'MPG' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=16 ''
  (check_literal) check_literal:After drop space:'(' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='MPG' Float
(process_token)    Frst:1 T:'MPG' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'MPG'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:MPG is not function
token_is_variable: tok:'MPG'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:MPG is not function
(init_get_name) 
init_get_name:'MPG'
(init_get_name) 
init_get_name:'MPG'
(get_name) 
get_name:gn:'MPG'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f MPG
(add_var_info) Name:MPG Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '               MPG'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:859C
(scan_atom) ret1
(scan_expression) '' Before while igncomma:1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:2 buf2 i:2
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'MPG' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :MPG   *************
(type_check_stack_push)  type_check_stack_push: 'MPG'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'MPG' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'MPG' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'MPG'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:MPG    **********
(type_check_stack_push)  type_check_stack_push: 'MPG'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'MPG' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'MPG' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'MPG'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'MPG' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'MPG' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_expression_types) 


(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:F exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>U
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

(process_expression_types) 


(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'d'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=16 ''
     (check_literal) check_literal:After drop space:':' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print "MPG:";mpg
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=16 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=16 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'G' (71)
 (is_all_spaces) cline[8] = 'a' (97)
 (is_all_spaces) cline[9] = 'l' (108)
 (is_all_spaces) cline[10] = 'l' (108)
 (is_all_spaces) cline[11] = 'o' (111)
 (is_all_spaces) cline[12] = 'n' (110)
 (is_all_spaces) cline[13] = 's' (115)
 (is_all_spaces) cline[14] = '"' (34)
 (is_all_spaces) cline[15] = ';' (59)
 (is_all_spaces) cline[16] = 'g' (103)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "Gallons";g'
*********************
**print "Gallons";g**
*********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "Gallons";g'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "Gallons";g'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "Gallons";g'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "Gallons";g'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "Gallons";g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "Gallons";g'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "Gallons";g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "Gallons";g'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "Gallons";g'

   (check_operator) 'print "Gallons";g' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "Gallons";g':
   (check_vname) check_vname ret1 ' "Gallons";g':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "Gallons";g'

   (check_literal) check_literal:lit='(' idx=5 ' "Gallons";g'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "Gallons";g'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "Gallons";g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"Gallons";g'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "Gallons";g'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "Gallons";g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "Gallons";g'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "Gallons";g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "Gallons";g'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "Gallons";g'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "Gallons";g'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "Gallons";g'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "Gallons";g'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "Gallons";g'
   (check_literal) check_literal:After drop space:':' idx=5 ' "Gallons";g'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "Gallons";g'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "Gallons";g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "Gallons";g'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "Gallons";g'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Gallons";g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Gallons";g'
   (check_literal) check_literal:After while(): "Gallons";g
   (check_literal) ret1 Match. ' PRINT' == 'print "Gallons";g'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Gallons";g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Gallons";g'
   (check_literal) check_literal:After while(): "Gallons";g
   (check_literal) ret1 Match. ' PRINT' == 'print "Gallons";g'

   (check_expression) ' "Gallons";g'

    (check_eitem) check_eitem: '"Gallons";g'

     (check_function)  '"Gallons";g'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Gallons";g'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Gallons";g'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Gallons";g'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Gallons";g'
      (check_literal) check_literal:After while():Gallons";g
      (check_literal) ret1 Match. ' "' == '"Gallons";g'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ';g' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ';g' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Gallons";g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Gallons";g'
   (check_literal) check_literal:After while(): "Gallons";g
   (check_literal) ret1 Match. ' PRINT' == 'print "Gallons";g'
  (scan_print) Before while

   (check_expression) ' "Gallons";g'

    (check_eitem) check_eitem: '"Gallons";g'

     (check_function)  '"Gallons";g'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Gallons";g'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Gallons";g'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Gallons";g'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Gallons";g'
      (check_literal) check_literal:After while():Gallons";g
      (check_literal) ret1 Match. ' "' == '"Gallons";g'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ';g' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ';g' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "Gallons";g' igncomma:1

    (check_eitem) check_eitem: '"Gallons";g'

     (check_function)  '"Gallons";g'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Gallons";g'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Gallons";g'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Gallons";g'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Gallons";g'
      (check_literal) check_literal:After while():Gallons";g
      (check_literal) ret1 Match. ' "' == '"Gallons";g'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"Gallons";g'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Gallons";g'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Gallons";g'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Gallons";g'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Gallons";g'
      (check_literal) check_literal:After while():Gallons";g
      (check_literal) ret1 Match. ' "' == '"Gallons";g'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"Gallons";g'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Gallons";g'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"Gallons";g'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Gallons";g'
      (check_literal) check_literal:After while():Gallons";g
      (check_literal) ret1 Match. ' "' == '"Gallons";g'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"Gallons";g'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"Gallons";g'
       (check_literal) check_literal:After while():Gallons";g
       (check_literal) ret1 Match. ' "' == '"Gallons";g'
      (scan_string)   (in if) 'Gallons";g'
      (scan_string)   (in wh) 'Gallons";g'
      (scan_string)   (in wh) 'allons";g'
      (scan_string)   (in wh) 'allons";g'
      (scan_string)   (in wh) 'llons";g'
      (scan_string)   (in wh) 'llons";g'
      (scan_string)   (in wh) 'lons";g'
      (scan_string)   (in wh) 'lons";g'
      (scan_string)   (in wh) 'ons";g'
      (scan_string)   (in wh) 'ons";g'
      (scan_string)   (in wh) 'ns";g'
      (scan_string)   (in wh) 'ns";g'
      (scan_string)   (in wh) 's";g'
      (scan_string)   (in wh) 's";g'
      (scan_string)   (in wh) '";g'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"Gallons"' toktype:s exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"Gallons"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Gallons" is not function
token_is_variable: tok:'"Gallons"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Gallons" is not function
(   output_string) [U,()] s "Gallons"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ';g' Before while igncomma:1

    (check_operator) ';g' igncomma:1
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 ';g' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=15 ';g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=15 ';g'
   (check_literal)   ',' != ';'
   (check_literal) check_literal: ret0
  (scan_print) After scan expression II

   (check_literal) check_literal:lit=' ;' idx=15 ';g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=15 ';g'
   (check_literal) check_literal:After while():g
   (check_literal) ret1 Match. ' ;' == ';g'

   (scan_literal_core) scan_literal_core:lit=' ;' ';g'
   (scan_literal_core) scan_literal_core:After drop space:';g'
   (scan_literal_core) scan_literal_core:while loop:;g
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:';' toktype:F exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:';'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:; is not function
token_is_variable: tok:';'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:; is not function
 (process_token) **Unknown token **      ';'
 (scan_literal) ret1
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Semi colon present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Gallons"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :"Gallons"   *************
(type_check_stack_push)  type_check_stack_push: '"Gallons"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"Gallons"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"Gallons"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"Gallons"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:"Gallons"    **********
(type_check_stack_push)  type_check_stack_push: '"Gallons"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"Gallons"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"Gallons"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"Gallons"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Gallons"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Gallons"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_expression_types) 


(finalise_expression) Finalise expression done.
g
========================================================
(output_expression_start)

 (check_expression) 'g'

  (check_eitem) check_eitem: 'g'

   (check_function)  'g'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=16 'g'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=16 'g'
    (check_literal)   '%' != 'g'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=16 'g'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=16 'g'
    (check_literal)   '"' != 'g'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'g'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'g'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'g'
     (check_textlabel) 'g' is a text label chstr:'g'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'g' Type:f
    (check_proc_call) 'g' is text label

     (check_literal) check_literal:lit=':' idx=17 ''
     (check_literal) check_literal:After drop space:':' idx=17 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'g'

     (check_operator) 'g' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'g':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=17 ''
     (check_literal) check_literal:After drop space:'(' idx=17 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) 'g' igncomma:1

  (check_eitem) check_eitem: 'g'

   (check_function)  'g'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=16 'g'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=16 'g'
    (check_literal)   '%' != 'g'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=16 'g'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=16 'g'
    (check_literal)   '"' != 'g'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'g'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'g'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'g'
     (check_textlabel) 'g' is a text label chstr:'g'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'g' Type:f
    (check_proc_call) 'g' is text label

     (check_literal) check_literal:lit=':' idx=17 ''
     (check_literal) check_literal:After drop space:':' idx=17 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'g'

     (check_operator) 'g' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'g':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=17 ''
     (check_literal) check_literal:After drop space:'(' idx=17 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'g'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=16 'g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=16 'g'
   (check_literal)   '%' != 'g'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=16 'g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=16 'g'
   (check_literal)   '"' != 'g'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'g'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'g'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'g'
    (check_textlabel) 'g' is a text label chstr:'g'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'g' Type:f
   (check_proc_call) 'g' is text label

    (check_literal) check_literal:lit=':' idx=17 ''
    (check_literal) check_literal:After drop space:':' idx=17 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'g'

    (check_operator) 'g' igncomma:1
    (check_operator) ret0:is comma: 0

    (check_vname) check_vname 'g':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=17 ''
    (check_literal) check_literal:After drop space:'(' idx=17 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=16 'g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=16 'g'
  (check_literal)   '%' != 'g'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=16 'g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=16 'g'
  (check_literal)   '"' != 'g'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'g'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'g'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'g'
   (check_textlabel) 'g' is a text label chstr:'g'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'g' Type:f
  (check_proc_call) 'g' is text label

   (check_literal) check_literal:lit=':' idx=17 ''
   (check_literal) check_literal:After drop space:':' idx=17 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'g'

   (check_operator) 'g' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'g':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=17 ''
   (check_literal) check_literal:After drop space:'(' idx=17 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'g' ref_ndeclare:1

  (scan_vname) scan_vname: 'g'
  (scan_vname) scan_vname: ret1 'g'
 (scan_variable) scan_variable: '' vname='G'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'G' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=17 ''
  (check_literal) check_literal:After drop space:'(' idx=17 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='G' Float
(process_token)    Frst:1 T:'G' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'G'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:G is not function
token_is_variable: tok:'G'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:G is not function
(init_get_name) 
init_get_name:'G'
(init_get_name) 
init_get_name:'G'
(get_name) 
get_name:gn:'G'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f G
(add_var_info) Name:G Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 G'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:859C
(scan_atom) ret1
(scan_expression) '' Before while igncomma:1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=17 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=17 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=17 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=17 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:2 buf2 i:2
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :G   *************
(type_check_stack_push)  type_check_stack_push: 'G'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'G' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'G' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'G'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:G    **********
(type_check_stack_push)  type_check_stack_push: 'G'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'G' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'G' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'G'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_expression_types) 


(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:F exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>U
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

(process_expression_types) 


(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=17 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=17 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=17 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=17 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'d'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=17 ''
     (check_literal) check_literal:After drop space:':' idx=17 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=17 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=17 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=17 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=17 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=17 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=17 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=17 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=17 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print "Gallons";g
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=17 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=17 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=17 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'L' (76)
 (is_all_spaces) cline[8] = 'i' (105)
 (is_all_spaces) cline[9] = 't' (116)
 (is_all_spaces) cline[10] = 'r' (114)
 (is_all_spaces) cline[11] = 'e' (101)
 (is_all_spaces) cline[12] = 's' (115)
 (is_all_spaces) cline[13] = '"' (34)
 (is_all_spaces) cline[14] = ';' (59)
 (is_all_spaces) cline[15] = 'l' (108)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "Litres";l'
********************
**print "Litres";l**
********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "Litres";l'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "Litres";l'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "Litres";l'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "Litres";l'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "Litres";l'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "Litres";l'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "Litres";l'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "Litres";l'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "Litres";l'

   (check_operator) 'print "Litres";l' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "Litres";l':
   (check_vname) check_vname ret1 ' "Litres";l':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "Litres";l'

   (check_literal) check_literal:lit='(' idx=5 ' "Litres";l'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "Litres";l'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "Litres";l'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"Litres";l'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "Litres";l'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "Litres";l'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "Litres";l'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "Litres";l'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "Litres";l'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "Litres";l'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "Litres";l'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "Litres";l'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "Litres";l'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "Litres";l'
   (check_literal) check_literal:After drop space:':' idx=5 ' "Litres";l'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "Litres";l'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "Litres";l'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "Litres";l'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "Litres";l'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Litres";l'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Litres";l'
   (check_literal) check_literal:After while(): "Litres";l
   (check_literal) ret1 Match. ' PRINT' == 'print "Litres";l'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Litres";l'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Litres";l'
   (check_literal) check_literal:After while(): "Litres";l
   (check_literal) ret1 Match. ' PRINT' == 'print "Litres";l'

   (check_expression) ' "Litres";l'

    (check_eitem) check_eitem: '"Litres";l'

     (check_function)  '"Litres";l'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Litres";l'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Litres";l'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Litres";l'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Litres";l'
      (check_literal) check_literal:After while():Litres";l
      (check_literal) ret1 Match. ' "' == '"Litres";l'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ';l' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ';l' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Litres";l'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Litres";l'
   (check_literal) check_literal:After while(): "Litres";l
   (check_literal) ret1 Match. ' PRINT' == 'print "Litres";l'
  (scan_print) Before while

   (check_expression) ' "Litres";l'

    (check_eitem) check_eitem: '"Litres";l'

     (check_function)  '"Litres";l'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Litres";l'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Litres";l'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Litres";l'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Litres";l'
      (check_literal) check_literal:After while():Litres";l
      (check_literal) ret1 Match. ' "' == '"Litres";l'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ';l' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ';l' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "Litres";l' igncomma:1

    (check_eitem) check_eitem: '"Litres";l'

     (check_function)  '"Litres";l'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Litres";l'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Litres";l'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Litres";l'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Litres";l'
      (check_literal) check_literal:After while():Litres";l
      (check_literal) ret1 Match. ' "' == '"Litres";l'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"Litres";l'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Litres";l'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Litres";l'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Litres";l'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Litres";l'
      (check_literal) check_literal:After while():Litres";l
      (check_literal) ret1 Match. ' "' == '"Litres";l'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"Litres";l'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Litres";l'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"Litres";l'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Litres";l'
      (check_literal) check_literal:After while():Litres";l
      (check_literal) ret1 Match. ' "' == '"Litres";l'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"Litres";l'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"Litres";l'
       (check_literal) check_literal:After while():Litres";l
       (check_literal) ret1 Match. ' "' == '"Litres";l'
      (scan_string)   (in if) 'Litres";l'
      (scan_string)   (in wh) 'Litres";l'
      (scan_string)   (in wh) 'itres";l'
      (scan_string)   (in wh) 'itres";l'
      (scan_string)   (in wh) 'tres";l'
      (scan_string)   (in wh) 'tres";l'
      (scan_string)   (in wh) 'res";l'
      (scan_string)   (in wh) 'res";l'
      (scan_string)   (in wh) 'es";l'
      (scan_string)   (in wh) 'es";l'
      (scan_string)   (in wh) 's";l'
      (scan_string)   (in wh) 's";l'
      (scan_string)   (in wh) '";l'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"Litres"' toktype:s exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"Litres"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Litres" is not function
token_is_variable: tok:'"Litres"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Litres" is not function
(   output_string) [U,()] s "Litres"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ';l' Before while igncomma:1

    (check_operator) ';l' igncomma:1
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 ';l' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=14 ';l'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=14 ';l'
   (check_literal)   ',' != ';'
   (check_literal) check_literal: ret0
  (scan_print) After scan expression II

   (check_literal) check_literal:lit=' ;' idx=14 ';l'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=14 ';l'
   (check_literal) check_literal:After while():l
   (check_literal) ret1 Match. ' ;' == ';l'

   (scan_literal_core) scan_literal_core:lit=' ;' ';l'
   (scan_literal_core) scan_literal_core:After drop space:';l'
   (scan_literal_core) scan_literal_core:while loop:;l
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:';' toktype:F exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:';'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:; is not function
token_is_variable: tok:';'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:; is not function
 (process_token) **Unknown token **      ';'
 (scan_literal) ret1
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Semi colon present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Litres"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :"Litres"   *************
(type_check_stack_push)  type_check_stack_push: '"Litres"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"Litres"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"Litres"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"Litres"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:"Litres"    **********
(type_check_stack_push)  type_check_stack_push: '"Litres"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"Litres"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"Litres"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"Litres"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Litres"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Litres"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_expression_types) 


(finalise_expression) Finalise expression done.
l
========================================================
(output_expression_start)

 (check_expression) 'l'

  (check_eitem) check_eitem: 'l'

   (check_function)  'l'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=15 'l'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=15 'l'
    (check_literal)   '%' != 'l'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=15 'l'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=15 'l'
    (check_literal)   '"' != 'l'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'l'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'l'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'l'
     (check_textlabel) 'l' is a text label chstr:'l'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'l' Type:f
    (check_proc_call) 'l' is text label

     (check_literal) check_literal:lit=':' idx=16 ''
     (check_literal) check_literal:After drop space:':' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'l'

     (check_operator) 'l' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'l':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=16 ''
     (check_literal) check_literal:After drop space:'(' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) 'l' igncomma:1

  (check_eitem) check_eitem: 'l'

   (check_function)  'l'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=15 'l'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=15 'l'
    (check_literal)   '%' != 'l'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=15 'l'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=15 'l'
    (check_literal)   '"' != 'l'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'l'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'l'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'l'
     (check_textlabel) 'l' is a text label chstr:'l'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'l' Type:f
    (check_proc_call) 'l' is text label

     (check_literal) check_literal:lit=':' idx=16 ''
     (check_literal) check_literal:After drop space:':' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'l'

     (check_operator) 'l' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'l':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=16 ''
     (check_literal) check_literal:After drop space:'(' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'l'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=15 'l'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=15 'l'
   (check_literal)   '%' != 'l'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=15 'l'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=15 'l'
   (check_literal)   '"' != 'l'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'l'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'l'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'l'
    (check_textlabel) 'l' is a text label chstr:'l'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'l' Type:f
   (check_proc_call) 'l' is text label

    (check_literal) check_literal:lit=':' idx=16 ''
    (check_literal) check_literal:After drop space:':' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'l'

    (check_operator) 'l' igncomma:1
    (check_operator) ret0:is comma: 0

    (check_vname) check_vname 'l':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=16 ''
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=15 'l'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=15 'l'
  (check_literal)   '%' != 'l'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=15 'l'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=15 'l'
  (check_literal)   '"' != 'l'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'l'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'l'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'l'
   (check_textlabel) 'l' is a text label chstr:'l'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'l' Type:f
  (check_proc_call) 'l' is text label

   (check_literal) check_literal:lit=':' idx=16 ''
   (check_literal) check_literal:After drop space:':' idx=16 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'l'

   (check_operator) 'l' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'l':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=16 ''
   (check_literal) check_literal:After drop space:'(' idx=16 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'l' ref_ndeclare:1

  (scan_vname) scan_vname: 'l'
  (scan_vname) scan_vname: ret1 'l'
 (scan_variable) scan_variable: '' vname='L'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'L' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=16 ''
  (check_literal) check_literal:After drop space:'(' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='L' Float
(process_token)    Frst:1 T:'L' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'L'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:L is not function
token_is_variable: tok:'L'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:L is not function
(init_get_name) 
init_get_name:'L'
(init_get_name) 
init_get_name:'L'
(get_name) 
get_name:gn:'L'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f L
(add_var_info) Name:L Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 L'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:859C
(scan_atom) ret1
(scan_expression) '' Before while igncomma:1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:2 buf2 i:2
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :L   *************
(type_check_stack_push)  type_check_stack_push: 'L'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'L' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'L' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'L'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:L    **********
(type_check_stack_push)  type_check_stack_push: 'L'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'L' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'L' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'L'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_expression_types) 


(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:F exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>U
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

(process_expression_types) 


(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'d'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=16 ''
     (check_literal) check_literal:After drop space:':' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print "Litres";l
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=16 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=16 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'M' (77)
 (is_all_spaces) cline[8] = 'i' (105)
 (is_all_spaces) cline[9] = 'l' (108)
 (is_all_spaces) cline[10] = 'e' (101)
 (is_all_spaces) cline[11] = 's' (115)
 (is_all_spaces) cline[12] = '"' (34)
 (is_all_spaces) cline[13] = ';' (59)
 (is_all_spaces) cline[14] = 'm' (109)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "Miles";m'
*******************
**print "Miles";m**
*******************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "Miles";m'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "Miles";m'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "Miles";m'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "Miles";m'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "Miles";m'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "Miles";m'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "Miles";m'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "Miles";m'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "Miles";m'

   (check_operator) 'print "Miles";m' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "Miles";m':
   (check_vname) check_vname ret1 ' "Miles";m':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "Miles";m'

   (check_literal) check_literal:lit='(' idx=5 ' "Miles";m'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "Miles";m'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "Miles";m'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"Miles";m'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "Miles";m'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "Miles";m'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "Miles";m'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "Miles";m'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "Miles";m'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "Miles";m'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "Miles";m'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "Miles";m'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "Miles";m'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "Miles";m'
   (check_literal) check_literal:After drop space:':' idx=5 ' "Miles";m'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "Miles";m'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "Miles";m'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "Miles";m'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "Miles";m'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Miles";m'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Miles";m'
   (check_literal) check_literal:After while(): "Miles";m
   (check_literal) ret1 Match. ' PRINT' == 'print "Miles";m'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Miles";m'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Miles";m'
   (check_literal) check_literal:After while(): "Miles";m
   (check_literal) ret1 Match. ' PRINT' == 'print "Miles";m'

   (check_expression) ' "Miles";m'

    (check_eitem) check_eitem: '"Miles";m'

     (check_function)  '"Miles";m'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Miles";m'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Miles";m'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Miles";m'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Miles";m'
      (check_literal) check_literal:After while():Miles";m
      (check_literal) ret1 Match. ' "' == '"Miles";m'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ';m' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ';m' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Miles";m'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Miles";m'
   (check_literal) check_literal:After while(): "Miles";m
   (check_literal) ret1 Match. ' PRINT' == 'print "Miles";m'
  (scan_print) Before while

   (check_expression) ' "Miles";m'

    (check_eitem) check_eitem: '"Miles";m'

     (check_function)  '"Miles";m'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Miles";m'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Miles";m'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Miles";m'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Miles";m'
      (check_literal) check_literal:After while():Miles";m
      (check_literal) ret1 Match. ' "' == '"Miles";m'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ';m' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ';m' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "Miles";m' igncomma:1

    (check_eitem) check_eitem: '"Miles";m'

     (check_function)  '"Miles";m'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Miles";m'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Miles";m'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Miles";m'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Miles";m'
      (check_literal) check_literal:After while():Miles";m
      (check_literal) ret1 Match. ' "' == '"Miles";m'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"Miles";m'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Miles";m'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Miles";m'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Miles";m'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Miles";m'
      (check_literal) check_literal:After while():Miles";m
      (check_literal) ret1 Match. ' "' == '"Miles";m'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"Miles";m'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Miles";m'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"Miles";m'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Miles";m'
      (check_literal) check_literal:After while():Miles";m
      (check_literal) ret1 Match. ' "' == '"Miles";m'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"Miles";m'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"Miles";m'
       (check_literal) check_literal:After while():Miles";m
       (check_literal) ret1 Match. ' "' == '"Miles";m'
      (scan_string)   (in if) 'Miles";m'
      (scan_string)   (in wh) 'Miles";m'
      (scan_string)   (in wh) 'iles";m'
      (scan_string)   (in wh) 'iles";m'
      (scan_string)   (in wh) 'les";m'
      (scan_string)   (in wh) 'les";m'
      (scan_string)   (in wh) 'es";m'
      (scan_string)   (in wh) 'es";m'
      (scan_string)   (in wh) 's";m'
      (scan_string)   (in wh) 's";m'
      (scan_string)   (in wh) '";m'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"Miles"' toktype:s exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"Miles"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Miles" is not function
token_is_variable: tok:'"Miles"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Miles" is not function
(   output_string) [U,()] s "Miles"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ';m' Before while igncomma:1

    (check_operator) ';m' igncomma:1
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 ';m' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=13 ';m'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=13 ';m'
   (check_literal)   ',' != ';'
   (check_literal) check_literal: ret0
  (scan_print) After scan expression II

   (check_literal) check_literal:lit=' ;' idx=13 ';m'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=13 ';m'
   (check_literal) check_literal:After while():m
   (check_literal) ret1 Match. ' ;' == ';m'

   (scan_literal_core) scan_literal_core:lit=' ;' ';m'
   (scan_literal_core) scan_literal_core:After drop space:';m'
   (scan_literal_core) scan_literal_core:while loop:;m
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:';' toktype:F exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:';'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:; is not function
token_is_variable: tok:';'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:; is not function
 (process_token) **Unknown token **      ';'
 (scan_literal) ret1
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Semi colon present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Miles"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :"Miles"   *************
(type_check_stack_push)  type_check_stack_push: '"Miles"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"Miles"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"Miles"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"Miles"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:"Miles"    **********
(type_check_stack_push)  type_check_stack_push: '"Miles"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"Miles"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"Miles"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"Miles"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Miles"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Miles"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_expression_types) 


(finalise_expression) Finalise expression done.
m
========================================================
(output_expression_start)

 (check_expression) 'm'

  (check_eitem) check_eitem: 'm'

   (check_function)  'm'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'm'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'm'
    (check_literal)   '%' != 'm'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'm'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'm'
    (check_literal)   '"' != 'm'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'm'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'm'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'm'
     (check_textlabel) 'm' is a text label chstr:'m'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'m' Type:f
    (check_proc_call) 'm' is text label

     (check_literal) check_literal:lit=':' idx=15 ''
     (check_literal) check_literal:After drop space:':' idx=15 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'm'

     (check_operator) 'm' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'm':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=15 ''
     (check_literal) check_literal:After drop space:'(' idx=15 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) 'm' igncomma:1

  (check_eitem) check_eitem: 'm'

   (check_function)  'm'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'm'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'm'
    (check_literal)   '%' != 'm'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'm'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'm'
    (check_literal)   '"' != 'm'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'm'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'm'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'm'
     (check_textlabel) 'm' is a text label chstr:'m'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'m' Type:f
    (check_proc_call) 'm' is text label

     (check_literal) check_literal:lit=':' idx=15 ''
     (check_literal) check_literal:After drop space:':' idx=15 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'm'

     (check_operator) 'm' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'm':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=15 ''
     (check_literal) check_literal:After drop space:'(' idx=15 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'm'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=14 'm'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=14 'm'
   (check_literal)   '%' != 'm'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=14 'm'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=14 'm'
   (check_literal)   '"' != 'm'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'm'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'm'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'm'
    (check_textlabel) 'm' is a text label chstr:'m'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'m' Type:f
   (check_proc_call) 'm' is text label

    (check_literal) check_literal:lit=':' idx=15 ''
    (check_literal) check_literal:After drop space:':' idx=15 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'm'

    (check_operator) 'm' igncomma:1
    (check_operator) ret0:is comma: 0

    (check_vname) check_vname 'm':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=15 ''
    (check_literal) check_literal:After drop space:'(' idx=15 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=14 'm'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=14 'm'
  (check_literal)   '%' != 'm'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=14 'm'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=14 'm'
  (check_literal)   '"' != 'm'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'm'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'm'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'm'
   (check_textlabel) 'm' is a text label chstr:'m'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'m' Type:f
  (check_proc_call) 'm' is text label

   (check_literal) check_literal:lit=':' idx=15 ''
   (check_literal) check_literal:After drop space:':' idx=15 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'm'

   (check_operator) 'm' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'm':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=15 ''
   (check_literal) check_literal:After drop space:'(' idx=15 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'm' ref_ndeclare:1

  (scan_vname) scan_vname: 'm'
  (scan_vname) scan_vname: ret1 'm'
 (scan_variable) scan_variable: '' vname='M'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'M' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=15 ''
  (check_literal) check_literal:After drop space:'(' idx=15 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='M' Float
(process_token)    Frst:1 T:'M' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'M'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:M is not function
token_is_variable: tok:'M'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:M is not function
(init_get_name) 
init_get_name:'M'
(init_get_name) 
init_get_name:'M'
(get_name) 
get_name:gn:'M'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f M
(add_var_info) Name:M Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 M'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:859C
(scan_atom) ret1
(scan_expression) '' Before while igncomma:1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=15 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=15 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=15 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=15 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:2 buf2 i:2
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :M   *************
(type_check_stack_push)  type_check_stack_push: 'M'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'M' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'M' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'M'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:M    **********
(type_check_stack_push)  type_check_stack_push: 'M'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'M' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'M' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'M'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_expression_types) 


(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:F exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>U
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

(process_syntax_tree) Pass:1
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:1
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

(process_expression_types) 


(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=15 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=15 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=15 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=15 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'d'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=15 ''
     (check_literal) check_literal:After drop space:':' idx=15 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=15 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=15 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=15 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=15 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=15 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=15 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=15 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=15 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:1
 (typecheck_expression) Pass:1
 (process_expression_types) 


 (finalise_expression) Finalise expression done.
print "Miles";m
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=15 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=15 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=15 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'g' (103)
 (is_all_spaces) cline[1] = 'e' (101)
 (is_all_spaces) cline[2] = 't' (116)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'get'
*******
**get**
*******

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'get'
 (check_literal) check_literal:After drop space:'REM' idx=0 'get'
 (check_literal)   'R' != 'g'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'get'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'get'
 (check_literal)   'R' != 'g'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'get'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'get'
 (check_literal)   'R' != 'g'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'get'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'get'
 (check_literal)   'R' != 'g'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'get'

   (check_operator) 'get' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'get':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=3 ''
   (check_literal) check_literal:After drop space:'(' idx=3 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=3 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=3 ''
 (check_literal) check_literal  ret0 Empty test string
(check_assignment) check_assignment:ret0

 (check_declare) 'get'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'get'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'get'
  (check_literal)   'L' != 'g'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'get'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'get'
  (check_literal)   'L' != 'e'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'get'
   (check_textlabel) 'get' is a text label chstr:'t'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'get' Type:f

   (check_literal) check_literal:lit='::' idx=3 ''
   (check_literal) check_literal:After drop space:'::' idx=3 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'get'
   (check_textlabel) 'get' is a text label chstr:'t'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'get' Type:f
  (check_proc_call) 'get' is text label

   (check_literal) check_literal:lit=':' idx=3 ''
   (check_literal) check_literal:After drop space:':' idx=3 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_input) 'get'

   (check_literal) check_literal:lit=' INPUT' idx=0 'get'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'get'
   (check_literal)   'I' != 'g'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'get'

   (check_literal) check_literal:lit=' PRINT' idx=0 'get'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'get'
   (check_literal)   'P' != 'g'
   (check_literal) check_literal: ret0
  (check_print) check_print:ret0

  (check_print) check_print: 'get'

   (check_literal) check_literal:lit=' LPRINT' idx=0 'get'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LPRINT' idx=0 'get'
   (check_literal)   'L' != 'g'
   (check_literal) check_literal: ret0
  (check_print) check_print:ret0

  (check_return) check_return: 'get'

   (check_literal) check_literal:lit=' RETURN' idx=0 'get'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'RETURN' idx=0 'get'
   (check_literal)   'R' != 'g'
   (check_literal) check_literal: ret0
  (check_return) check_return:ret0

  (check_use) 'get'

   (check_literal) check_literal:lit=' USE' idx=0 'get'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'USE' idx=0 'get'
   (check_literal)   'U' != 'g'
   (check_literal) check_literal: ret0
  (check_use) ret0

  (check_onerr) check_onerr: 'get'

   (check_literal) check_literal:lit=' ONERR' idx=0 'get'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'ONERR' idx=0 'get'
   (check_literal)   'O' != 'g'
   (check_literal) check_literal: ret0
  (check_onerr) check_onerr:ret0

  (check_if) 'get'

   (check_literal) check_literal:lit=' IF' idx=0 'get'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'IF' idx=0 'get'
   (check_literal)   'I' != 'g'
   (check_literal) check_literal: ret0
  (check_if) ret0

  (check_do) 'get'

   (check_literal) check_literal:lit=' DO' idx=0 'get'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'DO' idx=0 'get'
   (check_literal)   'D' != 'g'
   (check_literal) check_literal: ret0
  (check_do) ret0

  (check_literal) check_literal:lit=' OFF' idx=0 'get'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'OFF' idx=0 'get'
  (check_literal)   'O' != 'g'
  (check_literal) check_literal: ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function)  'get'
  (check_function) Match 'get' with 'GET'
  (check_function)  ''
  (check_function)  'T'
  (check_function)  Check for correct type of function and string
  (check_function) No arguments
  (check_function) ret1
 (scan_line) scan_line:check_function: 

  (scan_function)  'get'
Dummy argument expression added
  (process_token)    Frst:1 T:'(' toktype:F exptype:U bufid:'EXP_BUFF_ID_NONE'
(output_sub_start)
 Push:'('
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (1)

  (op_stack_print) 000: ( type:U id:EXP_BUFF_ID_SUB_START
  (op_stack_print) ------------------

  (process_token)    Frst:0 T:')' toktype:F exptype:U bufid:'EXP_BUFF_ID_NONE'
Pop 4
  (op_stack_pop) Pop '(' type:U 
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (0)

  (op_stack_print) ------------------

(  output_sub_end)
(  output_sub_end)
  (scan_function) M=Name:'GET' num_elem:0
  (process_token)    Frst:0 T:'GET' toktype:F exptype:U bufid:'EXP_BUFF_ID_FUNCTION'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_FUNCTION'
  (token_is_integer)  tok:'GET'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) GET is function
 (function_return_type) 
function_return_type: 'GET' =>i
 (function_return_type) 
function_return_type: 'GET' =>0
process_token: 'GET' t=>i
 Push:'GET'
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: GET type:i id:EXP_BUFF_ID_FUNCTION
 (op_stack_print) ------------------

 (scan_function) ret1 (A)
(scan_line) ret1 function
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=3 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=3 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:3 buf2 i:0
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop 'GET' type:i 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped:GET i
 (output_operator) [U,()] U GET
 (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_SUB_START                  ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_FUNCTION                   ty:U qcty:U 'GET' npar:0 nidx:0 trapped:0 %:0  2: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()

 (process_syntax_tree) Pass:1
 (process_syntax_tree) *********Processing :   *************
 (type_check_stack_display) Type Check Stack (0)
 (process_syntax_tree) *********Processing :   *************
 (type_check_stack_display) Type Check Stack (0)
 (process_syntax_tree) *********Processing :   *************
 (type_check_stack_display) Type Check Stack (0)
 (process_syntax_tree) *********Processing :GET   *************
 (function_return_type) 
function_return_type: 'GET' =>i
 (function_return_type) 
function_return_type: 'GET' =>0
ret_type;0 i
process_syntax_tree:Ret type of GET : i
 (function_num_args) Name:GET argtype:''
 (process_syntax_tree) 0 args
 (function_num_args) Name:GET argtype:''
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N004: '000' type:0 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: '000' type:i (0), %:0
 (typecheck_expression) Pass:1
 (typecheck_expression)  *** BE:    **********
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression)  *** BE:    **********
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression)  *** BE:    **********
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression)  *** BE:GET    **********
 (function_return_type) 
function_return_type: 'GET' =>i
 (function_return_type) 
function_return_type: 'GET' =>0
ret_type;0 i
typecheck_expression:Ret type of GET : i
 (function_num_args) Name:GET argtype:''
 (typecheck_expression) 0 args
 (function_num_args) Name:GET argtype:''
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N004: '000' type:0 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: '000' type:i (0), %:0
N001       Read EXP_BUFF_ID_SUB_START                  ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_FUNCTION                   ty:i qcty:U 'GET' npar:0 nidx:0 trapped:0 %:0  0: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()

N001       Read EXP_BUFF_ID_SUB_START                  ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_FUNCTION                   ty:i qcty:U 'GET' npar:0 nidx:0 trapped:0 %:0  0: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()

 (process_expression_types) 


 (finalise_expression) Finalise expression done.
get
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=3 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=3 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=3 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ret0: End of input file
(scan_line) ret0: pull_next_line=0
(translate_file) Scan line failed
(finalise_expression) Finalise expression Buf i:0 buf2 i:4
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
(process_syntax_tree) Pass:1
(typecheck_expression) Pass:1
(process_expression_types) 


(finalise_expression) Finalise expression done.
(translate_file) Done
(translate_file) 
(nopl_trans) ********************************************************************************
(nopl_trans) **                         Pass 2                                             **
(nopl_trans) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) **                                                                            **
(translate_file) **                 TRANSLATE FILE                                             **
(translate_file) **                                                                            **
(translate_file) ********************************************************************************
(pull_next_line) Processing expression just parsed
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=0 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=0 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit
(pull_next_line) Checking for existing data in cline. cline_i=0 strlen:0 
(pull_next_line) Reading line
(pull_next_line) ------------------------------
(is_all_spaces) Is all spaces
(pull_next_line) Line was all spaces
(pull_next_line) Reading line
(pull_next_line) ------------------------------
(is_all_spaces) cline[0] = 'M' (77)
(is_all_spaces) cline[1] = 'P' (80)
(is_all_spaces) cline[2] = 'G' (71)
(is_all_spaces) cline[3] = ':' (58)
(is_all_spaces) Is not all spaces
(pull_next_line) Got a line: 'MPG:'
********
**MPG:**
********

(pull_next_line) ret1
(process_token)    Frst:1 T:'PROCDEF' toktype:s exptype:U bufid:'EXP_BUFF_ID_META'
(process_token) Before switch, bufid:'EXP_BUFF_ID_META'
(process_token) Buff id PROCDEF
(output_generic) [U,()] U PROCDEF exp_type:U

 (scan_procdef) 

  (check_textlabel) 'MPG:'
  (check_textlabel) 'MPG' is a text label chstr:'G'
  (check_textlabel) Exit char::
  (check_textlabel) check_textlabel:ret1 Name:'MPG' Type:f
 (scan_procdef) Text label:'MPG'

  (check_literal) check_literal:lit=':' idx=3 ':'
  (check_literal) check_literal:After drop space:':' idx=3 ':'
  (check_literal) check_literal:After while():
  (check_literal) ret1 Match. ':' == ':'

  (check_literal) check_literal:lit=' (' idx=4 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'(' idx=4 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_param_list) scan_param_list:ret0
(scan_procdef) ret1 Type:f
(translate_file) 
cline scanned OK
(pull_next_line) Processing expression just parsed
(finalise_expression) Finalise expression Buf i:1 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U 'PROCDEF' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PROCDEF   *************
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PROCDEF    **********
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U 'PROCDEF' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

N001       Read EXP_BUFF_ID_META                       ty:U qcty:U 'PROCDEF' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:0051
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:META 'PROCDEF'
(output_qcode_for_line) QC:Building QCode header
(build_qcode_header) ===Pass number:2 qcode_idx:0000===
(build_qcode_header) ===Building qcode header===
(set_qcode_header_byte_at) idx:0000 len:2 val:00
(set_qcode_header_byte_at) idx:0002 len:2 val:00
(build_qcode_header) ===Num externals: 0===
(build_qcode_header) ===Num parameters:0===
(set_qcode_header_byte_at) idx:0004 len:1 val:00
(set_qcode_header_byte_at) idx:0005 len:2 val:00
(build_qcode_header) ===Num globals:0===
(build_qcode_header) **Globals**
(set_qcode_header_byte_at) idx:0005 len:2 val:00
(build_qcode_header) Global start:7 Global end:7 global_table_size:0
(build_qcode_header) **Externals**
(set_qcode_header_byte_at) idx:0007 len:2 val:00
(set_qcode_header_byte_at) idx:0007 len:2 val:00
(build_qcode_header) ===First byte after global table:0002  first_byte_of_globals:0002===
(build_qcode_header) **Rewriting globals**
(build_qcode_header) 0 M FFFFFFF6 delta:8
(build_qcode_header) 1 L FFFFFFEE delta:8
(build_qcode_header) 2 MPG FFFFFFE6 delta:8
(build_qcode_header) 3 G FFFFFFDE delta:8
(build_qcode_header) size of string fixup idx:0009 idx:0009
(set_qcode_header_byte_at) idx:0009 len:2 val:00
(set_qcode_header_byte_at) idx:0009 len:2 val:00
(build_qcode_header) Size of string fixups:00
(set_qcode_header_byte_at) idx:000B len:2 val:00
(set_qcode_header_byte_at) idx:000B len:2 val:00
(build_qcode_header) Size of array fixups:00
(build_qcode_header) Var_ptr:0022 first byte glob:0002 size vars:0020
(set_qcode_header_byte_at) idx:0000 len:2 val:22
(build_qcode_header) First byte of QCode:000D
(set_qcode_header_byte_at) idx:000D len:1 val:59
(set_qcode_header_byte_at) idx:000E len:1 val:B2
(build_qcode_header) After build qcode_idx:000F
(finalise_expression) Finalise expression done.
MPG:
========================================================
(output_expression_start)
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=4 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=4 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit
(pull_next_line) Checking for existing data in cline. cline_i=4 strlen:0 
(pull_next_line) Reading line
(pull_next_line) ------------------------------
(is_all_spaces) Is all spaces
(pull_next_line) Line was all spaces
(pull_next_line) Reading line
(pull_next_line) ------------------------------
(is_all_spaces) cline[0] = 'l' (108)
(is_all_spaces) cline[1] = 'o' (111)
(is_all_spaces) cline[2] = 'c' (99)
(is_all_spaces) cline[3] = 'a' (97)
(is_all_spaces) cline[4] = 'l' (108)
(is_all_spaces) cline[5] = ' ' (32)
(is_all_spaces) cline[6] = 'm' (109)
(is_all_spaces) cline[7] = ',' (44)
(is_all_spaces) cline[8] = 'l' (108)
(is_all_spaces) cline[9] = ',' (44)
(is_all_spaces) cline[10] = 'm' (109)
(is_all_spaces) cline[11] = 'p' (112)
(is_all_spaces) cline[12] = 'g' (103)
(is_all_spaces) cline[13] = ',' (44)
(is_all_spaces) cline[14] = 'g' (103)
(is_all_spaces) Is not all spaces
(pull_next_line) Got a line: 'local m,l,mpg,g'
*******************
**local m,l,mpg,g**
*******************

(pull_next_line) ret1

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:000F
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
local m,l,mpg,g
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=0 'local m,l,mpg,g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=0 'local m,l,mpg,g'
  (check_literal)   ':' != 'l'
  (check_literal) check_literal: ret0
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=0 strlen:15 
 (pull_next_line) Data still in line buffer, check not all space
 (is_all_spaces) cline[0] = 'l' (108)
 (is_all_spaces) cline[1] = 'o' (111)
 (is_all_spaces) cline[2] = 'c' (99)
 (is_all_spaces) cline[3] = 'a' (97)
 (is_all_spaces) cline[4] = 'l' (108)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = 'm' (109)
 (is_all_spaces) cline[7] = ',' (44)
 (is_all_spaces) cline[8] = 'l' (108)
 (is_all_spaces) cline[9] = ',' (44)
 (is_all_spaces) cline[10] = 'm' (109)
 (is_all_spaces) cline[11] = 'p' (112)
 (is_all_spaces) cline[12] = 'g' (103)
 (is_all_spaces) cline[13] = ',' (44)
 (is_all_spaces) cline[14] = 'g' (103)
 (is_all_spaces) Is not all spaces
 (pull_next_line) ret1  Not all spaces

 (check_literal) check_literal:lit='REM' idx=0 'local m,l,mpg,g'
 (check_literal) check_literal:After drop space:'REM' idx=0 'local m,l,mpg,g'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'local m,l,mpg,g'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'local m,l,mpg,g'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'local m,l,mpg,g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'local m,l,mpg,g'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'local m,l,mpg,g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'local m,l,mpg,g'
 (check_literal)   'R' != 'l'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'local m,l,mpg,g'

   (check_operator) 'local m,l,mpg,g' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'local m,l,mpg,g':
   (check_vname) check_vname ret1 ' m,l,mpg,g':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' m,l,mpg,g'

   (check_literal) check_literal:lit='(' idx=5 ' m,l,mpg,g'
   (check_literal) check_literal:After drop space:'(' idx=5 ' m,l,mpg,g'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' m,l,mpg,g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 'm,l,mpg,g'
 (check_literal)   '=' != 'm'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'local m,l,mpg,g'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'local m,l,mpg,g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local m,l,mpg,g'
  (check_literal) check_literal:After while(): m,l,mpg,g
  (check_literal) ret1 Match. ' LOCAL' == 'local m,l,mpg,g'
 (check_declare) check_declare:ret 1

  (scan_declare) scan_declare:

   (check_literal) check_literal:lit=' LOCAL' idx=0 'local m,l,mpg,g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local m,l,mpg,g'
   (check_literal) check_literal:After while(): m,l,mpg,g
   (check_literal) ret1 Match. ' LOCAL' == 'local m,l,mpg,g'

   (scan_localglobal) 'local m,l,mpg,g'

    (check_literal) check_literal:lit=' LOCAL' idx=0 'local m,l,mpg,g'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'LOCAL' idx=0 'local m,l,mpg,g'
    (check_literal) check_literal:After while(): m,l,mpg,g
    (check_literal) ret1 Match. ' LOCAL' == 'local m,l,mpg,g'
   (process_token)    Frst:1 T:' LOCAL' toktype:? exptype:U bufid:'EXP_BUFF_ID_META'
   (process_token) Before switch, bufid:'EXP_BUFF_ID_META'
   (process_token) Buff id  LOCAL
   (output_generic) [U,()] U  LOCAL exp_type:U

    (check_variable) 'm,l,mpg,g'

     (check_operator) 'm,l,mpg,g' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'm,l,mpg,g':
     (check_vname) check_vname ret1 ',l,mpg,g':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ',l,mpg,g'

     (check_literal) check_literal:lit='(' idx=7 ',l,mpg,g'
     (check_literal) check_literal:After drop space:'(' idx=7 ',l,mpg,g'
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (scan_variable) ' m,l,mpg,g' ref_ndeclare:0

    (scan_vname) scan_vname: ' m,l,mpg,g'
    (scan_vname) scan_vname: ret1 'm'
   (scan_variable) scan_variable: ',l,mpg,g' vname='M'
   (token_is_other_keyword) 
   (token_is_other_keyword) 'M' is not other keyword
   (scan_variable) Array test ',l,mpg,g'

    (check_literal) check_literal:lit='(' idx=7 ',l,mpg,g'
    (check_literal) check_literal:After drop space:'(' idx=7 ',l,mpg,g'
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (scan_variable) scan_variable:ret1 vname='M' Float
  (process_token)    Frst:1 T:'M' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:'M'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:M is not function
token_is_variable: tok:'M'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:M is not function
 (init_get_name) 
init_get_name:'M'
 (init_get_name) 
init_get_name:'M'
 (get_name) 
get_name:gn:'M'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f M
 (add_var_info) Name:M Idx:-1
 (add_var_info) Already present
 (add_var_info)   Declaration so possibly BAD
 (scan_variable) ret1
(scan_localglobal)  LOCAL variable:'M'
VAR: '                 M'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:D75C
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=7 ',l,mpg,g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=7 ',l,mpg,g'
 (check_literal)   ':' != ','
 (check_literal) check_literal: ret0
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=7 ',l,mpg,g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=7 ',l,mpg,g'
 (check_literal) check_literal:After while():l,mpg,g
 (check_literal) ret1 Match. ' ,' == ',l,mpg,g'

 (scan_literal_core) scan_literal_core:lit=' ,' ',l,mpg,g'
 (scan_literal_core) scan_literal_core:After drop space:',l,mpg,g'
 (scan_literal_core) scan_literal_core:while loop:,l,mpg,g
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:? exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 'l,mpg,g'

  (check_operator) 'l,mpg,g' igncomma:1
  (check_operator) ret0:is comma: 0

  (check_vname) check_vname 'l,mpg,g':
  (check_vname) check_vname ret1 ',mpg,g':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ',mpg,g'

  (check_literal) check_literal:lit='(' idx=9 ',mpg,g'
  (check_literal) check_literal:After drop space:'(' idx=9 ',mpg,g'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) 'l,mpg,g' ref_ndeclare:0

  (scan_vname) scan_vname: 'l,mpg,g'
  (scan_vname) scan_vname: ret1 'l'
 (scan_variable) scan_variable: ',mpg,g' vname='L'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'L' is not other keyword
 (scan_variable) Array test ',mpg,g'

  (check_literal) check_literal:lit='(' idx=9 ',mpg,g'
  (check_literal) check_literal:After drop space:'(' idx=9 ',mpg,g'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='L' Float
(process_token)    Frst:0 T:'L' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'L'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:L is not function
token_is_variable: tok:'L'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:L is not function
(init_get_name) 
init_get_name:'L'
(init_get_name) 
init_get_name:'L'
(get_name) 
get_name:gn:'L'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f L
(add_var_info) Name:L Idx:-1
(add_var_info) Already present
(add_var_info)   Declaration so possibly BAD
(scan_variable) ret1
(scan_localglobal)  LOCAL variable:'L'
VAR: '                 L'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:D75C
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=9 ',mpg,g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=9 ',mpg,g'
 (check_literal)   ':' != ','
 (check_literal) check_literal: ret0
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=9 ',mpg,g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=9 ',mpg,g'
 (check_literal) check_literal:After while():mpg,g
 (check_literal) ret1 Match. ' ,' == ',mpg,g'

 (scan_literal_core) scan_literal_core:lit=' ,' ',mpg,g'
 (scan_literal_core) scan_literal_core:After drop space:',mpg,g'
 (scan_literal_core) scan_literal_core:while loop:,mpg,g
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:? exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 'mpg,g'

  (check_operator) 'mpg,g' igncomma:1
  (check_operator) ret0:is comma: 0

  (check_vname) check_vname 'mpg,g':
  (check_vname) check_vname ret1 ',g':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ',g'

  (check_literal) check_literal:lit='(' idx=13 ',g'
  (check_literal) check_literal:After drop space:'(' idx=13 ',g'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) 'mpg,g' ref_ndeclare:0

  (scan_vname) scan_vname: 'mpg,g'
  (scan_vname) scan_vname: ret1 'mpg'
 (scan_variable) scan_variable: ',g' vname='MPG'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'MPG' is not other keyword
 (scan_variable) Array test ',g'

  (check_literal) check_literal:lit='(' idx=13 ',g'
  (check_literal) check_literal:After drop space:'(' idx=13 ',g'
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='MPG' Float
(process_token)    Frst:0 T:'MPG' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'MPG'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:MPG is not function
token_is_variable: tok:'MPG'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:MPG is not function
(init_get_name) 
init_get_name:'MPG'
(init_get_name) 
init_get_name:'MPG'
(get_name) 
get_name:gn:'MPG'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f MPG
(add_var_info) Name:MPG Idx:-1
(add_var_info) Already present
(add_var_info)   Declaration so possibly BAD
(scan_variable) ret1
(scan_localglobal)  LOCAL variable:'MPG'
VAR: '               MPG'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:D75C
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=13 ',g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=13 ',g'
 (check_literal)   ':' != ','
 (check_literal) check_literal: ret0
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=13 ',g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=13 ',g'
 (check_literal) check_literal:After while():g
 (check_literal) ret1 Match. ' ,' == ',g'

 (scan_literal_core) scan_literal_core:lit=' ,' ',g'
 (scan_literal_core) scan_literal_core:After drop space:',g'
 (scan_literal_core) scan_literal_core:while loop:,g
 (scan_literal_core) ret1
(process_token)    Frst:0 T:',' toktype:? exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:','
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
token_is_variable: tok:','
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:, is not function
(process_token) **Unknown token **      ','
(scan_literal) ret1

 (check_variable) 'g'

  (check_operator) 'g' igncomma:1
  (check_operator) ret0:is comma: 0

  (check_vname) check_vname 'g':
  (check_vname) check_vname ret1 '':
 (check_variable) Name: ''
 (check_variable) check_variable: Ary test ''

  (check_literal) check_literal:lit='(' idx=15 ''
  (check_literal) check_literal:After drop space:'(' idx=15 ''
  (check_literal) check_literal  ret0 Empty test string
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) 'g' ref_ndeclare:0

  (scan_vname) scan_vname: 'g'
  (scan_vname) scan_vname: ret1 'g'
 (scan_variable) scan_variable: '' vname='G'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'G' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=15 ''
  (check_literal) check_literal:After drop space:'(' idx=15 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='G' Float
(process_token)    Frst:0 T:'G' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'G'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:G is not function
token_is_variable: tok:'G'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:G is not function
(init_get_name) 
init_get_name:'G'
(init_get_name) 
init_get_name:'G'
(get_name) 
get_name:gn:'G'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f G
(add_var_info) Name:G Idx:-1
(add_var_info) Already present
(add_var_info)   Declaration so possibly BAD
(scan_variable) ret1
(scan_localglobal)  LOCAL variable:'G'
VAR: '                 G'      Local Float             DECLARE max_str:  0 max_ary:  0 num_ind:  0 offset:D75C
(drop_colon) Entry

 (check_literal) check_literal:lit=' :' idx=15 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=15 ''
 (check_literal) check_literal  ret0 Empty test string
(drop_colon) Exit

 (check_literal) check_literal:lit=' ,' idx=15 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=15 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_variable) ''

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0

  (check_vname) check_vname '':
  (check_vname) check_vname ret0 '':
 (check_variable) check_variable:ret0 
(scan_localglobal) ret1:End of line
(scan_declare) scan_declare:ret 1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=15 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=15 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:5 buf2 i:0
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'MPG' npar:0 nidx:0 trapped:0 %:0  0: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  2: 4 1 -822624274 781119190 -22285654 -303129682 2130564856 -22106581 1026472951 801037165 -554709254 -1153454290 -1090967126 -68964498 -306194770 -1146130769 -1075119494 -553996305 -1146115082 -1344504177  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing : LOCAL   *************
 (type_check_stack_display) Type Check Stack (0)
 (process_syntax_tree) *********Processing :M   *************
 (type_check_stack_push)  type_check_stack_push: 'M'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'M' type:f (1), %:0
 (process_syntax_tree) *********Processing :L   *************
 (type_check_stack_push)  type_check_stack_push: 'L'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print)  N003: 'L' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'M' type:f (1), %:0
 (type_check_stack_display) 001: 'L' type:f (1), %:0
 (process_syntax_tree) *********Processing :MPG   *************
 (type_check_stack_push)  type_check_stack_push: 'MPG'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print)  N003: 'L' type:1 %:0
 (type_check_stack_print)  N004: 'MPG' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'M' type:f (1), %:0
 (type_check_stack_display) 001: 'L' type:f (1), %:0
 (type_check_stack_display) 002: 'MPG' type:f (1), %:0
 (process_syntax_tree) *********Processing :G   *************
 (type_check_stack_push)  type_check_stack_push: 'G'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (4)

 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print)  N003: 'L' type:1 %:0
 (type_check_stack_print)  N004: 'MPG' type:1 %:0
 (type_check_stack_print)  N005: 'G' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (4)
 (type_check_stack_display) 000: 'M' type:f (1), %:0
 (type_check_stack_display) 001: 'L' type:f (1), %:0
 (type_check_stack_display) 002: 'MPG' type:f (1), %:0
 (type_check_stack_display) 003: 'G' type:f (1), %:0
 (type_check_stack_only_field_data) Type Check Stack ptr:(4)
 (type_check_stack_only_field_data) 000: 'M' type:f (1)
 (type_check_stack_only_field_data) 001: 'L' type:f (1)
 (type_check_stack_only_field_data) 002: 'MPG' type:f (1)
 (type_check_stack_only_field_data) 003: 'G' type:f (1)
 (process_syntax_tree) Value left stacked so DROP needed
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE: LOCAL    **********
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression)  *** BE:M    **********
 (type_check_stack_push)  type_check_stack_push: 'M'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'M' type:f (1), %:0
 (typecheck_expression)  *** BE:L    **********
 (type_check_stack_push)  type_check_stack_push: 'L'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print)  N003: 'L' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'M' type:f (1), %:0
 (type_check_stack_display) 001: 'L' type:f (1), %:0
 (typecheck_expression)  *** BE:MPG    **********
 (type_check_stack_push)  type_check_stack_push: 'MPG'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print)  N003: 'L' type:1 %:0
 (type_check_stack_print)  N004: 'MPG' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'M' type:f (1), %:0
 (type_check_stack_display) 001: 'L' type:f (1), %:0
 (type_check_stack_display) 002: 'MPG' type:f (1), %:0
 (typecheck_expression)  *** BE:G    **********
 (type_check_stack_push)  type_check_stack_push: 'G'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (4)

 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print)  N003: 'L' type:1 %:0
 (type_check_stack_print)  N004: 'MPG' type:1 %:0
 (type_check_stack_print)  N005: 'G' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (4)
 (type_check_stack_display) 000: 'M' type:f (1), %:0
 (type_check_stack_display) 001: 'L' type:f (1), %:0
 (type_check_stack_display) 002: 'MPG' type:f (1), %:0
 (type_check_stack_display) 003: 'G' type:f (1), %:0
 (type_check_stack_only_field_data) Type Check Stack ptr:(4)
 (type_check_stack_only_field_data) 000: 'M' type:f (1)
 (type_check_stack_only_field_data) 001: 'L' type:f (1)
 (type_check_stack_only_field_data) 002: 'MPG' type:f (1)
 (type_check_stack_only_field_data) 003: 'G' type:f (1)
 (typecheck_expression) Value left stacked so DROP needed
N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'MPG' npar:0 nidx:0 trapped:0 %:0  0: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: 4 1 -822624274 781119190 -22285654 -303129682 2130564856 -22106581 1026472951 801037165 -554709254 -1153454290 -1090967126 -68964498 -306194770 -1146130769 -1075119494 -553996305 -1146115082 -1344504177  nb 0:()

N001       Read EXP_BUFF_ID_META                       ty:U qcty:U ' LOCAL' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'MPG' npar:0 nidx:0 trapped:0 %:0  0: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()
N005       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: 4 1 -822624274 781119190 -22285654 -303129682 2130564856 -22106581 1026472951 801037165 -554709254 -1153454290 -1090967126 -68964498 -306194770 -1146130769 -1075119494 -553996305 -1146115082 -1344504177  nb 0:()
N005       Read EXP_BUFF_ID_FUNCTION                   ty:f qcty:U 'DROP' npar:0 nidx:0 trapped:0 %:0  0: 4 1 -822624274 781119190 -22285654 -303129682 2130564856 -22106581 1026472951 801037165 -554709254 -1153454290 -1090967126 -68964498 -306194770 -1146130769 -1075119494 -553996305 -1146115082 -1344504177  nb 0:()

 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:6 qcode_idx:000F
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (output_qcode_for_line) QC:META ' LOCAL'
 (finalise_expression) Finalise expression done.
local m,l,mpg,g
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=15 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=15 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=15 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'P' (80)
 (is_all_spaces) cline[1] = 'R' (82)
 (is_all_spaces) cline[2] = 'I' (73)
 (is_all_spaces) cline[3] = 'N' (78)
 (is_all_spaces) cline[4] = 'T' (84)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'M' (77)
 (is_all_spaces) cline[8] = 'i' (105)
 (is_all_spaces) cline[9] = 'l' (108)
 (is_all_spaces) cline[10] = 'e' (101)
 (is_all_spaces) cline[11] = 's' (115)
 (is_all_spaces) cline[12] = '"' (34)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'PRINT "Miles"'
*****************
**PRINT "Miles"**
*****************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'PRINT "Miles"'
 (check_literal) check_literal:After drop space:'REM' idx=0 'PRINT "Miles"'
 (check_literal)   'R' != 'P'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'PRINT "Miles"'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'PRINT "Miles"'
 (check_literal)   'R' != 'P'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'PRINT "Miles"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'PRINT "Miles"'
 (check_literal)   'R' != 'P'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'PRINT "Miles"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'PRINT "Miles"'
 (check_literal)   'R' != 'P'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'PRINT "Miles"'

   (check_operator) 'PRINT "Miles"' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'PRINT "Miles"':
   (check_vname) check_vname ret1 ' "Miles"':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "Miles"'

   (check_literal) check_literal:lit='(' idx=5 ' "Miles"'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "Miles"'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "Miles"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"Miles"'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'PRINT "Miles"'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'PRINT "Miles"'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'PRINT "Miles"'
  (check_literal)   'L' != 'P'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'PRINT "Miles"'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'PRINT "Miles"'
  (check_literal)   'G' != 'P'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'PRINT "Miles"'
   (check_textlabel) 'PRINT' is a text label chstr:'T'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'PRINT' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "Miles"'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "Miles"'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'PRINT "Miles"'
   (check_textlabel) 'PRINT' is a text label chstr:'T'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'PRINT' Type:f
  (check_proc_call) 'PRINT' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "Miles"'
   (check_literal) check_literal:After drop space:':' idx=5 ' "Miles"'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'PRINT "Miles"'

   (check_literal) check_literal:lit=' INPUT' idx=0 'PRINT "Miles"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'PRINT "Miles"'
   (check_literal)   'I' != 'P'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'PRINT "Miles"'

   (check_literal) check_literal:lit=' PRINT' idx=0 'PRINT "Miles"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'PRINT "Miles"'
   (check_literal) check_literal:After while(): "Miles"
   (check_literal) ret1 Match. ' PRINT' == 'PRINT "Miles"'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'PRINT "Miles"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'PRINT "Miles"'
   (check_literal) check_literal:After while(): "Miles"
   (check_literal) ret1 Match. ' PRINT' == 'PRINT "Miles"'

   (check_expression) ' "Miles"'

    (check_eitem) check_eitem: '"Miles"'

     (check_function)  '"Miles"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Miles"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Miles"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Miles"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Miles"'
      (check_literal) check_literal:After while():Miles"
      (check_literal) ret1 Match. ' "' == '"Miles"'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 '' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'PRINT "Miles"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'PRINT "Miles"'
   (check_literal) check_literal:After while(): "Miles"
   (check_literal) ret1 Match. ' PRINT' == 'PRINT "Miles"'
  (scan_print) Before while

   (check_expression) ' "Miles"'

    (check_eitem) check_eitem: '"Miles"'

     (check_function)  '"Miles"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Miles"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Miles"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Miles"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Miles"'
      (check_literal) check_literal:After while():Miles"
      (check_literal) ret1 Match. ' "' == '"Miles"'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 '' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "Miles"' igncomma:1

    (check_eitem) check_eitem: '"Miles"'

     (check_function)  '"Miles"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Miles"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Miles"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Miles"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Miles"'
      (check_literal) check_literal:After while():Miles"
      (check_literal) ret1 Match. ' "' == '"Miles"'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"Miles"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Miles"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Miles"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Miles"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Miles"'
      (check_literal) check_literal:After while():Miles"
      (check_literal) ret1 Match. ' "' == '"Miles"'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"Miles"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Miles"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"Miles"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Miles"'
      (check_literal) check_literal:After while():Miles"
      (check_literal) ret1 Match. ' "' == '"Miles"'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"Miles"'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"Miles"'
       (check_literal) check_literal:After while():Miles"
       (check_literal) ret1 Match. ' "' == '"Miles"'
      (scan_string)   (in if) 'Miles"'
      (scan_string)   (in wh) 'Miles"'
      (scan_string)   (in wh) 'iles"'
      (scan_string)   (in wh) 'iles"'
      (scan_string)   (in wh) 'les"'
      (scan_string)   (in wh) 'les"'
      (scan_string)   (in wh) 'es"'
      (scan_string)   (in wh) 'es"'
      (scan_string)   (in wh) 's"'
      (scan_string)   (in wh) 's"'
      (scan_string)   (in wh) '"'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"Miles"' toktype:s exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"Miles"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Miles" is not function
token_is_variable: tok:'"Miles"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Miles" is not function
(   output_string) [U,()] s "Miles"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) '' Before while igncomma:1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 '' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=13 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) After scan expression II

   (check_literal) check_literal:lit=' ;' idx=13 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) Checking if delimiter was present
  (scan_print) No delimiter present
  (finalise_expression) Finalise expression Buf i:2 buf2 i:6
  (op_stack_finalise) Finalise stack
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Miles"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

  (process_syntax_tree) Pass:2
  (process_syntax_tree) *********Processing :"Miles"   *************
  (type_check_stack_push)  type_check_stack_push: '"Miles"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: '"Miles"' type:2 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '"Miles"' type:s (2), %:0
  (process_syntax_tree) *********Processing :PRINT   *************
  (process_syntax_tree) PRINT type adjust
  (type_check_stack_pop)   type_check_stack_pop: '"Miles"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:2
  (typecheck_expression)  *** BE:"Miles"    **********
  (type_check_stack_push)  type_check_stack_push: '"Miles"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: '"Miles"' type:2 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '"Miles"' type:s (2), %:0
  (typecheck_expression)  *** BE:PRINT    **********
  (typecheck_expression) PRINT type adjust
  (type_check_stack_pop)   type_check_stack_pop: '"Miles"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Miles"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Miles"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

  (process_expression_types) 


  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:000F
  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) QC: i:0
  (output_qcode_for_line) QC:0 String Literal '"Miles"' EXP_BUFF_ID_STR
  (set_qcode_header_byte_at) idx:000F len:1 val:24
  (set_qcode_header_byte_at) idx:0010 len:1 val:05
  (set_qcode_header_byte_at) idx:0011 len:1 val:4D
  (set_qcode_header_byte_at) idx:0012 len:1 val:69
  (set_qcode_header_byte_at) idx:0013 len:1 val:6C
  (set_qcode_header_byte_at) idx:0014 len:1 val:65
  (set_qcode_header_byte_at) idx:0015 len:1 val:73
  (output_qcode_for_line) QC: i:1
  (output_qcode_for_line) QC:PRINT
  (set_qcode_header_byte_at) idx:0016 len:1 val:71
  (finalise_expression) Finalise expression done.
  (process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>U
 Push:'PRINT'
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (1)

  (op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
  (op_stack_print) ------------------

  (finalise_expression) Finalise expression Buf i:0 buf2 i:2
  (op_stack_finalise) Finalise stack
  (op_stack_pop) Pop 'PRINT' type:U 
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (0)

  (op_stack_print) ------------------

  (op_stack_finalise) Popped:PRINT U
  (output_operator) [U,()] U PRINT
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

  (process_syntax_tree) Pass:2
  (process_syntax_tree) *********Processing :PRINT   *************
default buf_id
  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:2
  (typecheck_expression)  *** BE:PRINT    **********
default buf_id
  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

  (process_expression_types) 


  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:0017
  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) QC: i:0
  (output_qcode_for_line) QC:PRINT
  (set_qcode_header_byte_at) idx:0017 len:1 val:73
  (finalise_expression) Finalise expression done.

   (check_expression) ''

    (check_eitem) check_eitem: ''

     (check_function)  ''
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=13 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=13 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=13 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=13 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'' float:0.000000e+00
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0

       (check_hex) check_hex: ''
       (check_hex) check_hex:ret0 not '$'
      (check_number) check_number: ret0

      (check_proc_call) check_proc_call:

       (check_textlabel) ''
       (check_textlabel) '' is a text label chstr:'d'
       (check_textlabel) Exit char:
       (check_textlabel) check_textlabel:ret1 Name:'' Type:f
      (check_proc_call) '' is text label

       (check_literal) check_literal:lit=':' idx=13 ''
       (check_literal) check_literal:After drop space:':' idx=13 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_proc_call) check_proc_call:ret0

      (check_variable) ''

       (check_operator) '' igncomma:1
       (check_operator) ret0:is comma: 0

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret0

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=13 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=13 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) ret0: No '('

     (check_addr_name) check_addr_name: ''

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_addr_name) check_addr_name: ret0
    (check_eitem) check_eitem:ret0

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret0 ''
  (scan_print) Check for trailing delimiter

   (check_literal) check_literal:lit=' ;' idx=13 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' ,' idx=13 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) scan_print:ret1 Expression 
 (scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=13 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=13 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:0018
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
PRINT "Miles"
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=13 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=13 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=13 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'I' (73)
 (is_all_spaces) cline[1] = 'N' (78)
 (is_all_spaces) cline[2] = 'P' (80)
 (is_all_spaces) cline[3] = 'U' (85)
 (is_all_spaces) cline[4] = 'T' (84)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = 'M' (77)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'INPUT M'
***********
**INPUT M**
***********

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'INPUT M'
 (check_literal) check_literal:After drop space:'REM' idx=0 'INPUT M'
 (check_literal)   'R' != 'I'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'INPUT M'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'INPUT M'
 (check_literal)   'R' != 'I'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'INPUT M'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'INPUT M'
 (check_literal)   'R' != 'I'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'INPUT M'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'INPUT M'
 (check_literal)   'R' != 'I'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'INPUT M'

   (check_operator) 'INPUT M' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'INPUT M':
   (check_vname) check_vname ret1 ' M':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' M'

   (check_literal) check_literal:lit='(' idx=5 ' M'
   (check_literal) check_literal:After drop space:'(' idx=5 ' M'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' M'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 'M'
 (check_literal)   '=' != 'M'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'INPUT M'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'INPUT M'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'INPUT M'
  (check_literal)   'L' != 'I'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'INPUT M'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'INPUT M'
  (check_literal)   'G' != 'I'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'INPUT M'
   (check_textlabel) 'INPUT' is a text label chstr:'T'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'INPUT' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' M'
   (check_literal) check_literal:After drop space:'::' idx=5 ' M'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'INPUT M'
   (check_textlabel) 'INPUT' is a text label chstr:'T'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'INPUT' Type:f
  (check_proc_call) 'INPUT' is text label

   (check_literal) check_literal:lit=':' idx=5 ' M'
   (check_literal) check_literal:After drop space:':' idx=5 ' M'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'INPUT M'

   (check_literal) check_literal:lit=' INPUT' idx=0 'INPUT M'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'INPUT M'
   (check_literal) check_literal:After while(): M
   (check_literal) ret1 Match. ' INPUT' == 'INPUT M'
  (check_input) ret1


   (check_literal) check_literal:lit=' INPUT' idx=0 'INPUT M'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'INPUT M'
   (check_literal) check_literal:After while(): M
   (check_literal) ret1 Match. ' INPUT' == 'INPUT M'

   (scan_variable) ' M' ref_ndeclare:1

    (scan_vname) scan_vname: ' M'
    (scan_vname) scan_vname: ret1 'M'
   (scan_variable) scan_variable: '' vname='M'
   (token_is_other_keyword) 
   (token_is_other_keyword) 'M' is not other keyword
   (scan_variable) Array test ''

    (check_literal) check_literal:lit='(' idx=7 ''
    (check_literal) check_literal:After drop space:'(' idx=7 ''
    (check_literal) check_literal  ret0 Empty test string
   (scan_variable) scan_variable:ret1 vname='M' Float
  (process_token)    Frst:1 T:'M' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:'M'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:M is not function
token_is_variable: tok:'M'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:M is not function
 (init_get_name) 
init_get_name:'M'
 (init_get_name) 
init_get_name:'M'
 (get_name) 
get_name:gn:'M'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f M
 (add_var_info) Name:M Idx:-1
 (add_var_info) Already present
 (add_var_info)   reference so OK
 (scan_variable) ret1
(output_generic) [f,()] f INPUT exp_type:f
VAR: '                 M'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:D75C
(scan_input) ret1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=7 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=7 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:2 buf2 i:0
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_INPUT                      ty:f qcty:U 'INPUT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing :M   *************
 (type_check_stack_push)  type_check_stack_push: 'M'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'M' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'M' type:f (1), %:0
 (process_syntax_tree) *********Processing :INPUT   *************
 (type_check_stack_pop)   type_check_stack_pop: 'M'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE:M    **********
 (type_check_stack_push)  type_check_stack_push: 'M'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'M' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'M' type:f (1), %:0
 (typecheck_expression)  *** BE:INPUT    **********
 (type_check_stack_pop)   type_check_stack_pop: 'M'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_INPUT                      ty:f qcty:U 'INPUT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_INPUT                      ty:f qcty:U 'INPUT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:0018
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (add_simple_qcode) 'M'
 (add_simple_qcode) Op type:f op access:Write qcode_type:U
 (qcode_check_trapped) M: Trapped:0
 (set_qcode_header_byte_at) idx:0018 len:1 val:0E
 (set_qcode_header_byte_at) idx:0019 len:1 val:FF
 (set_qcode_header_byte_at) idx:001A len:1 val:F6
 (output_qcode_for_line) QC: i:1
 (add_simple_qcode) 'INPUT'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) INPUT: Trapped:0
 (set_qcode_header_byte_at) idx:001B len:1 val:6D
 (finalise_expression) Finalise expression done.
INPUT M
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=7 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=7 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=7 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'P' (80)
 (is_all_spaces) cline[1] = 'R' (82)
 (is_all_spaces) cline[2] = 'I' (73)
 (is_all_spaces) cline[3] = 'N' (78)
 (is_all_spaces) cline[4] = 'T' (84)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'L' (76)
 (is_all_spaces) cline[8] = 'i' (105)
 (is_all_spaces) cline[9] = 't' (116)
 (is_all_spaces) cline[10] = 'r' (114)
 (is_all_spaces) cline[11] = 'e' (101)
 (is_all_spaces) cline[12] = 's' (115)
 (is_all_spaces) cline[13] = '"' (34)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'PRINT "Litres"'
******************
**PRINT "Litres"**
******************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'PRINT "Litres"'
 (check_literal) check_literal:After drop space:'REM' idx=0 'PRINT "Litres"'
 (check_literal)   'R' != 'P'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'PRINT "Litres"'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'PRINT "Litres"'
 (check_literal)   'R' != 'P'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'PRINT "Litres"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'PRINT "Litres"'
 (check_literal)   'R' != 'P'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'PRINT "Litres"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'PRINT "Litres"'
 (check_literal)   'R' != 'P'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'PRINT "Litres"'

   (check_operator) 'PRINT "Litres"' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'PRINT "Litres"':
   (check_vname) check_vname ret1 ' "Litres"':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "Litres"'

   (check_literal) check_literal:lit='(' idx=5 ' "Litres"'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "Litres"'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "Litres"'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"Litres"'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'PRINT "Litres"'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'PRINT "Litres"'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'PRINT "Litres"'
  (check_literal)   'L' != 'P'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'PRINT "Litres"'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'PRINT "Litres"'
  (check_literal)   'G' != 'P'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'PRINT "Litres"'
   (check_textlabel) 'PRINT' is a text label chstr:'T'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'PRINT' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "Litres"'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "Litres"'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'PRINT "Litres"'
   (check_textlabel) 'PRINT' is a text label chstr:'T'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'PRINT' Type:f
  (check_proc_call) 'PRINT' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "Litres"'
   (check_literal) check_literal:After drop space:':' idx=5 ' "Litres"'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'PRINT "Litres"'

   (check_literal) check_literal:lit=' INPUT' idx=0 'PRINT "Litres"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'PRINT "Litres"'
   (check_literal)   'I' != 'P'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'PRINT "Litres"'

   (check_literal) check_literal:lit=' PRINT' idx=0 'PRINT "Litres"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'PRINT "Litres"'
   (check_literal) check_literal:After while(): "Litres"
   (check_literal) ret1 Match. ' PRINT' == 'PRINT "Litres"'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'PRINT "Litres"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'PRINT "Litres"'
   (check_literal) check_literal:After while(): "Litres"
   (check_literal) ret1 Match. ' PRINT' == 'PRINT "Litres"'

   (check_expression) ' "Litres"'

    (check_eitem) check_eitem: '"Litres"'

     (check_function)  '"Litres"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Litres"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Litres"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Litres"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Litres"'
      (check_literal) check_literal:After while():Litres"
      (check_literal) ret1 Match. ' "' == '"Litres"'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 '' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'PRINT "Litres"'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'PRINT "Litres"'
   (check_literal) check_literal:After while(): "Litres"
   (check_literal) ret1 Match. ' PRINT' == 'PRINT "Litres"'
  (scan_print) Before while

   (check_expression) ' "Litres"'

    (check_eitem) check_eitem: '"Litres"'

     (check_function)  '"Litres"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Litres"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Litres"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Litres"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Litres"'
      (check_literal) check_literal:After while():Litres"
      (check_literal) ret1 Match. ' "' == '"Litres"'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 '' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "Litres"' igncomma:1

    (check_eitem) check_eitem: '"Litres"'

     (check_function)  '"Litres"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Litres"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Litres"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Litres"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Litres"'
      (check_literal) check_literal:After while():Litres"
      (check_literal) ret1 Match. ' "' == '"Litres"'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"Litres"'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Litres"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Litres"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Litres"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Litres"'
      (check_literal) check_literal:After while():Litres"
      (check_literal) ret1 Match. ' "' == '"Litres"'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"Litres"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Litres"'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"Litres"'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Litres"'
      (check_literal) check_literal:After while():Litres"
      (check_literal) ret1 Match. ' "' == '"Litres"'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"Litres"'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"Litres"'
       (check_literal) check_literal:After while():Litres"
       (check_literal) ret1 Match. ' "' == '"Litres"'
      (scan_string)   (in if) 'Litres"'
      (scan_string)   (in wh) 'Litres"'
      (scan_string)   (in wh) 'itres"'
      (scan_string)   (in wh) 'itres"'
      (scan_string)   (in wh) 'tres"'
      (scan_string)   (in wh) 'tres"'
      (scan_string)   (in wh) 'res"'
      (scan_string)   (in wh) 'res"'
      (scan_string)   (in wh) 'es"'
      (scan_string)   (in wh) 'es"'
      (scan_string)   (in wh) 's"'
      (scan_string)   (in wh) 's"'
      (scan_string)   (in wh) '"'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"Litres"' toktype:s exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"Litres"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Litres" is not function
token_is_variable: tok:'"Litres"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Litres" is not function
(   output_string) [U,()] s "Litres"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) '' Before while igncomma:1

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 '' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=14 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=14 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) After scan expression II

   (check_literal) check_literal:lit=' ;' idx=14 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=14 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) Checking if delimiter was present
  (scan_print) No delimiter present
  (finalise_expression) Finalise expression Buf i:2 buf2 i:2
  (op_stack_finalise) Finalise stack
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Litres"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

  (process_syntax_tree) Pass:2
  (process_syntax_tree) *********Processing :"Litres"   *************
  (type_check_stack_push)  type_check_stack_push: '"Litres"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: '"Litres"' type:2 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '"Litres"' type:s (2), %:0
  (process_syntax_tree) *********Processing :PRINT   *************
  (process_syntax_tree) PRINT type adjust
  (type_check_stack_pop)   type_check_stack_pop: '"Litres"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:2
  (typecheck_expression)  *** BE:"Litres"    **********
  (type_check_stack_push)  type_check_stack_push: '"Litres"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (1)

  (type_check_stack_print)  N001: '"Litres"' type:2 %:0
  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (1)
  (type_check_stack_display) 000: '"Litres"' type:s (2), %:0
  (typecheck_expression)  *** BE:PRINT    **********
  (typecheck_expression) PRINT type adjust
  (type_check_stack_pop)   type_check_stack_pop: '"Litres"'
  (type_check_stack_print) ------------------
  (type_check_stack_print) Type Check Stack     (0)

  (type_check_stack_print) ------------------

  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Litres"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Litres"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

  (process_expression_types) 


  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:001C
  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) QC: i:0
  (output_qcode_for_line) QC:0 String Literal '"Litres"' EXP_BUFF_ID_STR
  (set_qcode_header_byte_at) idx:001C len:1 val:24
  (set_qcode_header_byte_at) idx:001D len:1 val:06
  (set_qcode_header_byte_at) idx:001E len:1 val:4C
  (set_qcode_header_byte_at) idx:001F len:1 val:69
  (set_qcode_header_byte_at) idx:0020 len:1 val:74
  (set_qcode_header_byte_at) idx:0021 len:1 val:72
  (set_qcode_header_byte_at) idx:0022 len:1 val:65
  (set_qcode_header_byte_at) idx:0023 len:1 val:73
  (output_qcode_for_line) QC: i:1
  (output_qcode_for_line) QC:PRINT
  (set_qcode_header_byte_at) idx:0024 len:1 val:71
  (finalise_expression) Finalise expression done.
  (process_token)    Frst:1 T:'PRINT' toktype:i exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>U
 Push:'PRINT'
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (1)

  (op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
  (op_stack_print) ------------------

  (finalise_expression) Finalise expression Buf i:0 buf2 i:2
  (op_stack_finalise) Finalise stack
  (op_stack_pop) Pop 'PRINT' type:U 
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (0)

  (op_stack_print) ------------------

  (op_stack_finalise) Popped:PRINT U
  (output_operator) [U,()] U PRINT
  (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

  (process_syntax_tree) Pass:2
  (process_syntax_tree) *********Processing :PRINT   *************
default buf_id
  (type_check_stack_display) Type Check Stack (0)
  (typecheck_expression) Pass:2
  (typecheck_expression)  *** BE:PRINT    **********
default buf_id
  (type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

  (process_expression_types) 


  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:0025
  (output_qcode_for_line) ================================================================================
  (output_qcode_for_line) QC: i:0
  (output_qcode_for_line) QC:PRINT
  (set_qcode_header_byte_at) idx:0025 len:1 val:73
  (finalise_expression) Finalise expression done.

   (check_expression) ''

    (check_eitem) check_eitem: ''

     (check_function)  ''
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=14 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=14 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=14 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=14 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) Fltval:'' float:0.000000e+00
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0

       (check_hex) check_hex: ''
       (check_hex) check_hex:ret0 not '$'
      (check_number) check_number: ret0

      (check_proc_call) check_proc_call:

       (check_textlabel) ''
       (check_textlabel) '' is a text label chstr:'d'
       (check_textlabel) Exit char:
       (check_textlabel) check_textlabel:ret1 Name:'' Type:f
      (check_proc_call) '' is text label

       (check_literal) check_literal:lit=':' idx=14 ''
       (check_literal) check_literal:After drop space:':' idx=14 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_proc_call) check_proc_call:ret0

      (check_variable) ''

       (check_operator) '' igncomma:1
       (check_operator) ret0:is comma: 0

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret0

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=14 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=14 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) ret0: No '('

     (check_addr_name) check_addr_name: ''

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_addr_name) check_addr_name: ret0
    (check_eitem) check_eitem:ret0

    (check_operator) '' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret0 ''
  (scan_print) Check for trailing delimiter

   (check_literal) check_literal:lit=' ;' idx=14 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=14 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' ,' idx=14 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=14 ''
   (check_literal) check_literal  ret0 Empty test string
  (scan_print) scan_print:ret1 Expression 
 (scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=14 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=14 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:0026
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
PRINT "Litres"
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=14 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=14 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=14 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'I' (73)
 (is_all_spaces) cline[1] = 'N' (78)
 (is_all_spaces) cline[2] = 'P' (80)
 (is_all_spaces) cline[3] = 'U' (85)
 (is_all_spaces) cline[4] = 'T' (84)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = 'L' (76)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'INPUT L'
***********
**INPUT L**
***********

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'INPUT L'
 (check_literal) check_literal:After drop space:'REM' idx=0 'INPUT L'
 (check_literal)   'R' != 'I'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'INPUT L'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'INPUT L'
 (check_literal)   'R' != 'I'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'INPUT L'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'INPUT L'
 (check_literal)   'R' != 'I'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'INPUT L'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'INPUT L'
 (check_literal)   'R' != 'I'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'INPUT L'

   (check_operator) 'INPUT L' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'INPUT L':
   (check_vname) check_vname ret1 ' L':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' L'

   (check_literal) check_literal:lit='(' idx=5 ' L'
   (check_literal) check_literal:After drop space:'(' idx=5 ' L'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' L'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 'L'
 (check_literal)   '=' != 'L'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'INPUT L'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'INPUT L'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'INPUT L'
  (check_literal)   'L' != 'I'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'INPUT L'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'INPUT L'
  (check_literal)   'G' != 'I'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'INPUT L'
   (check_textlabel) 'INPUT' is a text label chstr:'T'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'INPUT' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' L'
   (check_literal) check_literal:After drop space:'::' idx=5 ' L'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'INPUT L'
   (check_textlabel) 'INPUT' is a text label chstr:'T'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'INPUT' Type:f
  (check_proc_call) 'INPUT' is text label

   (check_literal) check_literal:lit=':' idx=5 ' L'
   (check_literal) check_literal:After drop space:':' idx=5 ' L'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'INPUT L'

   (check_literal) check_literal:lit=' INPUT' idx=0 'INPUT L'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'INPUT L'
   (check_literal) check_literal:After while(): L
   (check_literal) ret1 Match. ' INPUT' == 'INPUT L'
  (check_input) ret1


   (check_literal) check_literal:lit=' INPUT' idx=0 'INPUT L'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'INPUT L'
   (check_literal) check_literal:After while(): L
   (check_literal) ret1 Match. ' INPUT' == 'INPUT L'

   (scan_variable) ' L' ref_ndeclare:1

    (scan_vname) scan_vname: ' L'
    (scan_vname) scan_vname: ret1 'L'
   (scan_variable) scan_variable: '' vname='L'
   (token_is_other_keyword) 
   (token_is_other_keyword) 'L' is not other keyword
   (scan_variable) Array test ''

    (check_literal) check_literal:lit='(' idx=7 ''
    (check_literal) check_literal:After drop space:'(' idx=7 ''
    (check_literal) check_literal  ret0 Empty test string
   (scan_variable) scan_variable:ret1 vname='L' Float
  (process_token)    Frst:1 T:'L' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:'L'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:L is not function
token_is_variable: tok:'L'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:L is not function
 (init_get_name) 
init_get_name:'L'
 (init_get_name) 
init_get_name:'L'
 (get_name) 
get_name:gn:'L'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f L
 (add_var_info) Name:L Idx:-1
 (add_var_info) Already present
 (add_var_info)   reference so OK
 (scan_variable) ret1
(output_generic) [f,()] f INPUT exp_type:f
VAR: '                 L'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:D75C
(scan_input) ret1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=7 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=7 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:2 buf2 i:0
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_INPUT                      ty:f qcty:U 'INPUT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing :L   *************
 (type_check_stack_push)  type_check_stack_push: 'L'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'L' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'L' type:f (1), %:0
 (process_syntax_tree) *********Processing :INPUT   *************
 (type_check_stack_pop)   type_check_stack_pop: 'L'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE:L    **********
 (type_check_stack_push)  type_check_stack_push: 'L'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'L' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'L' type:f (1), %:0
 (typecheck_expression)  *** BE:INPUT    **********
 (type_check_stack_pop)   type_check_stack_pop: 'L'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_INPUT                      ty:f qcty:U 'INPUT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_INPUT                      ty:f qcty:U 'INPUT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:0026
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (add_simple_qcode) 'L'
 (add_simple_qcode) Op type:f op access:Write qcode_type:U
 (qcode_check_trapped) L: Trapped:0
 (set_qcode_header_byte_at) idx:0026 len:1 val:0E
 (set_qcode_header_byte_at) idx:0027 len:1 val:FF
 (set_qcode_header_byte_at) idx:0028 len:1 val:EE
 (output_qcode_for_line) QC: i:1
 (add_simple_qcode) 'INPUT'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) INPUT: Trapped:0
 (set_qcode_header_byte_at) idx:0029 len:1 val:6D
 (finalise_expression) Finalise expression done.
INPUT L
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=7 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=7 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=7 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'g' (103)
 (is_all_spaces) cline[1] = '=' (61)
 (is_all_spaces) cline[2] = 'l' (108)
 (is_all_spaces) cline[3] = '/' (47)
 (is_all_spaces) cline[4] = '4' (52)
 (is_all_spaces) cline[5] = '.' (46)
 (is_all_spaces) cline[6] = '5' (53)
 (is_all_spaces) cline[7] = '4' (52)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'g=l/4.54'
************
**g=l/4.54**
************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'g=l/4.54'
 (check_literal) check_literal:After drop space:'REM' idx=0 'g=l/4.54'
 (check_literal)   'R' != 'g'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'g=l/4.54'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'g=l/4.54'
 (check_literal)   'R' != 'g'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'g=l/4.54'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'g=l/4.54'
 (check_literal)   'R' != 'g'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'g=l/4.54'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'g=l/4.54'
 (check_literal)   'R' != 'g'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'g=l/4.54'

   (check_operator) 'g=l/4.54' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'g=l/4.54':
   (check_vname) check_vname ret1 '=l/4.54':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '=l/4.54'

   (check_literal) check_literal:lit='(' idx=1 '=l/4.54'
   (check_literal) check_literal:After drop space:'(' idx=1 '=l/4.54'
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=1 '=l/4.54'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=1 '=l/4.54'
 (check_literal) check_literal:After while():l/4.54
 (check_literal) ret1 Match. ' =' == '=l/4.54'

 (check_expression) 'l/4.54'

  (check_eitem) check_eitem: 'l/4.54'

   (check_function)  'l/4.54'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=2 'l/4.54'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=2 'l/4.54'
    (check_literal)   '%' != 'l'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=2 'l/4.54'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=2 'l/4.54'
    (check_literal)   '"' != 'l'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'l/4.54'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'l/4.54'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'l/4.54'
     (check_textlabel) 'l' is a text label chstr:'l'
     (check_textlabel) Exit char:/
     (check_textlabel) check_textlabel:ret1 Name:'l' Type:f
    (check_proc_call) 'l' is text label

     (check_literal) check_literal:lit=':' idx=3 '/4.54'
     (check_literal) check_literal:After drop space:':' idx=3 '/4.54'
     (check_literal)   ':' != '/'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'l/4.54'

     (check_operator) 'l/4.54' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'l/4.54':
     (check_vname) check_vname ret1 '/4.54':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '/4.54'

     (check_literal) check_literal:lit='(' idx=3 '/4.54'
     (check_literal) check_literal:After drop space:'(' idx=3 '/4.54'
     (check_literal)   '(' != '/'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '/4.54' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '4.54' igncomma:0
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: '4.54'

  (check_function)  '4.54'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=4 '4.54'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=4 '4.54'
   (check_literal)   '%' != '4'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=4 '4.54'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=4 '4.54'
   (check_literal)   '"' != '4'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'4.54' float:4.540000e+00
    (check_float) check_float: ret1
   (check_number) check_number: ret1
  (check_atom) ret1
 (check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'g=l/4.54' ref_ndeclare:1

   (scan_vname) scan_vname: 'g=l/4.54'
   (scan_vname) scan_vname: ret1 'g'
  (scan_variable) scan_variable: '=l/4.54' vname='G'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'G' is not other keyword
  (scan_variable) Array test '=l/4.54'

   (check_literal) check_literal:lit='(' idx=1 '=l/4.54'
   (check_literal) check_literal:After drop space:'(' idx=1 '=l/4.54'
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='G' Float
 (process_token)    Frst:1 T:'G' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'G'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:G is not function
token_is_variable: tok:'G'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:G is not function
(init_get_name) 
init_get_name:'G'
(init_get_name) 
init_get_name:'G'
(get_name) 
get_name:gn:'G'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f G
(add_var_info) Name:G Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 G'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0008

 (scan_assignment_equals) scan_assignment_equals:lit=' =' '=l/4.54'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'=l/4.54'
 (scan_assignment_equals) scan_assignment_equals:while loop:=l/4.54
 (process_token)    Frst:0 T:':=' toktype:? exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) 'l/4.54' igncomma:0

  (check_eitem) check_eitem: 'l/4.54'

   (check_function)  'l/4.54'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=2 'l/4.54'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=2 'l/4.54'
    (check_literal)   '%' != 'l'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=2 'l/4.54'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=2 'l/4.54'
    (check_literal)   '"' != 'l'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'l/4.54'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'l/4.54'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'l/4.54'
     (check_textlabel) 'l' is a text label chstr:'l'
     (check_textlabel) Exit char:/
     (check_textlabel) check_textlabel:ret1 Name:'l' Type:f
    (check_proc_call) 'l' is text label

     (check_literal) check_literal:lit=':' idx=3 '/4.54'
     (check_literal) check_literal:After drop space:':' idx=3 '/4.54'
     (check_literal)   ':' != '/'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'l/4.54'

     (check_operator) 'l/4.54' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'l/4.54':
     (check_vname) check_vname ret1 '/4.54':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '/4.54'

     (check_literal) check_literal:lit='(' idx=3 '/4.54'
     (check_literal) check_literal:After drop space:'(' idx=3 '/4.54'
     (check_literal)   '(' != '/'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'l/4.54'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=2 'l/4.54'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=2 'l/4.54'
   (check_literal)   '%' != 'l'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=2 'l/4.54'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=2 'l/4.54'
   (check_literal)   '"' != 'l'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'l/4.54'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'l/4.54'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'l/4.54'
    (check_textlabel) 'l' is a text label chstr:'l'
    (check_textlabel) Exit char:/
    (check_textlabel) check_textlabel:ret1 Name:'l' Type:f
   (check_proc_call) 'l' is text label

    (check_literal) check_literal:lit=':' idx=3 '/4.54'
    (check_literal) check_literal:After drop space:':' idx=3 '/4.54'
    (check_literal)   ':' != '/'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'l/4.54'

    (check_operator) 'l/4.54' igncomma:1
    (check_operator) ret0:is comma: 0

    (check_vname) check_vname 'l/4.54':
    (check_vname) check_vname ret1 '/4.54':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '/4.54'

    (check_literal) check_literal:lit='(' idx=3 '/4.54'
    (check_literal) check_literal:After drop space:'(' idx=3 '/4.54'
    (check_literal)   '(' != '/'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=2 'l/4.54'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=2 'l/4.54'
  (check_literal)   '%' != 'l'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=2 'l/4.54'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=2 'l/4.54'
  (check_literal)   '"' != 'l'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'l/4.54'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'l/4.54'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'l/4.54'
   (check_textlabel) 'l' is a text label chstr:'l'
   (check_textlabel) Exit char:/
   (check_textlabel) check_textlabel:ret1 Name:'l' Type:f
  (check_proc_call) 'l' is text label

   (check_literal) check_literal:lit=':' idx=3 '/4.54'
   (check_literal) check_literal:After drop space:':' idx=3 '/4.54'
   (check_literal)   ':' != '/'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'l/4.54'

   (check_operator) 'l/4.54' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'l/4.54':
   (check_vname) check_vname ret1 '/4.54':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '/4.54'

   (check_literal) check_literal:lit='(' idx=3 '/4.54'
   (check_literal) check_literal:After drop space:'(' idx=3 '/4.54'
   (check_literal)   '(' != '/'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'l/4.54' ref_ndeclare:1

  (scan_vname) scan_vname: 'l/4.54'
  (scan_vname) scan_vname: ret1 'l'
 (scan_variable) scan_variable: '/4.54' vname='L'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'L' is not other keyword
 (scan_variable) Array test '/4.54'

  (check_literal) check_literal:lit='(' idx=3 '/4.54'
  (check_literal) check_literal:After drop space:'(' idx=3 '/4.54'
  (check_literal)   '(' != '/'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='L' Float
(process_token)    Frst:0 T:'L' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'L'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:L is not function
token_is_variable: tok:'L'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:L is not function
(init_get_name) 
init_get_name:'L'
(init_get_name) 
init_get_name:'L'
(get_name) 
get_name:gn:'L'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f L
(add_var_info) Name:L Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 L'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:1F74
(scan_atom) ret1
(scan_expression) '/4.54' Before while igncomma:0

 (check_operator) '/4.54' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '/4.54' igncomma:0
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '/4.54'

  (check_literal) check_literal:lit=' ,' idx=3 '/4.54'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=3 '/4.54'
  (check_literal)   ',' != '/'
  (check_literal) check_literal: ret0
 (scan_operator) scan_operator: ret1 '4.54' nb:0
(process_token)    Frst:0 T:'/' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
/ is operator
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'/' is operator
(process_token) 
Token is operator o1 name:/ o2 name::=
(process_token) 
opr1:5 opr2:1
(operator_precedence) 
:= is operator
(operator_precedence) 
:= is operator
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'/'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (2)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) 001: / type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) '4.54' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) '4.54' Before scan_eitem igncomma:0

 (scan_eitem) scan_eitem:

  (check_function)  '4.54'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=4 '4.54'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=4 '4.54'
   (check_literal)   '%' != '4'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=4 '4.54'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=4 '4.54'
   (check_literal)   '"' != '4'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'4.54' float:4.540000e+00
    (check_float) check_float: ret1
   (check_number) check_number: ret1
  (check_atom) ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=4 '4.54'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=4 '4.54'
   (check_literal)   '%' != '4'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=4 '4.54'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=4 '4.54'
   (check_literal)   '"' != '4'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'4.54' float:4.540000e+00
    (check_float) check_float: ret1
   (check_number) check_number: ret1

   (scan_number) scan_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'4.54' float:4.540000e+00
    (check_float) check_float: ret1

    (scan_float) scan_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (scan_float) Fltval:'4.54' float:4.540000e+00
    (scan_float) scan_float: ret1
   (process_token)    Frst:0 T:'4.54' toktype:I exptype:f bufid:'EXP_BUFF_ID_FLT'
   (operator_precedence) 
/ is operator
   (process_token) Before switch, bufid:'EXP_BUFF_ID_FLT'
modify_expression_type:Inittype:f Intype:f Outtype:f
(    output_float) [f,()] f 4.54
   (scan_atom) ret1
  (scan_expression) n commas now:0

   (check_literal) check_literal:lit=' %' idx=8 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_operator) '' igncomma:0
   (check_operator) ret0:is comma: 0
  (scan_expression) ret1 '' commas:0
 (add_var_info) Name:G Idx:-1
 (add_var_info) Already present
 (add_var_info)   reference so OK
 (scan_assignment) scan_assignment: ret1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=8 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:3 buf2 i:2
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop '/' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (op_stack_finalise) Popped:/ f
 (output_operator) [f,()] f /
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '4.54' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '/' npar:0 nidx:0 trapped:0 %:0  0: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  0: 4 1 -822624274 781119190 -22285654 -303129682 2130564856 -22106581 1026472951 801037165 -554709254 -1153454290 -1090967126 -68964498 -306194770 -1146130769 -1075119494 -553996305 -1146115082 -1344504177  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing :G   *************
 (type_check_stack_push)  type_check_stack_push: 'G'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'G' type:f (1), %:0
 (process_syntax_tree) *********Processing :L   *************
 (type_check_stack_push)  type_check_stack_push: 'L'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print)  N002: 'L' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'G' type:f (1), %:0
 (type_check_stack_display) 001: 'L' type:f (1), %:0
 (process_syntax_tree) *********Processing :4.54   *************
 (type_check_stack_push)  type_check_stack_push: '4.54'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print)  N002: 'L' type:1 %:0
 (type_check_stack_print)  N003: '4.54' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'G' type:f (1), %:0
 (type_check_stack_display) 001: 'L' type:f (1), %:0
 (type_check_stack_display) 002: '4.54' type:f (1), %:0
 (process_syntax_tree) *********Processing :/   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator / %conv:1
 (type_check_stack_pop)   type_check_stack_pop: '4.54'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print)  N002: 'L' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'L'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:1
 (process_syntax_tree) Percent convertible operator op1 (N003) percent:0
 (process_syntax_tree) Mutable type (4.54) f f
 (process_syntax_tree) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'G' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'G'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (000) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE:G    **********
 (type_check_stack_push)  type_check_stack_push: 'G'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'G' type:f (1), %:0
 (typecheck_expression)  *** BE:L    **********
 (type_check_stack_push)  type_check_stack_push: 'L'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print)  N002: 'L' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'G' type:f (1), %:0
 (type_check_stack_display) 001: 'L' type:f (1), %:0
 (typecheck_expression)  *** BE:4.54    **********
 (type_check_stack_push)  type_check_stack_push: '4.54'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print)  N002: 'L' type:1 %:0
 (type_check_stack_print)  N003: '4.54' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'G' type:f (1), %:0
 (type_check_stack_display) 001: 'L' type:f (1), %:0
 (type_check_stack_display) 002: '4.54' type:f (1), %:0
 (typecheck_expression)  *** BE:/    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator /
 (type_check_stack_pop)   type_check_stack_pop: '4.54'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print)  N002: 'L' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'L'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (/) f f
 (typecheck_expression) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'G' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'G' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'G'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '4.54' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '/' npar:0 nidx:0 trapped:0 %:0  2: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1 -822624274 781119190 -22285654 -303129682 2130564856 -22106581 1026472951 801037165 -554709254 -1153454290 -1090967126 -68964498 -306194770 -1146130769 -1075119494 -553996305 -1146115082 -1344504177  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_FLT                        ty:f qcty:U '4.54' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '/' npar:0 nidx:0 trapped:0 %:0  2: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1 -822624274 781119190 -22285654 -303129682 2130564856 -22106581 1026472951 801037165 -554709254 -1153454290 -1090967126 -68964498 -306194770 -1146130769 -1075119494 -553996305 -1146115082 -1344504177  nb 0:()

 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:5 qcode_idx:002A
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (add_simple_qcode) 'G'
 (add_simple_qcode) Op type:f op access:Write qcode_type:U
 (qcode_check_trapped) G: Trapped:0
 (set_qcode_header_byte_at) idx:002A len:1 val:0E
 (set_qcode_header_byte_at) idx:002B len:1 val:FF
 (set_qcode_header_byte_at) idx:002C len:1 val:DE
 (output_qcode_for_line) QC: i:1
 (add_simple_qcode) 'L'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) L: Trapped:0
 (set_qcode_header_byte_at) idx:002D len:1 val:01
 (set_qcode_header_byte_at) idx:002E len:1 val:FF
 (set_qcode_header_byte_at) idx:002F len:1 val:EE
 (output_qcode_for_line) QC: i:2
 (set_qcode_header_byte_at) idx:0030 len:1 val:23
 (convert_to_compact_float) INPUT:Idx:49 fltstr:'4.54'
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) No 'E' found
 (convert_to_compact_float) Exponent:0
 (convert_to_compact_float) Idx:49 fltstr:'4.54'
 (convert_to_compact_float) Sign:0 start:0
 (convert_to_compact_float) Normalising:'4.54'
 (convert_to_compact_float) Need to make smaller
 (convert_to_compact_float) normalised='454'
 (convert_to_compact_float) Drop trailing zeros
 (convert_to_compact_float) normalised='454'
 (convert_to_compact_float) After adding zero back for odd number of digits: normalised='4540'
 (set_qcode_header_byte_at) idx:0031 len:1 val:03
 (convert_to_compact_float) 40
 (set_qcode_header_byte_at) idx:0032 len:1 val:40
 (convert_to_compact_float) 45
 (set_qcode_header_byte_at) idx:0033 len:1 val:45
 (set_qcode_header_byte_at) idx:0034 len:1 val:00
 (convert_to_compact_float) RESULT: Input:'4.54' Norm mant:'4540' Sign:0 Exponent:0
 (output_qcode_for_line) QC: i:3
 (add_simple_qcode) '/'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) /: Trapped:0
 (set_qcode_header_byte_at) idx:0035 len:1 val:3F
 (output_qcode_for_line) QC: i:4
 (add_simple_qcode) ':='
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) :=: Trapped:0
 (set_qcode_header_byte_at) idx:0036 len:1 val:80
 (finalise_expression) Finalise expression done.
g=l/4.54
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=8 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=8 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=8 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'm' (109)
 (is_all_spaces) cline[1] = 'p' (112)
 (is_all_spaces) cline[2] = 'g' (103)
 (is_all_spaces) cline[3] = '=' (61)
 (is_all_spaces) cline[4] = 'm' (109)
 (is_all_spaces) cline[5] = '/' (47)
 (is_all_spaces) cline[6] = 'g' (103)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'mpg=m/g'
***********
**mpg=m/g**
***********

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'mpg=m/g'
 (check_literal) check_literal:After drop space:'REM' idx=0 'mpg=m/g'
 (check_literal)   'R' != 'm'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'mpg=m/g'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'mpg=m/g'
 (check_literal)   'R' != 'm'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'mpg=m/g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'mpg=m/g'
 (check_literal)   'R' != 'm'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'mpg=m/g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'mpg=m/g'
 (check_literal)   'R' != 'm'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'mpg=m/g'

   (check_operator) 'mpg=m/g' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'mpg=m/g':
   (check_vname) check_vname ret1 '=m/g':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '=m/g'

   (check_literal) check_literal:lit='(' idx=3 '=m/g'
   (check_literal) check_literal:After drop space:'(' idx=3 '=m/g'
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=3 '=m/g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=3 '=m/g'
 (check_literal) check_literal:After while():m/g
 (check_literal) ret1 Match. ' =' == '=m/g'

 (check_expression) 'm/g'

  (check_eitem) check_eitem: 'm/g'

   (check_function)  'm/g'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=4 'm/g'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 'm/g'
    (check_literal)   '%' != 'm'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=4 'm/g'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 'm/g'
    (check_literal)   '"' != 'm'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'm/g'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'm/g'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'm/g'
     (check_textlabel) 'm' is a text label chstr:'m'
     (check_textlabel) Exit char:/
     (check_textlabel) check_textlabel:ret1 Name:'m' Type:f
    (check_proc_call) 'm' is text label

     (check_literal) check_literal:lit=':' idx=5 '/g'
     (check_literal) check_literal:After drop space:':' idx=5 '/g'
     (check_literal)   ':' != '/'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'm/g'

     (check_operator) 'm/g' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'm/g':
     (check_vname) check_vname ret1 '/g':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '/g'

     (check_literal) check_literal:lit='(' idx=5 '/g'
     (check_literal) check_literal:After drop space:'(' idx=5 '/g'
     (check_literal)   '(' != '/'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '/g' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) 'g' igncomma:0
 (check_operator) ret0:is comma: 0

 (check_eitem) check_eitem: 'g'

  (check_function)  'g'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=6 'g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'g'
   (check_literal)   '%' != 'g'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=6 'g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'g'
   (check_literal)   '"' != 'g'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'g'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'g'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'g'
    (check_textlabel) 'g' is a text label chstr:'g'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'g' Type:f
   (check_proc_call) 'g' is text label

    (check_literal) check_literal:lit=':' idx=7 ''
    (check_literal) check_literal:After drop space:':' idx=7 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'g'

    (check_operator) 'g' igncomma:1
    (check_operator) ret0:is comma: 0

    (check_vname) check_vname 'g':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=7 ''
    (check_literal) check_literal:After drop space:'(' idx=7 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1
(check_eitem) ret1
(check_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=7 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=7 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(check_assignment) ret1

 (scan_assignment) scan_assignment:

  (scan_variable) 'mpg=m/g' ref_ndeclare:1

   (scan_vname) scan_vname: 'mpg=m/g'
   (scan_vname) scan_vname: ret1 'mpg'
  (scan_variable) scan_variable: '=m/g' vname='MPG'
  (token_is_other_keyword) 
  (token_is_other_keyword) 'MPG' is not other keyword
  (scan_variable) Array test '=m/g'

   (check_literal) check_literal:lit='(' idx=3 '=m/g'
   (check_literal) check_literal:After drop space:'(' idx=3 '=m/g'
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='MPG' Float
 (process_token)    Frst:1 T:'MPG' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
 (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
 (token_is_integer)  tok:'MPG'
 (token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:MPG is not function
token_is_variable: tok:'MPG'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:MPG is not function
(init_get_name) 
init_get_name:'MPG'
(init_get_name) 
init_get_name:'MPG'
(get_name) 
get_name:gn:'MPG'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f MPG
(add_var_info) Name:MPG Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '               MPG'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0007

 (scan_assignment_equals) scan_assignment_equals:lit=' =' '=m/g'
 (scan_assignment_equals) scan_assignment_equals:After drop space:'=m/g'
 (scan_assignment_equals) scan_assignment_equals:while loop:=m/g
 (process_token)    Frst:0 T:':=' toktype:? exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
 (operator_precedence) 
:= is operator
 (process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
':=' is operator
 (process_token) 
Token is operator o1 name::= o2 name:
 (process_token) 
opr1:1 opr2:100
 (process_token) Push EXP_BUFF_ID_OPERATOR
 Push:':='
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (scan_assignment_equals) ret1

 (scan_expression) 'm/g' igncomma:0

  (check_eitem) check_eitem: 'm/g'

   (check_function)  'm/g'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=4 'm/g'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 'm/g'
    (check_literal)   '%' != 'm'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=4 'm/g'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 'm/g'
    (check_literal)   '"' != 'm'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'm/g'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'm/g'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'm/g'
     (check_textlabel) 'm' is a text label chstr:'m'
     (check_textlabel) Exit char:/
     (check_textlabel) check_textlabel:ret1 Name:'m' Type:f
    (check_proc_call) 'm' is text label

     (check_literal) check_literal:lit=':' idx=5 '/g'
     (check_literal) check_literal:After drop space:':' idx=5 '/g'
     (check_literal)   ':' != '/'
     (check_literal) check_literal: ret0
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'm/g'

     (check_operator) 'm/g' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'm/g':
     (check_vname) check_vname ret1 '/g':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test '/g'

     (check_literal) check_literal:lit='(' idx=5 '/g'
     (check_literal) check_literal:After drop space:'(' idx=5 '/g'
     (check_literal)   '(' != '/'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'm/g'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=4 'm/g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=4 'm/g'
   (check_literal)   '%' != 'm'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=4 'm/g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=4 'm/g'
   (check_literal)   '"' != 'm'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'm/g'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'm/g'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'm/g'
    (check_textlabel) 'm' is a text label chstr:'m'
    (check_textlabel) Exit char:/
    (check_textlabel) check_textlabel:ret1 Name:'m' Type:f
   (check_proc_call) 'm' is text label

    (check_literal) check_literal:lit=':' idx=5 '/g'
    (check_literal) check_literal:After drop space:':' idx=5 '/g'
    (check_literal)   ':' != '/'
    (check_literal) check_literal: ret0
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'm/g'

    (check_operator) 'm/g' igncomma:1
    (check_operator) ret0:is comma: 0

    (check_vname) check_vname 'm/g':
    (check_vname) check_vname ret1 '/g':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test '/g'

    (check_literal) check_literal:lit='(' idx=5 '/g'
    (check_literal) check_literal:After drop space:'(' idx=5 '/g'
    (check_literal)   '(' != '/'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=4 'm/g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=4 'm/g'
  (check_literal)   '%' != 'm'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=4 'm/g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=4 'm/g'
  (check_literal)   '"' != 'm'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'm/g'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'm/g'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'm/g'
   (check_textlabel) 'm' is a text label chstr:'m'
   (check_textlabel) Exit char:/
   (check_textlabel) check_textlabel:ret1 Name:'m' Type:f
  (check_proc_call) 'm' is text label

   (check_literal) check_literal:lit=':' idx=5 '/g'
   (check_literal) check_literal:After drop space:':' idx=5 '/g'
   (check_literal)   ':' != '/'
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'm/g'

   (check_operator) 'm/g' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'm/g':
   (check_vname) check_vname ret1 '/g':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test '/g'

   (check_literal) check_literal:lit='(' idx=5 '/g'
   (check_literal) check_literal:After drop space:'(' idx=5 '/g'
   (check_literal)   '(' != '/'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'm/g' ref_ndeclare:1

  (scan_vname) scan_vname: 'm/g'
  (scan_vname) scan_vname: ret1 'm'
 (scan_variable) scan_variable: '/g' vname='M'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'M' is not other keyword
 (scan_variable) Array test '/g'

  (check_literal) check_literal:lit='(' idx=5 '/g'
  (check_literal) check_literal:After drop space:'(' idx=5 '/g'
  (check_literal)   '(' != '/'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='M' Float
(process_token)    Frst:0 T:'M' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'M'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:M is not function
token_is_variable: tok:'M'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:M is not function
(init_get_name) 
init_get_name:'M'
(init_get_name) 
init_get_name:'M'
(get_name) 
get_name:gn:'M'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f M
(add_var_info) Name:M Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 M'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:1F74
(scan_atom) ret1
(scan_expression) '/g' Before while igncomma:0

 (check_operator) '/g' igncomma:0
 (check_operator) ret1:is comma: 0

 (check_operator) '/g' igncomma:0
 (check_operator) ret1:is comma: 0

 (scan_operator) scan_operator: '/g'

  (check_literal) check_literal:lit=' ,' idx=5 '/g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=5 '/g'
  (check_literal)   ',' != '/'
  (check_literal) check_literal: ret0
 (scan_operator) scan_operator: ret1 'g' nb:0
(process_token)    Frst:0 T:'/' toktype:i exptype:f bufid:'EXP_BUFF_ID_OPERATOR'
(operator_precedence) 
/ is operator
(operator_precedence) 
:= is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_OPERATOR'
'/' is operator
(process_token) 
Token is operator o1 name:/ o2 name::=
(process_token) 
opr1:5 opr2:1
(operator_precedence) 
:= is operator
(operator_precedence) 
:= is operator
(process_token) Push EXP_BUFF_ID_OPERATOR
 Push:'/'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (2)

(op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) 001: / type:f id:EXP_BUFF_ID_OPERATOR
(op_stack_print) ------------------


 (check_operator) 'g' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) 'g' Before scan_eitem igncomma:0

 (scan_eitem) scan_eitem:

  (check_function)  'g'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=6 'g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'g'
   (check_literal)   '%' != 'g'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=6 'g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'g'
   (check_literal)   '"' != 'g'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'g'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'g'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'g'
    (check_textlabel) 'g' is a text label chstr:'g'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'g' Type:f
   (check_proc_call) 'g' is text label

    (check_literal) check_literal:lit=':' idx=7 ''
    (check_literal) check_literal:After drop space:':' idx=7 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'g'

    (check_operator) 'g' igncomma:1
    (check_operator) ret0:is comma: 0

    (check_vname) check_vname 'g':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=7 ''
    (check_literal) check_literal:After drop space:'(' idx=7 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=6 'g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=6 'g'
  (check_literal)   '%' != 'g'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=6 'g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=6 'g'
  (check_literal)   '"' != 'g'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'g'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'g'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'g'
   (check_textlabel) 'g' is a text label chstr:'g'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'g' Type:f
  (check_proc_call) 'g' is text label

   (check_literal) check_literal:lit=':' idx=7 ''
   (check_literal) check_literal:After drop space:':' idx=7 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'g'

   (check_operator) 'g' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'g':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=7 ''
   (check_literal) check_literal:After drop space:'(' idx=7 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'g' ref_ndeclare:1

  (scan_vname) scan_vname: 'g'
  (scan_vname) scan_vname: ret1 'g'
 (scan_variable) scan_variable: '' vname='G'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'G' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=7 ''
  (check_literal) check_literal:After drop space:'(' idx=7 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='G' Float
(process_token)    Frst:0 T:'G' toktype:f exptype:f bufid:'EXP_BUFF_ID_NONE'
(operator_precedence) 
/ is operator
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'G'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:G is not function
token_is_variable: tok:'G'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:G is not function
(init_get_name) 
init_get_name:'G'
(init_get_name) 
init_get_name:'G'
(get_name) 
get_name:gn:'G'
process_token:type:f
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f G
(add_var_info) Name:G Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 G'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:0001
(scan_atom) ret1
(scan_expression) n commas now:0

 (check_literal) check_literal:lit=' %' idx=7 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'%' idx=7 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_operator) '' igncomma:0
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(add_var_info) Name:MPG Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_assignment) scan_assignment: ret1
(scan_line) ret1
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=7 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=7 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:3 buf2 i:5
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop '/' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: := type:f id:EXP_BUFF_ID_OPERATOR
 (op_stack_print) ------------------

 (op_stack_finalise) Popped:/ f
 (output_operator) [f,()] f /
 (op_stack_pop) Pop ':=' type:f 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped::= f
 (output_operator) [f,()] f :=
 (process_expression_types) 
process_expression_types:
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'MPG' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '/' npar:0 nidx:0 trapped:0 %:0  2: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1 -822624274 781119190 -22285654 -303129682 2130564856 -22106581 1026472951 801037165 -554709254 -1153454290 -1090967126 -68964498 -306194770 -1146130769 -1075119494 -553996305 -1146115082 -1344504177  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing :MPG   *************
 (type_check_stack_push)  type_check_stack_push: 'MPG'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'MPG' type:f (1), %:0
 (process_syntax_tree) *********Processing :M   *************
 (type_check_stack_push)  type_check_stack_push: 'M'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'MPG' type:f (1), %:0
 (type_check_stack_display) 001: 'M' type:f (1), %:0
 (process_syntax_tree) *********Processing :G   *************
 (type_check_stack_push)  type_check_stack_push: 'G'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print)  N003: 'G' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'MPG' type:f (1), %:0
 (type_check_stack_display) 001: 'M' type:f (1), %:0
 (type_check_stack_display) 002: 'G' type:f (1), %:0
 (process_syntax_tree) *********Processing :/   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator / %conv:1
 (type_check_stack_pop)   type_check_stack_pop: 'G'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'M'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:1
 (process_syntax_tree) Percent convertible operator op1 (N003) percent:0
 (process_syntax_tree) Mutable type (G) f f
 (process_syntax_tree) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'MPG' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (process_syntax_tree) *********Processing ::=   *************
 (process_syntax_tree) BUFF_ID_OPERATOR
 (process_syntax_tree) Found operator := %conv:0
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'MPG'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (process_syntax_tree) op1 type:f op2 type:f %conv:0
 (process_syntax_tree) Mutable type (000) f f
 (process_syntax_tree) Same type
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE:MPG    **********
 (type_check_stack_push)  type_check_stack_push: 'MPG'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: 'MPG' type:f (1), %:0
 (typecheck_expression)  *** BE:M    **********
 (type_check_stack_push)  type_check_stack_push: 'M'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'MPG' type:f (1), %:0
 (type_check_stack_display) 001: 'M' type:f (1), %:0
 (typecheck_expression)  *** BE:G    **********
 (type_check_stack_push)  type_check_stack_push: 'G'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (3)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print)  N003: 'G' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (3)
 (type_check_stack_display) 000: 'MPG' type:f (1), %:0
 (type_check_stack_display) 001: 'M' type:f (1), %:0
 (type_check_stack_display) 002: 'G' type:f (1), %:0
 (typecheck_expression)  *** BE:/    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator /
 (type_check_stack_pop)   type_check_stack_pop: 'G'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print)  N002: 'M' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'M'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (/) f f
 (typecheck_expression) Same type
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (2)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print)  N004: '000' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (2)
 (type_check_stack_display) 000: 'MPG' type:f (1), %:0
 (type_check_stack_display) 001: '000' type:f (1), %:0
 (typecheck_expression)  *** BE::=    **********
 (typecheck_expression) BUFF_ID_OPERATOR
 (typecheck_expression) Found operator :=
 (type_check_stack_pop)   type_check_stack_pop: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N001: 'MPG' type:1 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_pop)   type_check_stack_pop: 'MPG'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (0)

 (type_check_stack_print) ------------------

 (typecheck_expression) op1 type:f op2 type:f
 (typecheck_expression) Mutable type (:=) f f
 (typecheck_expression) Same type
 (type_check_stack_display) Type Check Stack (0)
N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'MPG' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '/' npar:0 nidx:0 trapped:0 %:0  2: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1 -822624274 781119190 -22285654 -303129682 2130564856 -22106581 1026472951 801037165 -554709254 -1153454290 -1090967126 -68964498 -306194770 -1146130769 -1075119494 -553996305 -1146115082 -1344504177  nb 0:()

N001      Write EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'MPG' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U '/' npar:0 nidx:0 trapped:0 %:0  2: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()
N005       Read EXP_BUFF_ID_OPERATOR                   ty:f qcty:U ':=' npar:0 nidx:0 trapped:0 %:0  2: 4 1 -822624274 781119190 -22285654 -303129682 2130564856 -22106581 1026472951 801037165 -554709254 -1153454290 -1090967126 -68964498 -306194770 -1146130769 -1075119494 -553996305 -1146115082 -1344504177  nb 0:()

 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:5 qcode_idx:0037
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (add_simple_qcode) 'MPG'
 (add_simple_qcode) Op type:f op access:Write qcode_type:U
 (qcode_check_trapped) MPG: Trapped:0
 (set_qcode_header_byte_at) idx:0037 len:1 val:0E
 (set_qcode_header_byte_at) idx:0038 len:1 val:FF
 (set_qcode_header_byte_at) idx:0039 len:1 val:E6
 (output_qcode_for_line) QC: i:1
 (add_simple_qcode) 'M'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) M: Trapped:0
 (set_qcode_header_byte_at) idx:003A len:1 val:01
 (set_qcode_header_byte_at) idx:003B len:1 val:FF
 (set_qcode_header_byte_at) idx:003C len:1 val:F6
 (output_qcode_for_line) QC: i:2
 (add_simple_qcode) 'G'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) G: Trapped:0
 (set_qcode_header_byte_at) idx:003D len:1 val:01
 (set_qcode_header_byte_at) idx:003E len:1 val:FF
 (set_qcode_header_byte_at) idx:003F len:1 val:DE
 (output_qcode_for_line) QC: i:3
 (add_simple_qcode) '/'
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) /: Trapped:0
 (set_qcode_header_byte_at) idx:0040 len:1 val:3F
 (output_qcode_for_line) QC: i:4
 (add_simple_qcode) ':='
 (add_simple_qcode) Op type:f op access:Read qcode_type:U
 (qcode_check_trapped) :=: Trapped:0
 (set_qcode_header_byte_at) idx:0041 len:1 val:80
 (finalise_expression) Finalise expression done.
mpg=m/g
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=7 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=7 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=7 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'M' (77)
 (is_all_spaces) cline[8] = 'P' (80)
 (is_all_spaces) cline[9] = 'G' (71)
 (is_all_spaces) cline[10] = ':' (58)
 (is_all_spaces) cline[11] = '"' (34)
 (is_all_spaces) cline[12] = ';' (59)
 (is_all_spaces) cline[13] = 'm' (109)
 (is_all_spaces) cline[14] = 'p' (112)
 (is_all_spaces) cline[15] = 'g' (103)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "MPG:";mpg'
********************
**print "MPG:";mpg**
********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "MPG:";mpg'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "MPG:";mpg'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "MPG:";mpg'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "MPG:";mpg'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "MPG:";mpg'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "MPG:";mpg'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "MPG:";mpg'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "MPG:";mpg'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "MPG:";mpg'

   (check_operator) 'print "MPG:";mpg' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "MPG:";mpg':
   (check_vname) check_vname ret1 ' "MPG:";mpg':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "MPG:";mpg'

   (check_literal) check_literal:lit='(' idx=5 ' "MPG:";mpg'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "MPG:";mpg'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "MPG:";mpg'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"MPG:";mpg'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "MPG:";mpg'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "MPG:";mpg'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "MPG:";mpg'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "MPG:";mpg'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "MPG:";mpg'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "MPG:";mpg'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "MPG:";mpg'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "MPG:";mpg'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "MPG:";mpg'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "MPG:";mpg'
   (check_literal) check_literal:After drop space:':' idx=5 ' "MPG:";mpg'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "MPG:";mpg'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "MPG:";mpg'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "MPG:";mpg'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "MPG:";mpg'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "MPG:";mpg'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "MPG:";mpg'
   (check_literal) check_literal:After while(): "MPG:";mpg
   (check_literal) ret1 Match. ' PRINT' == 'print "MPG:";mpg'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "MPG:";mpg'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "MPG:";mpg'
   (check_literal) check_literal:After while(): "MPG:";mpg
   (check_literal) ret1 Match. ' PRINT' == 'print "MPG:";mpg'

   (check_expression) ' "MPG:";mpg'

    (check_eitem) check_eitem: '"MPG:";mpg'

     (check_function)  '"MPG:";mpg'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"MPG:";mpg'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"MPG:";mpg'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"MPG:";mpg'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"MPG:";mpg'
      (check_literal) check_literal:After while():MPG:";mpg
      (check_literal) ret1 Match. ' "' == '"MPG:";mpg'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ';mpg' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ';mpg' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "MPG:";mpg'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "MPG:";mpg'
   (check_literal) check_literal:After while(): "MPG:";mpg
   (check_literal) ret1 Match. ' PRINT' == 'print "MPG:";mpg'
  (scan_print) Before while

   (check_expression) ' "MPG:";mpg'

    (check_eitem) check_eitem: '"MPG:";mpg'

     (check_function)  '"MPG:";mpg'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"MPG:";mpg'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"MPG:";mpg'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"MPG:";mpg'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"MPG:";mpg'
      (check_literal) check_literal:After while():MPG:";mpg
      (check_literal) ret1 Match. ' "' == '"MPG:";mpg'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ';mpg' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ';mpg' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "MPG:";mpg' igncomma:1

    (check_eitem) check_eitem: '"MPG:";mpg'

     (check_function)  '"MPG:";mpg'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"MPG:";mpg'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"MPG:";mpg'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"MPG:";mpg'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"MPG:";mpg'
      (check_literal) check_literal:After while():MPG:";mpg
      (check_literal) ret1 Match. ' "' == '"MPG:";mpg'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"MPG:";mpg'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"MPG:";mpg'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"MPG:";mpg'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"MPG:";mpg'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"MPG:";mpg'
      (check_literal) check_literal:After while():MPG:";mpg
      (check_literal) ret1 Match. ' "' == '"MPG:";mpg'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"MPG:";mpg'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"MPG:";mpg'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"MPG:";mpg'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"MPG:";mpg'
      (check_literal) check_literal:After while():MPG:";mpg
      (check_literal) ret1 Match. ' "' == '"MPG:";mpg'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"MPG:";mpg'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"MPG:";mpg'
       (check_literal) check_literal:After while():MPG:";mpg
       (check_literal) ret1 Match. ' "' == '"MPG:";mpg'
      (scan_string)   (in if) 'MPG:";mpg'
      (scan_string)   (in wh) 'MPG:";mpg'
      (scan_string)   (in wh) 'PG:";mpg'
      (scan_string)   (in wh) 'PG:";mpg'
      (scan_string)   (in wh) 'G:";mpg'
      (scan_string)   (in wh) 'G:";mpg'
      (scan_string)   (in wh) ':";mpg'
      (scan_string)   (in wh) ':";mpg'
      (scan_string)   (in wh) '";mpg'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"MPG:"' toktype:s exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"MPG:"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"MPG:" is not function
token_is_variable: tok:'"MPG:"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"MPG:" is not function
(   output_string) [U,()] s "MPG:"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ';mpg' Before while igncomma:1

    (check_operator) ';mpg' igncomma:1
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 ';mpg' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=12 ';mpg'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ';mpg'
   (check_literal)   ',' != ';'
   (check_literal) check_literal: ret0
  (scan_print) After scan expression II

   (check_literal) check_literal:lit=' ;' idx=12 ';mpg'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=12 ';mpg'
   (check_literal) check_literal:After while():mpg
   (check_literal) ret1 Match. ' ;' == ';mpg'

   (scan_literal_core) scan_literal_core:lit=' ;' ';mpg'
   (scan_literal_core) scan_literal_core:After drop space:';mpg'
   (scan_literal_core) scan_literal_core:while loop:;mpg
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:';' toktype:? exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:';'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:; is not function
token_is_variable: tok:';'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:; is not function
 (process_token) **Unknown token **      ';'
 (scan_literal) ret1
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Semi colon present
(finalise_expression) Finalise expression Buf i:2 buf2 i:5
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"MPG:"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :"MPG:"   *************
(type_check_stack_push)  type_check_stack_push: '"MPG:"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"MPG:"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"MPG:"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"MPG:"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:"MPG:"    **********
(type_check_stack_push)  type_check_stack_push: '"MPG:"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"MPG:"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"MPG:"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"MPG:"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"MPG:"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"MPG:"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:0042
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:0 String Literal '"MPG:"' EXP_BUFF_ID_STR
(set_qcode_header_byte_at) idx:0042 len:1 val:24
(set_qcode_header_byte_at) idx:0043 len:1 val:04
(set_qcode_header_byte_at) idx:0044 len:1 val:4D
(set_qcode_header_byte_at) idx:0045 len:1 val:50
(set_qcode_header_byte_at) idx:0046 len:1 val:47
(set_qcode_header_byte_at) idx:0047 len:1 val:3A
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0048 len:1 val:71
(finalise_expression) Finalise expression done.
mpg
========================================================
(output_expression_start)

 (check_expression) 'mpg'

  (check_eitem) check_eitem: 'mpg'

   (check_function)  'mpg'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=13 'mpg'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=13 'mpg'
    (check_literal)   '%' != 'm'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=13 'mpg'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=13 'mpg'
    (check_literal)   '"' != 'm'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'mpg'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'mpg'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'mpg'
     (check_textlabel) 'mpg' is a text label chstr:'g'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'mpg' Type:f
    (check_proc_call) 'mpg' is text label

     (check_literal) check_literal:lit=':' idx=16 ''
     (check_literal) check_literal:After drop space:':' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'mpg'

     (check_operator) 'mpg' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'mpg':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=16 ''
     (check_literal) check_literal:After drop space:'(' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) 'mpg' igncomma:1

  (check_eitem) check_eitem: 'mpg'

   (check_function)  'mpg'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=13 'mpg'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=13 'mpg'
    (check_literal)   '%' != 'm'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=13 'mpg'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=13 'mpg'
    (check_literal)   '"' != 'm'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'mpg'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'mpg'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'mpg'
     (check_textlabel) 'mpg' is a text label chstr:'g'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'mpg' Type:f
    (check_proc_call) 'mpg' is text label

     (check_literal) check_literal:lit=':' idx=16 ''
     (check_literal) check_literal:After drop space:':' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'mpg'

     (check_operator) 'mpg' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'mpg':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=16 ''
     (check_literal) check_literal:After drop space:'(' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'mpg'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=13 'mpg'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=13 'mpg'
   (check_literal)   '%' != 'm'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=13 'mpg'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=13 'mpg'
   (check_literal)   '"' != 'm'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'mpg'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'mpg'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'mpg'
    (check_textlabel) 'mpg' is a text label chstr:'g'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'mpg' Type:f
   (check_proc_call) 'mpg' is text label

    (check_literal) check_literal:lit=':' idx=16 ''
    (check_literal) check_literal:After drop space:':' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'mpg'

    (check_operator) 'mpg' igncomma:1
    (check_operator) ret0:is comma: 0

    (check_vname) check_vname 'mpg':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=16 ''
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=13 'mpg'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=13 'mpg'
  (check_literal)   '%' != 'm'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=13 'mpg'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=13 'mpg'
  (check_literal)   '"' != 'm'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'mpg'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'mpg'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'mpg'
   (check_textlabel) 'mpg' is a text label chstr:'g'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'mpg' Type:f
  (check_proc_call) 'mpg' is text label

   (check_literal) check_literal:lit=':' idx=16 ''
   (check_literal) check_literal:After drop space:':' idx=16 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'mpg'

   (check_operator) 'mpg' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'mpg':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=16 ''
   (check_literal) check_literal:After drop space:'(' idx=16 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'mpg' ref_ndeclare:1

  (scan_vname) scan_vname: 'mpg'
  (scan_vname) scan_vname: ret1 'mpg'
 (scan_variable) scan_variable: '' vname='MPG'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'MPG' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=16 ''
  (check_literal) check_literal:After drop space:'(' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='MPG' Float
(process_token)    Frst:1 T:'MPG' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'MPG'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:MPG is not function
token_is_variable: tok:'MPG'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:MPG is not function
(init_get_name) 
init_get_name:'MPG'
(init_get_name) 
init_get_name:'MPG'
(get_name) 
get_name:gn:'MPG'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f MPG
(add_var_info) Name:MPG Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '               MPG'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:859C
(scan_atom) ret1
(scan_expression) '' Before while igncomma:1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:2 buf2 i:2
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'MPG' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :MPG   *************
(type_check_stack_push)  type_check_stack_push: 'MPG'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'MPG' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'MPG' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'MPG'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:MPG    **********
(type_check_stack_push)  type_check_stack_push: 'MPG'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'MPG' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'MPG' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'MPG'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'MPG' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'MPG' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:0049
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(add_simple_qcode) 'MPG'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) MPG: Trapped:0
(set_qcode_header_byte_at) idx:0049 len:1 val:01
(set_qcode_header_byte_at) idx:004A len:1 val:FF
(set_qcode_header_byte_at) idx:004B len:1 val:E6
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:004C len:1 val:70
(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:? exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>U
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:004D
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:004D len:1 val:73
(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'d'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=16 ''
     (check_literal) check_literal:After drop space:':' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:004E
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print "MPG:";mpg
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=16 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=16 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'G' (71)
 (is_all_spaces) cline[8] = 'a' (97)
 (is_all_spaces) cline[9] = 'l' (108)
 (is_all_spaces) cline[10] = 'l' (108)
 (is_all_spaces) cline[11] = 'o' (111)
 (is_all_spaces) cline[12] = 'n' (110)
 (is_all_spaces) cline[13] = 's' (115)
 (is_all_spaces) cline[14] = '"' (34)
 (is_all_spaces) cline[15] = ';' (59)
 (is_all_spaces) cline[16] = 'g' (103)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "Gallons";g'
*********************
**print "Gallons";g**
*********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "Gallons";g'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "Gallons";g'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "Gallons";g'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "Gallons";g'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "Gallons";g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "Gallons";g'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "Gallons";g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "Gallons";g'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "Gallons";g'

   (check_operator) 'print "Gallons";g' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "Gallons";g':
   (check_vname) check_vname ret1 ' "Gallons";g':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "Gallons";g'

   (check_literal) check_literal:lit='(' idx=5 ' "Gallons";g'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "Gallons";g'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "Gallons";g'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"Gallons";g'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "Gallons";g'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "Gallons";g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "Gallons";g'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "Gallons";g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "Gallons";g'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "Gallons";g'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "Gallons";g'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "Gallons";g'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "Gallons";g'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "Gallons";g'
   (check_literal) check_literal:After drop space:':' idx=5 ' "Gallons";g'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "Gallons";g'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "Gallons";g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "Gallons";g'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "Gallons";g'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Gallons";g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Gallons";g'
   (check_literal) check_literal:After while(): "Gallons";g
   (check_literal) ret1 Match. ' PRINT' == 'print "Gallons";g'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Gallons";g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Gallons";g'
   (check_literal) check_literal:After while(): "Gallons";g
   (check_literal) ret1 Match. ' PRINT' == 'print "Gallons";g'

   (check_expression) ' "Gallons";g'

    (check_eitem) check_eitem: '"Gallons";g'

     (check_function)  '"Gallons";g'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Gallons";g'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Gallons";g'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Gallons";g'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Gallons";g'
      (check_literal) check_literal:After while():Gallons";g
      (check_literal) ret1 Match. ' "' == '"Gallons";g'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ';g' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ';g' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Gallons";g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Gallons";g'
   (check_literal) check_literal:After while(): "Gallons";g
   (check_literal) ret1 Match. ' PRINT' == 'print "Gallons";g'
  (scan_print) Before while

   (check_expression) ' "Gallons";g'

    (check_eitem) check_eitem: '"Gallons";g'

     (check_function)  '"Gallons";g'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Gallons";g'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Gallons";g'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Gallons";g'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Gallons";g'
      (check_literal) check_literal:After while():Gallons";g
      (check_literal) ret1 Match. ' "' == '"Gallons";g'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ';g' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ';g' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "Gallons";g' igncomma:1

    (check_eitem) check_eitem: '"Gallons";g'

     (check_function)  '"Gallons";g'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Gallons";g'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Gallons";g'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Gallons";g'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Gallons";g'
      (check_literal) check_literal:After while():Gallons";g
      (check_literal) ret1 Match. ' "' == '"Gallons";g'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"Gallons";g'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Gallons";g'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Gallons";g'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Gallons";g'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Gallons";g'
      (check_literal) check_literal:After while():Gallons";g
      (check_literal) ret1 Match. ' "' == '"Gallons";g'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"Gallons";g'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Gallons";g'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"Gallons";g'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Gallons";g'
      (check_literal) check_literal:After while():Gallons";g
      (check_literal) ret1 Match. ' "' == '"Gallons";g'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"Gallons";g'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"Gallons";g'
       (check_literal) check_literal:After while():Gallons";g
       (check_literal) ret1 Match. ' "' == '"Gallons";g'
      (scan_string)   (in if) 'Gallons";g'
      (scan_string)   (in wh) 'Gallons";g'
      (scan_string)   (in wh) 'allons";g'
      (scan_string)   (in wh) 'allons";g'
      (scan_string)   (in wh) 'llons";g'
      (scan_string)   (in wh) 'llons";g'
      (scan_string)   (in wh) 'lons";g'
      (scan_string)   (in wh) 'lons";g'
      (scan_string)   (in wh) 'ons";g'
      (scan_string)   (in wh) 'ons";g'
      (scan_string)   (in wh) 'ns";g'
      (scan_string)   (in wh) 'ns";g'
      (scan_string)   (in wh) 's";g'
      (scan_string)   (in wh) 's";g'
      (scan_string)   (in wh) '";g'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"Gallons"' toktype:s exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"Gallons"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Gallons" is not function
token_is_variable: tok:'"Gallons"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Gallons" is not function
(   output_string) [U,()] s "Gallons"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ';g' Before while igncomma:1

    (check_operator) ';g' igncomma:1
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 ';g' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=15 ';g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=15 ';g'
   (check_literal)   ',' != ';'
   (check_literal) check_literal: ret0
  (scan_print) After scan expression II

   (check_literal) check_literal:lit=' ;' idx=15 ';g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=15 ';g'
   (check_literal) check_literal:After while():g
   (check_literal) ret1 Match. ' ;' == ';g'

   (scan_literal_core) scan_literal_core:lit=' ;' ';g'
   (scan_literal_core) scan_literal_core:After drop space:';g'
   (scan_literal_core) scan_literal_core:while loop:;g
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:';' toktype:? exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:';'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:; is not function
token_is_variable: tok:';'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:; is not function
 (process_token) **Unknown token **      ';'
 (scan_literal) ret1
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Semi colon present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Gallons"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :"Gallons"   *************
(type_check_stack_push)  type_check_stack_push: '"Gallons"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"Gallons"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"Gallons"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"Gallons"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:"Gallons"    **********
(type_check_stack_push)  type_check_stack_push: '"Gallons"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"Gallons"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"Gallons"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"Gallons"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Gallons"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Gallons"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:004E
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:0 String Literal '"Gallons"' EXP_BUFF_ID_STR
(set_qcode_header_byte_at) idx:004E len:1 val:24
(set_qcode_header_byte_at) idx:004F len:1 val:07
(set_qcode_header_byte_at) idx:0050 len:1 val:47
(set_qcode_header_byte_at) idx:0051 len:1 val:61
(set_qcode_header_byte_at) idx:0052 len:1 val:6C
(set_qcode_header_byte_at) idx:0053 len:1 val:6C
(set_qcode_header_byte_at) idx:0054 len:1 val:6F
(set_qcode_header_byte_at) idx:0055 len:1 val:6E
(set_qcode_header_byte_at) idx:0056 len:1 val:73
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0057 len:1 val:71
(finalise_expression) Finalise expression done.
g
========================================================
(output_expression_start)

 (check_expression) 'g'

  (check_eitem) check_eitem: 'g'

   (check_function)  'g'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=16 'g'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=16 'g'
    (check_literal)   '%' != 'g'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=16 'g'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=16 'g'
    (check_literal)   '"' != 'g'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'g'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'g'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'g'
     (check_textlabel) 'g' is a text label chstr:'g'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'g' Type:f
    (check_proc_call) 'g' is text label

     (check_literal) check_literal:lit=':' idx=17 ''
     (check_literal) check_literal:After drop space:':' idx=17 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'g'

     (check_operator) 'g' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'g':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=17 ''
     (check_literal) check_literal:After drop space:'(' idx=17 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) 'g' igncomma:1

  (check_eitem) check_eitem: 'g'

   (check_function)  'g'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=16 'g'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=16 'g'
    (check_literal)   '%' != 'g'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=16 'g'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=16 'g'
    (check_literal)   '"' != 'g'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'g'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'g'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'g'
     (check_textlabel) 'g' is a text label chstr:'g'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'g' Type:f
    (check_proc_call) 'g' is text label

     (check_literal) check_literal:lit=':' idx=17 ''
     (check_literal) check_literal:After drop space:':' idx=17 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'g'

     (check_operator) 'g' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'g':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=17 ''
     (check_literal) check_literal:After drop space:'(' idx=17 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'g'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=16 'g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=16 'g'
   (check_literal)   '%' != 'g'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=16 'g'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=16 'g'
   (check_literal)   '"' != 'g'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'g'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'g'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'g'
    (check_textlabel) 'g' is a text label chstr:'g'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'g' Type:f
   (check_proc_call) 'g' is text label

    (check_literal) check_literal:lit=':' idx=17 ''
    (check_literal) check_literal:After drop space:':' idx=17 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'g'

    (check_operator) 'g' igncomma:1
    (check_operator) ret0:is comma: 0

    (check_vname) check_vname 'g':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=17 ''
    (check_literal) check_literal:After drop space:'(' idx=17 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=16 'g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=16 'g'
  (check_literal)   '%' != 'g'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=16 'g'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=16 'g'
  (check_literal)   '"' != 'g'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'g'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'g'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'g'
   (check_textlabel) 'g' is a text label chstr:'g'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'g' Type:f
  (check_proc_call) 'g' is text label

   (check_literal) check_literal:lit=':' idx=17 ''
   (check_literal) check_literal:After drop space:':' idx=17 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'g'

   (check_operator) 'g' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'g':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=17 ''
   (check_literal) check_literal:After drop space:'(' idx=17 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'g' ref_ndeclare:1

  (scan_vname) scan_vname: 'g'
  (scan_vname) scan_vname: ret1 'g'
 (scan_variable) scan_variable: '' vname='G'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'G' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=17 ''
  (check_literal) check_literal:After drop space:'(' idx=17 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='G' Float
(process_token)    Frst:1 T:'G' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'G'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:G is not function
token_is_variable: tok:'G'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:G is not function
(init_get_name) 
init_get_name:'G'
(init_get_name) 
init_get_name:'G'
(get_name) 
get_name:gn:'G'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f G
(add_var_info) Name:G Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 G'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:859C
(scan_atom) ret1
(scan_expression) '' Before while igncomma:1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=17 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=17 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=17 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=17 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:2 buf2 i:2
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :G   *************
(type_check_stack_push)  type_check_stack_push: 'G'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'G' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'G' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'G'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:G    **********
(type_check_stack_push)  type_check_stack_push: 'G'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'G' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'G' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'G'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'G' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:0058
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(add_simple_qcode) 'G'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) G: Trapped:0
(set_qcode_header_byte_at) idx:0058 len:1 val:01
(set_qcode_header_byte_at) idx:0059 len:1 val:FF
(set_qcode_header_byte_at) idx:005A len:1 val:DE
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:005B len:1 val:70
(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:? exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>U
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:005C
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:005C len:1 val:73
(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=17 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=17 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=17 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=17 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'d'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=17 ''
     (check_literal) check_literal:After drop space:':' idx=17 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=17 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=17 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=17 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=17 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=17 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=17 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=17 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=17 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:005D
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print "Gallons";g
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=17 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=17 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=17 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'L' (76)
 (is_all_spaces) cline[8] = 'i' (105)
 (is_all_spaces) cline[9] = 't' (116)
 (is_all_spaces) cline[10] = 'r' (114)
 (is_all_spaces) cline[11] = 'e' (101)
 (is_all_spaces) cline[12] = 's' (115)
 (is_all_spaces) cline[13] = '"' (34)
 (is_all_spaces) cline[14] = ';' (59)
 (is_all_spaces) cline[15] = 'l' (108)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "Litres";l'
********************
**print "Litres";l**
********************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "Litres";l'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "Litres";l'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "Litres";l'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "Litres";l'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "Litres";l'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "Litres";l'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "Litres";l'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "Litres";l'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "Litres";l'

   (check_operator) 'print "Litres";l' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "Litres";l':
   (check_vname) check_vname ret1 ' "Litres";l':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "Litres";l'

   (check_literal) check_literal:lit='(' idx=5 ' "Litres";l'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "Litres";l'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "Litres";l'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"Litres";l'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "Litres";l'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "Litres";l'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "Litres";l'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "Litres";l'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "Litres";l'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "Litres";l'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "Litres";l'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "Litres";l'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "Litres";l'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "Litres";l'
   (check_literal) check_literal:After drop space:':' idx=5 ' "Litres";l'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "Litres";l'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "Litres";l'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "Litres";l'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "Litres";l'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Litres";l'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Litres";l'
   (check_literal) check_literal:After while(): "Litres";l
   (check_literal) ret1 Match. ' PRINT' == 'print "Litres";l'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Litres";l'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Litres";l'
   (check_literal) check_literal:After while(): "Litres";l
   (check_literal) ret1 Match. ' PRINT' == 'print "Litres";l'

   (check_expression) ' "Litres";l'

    (check_eitem) check_eitem: '"Litres";l'

     (check_function)  '"Litres";l'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Litres";l'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Litres";l'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Litres";l'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Litres";l'
      (check_literal) check_literal:After while():Litres";l
      (check_literal) ret1 Match. ' "' == '"Litres";l'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ';l' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ';l' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Litres";l'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Litres";l'
   (check_literal) check_literal:After while(): "Litres";l
   (check_literal) ret1 Match. ' PRINT' == 'print "Litres";l'
  (scan_print) Before while

   (check_expression) ' "Litres";l'

    (check_eitem) check_eitem: '"Litres";l'

     (check_function)  '"Litres";l'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Litres";l'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Litres";l'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Litres";l'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Litres";l'
      (check_literal) check_literal:After while():Litres";l
      (check_literal) ret1 Match. ' "' == '"Litres";l'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ';l' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ';l' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "Litres";l' igncomma:1

    (check_eitem) check_eitem: '"Litres";l'

     (check_function)  '"Litres";l'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Litres";l'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Litres";l'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Litres";l'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Litres";l'
      (check_literal) check_literal:After while():Litres";l
      (check_literal) ret1 Match. ' "' == '"Litres";l'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"Litres";l'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Litres";l'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Litres";l'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Litres";l'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Litres";l'
      (check_literal) check_literal:After while():Litres";l
      (check_literal) ret1 Match. ' "' == '"Litres";l'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"Litres";l'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Litres";l'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"Litres";l'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Litres";l'
      (check_literal) check_literal:After while():Litres";l
      (check_literal) ret1 Match. ' "' == '"Litres";l'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"Litres";l'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"Litres";l'
       (check_literal) check_literal:After while():Litres";l
       (check_literal) ret1 Match. ' "' == '"Litres";l'
      (scan_string)   (in if) 'Litres";l'
      (scan_string)   (in wh) 'Litres";l'
      (scan_string)   (in wh) 'itres";l'
      (scan_string)   (in wh) 'itres";l'
      (scan_string)   (in wh) 'tres";l'
      (scan_string)   (in wh) 'tres";l'
      (scan_string)   (in wh) 'res";l'
      (scan_string)   (in wh) 'res";l'
      (scan_string)   (in wh) 'es";l'
      (scan_string)   (in wh) 'es";l'
      (scan_string)   (in wh) 's";l'
      (scan_string)   (in wh) 's";l'
      (scan_string)   (in wh) '";l'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"Litres"' toktype:s exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"Litres"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Litres" is not function
token_is_variable: tok:'"Litres"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Litres" is not function
(   output_string) [U,()] s "Litres"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ';l' Before while igncomma:1

    (check_operator) ';l' igncomma:1
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 ';l' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=14 ';l'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=14 ';l'
   (check_literal)   ',' != ';'
   (check_literal) check_literal: ret0
  (scan_print) After scan expression II

   (check_literal) check_literal:lit=' ;' idx=14 ';l'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=14 ';l'
   (check_literal) check_literal:After while():l
   (check_literal) ret1 Match. ' ;' == ';l'

   (scan_literal_core) scan_literal_core:lit=' ;' ';l'
   (scan_literal_core) scan_literal_core:After drop space:';l'
   (scan_literal_core) scan_literal_core:while loop:;l
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:';' toktype:? exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:';'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:; is not function
token_is_variable: tok:';'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:; is not function
 (process_token) **Unknown token **      ';'
 (scan_literal) ret1
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Semi colon present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Litres"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :"Litres"   *************
(type_check_stack_push)  type_check_stack_push: '"Litres"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"Litres"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"Litres"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"Litres"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:"Litres"    **********
(type_check_stack_push)  type_check_stack_push: '"Litres"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"Litres"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"Litres"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"Litres"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Litres"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Litres"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:005D
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:0 String Literal '"Litres"' EXP_BUFF_ID_STR
(set_qcode_header_byte_at) idx:005D len:1 val:24
(set_qcode_header_byte_at) idx:005E len:1 val:06
(set_qcode_header_byte_at) idx:005F len:1 val:4C
(set_qcode_header_byte_at) idx:0060 len:1 val:69
(set_qcode_header_byte_at) idx:0061 len:1 val:74
(set_qcode_header_byte_at) idx:0062 len:1 val:72
(set_qcode_header_byte_at) idx:0063 len:1 val:65
(set_qcode_header_byte_at) idx:0064 len:1 val:73
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0065 len:1 val:71
(finalise_expression) Finalise expression done.
l
========================================================
(output_expression_start)

 (check_expression) 'l'

  (check_eitem) check_eitem: 'l'

   (check_function)  'l'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=15 'l'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=15 'l'
    (check_literal)   '%' != 'l'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=15 'l'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=15 'l'
    (check_literal)   '"' != 'l'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'l'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'l'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'l'
     (check_textlabel) 'l' is a text label chstr:'l'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'l' Type:f
    (check_proc_call) 'l' is text label

     (check_literal) check_literal:lit=':' idx=16 ''
     (check_literal) check_literal:After drop space:':' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'l'

     (check_operator) 'l' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'l':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=16 ''
     (check_literal) check_literal:After drop space:'(' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) 'l' igncomma:1

  (check_eitem) check_eitem: 'l'

   (check_function)  'l'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=15 'l'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=15 'l'
    (check_literal)   '%' != 'l'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=15 'l'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=15 'l'
    (check_literal)   '"' != 'l'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'l'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'l'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'l'
     (check_textlabel) 'l' is a text label chstr:'l'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'l' Type:f
    (check_proc_call) 'l' is text label

     (check_literal) check_literal:lit=':' idx=16 ''
     (check_literal) check_literal:After drop space:':' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'l'

     (check_operator) 'l' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'l':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=16 ''
     (check_literal) check_literal:After drop space:'(' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'l'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=15 'l'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=15 'l'
   (check_literal)   '%' != 'l'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=15 'l'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=15 'l'
   (check_literal)   '"' != 'l'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'l'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'l'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'l'
    (check_textlabel) 'l' is a text label chstr:'l'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'l' Type:f
   (check_proc_call) 'l' is text label

    (check_literal) check_literal:lit=':' idx=16 ''
    (check_literal) check_literal:After drop space:':' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'l'

    (check_operator) 'l' igncomma:1
    (check_operator) ret0:is comma: 0

    (check_vname) check_vname 'l':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=16 ''
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=15 'l'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=15 'l'
  (check_literal)   '%' != 'l'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=15 'l'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=15 'l'
  (check_literal)   '"' != 'l'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'l'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'l'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'l'
   (check_textlabel) 'l' is a text label chstr:'l'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'l' Type:f
  (check_proc_call) 'l' is text label

   (check_literal) check_literal:lit=':' idx=16 ''
   (check_literal) check_literal:After drop space:':' idx=16 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'l'

   (check_operator) 'l' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'l':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=16 ''
   (check_literal) check_literal:After drop space:'(' idx=16 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'l' ref_ndeclare:1

  (scan_vname) scan_vname: 'l'
  (scan_vname) scan_vname: ret1 'l'
 (scan_variable) scan_variable: '' vname='L'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'L' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=16 ''
  (check_literal) check_literal:After drop space:'(' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='L' Float
(process_token)    Frst:1 T:'L' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'L'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:L is not function
token_is_variable: tok:'L'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:L is not function
(init_get_name) 
init_get_name:'L'
(init_get_name) 
init_get_name:'L'
(get_name) 
get_name:gn:'L'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f L
(add_var_info) Name:L Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 L'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:859C
(scan_atom) ret1
(scan_expression) '' Before while igncomma:1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:2 buf2 i:2
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :L   *************
(type_check_stack_push)  type_check_stack_push: 'L'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'L' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'L' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'L'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:L    **********
(type_check_stack_push)  type_check_stack_push: 'L'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'L' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'L' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'L'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'L' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:0066
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(add_simple_qcode) 'L'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) L: Trapped:0
(set_qcode_header_byte_at) idx:0066 len:1 val:01
(set_qcode_header_byte_at) idx:0067 len:1 val:FF
(set_qcode_header_byte_at) idx:0068 len:1 val:EE
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0069 len:1 val:70
(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:? exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>U
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:006A
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:006A len:1 val:73
(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'d'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=16 ''
     (check_literal) check_literal:After drop space:':' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=16 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=16 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=16 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=16 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:006B
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print "Litres";l
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=16 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=16 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'p' (112)
 (is_all_spaces) cline[1] = 'r' (114)
 (is_all_spaces) cline[2] = 'i' (105)
 (is_all_spaces) cline[3] = 'n' (110)
 (is_all_spaces) cline[4] = 't' (116)
 (is_all_spaces) cline[5] = ' ' (32)
 (is_all_spaces) cline[6] = '"' (34)
 (is_all_spaces) cline[7] = 'M' (77)
 (is_all_spaces) cline[8] = 'i' (105)
 (is_all_spaces) cline[9] = 'l' (108)
 (is_all_spaces) cline[10] = 'e' (101)
 (is_all_spaces) cline[11] = 's' (115)
 (is_all_spaces) cline[12] = '"' (34)
 (is_all_spaces) cline[13] = ';' (59)
 (is_all_spaces) cline[14] = 'm' (109)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'print "Miles";m'
*******************
**print "Miles";m**
*******************

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'print "Miles";m'
 (check_literal) check_literal:After drop space:'REM' idx=0 'print "Miles";m'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'print "Miles";m'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'print "Miles";m'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'print "Miles";m'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'print "Miles";m'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'print "Miles";m'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'print "Miles";m'
 (check_literal)   'R' != 'p'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'print "Miles";m'

   (check_operator) 'print "Miles";m' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'print "Miles";m':
   (check_vname) check_vname ret1 ' "Miles";m':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ' "Miles";m'

   (check_literal) check_literal:lit='(' idx=5 ' "Miles";m'
   (check_literal) check_literal:After drop space:'(' idx=5 ' "Miles";m'
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=5 ' "Miles";m'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=6 '"Miles";m'
 (check_literal)   '=' != '"'
 (check_literal) check_literal: ret0
(check_assignment) check_assignment:ret0

 (check_declare) 'print "Miles";m'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'print "Miles";m'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'print "Miles";m'
  (check_literal)   'L' != 'p'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'print "Miles";m'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'print "Miles";m'
  (check_literal)   'G' != 'p'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'print "Miles";m'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f

   (check_literal) check_literal:lit='::' idx=5 ' "Miles";m'
   (check_literal) check_literal:After drop space:'::' idx=5 ' "Miles";m'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'print "Miles";m'
   (check_textlabel) 'print' is a text label chstr:'t'
   (check_textlabel) Exit char: 
   (check_textlabel) check_textlabel:ret1 Name:'print' Type:f
  (check_proc_call) 'print' is text label

   (check_literal) check_literal:lit=':' idx=5 ' "Miles";m'
   (check_literal) check_literal:After drop space:':' idx=5 ' "Miles";m'
   (check_literal)   ':' != ' '
   (check_literal) check_literal: ret0
  (check_proc_call) check_proc_call:ret0

  (check_input) 'print "Miles";m'

   (check_literal) check_literal:lit=' INPUT' idx=0 'print "Miles";m'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'print "Miles";m'
   (check_literal)   'I' != 'p'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'print "Miles";m'

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Miles";m'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Miles";m'
   (check_literal) check_literal:After while(): "Miles";m
   (check_literal) ret1 Match. ' PRINT' == 'print "Miles";m'
  (check_print) ret1

  (scan_print) print type:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Miles";m'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Miles";m'
   (check_literal) check_literal:After while(): "Miles";m
   (check_literal) ret1 Match. ' PRINT' == 'print "Miles";m'

   (check_expression) ' "Miles";m'

    (check_eitem) check_eitem: '"Miles";m'

     (check_function)  '"Miles";m'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Miles";m'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Miles";m'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Miles";m'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Miles";m'
      (check_literal) check_literal:After while():Miles";m
      (check_literal) ret1 Match. ' "' == '"Miles";m'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ';m' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ';m' commas:0

   (check_literal) check_literal:lit=' PRINT' idx=0 'print "Miles";m'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'print "Miles";m'
   (check_literal) check_literal:After while(): "Miles";m
   (check_literal) ret1 Match. ' PRINT' == 'print "Miles";m'
  (scan_print) Before while

   (check_expression) ' "Miles";m'

    (check_eitem) check_eitem: '"Miles";m'

     (check_function)  '"Miles";m'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Miles";m'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Miles";m'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Miles";m'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Miles";m'
      (check_literal) check_literal:After while():Miles";m
      (check_literal) ret1 Match. ' "' == '"Miles";m'
     (check_atom) ret1
    (check_eitem) ret1

    (check_operator) ';m' igncomma:1
    (check_operator) ret0:is comma: 0
   (check_expression) ret1 ';m' commas:0
  (scan_print) Check expression ok, in while loop
  (scan_print) Scan expression

   (scan_expression) ' "Miles";m' igncomma:1

    (check_eitem) check_eitem: '"Miles";m'

     (check_function)  '"Miles";m'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Miles";m'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Miles";m'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Miles";m'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Miles";m'
      (check_literal) check_literal:After while():Miles";m
      (check_literal) ret1 Match. ' "' == '"Miles";m'
     (check_atom) ret1
    (check_eitem) ret1

    (scan_eitem) scan_eitem:

     (check_function)  '"Miles";m'
     (check_function) ret0

     (check_atom) check_atom:
     (check_atom) check_atom:Checking for character constant

      (check_literal) check_literal:lit=' %' idx=6 '"Miles";m'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Miles";m'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0
     (check_atom) check_atom:Checking for string

      (check_literal) check_literal:lit=' "' idx=6 '"Miles";m'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Miles";m'
      (check_literal) check_literal:After while():Miles";m
      (check_literal) ret1 Match. ' "' == '"Miles";m'
     (check_atom) ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=6 '"Miles";m'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '"Miles";m'
      (check_literal)   '%' != '"'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '"Miles";m'
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"Miles";m'
      (check_literal) check_literal:After while():Miles";m
      (check_literal) ret1 Match. ' "' == '"Miles";m'

      (scan_string) scan_string:

       (check_literal) check_literal:lit=' "' idx=6 '"Miles";m'
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '"Miles";m'
       (check_literal) check_literal:After while():Miles";m
       (check_literal) ret1 Match. ' "' == '"Miles";m'
      (scan_string)   (in if) 'Miles";m'
      (scan_string)   (in wh) 'Miles";m'
      (scan_string)   (in wh) 'iles";m'
      (scan_string)   (in wh) 'iles";m'
      (scan_string)   (in wh) 'les";m'
      (scan_string)   (in wh) 'les";m'
      (scan_string)   (in wh) 'es";m'
      (scan_string)   (in wh) 'es";m'
      (scan_string)   (in wh) 's";m'
      (scan_string)   (in wh) 's";m'
      (scan_string)   (in wh) '";m'
      (scan_string) scan_string: ret1
     (process_token)    Frst:1 T:'"Miles"' toktype:s exptype:U bufid:'EXP_BUFF_ID_NONE'
     (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
     (token_is_integer)  tok:'"Miles"'
     (token_is_integer)  tok:ret0
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Miles" is not function
token_is_variable: tok:'"Miles"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"Miles" is not function
(   output_string) [U,()] s "Miles"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) ret1
   (scan_expression) ';m' Before while igncomma:1

    (check_operator) ';m' igncomma:1
    (check_operator) ret0:is comma: 0
   (scan_expression) ret1 ';m' commas:0
  (op_stack_finalise) Finalise stack
  (output_generic) [s,()] s PRINT exp_type:s
  (scan_print) After scan expression I

   (check_literal) check_literal:lit=' ,' idx=13 ';m'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=13 ';m'
   (check_literal)   ',' != ';'
   (check_literal) check_literal: ret0
  (scan_print) After scan expression II

   (check_literal) check_literal:lit=' ;' idx=13 ';m'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:';' idx=13 ';m'
   (check_literal) check_literal:After while():m
   (check_literal) ret1 Match. ' ;' == ';m'

   (scan_literal_core) scan_literal_core:lit=' ;' ';m'
   (scan_literal_core) scan_literal_core:After drop space:';m'
   (scan_literal_core) scan_literal_core:while loop:;m
   (scan_literal_core) ret1
  (process_token)    Frst:0 T:';' toktype:? exptype:s bufid:'EXP_BUFF_ID_NONE'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
  (token_is_integer)  tok:';'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:; is not function
token_is_variable: tok:';'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:; is not function
 (process_token) **Unknown token **      ';'
 (scan_literal) ret1
(scan_print) Checking if delimiter was present
(scan_print) Delimiter present
(scan_print) Semi colon present
(finalise_expression) Finalise expression Buf i:2 buf2 i:0
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Miles"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :"Miles"   *************
(type_check_stack_push)  type_check_stack_push: '"Miles"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"Miles"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"Miles"' type:s (2), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"Miles"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:"Miles"    **********
(type_check_stack_push)  type_check_stack_push: '"Miles"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: '"Miles"' type:2 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: '"Miles"' type:s (2), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: '"Miles"'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Miles"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001       Read EXP_BUFF_ID_STR                        ty:s qcty:U '"Miles"' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:s qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:006B
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:0 String Literal '"Miles"' EXP_BUFF_ID_STR
(set_qcode_header_byte_at) idx:006B len:1 val:24
(set_qcode_header_byte_at) idx:006C len:1 val:05
(set_qcode_header_byte_at) idx:006D len:1 val:4D
(set_qcode_header_byte_at) idx:006E len:1 val:69
(set_qcode_header_byte_at) idx:006F len:1 val:6C
(set_qcode_header_byte_at) idx:0070 len:1 val:65
(set_qcode_header_byte_at) idx:0071 len:1 val:73
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0072 len:1 val:71
(finalise_expression) Finalise expression done.
m
========================================================
(output_expression_start)

 (check_expression) 'm'

  (check_eitem) check_eitem: 'm'

   (check_function)  'm'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'm'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'm'
    (check_literal)   '%' != 'm'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'm'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'm'
    (check_literal)   '"' != 'm'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'm'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'm'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'm'
     (check_textlabel) 'm' is a text label chstr:'m'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'m' Type:f
    (check_proc_call) 'm' is text label

     (check_literal) check_literal:lit=':' idx=15 ''
     (check_literal) check_literal:After drop space:':' idx=15 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'm'

     (check_operator) 'm' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'm':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=15 ''
     (check_literal) check_literal:After drop space:'(' idx=15 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(check_expression) ret1 '' commas:0
(scan_print) Check expression ok, in while loop
(scan_print) Scan expression

 (scan_expression) 'm' igncomma:1

  (check_eitem) check_eitem: 'm'

   (check_function)  'm'
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=14 'm'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'm'
    (check_literal)   '%' != 'm'
    (check_literal) check_literal: ret0
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=14 'm'
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'm'
    (check_literal)   '"' != 'm'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: 'm'
     (check_integer) check_integer:ret0

     (check_hex) check_hex: 'm'
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) 'm'
     (check_textlabel) 'm' is a text label chstr:'m'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'m' Type:f
    (check_proc_call) 'm' is text label

     (check_literal) check_literal:lit=':' idx=15 ''
     (check_literal) check_literal:After drop space:':' idx=15 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) 'm'

     (check_operator) 'm' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname 'm':
     (check_vname) check_vname ret1 '':
    (check_variable) Name: ''
    (check_variable) check_variable: Ary test ''

     (check_literal) check_literal:lit='(' idx=15 ''
     (check_literal) check_literal:After drop space:'(' idx=15 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) ret1
 (check_eitem) ret1

 (scan_eitem) scan_eitem:

  (check_function)  'm'
  (check_function) ret0

  (check_atom) check_atom:
  (check_atom) check_atom:Checking for character constant

   (check_literal) check_literal:lit=' %' idx=14 'm'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=14 'm'
   (check_literal)   '%' != 'm'
   (check_literal) check_literal: ret0
  (check_atom) check_atom:Checking for string

   (check_literal) check_literal:lit=' "' idx=14 'm'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=14 'm'
   (check_literal)   '"' != 'm'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) Fltval:'' float:0.000000e+00
    (check_float) check_float: ret0

    (check_integer) check_integer: 'm'
    (check_integer) check_integer:ret0

    (check_hex) check_hex: 'm'
    (check_hex) check_hex:ret0 not '$'
   (check_number) check_number: ret0

   (check_proc_call) check_proc_call:

    (check_textlabel) 'm'
    (check_textlabel) 'm' is a text label chstr:'m'
    (check_textlabel) Exit char:
    (check_textlabel) check_textlabel:ret1 Name:'m' Type:f
   (check_proc_call) 'm' is text label

    (check_literal) check_literal:lit=':' idx=15 ''
    (check_literal) check_literal:After drop space:':' idx=15 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_proc_call) check_proc_call:ret0

   (check_variable) 'm'

    (check_operator) 'm' igncomma:1
    (check_operator) ret0:is comma: 0

    (check_vname) check_vname 'm':
    (check_vname) check_vname ret1 '':
   (check_variable) Name: ''
   (check_variable) check_variable: Ary test ''

    (check_literal) check_literal:lit='(' idx=15 ''
    (check_literal) check_literal:After drop space:'(' idx=15 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=14 'm'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=14 'm'
  (check_literal)   '%' != 'm'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=14 'm'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=14 'm'
  (check_literal)   '"' != 'm'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) Fltval:'' float:0.000000e+00
   (check_float) check_float: ret0

   (check_integer) check_integer: 'm'
   (check_integer) check_integer:ret0

   (check_hex) check_hex: 'm'
   (check_hex) check_hex:ret0 not '$'
  (check_number) check_number: ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'm'
   (check_textlabel) 'm' is a text label chstr:'m'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'m' Type:f
  (check_proc_call) 'm' is text label

   (check_literal) check_literal:lit=':' idx=15 ''
   (check_literal) check_literal:After drop space:':' idx=15 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_variable) 'm'

   (check_operator) 'm' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'm':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=15 ''
   (check_literal) check_literal:After drop space:'(' idx=15 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) 'm' ref_ndeclare:1

  (scan_vname) scan_vname: 'm'
  (scan_vname) scan_vname: ret1 'm'
 (scan_variable) scan_variable: '' vname='M'
 (token_is_other_keyword) 
 (token_is_other_keyword) 'M' is not other keyword
 (scan_variable) Array test ''

  (check_literal) check_literal:lit='(' idx=15 ''
  (check_literal) check_literal:After drop space:'(' idx=15 ''
  (check_literal) check_literal  ret0 Empty test string
 (scan_variable) scan_variable:ret1 vname='M' Float
(process_token)    Frst:1 T:'M' toktype:f exptype:U bufid:'EXP_BUFF_ID_NONE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_NONE'
(token_is_integer)  tok:'M'
(token_is_integer)  tok:ret0
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:M is not function
token_is_variable: tok:'M'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:M is not function
(init_get_name) 
init_get_name:'M'
(init_get_name) 
init_get_name:'M'
(get_name) 
get_name:gn:'M'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [f,()] f M
(add_var_info) Name:M Idx:-1
(add_var_info) Already present
(add_var_info)   reference so OK
(scan_variable) ret1
VAR: '                 M'      Local Float             REFRNCE max_str:  0 max_ary:  0 num_ind:  0 offset:859C
(scan_atom) ret1
(scan_expression) '' Before while igncomma:1

 (check_operator) '' igncomma:1
 (check_operator) ret0:is comma: 0
(scan_expression) ret1 '' commas:0
(op_stack_finalise) Finalise stack
(output_generic) [f,()] f PRINT exp_type:f
(scan_print) After scan expression I

 (check_literal) check_literal:lit=' ,' idx=15 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=15 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) After scan expression II

 (check_literal) check_literal:lit=' ;' idx=15 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=15 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) Checking if delimiter was present
(scan_print) No delimiter present
(finalise_expression) Finalise expression Buf i:2 buf2 i:2
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :M   *************
(type_check_stack_push)  type_check_stack_push: 'M'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'M' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'M' type:f (1), %:0
(process_syntax_tree) *********Processing :PRINT   *************
(process_syntax_tree) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'M'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:M    **********
(type_check_stack_push)  type_check_stack_push: 'M'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (1)

(type_check_stack_print)  N001: 'M' type:1 %:0
(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (1)
(type_check_stack_display) 000: 'M' type:f (1), %:0
(typecheck_expression)  *** BE:PRINT    **********
(typecheck_expression) PRINT type adjust
(type_check_stack_pop)   type_check_stack_pop: 'M'
(type_check_stack_print) ------------------
(type_check_stack_print) Type Check Stack     (0)

(type_check_stack_print) ------------------

(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

N001       Read EXP_BUFF_ID_VARIABLE                   ty:f qcty:U 'M' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_PRINT                      ty:f qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()

(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:2 qcode_idx:0073
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(add_simple_qcode) 'M'
(add_simple_qcode) Op type:f op access:Read qcode_type:U
(qcode_check_trapped) M: Trapped:0
(set_qcode_header_byte_at) idx:0073 len:1 val:01
(set_qcode_header_byte_at) idx:0074 len:1 val:FF
(set_qcode_header_byte_at) idx:0075 len:1 val:F6
(output_qcode_for_line) QC: i:1
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0076 len:1 val:70
(finalise_expression) Finalise expression done.
(process_token)    Frst:1 T:'PRINT' toktype:? exptype:U bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
(process_token) Before switch, bufid:'EXP_BUFF_ID_PRINT_NEWLINE'
Buff id print
process_token: 'PRINT' t=>U
 Push:'PRINT'
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (1)

(op_stack_print) 000: PRINT type:U id:EXP_BUFF_ID_PRINT_NEWLINE
(op_stack_print) ------------------

(finalise_expression) Finalise expression Buf i:0 buf2 i:2
(op_stack_finalise) Finalise stack
(op_stack_pop) Pop 'PRINT' type:U 
(op_stack_print) ------------------
(op_stack_print) Operator Stack     (0)

(op_stack_print) ------------------

(op_stack_finalise) Popped:PRINT U
(output_operator) [U,()] U PRINT
(process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

(process_syntax_tree) Pass:2
(process_syntax_tree) *********Processing :PRINT   *************
default buf_id
(type_check_stack_display) Type Check Stack (0)
(typecheck_expression) Pass:2
(typecheck_expression)  *** BE:PRINT    **********
default buf_id
(type_check_stack_display) Type Check Stack (0)
N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

N001       Read EXP_BUFF_ID_PRINT_NEWLINE              ty:U qcty:U 'PRINT' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()

(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:1 qcode_idx:0077
(output_qcode_for_line) ================================================================================
(output_qcode_for_line) QC: i:0
(output_qcode_for_line) QC:PRINT
(set_qcode_header_byte_at) idx:0077 len:1 val:73
(finalise_expression) Finalise expression done.

 (check_expression) ''

  (check_eitem) check_eitem: ''

   (check_function)  ''
   (check_function) ret0

   (check_atom) check_atom:
   (check_atom) check_atom:Checking for character constant

    (check_literal) check_literal:lit=' %' idx=15 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=15 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_atom) check_atom:Checking for string

    (check_literal) check_literal:lit=' "' idx=15 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=15 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) Fltval:'' float:0.000000e+00
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0

     (check_hex) check_hex: ''
     (check_hex) check_hex:ret0 not '$'
    (check_number) check_number: ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) ''
     (check_textlabel) '' is a text label chstr:'d'
     (check_textlabel) Exit char:
     (check_textlabel) check_textlabel:ret1 Name:'' Type:f
    (check_proc_call) '' is text label

     (check_literal) check_literal:lit=':' idx=15 ''
     (check_literal) check_literal:After drop space:':' idx=15 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_proc_call) check_proc_call:ret0

    (check_variable) ''

     (check_operator) '' igncomma:1
     (check_operator) ret0:is comma: 0

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret0

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=15 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=15 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) ret0: No '('

   (check_addr_name) check_addr_name: ''

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_addr_name) check_addr_name: ret0
  (check_eitem) check_eitem:ret0

  (check_operator) '' igncomma:1
  (check_operator) ret0:is comma: 0
 (check_expression) ret0 ''
(scan_print) Check for trailing delimiter

 (check_literal) check_literal:lit=' ;' idx=15 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:';' idx=15 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_literal) check_literal:lit=' ,' idx=15 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=15 ''
 (check_literal) check_literal  ret0 Empty test string
(scan_print) scan_print:ret1 Expression 
(scan_line) ret1 print
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=15 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=15 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:0 buf2 i:1
 (op_stack_finalise) Finalise stack
 (process_expression_types) 
process_expression_types:
 (process_syntax_tree) Pass:2
 (typecheck_expression) Pass:2
 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:0078
 (output_qcode_for_line) ================================================================================
 (finalise_expression) Finalise expression done.
print "Miles";m
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=15 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=15 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=15 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) cline[0] = 'g' (103)
 (is_all_spaces) cline[1] = 'e' (101)
 (is_all_spaces) cline[2] = 't' (116)
 (is_all_spaces) Is not all spaces
 (pull_next_line) Got a line: 'get'
*******
**get**
*******

(pull_next_line) ret1

 (check_literal) check_literal:lit='REM' idx=0 'get'
 (check_literal) check_literal:After drop space:'REM' idx=0 'get'
 (check_literal)   'R' != 'g'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit='REM&' idx=0 'get'
 (check_literal) check_literal:After drop space:'REM&' idx=0 'get'
 (check_literal)   'R' != 'g'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM ' idx=0 'get'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM ' idx=0 'get'
 (check_literal)   'R' != 'g'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REM& ' idx=0 'get'
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REM& ' idx=0 'get'
 (check_literal)   'R' != 'g'
 (check_literal) check_literal: ret0
(check_rem) ret0 proc cll

 (check_assignment) check_assignment:

  (check_variable) 'get'

   (check_operator) 'get' igncomma:1
   (check_operator) ret0:is comma: 0

   (check_vname) check_vname 'get':
   (check_vname) check_vname ret1 '':
  (check_variable) Name: ''
  (check_variable) check_variable: Ary test ''

   (check_literal) check_literal:lit='(' idx=3 ''
   (check_literal) check_literal:After drop space:'(' idx=3 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (check_literal) check_literal:lit=' =' idx=3 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'=' idx=3 ''
 (check_literal) check_literal  ret0 Empty test string
(check_assignment) check_assignment:ret0

 (check_declare) 'get'

  (check_literal) check_literal:lit=' LOCAL' idx=0 'get'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'get'
  (check_literal)   'L' != 'g'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'get'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'get'
  (check_literal)   'L' != 'e'
  (check_literal) check_literal: ret0
 (check_declare) ret 0

  (check_label) 

   (check_textlabel) 'get'
   (check_textlabel) 'get' is a text label chstr:'t'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'get' Type:f

   (check_literal) check_literal:lit='::' idx=3 ''
   (check_literal) check_literal:After drop space:'::' idx=3 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_label) check_label:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) 'get'
   (check_textlabel) 'get' is a text label chstr:'t'
   (check_textlabel) Exit char:
   (check_textlabel) check_textlabel:ret1 Name:'get' Type:f
  (check_proc_call) 'get' is text label

   (check_literal) check_literal:lit=':' idx=3 ''
   (check_literal) check_literal:After drop space:':' idx=3 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_proc_call) check_proc_call:ret0

  (check_input) 'get'

   (check_literal) check_literal:lit=' INPUT' idx=0 'get'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'INPUT' idx=0 'get'
   (check_literal)   'I' != 'g'
   (check_literal) check_literal: ret0
  (check_input) check_input:ret0

  (check_print) check_print: 'get'

   (check_literal) check_literal:lit=' PRINT' idx=0 'get'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'PRINT' idx=0 'get'
   (check_literal)   'P' != 'g'
   (check_literal) check_literal: ret0
  (check_print) check_print:ret0

  (check_print) check_print: 'get'

   (check_literal) check_literal:lit=' LPRINT' idx=0 'get'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LPRINT' idx=0 'get'
   (check_literal)   'L' != 'g'
   (check_literal) check_literal: ret0
  (check_print) check_print:ret0

  (check_return) check_return: 'get'

   (check_literal) check_literal:lit=' RETURN' idx=0 'get'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'RETURN' idx=0 'get'
   (check_literal)   'R' != 'g'
   (check_literal) check_literal: ret0
  (check_return) check_return:ret0

  (check_use) 'get'

   (check_literal) check_literal:lit=' USE' idx=0 'get'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'USE' idx=0 'get'
   (check_literal)   'U' != 'g'
   (check_literal) check_literal: ret0
  (check_use) ret0

  (check_onerr) check_onerr: 'get'

   (check_literal) check_literal:lit=' ONERR' idx=0 'get'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'ONERR' idx=0 'get'
   (check_literal)   'O' != 'g'
   (check_literal) check_literal: ret0
  (check_onerr) check_onerr:ret0

  (check_if) 'get'

   (check_literal) check_literal:lit=' IF' idx=0 'get'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'IF' idx=0 'get'
   (check_literal)   'I' != 'g'
   (check_literal) check_literal: ret0
  (check_if) ret0

  (check_do) 'get'

   (check_literal) check_literal:lit=' DO' idx=0 'get'
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'DO' idx=0 'get'
   (check_literal)   'D' != 'g'
   (check_literal) check_literal: ret0
  (check_do) ret0

  (check_literal) check_literal:lit=' OFF' idx=0 'get'
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'OFF' idx=0 'get'
  (check_literal)   'O' != 'g'
  (check_literal) check_literal: ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function)  'get'
  (check_function) Match 'get' with 'GET'
  (check_function)  ''
  (check_function)  'T'
  (check_function)  Check for correct type of function and string
  (check_function) No arguments
  (check_function) ret1
 (scan_line) scan_line:check_function: 

  (scan_function)  'get'
Dummy argument expression added
  (process_token)    Frst:1 T:'(' toktype:? exptype:U bufid:'EXP_BUFF_ID_NONE'
(output_sub_start)
 Push:'('
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (1)

  (op_stack_print) 000: ( type:U id:EXP_BUFF_ID_SUB_START
  (op_stack_print) ------------------

  (process_token)    Frst:0 T:')' toktype:? exptype:U bufid:'EXP_BUFF_ID_NONE'
Pop 4
  (op_stack_pop) Pop '(' type:U 
  (op_stack_print) ------------------
  (op_stack_print) Operator Stack     (0)

  (op_stack_print) ------------------

(  output_sub_end)
(  output_sub_end)
  (scan_function) M=Name:'GET' num_elem:0
  (process_token)    Frst:0 T:'GET' toktype:? exptype:U bufid:'EXP_BUFF_ID_FUNCTION'
  (process_token) Before switch, bufid:'EXP_BUFF_ID_FUNCTION'
  (token_is_integer)  tok:'GET'
  (token_is_integer)  tok:ret0
 (token_is_function) 
token_is_function:
 (token_is_function) GET is function
 (function_return_type) 
function_return_type: 'GET' =>i
 (function_return_type) 
function_return_type: 'GET' =>0
process_token: 'GET' t=>i
 Push:'GET'
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (1)

 (op_stack_print) 000: GET type:i id:EXP_BUFF_ID_FUNCTION
 (op_stack_print) ------------------

 (scan_function) ret1 (A)
(scan_line) ret1 function
(translate_file) ********************************************************************************
(translate_file) ********************************************************************************
(translate_file) Scan line ok

 (check_literal) check_literal:lit=' :' idx=3 ''
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:':' idx=3 ''
 (check_literal) check_literal  ret0 Empty test string

 (pull_next_line) Processing expression just parsed
 (finalise_expression) Finalise expression Buf i:3 buf2 i:0
 (op_stack_finalise) Finalise stack
 (op_stack_pop) Pop 'GET' type:i 
 (op_stack_print) ------------------
 (op_stack_print) Operator Stack     (0)

 (op_stack_print) ------------------

 (op_stack_finalise) Popped:GET i
 (output_operator) [U,()] U GET
 (process_expression_types) 
process_expression_types:
N001       Read EXP_BUFF_ID_SUB_START                  ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_FUNCTION                   ty:U qcty:U 'GET' npar:0 nidx:0 trapped:0 %:0  2: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()

 (process_syntax_tree) Pass:2
 (process_syntax_tree) *********Processing :   *************
 (type_check_stack_display) Type Check Stack (0)
 (process_syntax_tree) *********Processing :   *************
 (type_check_stack_display) Type Check Stack (0)
 (process_syntax_tree) *********Processing :   *************
 (type_check_stack_display) Type Check Stack (0)
 (process_syntax_tree) *********Processing :GET   *************
 (function_return_type) 
function_return_type: 'GET' =>i
 (function_return_type) 
function_return_type: 'GET' =>0
ret_type;0 i
process_syntax_tree:Ret type of GET : i
 (function_num_args) Name:GET argtype:''
 (process_syntax_tree) 0 args
 (function_num_args) Name:GET argtype:''
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N004: '000' type:0 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: '000' type:i (0), %:0
 (type_check_stack_only_field_data) Type Check Stack ptr:(1)
 (type_check_stack_only_field_data) 000: '000' type:i (0)
 (process_syntax_tree) Value left stacked so DROP needed
 (typecheck_expression) Pass:2
 (typecheck_expression)  *** BE:    **********
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression)  *** BE:    **********
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression)  *** BE:    **********
 (type_check_stack_display) Type Check Stack (0)
 (typecheck_expression)  *** BE:GET    **********
 (function_return_type) 
function_return_type: 'GET' =>i
 (function_return_type) 
function_return_type: 'GET' =>0
ret_type;0 i
typecheck_expression:Ret type of GET : i
 (function_num_args) Name:GET argtype:''
 (typecheck_expression) 0 args
 (function_num_args) Name:GET argtype:''
 (type_check_stack_push)  type_check_stack_push: '000'
 (type_check_stack_print) ------------------
 (type_check_stack_print) Type Check Stack     (1)

 (type_check_stack_print)  N004: '000' type:0 %:0
 (type_check_stack_print) ------------------

 (type_check_stack_display) Type Check Stack (1)
 (type_check_stack_display) 000: '000' type:i (0), %:0
 (type_check_stack_only_field_data) Type Check Stack ptr:(1)
 (type_check_stack_only_field_data) 000: '000' type:i (0)
 (typecheck_expression) Value left stacked so DROP needed
N001       Read EXP_BUFF_ID_SUB_START                  ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_FUNCTION                   ty:i qcty:U 'GET' npar:0 nidx:0 trapped:0 %:0  0: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()

N001       Read EXP_BUFF_ID_SUB_START                  ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0: -25458462 1811655626 -1427464965 613153450 -1358234641 2062199743 -1096765450 -353697826 -93605889 -9500049 976009642 -1363244101 -90249045 -335692497 -67966484 -1498419281 799211242 -2102788418 -5242930 987758511  nb 0:()
N002       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0: 1777138395 -389173510 -1075409760 -1342247185 -335547665 -605033489 -37819650 -542425352 -63308053 -5264581 -34620677 1877720751 -17069366 1811655626 -1427399429 613153450 -1357906961 2062199742 -1096765452 -353697826  nb 0:()
N003       Read EXP_BUFF_ID_SUB_END                    ty:U qcty:U '' npar:0 nidx:0 trapped:0 %:0  0: -68961606 -354697681 -1227322630 -542441558 -68180230 -1426194549 -1157698882 -940594709 2063325608 2117048831 -335824977 -290509909 1756150523 -389189890 -1075409750 -1342247185 -335547649 -605033489 -37819650 -542425350  nb 0:()
N004       Read EXP_BUFF_ID_FUNCTION                   ty:i qcty:U 'GET' npar:0 nidx:0 trapped:0 %:0  0: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()
N004       Read EXP_BUFF_ID_FUNCTION                   ty:i qcty:U 'DROP' npar:0 nidx:0 trapped:0 %:0  0: 3 2 -306194770 -1146130753 -1075119494 -553996369 -1146114314 -1344504177 -725893400 -1094341702 -277874006 -21233845 2079046331 -352583873 -1227306246 -5570646 -68180230 -1426260086 -1145115974 -940660245  nb 0:()

 (process_expression_types) 


 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:5 qcode_idx:0078
 (output_qcode_for_line) ================================================================================
 (output_qcode_for_line) QC: i:0
 (add_simple_qcode) ''
 (add_simple_qcode) Op type:U op access:Read qcode_type:U
 (add_simple_qcode) NULL vi
 (add_simple_qcode) Not found
 (output_qcode_for_line) QC: i:1
 (add_simple_qcode) ''
 (add_simple_qcode) Op type:U op access:Read qcode_type:U
 (add_simple_qcode) NULL vi
 (add_simple_qcode) Not found
 (output_qcode_for_line) QC: i:2
 (add_simple_qcode) ''
 (add_simple_qcode) Op type:U op access:Read qcode_type:U
 (add_simple_qcode) NULL vi
 (add_simple_qcode) Not found
 (output_qcode_for_line) QC: i:3
 (add_simple_qcode) 'GET'
 (add_simple_qcode) Op type:i op access:Read qcode_type:U
 (add_simple_qcode) NULL vi
 (qcode_check_trapped) GET: Trapped:0
 (set_qcode_header_byte_at) idx:0078 len:1 val:91
 (output_qcode_for_line) QC: i:4
 (add_simple_qcode) 'DROP'
 (add_simple_qcode) Op type:i op access:Read qcode_type:U
 (add_simple_qcode) NULL vi
 (qcode_check_trapped) DROP: Trapped:0
 (set_qcode_header_byte_at) idx:0079 len:1 val:83
 (finalise_expression) Finalise expression done.
get
========================================================
(output_expression_start)
 (drop_colon) Entry

  (check_literal) check_literal:lit=' :' idx=3 ''
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:':' idx=3 ''
  (check_literal) check_literal  ret0 Empty test string
 (drop_colon) Exit
 (pull_next_line) Checking for existing data in cline. cline_i=3 strlen:0 
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ------------------------------
 (is_all_spaces) Is all spaces
 (pull_next_line) Line was all spaces
 (pull_next_line) Reading line
 (pull_next_line) ret0: End of input file
(scan_line) ret0: pull_next_line=0
(translate_file) Scan line failed
(finalise_expression) Finalise expression Buf i:0 buf2 i:5
(op_stack_finalise) Finalise stack
(process_expression_types) 
process_expression_types:
(process_syntax_tree) Pass:2
(typecheck_expression) Pass:2
(process_expression_types) 


(output_qcode_for_line) ================================================================================
(output_qcode_for_line) Generating QCode     Pass:2 Buf2_i:0 qcode_idx:007A
(output_qcode_for_line) ================================================================================
(finalise_expression) Finalise expression done.
(translate_file) Done
(translate_file) 
(output_qcode_suffix) Has return:0 last line return:0
(set_qcode_header_byte_at) idx:007A len:1 val:7B
(do_cond_fixup) Conditional fixup
(set_qcode_header_byte_at) idx:0002 len:1 val:00
(set_qcode_header_byte_at) idx:0003 len:1 val:6E
(nopl_trans) 

(nopl_trans) 
 26 lines scanned OK
(nopl_trans) 
 0 lines scanned failed
(nopl_trans) 
 10 lines blank
(nopl_trans) 
 4 variables
(nopl_trans) 


Operator Stack
