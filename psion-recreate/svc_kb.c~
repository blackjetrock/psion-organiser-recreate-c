// Keyboard service
// Keyboard matrix scan is here as well

// Code tries to followoriginal Psion in key scanning, but
// is a totally different implementation.

// matrix_scan() scans the keyboard matrix and the matrix
// state is passed to the debouncer.
// If keys are pressed then they are sent to the translator
// that handles the shift and caps keys and so on and puts its
// output in the keyboard buffer which is then handled by the
// 'foreground' code.


////////////////////////////////////////////////////////////////////////////////

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "pico/stdlib.h"
#include "hardware/gpio.h"

#include "psion_recreate.h"

#include "menu.h"
#include "emulator.h"
#include "eeprom.h"
#include "rtc.h"
#include "display.h"
#include "record.h"

#define SCAN_STATE_DRIVE  0
#define SCAN_STATE_DRIVE1 1
#define SCAN_STATE_DRIVE2 2
#define SCAN_STATE_DRIVE3 3
#define SCAN_STATE_DRIVE4 4
#define SCAN_STATE_DRIVE5 5
#define SCAN_STATE_DRIVE6 6
#define SCAN_STATE_DRIVE7 7
#define SCAN_STATE_DRIVE8 8

#define SCAN_STATE_READ  10
#define SCAN_STATE_RELEASE_DRIVE  11
#define SCAN_STATE_RELEASE_READ   12

// Called regularly, can be on core1.

// Handles multiple key presses

int scan_drive = 0x01;
int scan_state = MAT_SCAN_STATE_DRIVE;
int kb_sense = 0;
int saved_latchout1_shadow = 0;
int keycode = 0;
char keychar = 0;      // What the key code is
int gotkey = 0;       // We have a key


struct _KEYDEF
{
  int  code;
  char ch;
} menukeys[] =
    {
     {0x1002, 'A'},
     {0x1004, 'B'},
     {0x1008, 'C'},
     {0x1040, 'D'},
     {0x1010, 'E'},
     {0x1020, 'F'},
     {0x0802, 'G'},
     {0x0804, 'H'},
     {0x0808, 'I'},
     {0x0840, 'J'},
     {0x0810, 'K'},
     {0x0820, 'L'},
     {0x0402, 'M'},
     {0x0404, 'N'},
     {0x0408, 'O'},
     {0x0440, 'P'},
     {0x0410, 'Q'},
     {0x0420, 'R'},
     {0x0202, 'S'},
     {0x0204, 'T'},
     {0x0208, 'U'},
     {0x0240, 'V'},
     {0x0210, 'W'},
     {0x0220, 'X'},
     {0x0108, 'Y'},
     {0x0140, 'Z'},
     {0x0101, 'm'},
     {0x0120, 'x'},
     {0x0102, 's'},
     {0x0104, '-'},
     {0x0801, 'l'},
     {0x1001, 'r'},
     {0x0201, 'u'},
     {0x0401, 'd'},
     {0x0110, ' '},
    };

#define NUM_KEYCODES ((sizeof(menukeys))/(sizeof(struct _KEYDEF)))

#define SCAN_SKIP  3

int scan_skip = SCAN_SKIP;
int key_count = 0;
int current_key = 0;
#define DEBOUNCE_MAX  10

void matrix_scan(void)
{
  scan_skip--;

  if( scan_skip == 0 )
    {
      scan_skip = SCAN_SKIP;
      return;
    }
  
  switch(scan_state)
    {
      
    case MAT_SCAN_STATE_DRIVE:
      
      // Drive scan lines
      latchout1_shadow &= 0x80;
      latchout1_shadow |= scan_drive;
      write_595(PIN_LATCHOUT1, latchout1_shadow, 8);

      // Store the scan drive for the building of the keycode before
      // scan drive is updated
      keycode = scan_drive;
      
      scan_drive <<= 1;
      if( scan_drive == 0x80 )
	{
	  scan_drive = 0x1;
	}

      //write_display_extra(2, 'a'+scan_drive);
      scan_state = MAT_SCAN_STATE_READ;
      break;

      
    case MAT_SCAN_STATE_READ:
      // Read port5
      //write_display_extra(2, '5');
      kb_sense = (read_165(PIN_LATCHIN) & 0xFC)>>2;

      if( kb_sense & 0x20 )
	{
	  //write_display_extra(2, 'o');
	  keychar = 'o';
	  gotkey = 1;
	}
      else
	{
	  if( (kb_sense & 0x1F) != 0 )
	    {
	      // Build keycode
	      //i_printxy_hex(5, 2, keycode);
	      //i_printxy_hex(1, 2, kb_sense);

	      //printf("\nKdr:%04X Ksense:%04X", keycode, kb_sense);

	      keycode |= (kb_sense << 8);
	      
	      // Find key from code
	      for(int i=0; i<NUM_KEYCODES; i++)
		{
		  if( menukeys[i].code == keycode )
		    {
		      if( keycode == current_key )
			{
			  // Same key pressed
			  if( key_count == DEBOUNCE_MAX )
			    {
			      // Key registered and still pressed
			      // we won't get here, we will be waiting for release
			    }
			  else
			    {
			      key_count++;
			      if( key_count == DEBOUNCE_MAX )
				{
				  // New key press
				  keychar = menukeys[i].ch;
				  gotkey = 1;

				  // Move to release state
				  scan_state = MAT_SCAN_STATE_RELEASE_READ;
				  return;
				}
			      else
				{
				  // Waiting for key to be fully pressed
				}
			    }
			}
		      else
			{
			  // Different key, start debouncing
			  key_count = 0;
			  current_key = keycode;
			}
		    }
		}
	    }
	}
      
      scan_state = MAT_SCAN_STATE_DRIVE;
      break;

    case MAT_SCAN_STATE_RELEASE_DRIVE:
      break;

    case MAT_SCAN_STATE_RELEASE_READ:
      // Read port5
      //write_display_extra(2, '5');
      kb_sense = (read_165(PIN_LATCHIN) & 0xFC)>>2;
      
      if( (kb_sense & 0x3F) != 0 )
	{
	  // Key still pressed
	}
      else
	{
	  // Count down to zero
	  if ( key_count == 0 )
	    {
	      // Already released
	    }
	  else
	    {
	      key_count--;

	      if ( key_count == 0 )
		{
		  // Key finally released
		  scan_state = MAT_SCAN_STATE_DRIVE;
		  gotkey = 0;
		  keycode = 0;
		}
	    }
	}
      break;
      
    default:
      break;
    }

  
  //scan_state = (scan_state + 1) % NUM_SCAN_STATES;

}

